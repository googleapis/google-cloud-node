// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax/build/src/protobuf").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_cloud_video_intelligence_protos || ($protobuf.roots._google_cloud_video_intelligence_protos = {});
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.cloud = (function() {
    
            /**
             * Namespace cloud.
             * @memberof google
             * @namespace
             */
            var cloud = {};
    
            cloud.videointelligence = (function() {
    
                /**
                 * Namespace videointelligence.
                 * @memberof google.cloud
                 * @namespace
                 */
                var videointelligence = {};
    
                videointelligence.v1 = (function() {
    
                    /**
                     * Namespace v1.
                     * @memberof google.cloud.videointelligence
                     * @namespace
                     */
                    var v1 = {};
    
                    v1.VideoIntelligenceService = (function() {
    
                        /**
                         * Constructs a new VideoIntelligenceService service.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a VideoIntelligenceService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function VideoIntelligenceService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (VideoIntelligenceService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = VideoIntelligenceService;
    
                        /**
                         * Creates new VideoIntelligenceService service using the specified rpc implementation.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.VideoIntelligenceService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {VideoIntelligenceService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        VideoIntelligenceService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.cloud.videointelligence.v1.VideoIntelligenceService|annotateVideo}.
                         * @memberof google.cloud.videointelligence.v1.VideoIntelligenceService
                         * @typedef AnnotateVideoCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls AnnotateVideo.
                         * @function annotateVideo
                         * @memberof google.cloud.videointelligence.v1.VideoIntelligenceService
                         * @instance
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoRequest} request AnnotateVideoRequest message or plain object
                         * @param {google.cloud.videointelligence.v1.VideoIntelligenceService.AnnotateVideoCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(VideoIntelligenceService.prototype.annotateVideo = function annotateVideo(request, callback) {
                            return this.rpcCall(annotateVideo, $root.google.cloud.videointelligence.v1.AnnotateVideoRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "AnnotateVideo" });
    
                        /**
                         * Calls AnnotateVideo.
                         * @function annotateVideo
                         * @memberof google.cloud.videointelligence.v1.VideoIntelligenceService
                         * @instance
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoRequest} request AnnotateVideoRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        return VideoIntelligenceService;
                    })();
    
                    v1.AnnotateVideoRequest = (function() {
    
                        /**
                         * Properties of an AnnotateVideoRequest.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IAnnotateVideoRequest
                         * @property {string|null} [inputUri] AnnotateVideoRequest inputUri
                         * @property {Uint8Array|null} [inputContent] AnnotateVideoRequest inputContent
                         * @property {Array.<google.cloud.videointelligence.v1.Feature>|null} [features] AnnotateVideoRequest features
                         * @property {google.cloud.videointelligence.v1.IVideoContext|null} [videoContext] AnnotateVideoRequest videoContext
                         * @property {string|null} [outputUri] AnnotateVideoRequest outputUri
                         * @property {string|null} [locationId] AnnotateVideoRequest locationId
                         */
    
                        /**
                         * Constructs a new AnnotateVideoRequest.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents an AnnotateVideoRequest.
                         * @implements IAnnotateVideoRequest
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoRequest=} [properties] Properties to set
                         */
                        function AnnotateVideoRequest(properties) {
                            this.features = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoRequest inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.inputUri = "";
    
                        /**
                         * AnnotateVideoRequest inputContent.
                         * @member {Uint8Array} inputContent
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.inputContent = $util.newBuffer([]);
    
                        /**
                         * AnnotateVideoRequest features.
                         * @member {Array.<google.cloud.videointelligence.v1.Feature>} features
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.features = $util.emptyArray;
    
                        /**
                         * AnnotateVideoRequest videoContext.
                         * @member {google.cloud.videointelligence.v1.IVideoContext|null|undefined} videoContext
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.videoContext = null;
    
                        /**
                         * AnnotateVideoRequest outputUri.
                         * @member {string} outputUri
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.outputUri = "";
    
                        /**
                         * AnnotateVideoRequest locationId.
                         * @member {string} locationId
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new AnnotateVideoRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoRequest=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.AnnotateVideoRequest} AnnotateVideoRequest instance
                         */
                        AnnotateVideoRequest.create = function create(properties) {
                            return new AnnotateVideoRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoRequest message. Does not implicitly {@link google.cloud.videointelligence.v1.AnnotateVideoRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoRequest} message AnnotateVideoRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.features != null && message.features.length) {
                                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                                for (var i = 0; i < message.features.length; ++i)
                                    writer.int32(message.features[i]);
                                writer.ldelim();
                            }
                            if (message.videoContext != null && Object.hasOwnProperty.call(message, "videoContext"))
                                $root.google.cloud.videointelligence.v1.VideoContext.encode(message.videoContext, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.outputUri != null && Object.hasOwnProperty.call(message, "outputUri"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.outputUri);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.locationId);
                            if (message.inputContent != null && Object.hasOwnProperty.call(message, "inputContent"))
                                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.inputContent);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoRequest message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.AnnotateVideoRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoRequest} message AnnotateVideoRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.AnnotateVideoRequest} AnnotateVideoRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.AnnotateVideoRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.inputContent = reader.bytes();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.features && message.features.length))
                                            message.features = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.features.push(reader.int32());
                                        } else
                                            message.features.push(reader.int32());
                                        break;
                                    }
                                case 3: {
                                        message.videoContext = $root.google.cloud.videointelligence.v1.VideoContext.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.outputUri = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.locationId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.AnnotateVideoRequest} AnnotateVideoRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoRequest message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.inputContent != null && message.hasOwnProperty("inputContent"))
                                if (!(message.inputContent && typeof message.inputContent.length === "number" || $util.isString(message.inputContent)))
                                    return "inputContent: buffer expected";
                            if (message.features != null && message.hasOwnProperty("features")) {
                                if (!Array.isArray(message.features))
                                    return "features: array expected";
                                for (var i = 0; i < message.features.length; ++i)
                                    switch (message.features[i]) {
                                    default:
                                        return "features: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 6:
                                    case 7:
                                    case 9:
                                    case 12:
                                    case 14:
                                        break;
                                    }
                            }
                            if (message.videoContext != null && message.hasOwnProperty("videoContext")) {
                                var error = $root.google.cloud.videointelligence.v1.VideoContext.verify(message.videoContext);
                                if (error)
                                    return "videoContext." + error;
                            }
                            if (message.outputUri != null && message.hasOwnProperty("outputUri"))
                                if (!$util.isString(message.outputUri))
                                    return "outputUri: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.AnnotateVideoRequest} AnnotateVideoRequest
                         */
                        AnnotateVideoRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.AnnotateVideoRequest)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.AnnotateVideoRequest();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.inputContent != null)
                                if (typeof object.inputContent === "string")
                                    $util.base64.decode(object.inputContent, message.inputContent = $util.newBuffer($util.base64.length(object.inputContent)), 0);
                                else if (object.inputContent.length >= 0)
                                    message.inputContent = object.inputContent;
                            if (object.features) {
                                if (!Array.isArray(object.features))
                                    throw TypeError(".google.cloud.videointelligence.v1.AnnotateVideoRequest.features: array expected");
                                message.features = [];
                                for (var i = 0; i < object.features.length; ++i)
                                    switch (object.features[i]) {
                                    default:
                                        if (typeof object.features[i] === "number") {
                                            message.features[i] = object.features[i];
                                            break;
                                        }
                                    case "FEATURE_UNSPECIFIED":
                                    case 0:
                                        message.features[i] = 0;
                                        break;
                                    case "LABEL_DETECTION":
                                    case 1:
                                        message.features[i] = 1;
                                        break;
                                    case "SHOT_CHANGE_DETECTION":
                                    case 2:
                                        message.features[i] = 2;
                                        break;
                                    case "EXPLICIT_CONTENT_DETECTION":
                                    case 3:
                                        message.features[i] = 3;
                                        break;
                                    case "FACE_DETECTION":
                                    case 4:
                                        message.features[i] = 4;
                                        break;
                                    case "SPEECH_TRANSCRIPTION":
                                    case 6:
                                        message.features[i] = 6;
                                        break;
                                    case "TEXT_DETECTION":
                                    case 7:
                                        message.features[i] = 7;
                                        break;
                                    case "OBJECT_TRACKING":
                                    case 9:
                                        message.features[i] = 9;
                                        break;
                                    case "LOGO_RECOGNITION":
                                    case 12:
                                        message.features[i] = 12;
                                        break;
                                    case "PERSON_DETECTION":
                                    case 14:
                                        message.features[i] = 14;
                                        break;
                                    }
                            }
                            if (object.videoContext != null) {
                                if (typeof object.videoContext !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.AnnotateVideoRequest.videoContext: object expected");
                                message.videoContext = $root.google.cloud.videointelligence.v1.VideoContext.fromObject(object.videoContext);
                            }
                            if (object.outputUri != null)
                                message.outputUri = String(object.outputUri);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1.AnnotateVideoRequest} message AnnotateVideoRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.features = [];
                            if (options.defaults) {
                                object.inputUri = "";
                                object.videoContext = null;
                                object.outputUri = "";
                                object.locationId = "";
                                if (options.bytes === String)
                                    object.inputContent = "";
                                else {
                                    object.inputContent = [];
                                    if (options.bytes !== Array)
                                        object.inputContent = $util.newBuffer(object.inputContent);
                                }
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.features && message.features.length) {
                                object.features = [];
                                for (var j = 0; j < message.features.length; ++j)
                                    object.features[j] = options.enums === String ? $root.google.cloud.videointelligence.v1.Feature[message.features[j]] === undefined ? message.features[j] : $root.google.cloud.videointelligence.v1.Feature[message.features[j]] : message.features[j];
                            }
                            if (message.videoContext != null && message.hasOwnProperty("videoContext"))
                                object.videoContext = $root.google.cloud.videointelligence.v1.VideoContext.toObject(message.videoContext, options);
                            if (message.outputUri != null && message.hasOwnProperty("outputUri"))
                                object.outputUri = message.outputUri;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            if (message.inputContent != null && message.hasOwnProperty("inputContent"))
                                object.inputContent = options.bytes === String ? $util.base64.encode(message.inputContent, 0, message.inputContent.length) : options.bytes === Array ? Array.prototype.slice.call(message.inputContent) : message.inputContent;
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.AnnotateVideoRequest";
                        };
    
                        return AnnotateVideoRequest;
                    })();
    
                    v1.VideoContext = (function() {
    
                        /**
                         * Properties of a VideoContext.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IVideoContext
                         * @property {Array.<google.cloud.videointelligence.v1.IVideoSegment>|null} [segments] VideoContext segments
                         * @property {google.cloud.videointelligence.v1.ILabelDetectionConfig|null} [labelDetectionConfig] VideoContext labelDetectionConfig
                         * @property {google.cloud.videointelligence.v1.IShotChangeDetectionConfig|null} [shotChangeDetectionConfig] VideoContext shotChangeDetectionConfig
                         * @property {google.cloud.videointelligence.v1.IExplicitContentDetectionConfig|null} [explicitContentDetectionConfig] VideoContext explicitContentDetectionConfig
                         * @property {google.cloud.videointelligence.v1.IFaceDetectionConfig|null} [faceDetectionConfig] VideoContext faceDetectionConfig
                         * @property {google.cloud.videointelligence.v1.ISpeechTranscriptionConfig|null} [speechTranscriptionConfig] VideoContext speechTranscriptionConfig
                         * @property {google.cloud.videointelligence.v1.ITextDetectionConfig|null} [textDetectionConfig] VideoContext textDetectionConfig
                         * @property {google.cloud.videointelligence.v1.IPersonDetectionConfig|null} [personDetectionConfig] VideoContext personDetectionConfig
                         * @property {google.cloud.videointelligence.v1.IObjectTrackingConfig|null} [objectTrackingConfig] VideoContext objectTrackingConfig
                         */
    
                        /**
                         * Constructs a new VideoContext.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a VideoContext.
                         * @implements IVideoContext
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IVideoContext=} [properties] Properties to set
                         */
                        function VideoContext(properties) {
                            this.segments = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoContext segments.
                         * @member {Array.<google.cloud.videointelligence.v1.IVideoSegment>} segments
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.segments = $util.emptyArray;
    
                        /**
                         * VideoContext labelDetectionConfig.
                         * @member {google.cloud.videointelligence.v1.ILabelDetectionConfig|null|undefined} labelDetectionConfig
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.labelDetectionConfig = null;
    
                        /**
                         * VideoContext shotChangeDetectionConfig.
                         * @member {google.cloud.videointelligence.v1.IShotChangeDetectionConfig|null|undefined} shotChangeDetectionConfig
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.shotChangeDetectionConfig = null;
    
                        /**
                         * VideoContext explicitContentDetectionConfig.
                         * @member {google.cloud.videointelligence.v1.IExplicitContentDetectionConfig|null|undefined} explicitContentDetectionConfig
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.explicitContentDetectionConfig = null;
    
                        /**
                         * VideoContext faceDetectionConfig.
                         * @member {google.cloud.videointelligence.v1.IFaceDetectionConfig|null|undefined} faceDetectionConfig
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.faceDetectionConfig = null;
    
                        /**
                         * VideoContext speechTranscriptionConfig.
                         * @member {google.cloud.videointelligence.v1.ISpeechTranscriptionConfig|null|undefined} speechTranscriptionConfig
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.speechTranscriptionConfig = null;
    
                        /**
                         * VideoContext textDetectionConfig.
                         * @member {google.cloud.videointelligence.v1.ITextDetectionConfig|null|undefined} textDetectionConfig
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.textDetectionConfig = null;
    
                        /**
                         * VideoContext personDetectionConfig.
                         * @member {google.cloud.videointelligence.v1.IPersonDetectionConfig|null|undefined} personDetectionConfig
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.personDetectionConfig = null;
    
                        /**
                         * VideoContext objectTrackingConfig.
                         * @member {google.cloud.videointelligence.v1.IObjectTrackingConfig|null|undefined} objectTrackingConfig
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.objectTrackingConfig = null;
    
                        /**
                         * Creates a new VideoContext instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1.IVideoContext=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.VideoContext} VideoContext instance
                         */
                        VideoContext.create = function create(properties) {
                            return new VideoContext(properties);
                        };
    
                        /**
                         * Encodes the specified VideoContext message. Does not implicitly {@link google.cloud.videointelligence.v1.VideoContext.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1.IVideoContext} message VideoContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoContext.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1.VideoSegment.encode(message.segments[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.labelDetectionConfig != null && Object.hasOwnProperty.call(message, "labelDetectionConfig"))
                                $root.google.cloud.videointelligence.v1.LabelDetectionConfig.encode(message.labelDetectionConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.shotChangeDetectionConfig != null && Object.hasOwnProperty.call(message, "shotChangeDetectionConfig"))
                                $root.google.cloud.videointelligence.v1.ShotChangeDetectionConfig.encode(message.shotChangeDetectionConfig, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.explicitContentDetectionConfig != null && Object.hasOwnProperty.call(message, "explicitContentDetectionConfig"))
                                $root.google.cloud.videointelligence.v1.ExplicitContentDetectionConfig.encode(message.explicitContentDetectionConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.faceDetectionConfig != null && Object.hasOwnProperty.call(message, "faceDetectionConfig"))
                                $root.google.cloud.videointelligence.v1.FaceDetectionConfig.encode(message.faceDetectionConfig, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.speechTranscriptionConfig != null && Object.hasOwnProperty.call(message, "speechTranscriptionConfig"))
                                $root.google.cloud.videointelligence.v1.SpeechTranscriptionConfig.encode(message.speechTranscriptionConfig, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.textDetectionConfig != null && Object.hasOwnProperty.call(message, "textDetectionConfig"))
                                $root.google.cloud.videointelligence.v1.TextDetectionConfig.encode(message.textDetectionConfig, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.personDetectionConfig != null && Object.hasOwnProperty.call(message, "personDetectionConfig"))
                                $root.google.cloud.videointelligence.v1.PersonDetectionConfig.encode(message.personDetectionConfig, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            if (message.objectTrackingConfig != null && Object.hasOwnProperty.call(message, "objectTrackingConfig"))
                                $root.google.cloud.videointelligence.v1.ObjectTrackingConfig.encode(message.objectTrackingConfig, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoContext message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.VideoContext.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1.IVideoContext} message VideoContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoContext.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoContext message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.VideoContext} VideoContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoContext.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.VideoContext();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.labelDetectionConfig = $root.google.cloud.videointelligence.v1.LabelDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1.ShotChangeDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1.ExplicitContentDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.faceDetectionConfig = $root.google.cloud.videointelligence.v1.FaceDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.speechTranscriptionConfig = $root.google.cloud.videointelligence.v1.SpeechTranscriptionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.textDetectionConfig = $root.google.cloud.videointelligence.v1.TextDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        message.personDetectionConfig = $root.google.cloud.videointelligence.v1.PersonDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 13: {
                                        message.objectTrackingConfig = $root.google.cloud.videointelligence.v1.ObjectTrackingConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoContext message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.VideoContext} VideoContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoContext.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoContext message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoContext.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.VideoSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.labelDetectionConfig != null && message.hasOwnProperty("labelDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1.LabelDetectionConfig.verify(message.labelDetectionConfig);
                                if (error)
                                    return "labelDetectionConfig." + error;
                            }
                            if (message.shotChangeDetectionConfig != null && message.hasOwnProperty("shotChangeDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1.ShotChangeDetectionConfig.verify(message.shotChangeDetectionConfig);
                                if (error)
                                    return "shotChangeDetectionConfig." + error;
                            }
                            if (message.explicitContentDetectionConfig != null && message.hasOwnProperty("explicitContentDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1.ExplicitContentDetectionConfig.verify(message.explicitContentDetectionConfig);
                                if (error)
                                    return "explicitContentDetectionConfig." + error;
                            }
                            if (message.faceDetectionConfig != null && message.hasOwnProperty("faceDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1.FaceDetectionConfig.verify(message.faceDetectionConfig);
                                if (error)
                                    return "faceDetectionConfig." + error;
                            }
                            if (message.speechTranscriptionConfig != null && message.hasOwnProperty("speechTranscriptionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1.SpeechTranscriptionConfig.verify(message.speechTranscriptionConfig);
                                if (error)
                                    return "speechTranscriptionConfig." + error;
                            }
                            if (message.textDetectionConfig != null && message.hasOwnProperty("textDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1.TextDetectionConfig.verify(message.textDetectionConfig);
                                if (error)
                                    return "textDetectionConfig." + error;
                            }
                            if (message.personDetectionConfig != null && message.hasOwnProperty("personDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1.PersonDetectionConfig.verify(message.personDetectionConfig);
                                if (error)
                                    return "personDetectionConfig." + error;
                            }
                            if (message.objectTrackingConfig != null && message.hasOwnProperty("objectTrackingConfig")) {
                                var error = $root.google.cloud.videointelligence.v1.ObjectTrackingConfig.verify(message.objectTrackingConfig);
                                if (error)
                                    return "objectTrackingConfig." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoContext message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.VideoContext} VideoContext
                         */
                        VideoContext.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.VideoContext)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.VideoContext();
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoContext.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoContext.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1.VideoSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.labelDetectionConfig != null) {
                                if (typeof object.labelDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoContext.labelDetectionConfig: object expected");
                                message.labelDetectionConfig = $root.google.cloud.videointelligence.v1.LabelDetectionConfig.fromObject(object.labelDetectionConfig);
                            }
                            if (object.shotChangeDetectionConfig != null) {
                                if (typeof object.shotChangeDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoContext.shotChangeDetectionConfig: object expected");
                                message.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1.ShotChangeDetectionConfig.fromObject(object.shotChangeDetectionConfig);
                            }
                            if (object.explicitContentDetectionConfig != null) {
                                if (typeof object.explicitContentDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoContext.explicitContentDetectionConfig: object expected");
                                message.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1.ExplicitContentDetectionConfig.fromObject(object.explicitContentDetectionConfig);
                            }
                            if (object.faceDetectionConfig != null) {
                                if (typeof object.faceDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoContext.faceDetectionConfig: object expected");
                                message.faceDetectionConfig = $root.google.cloud.videointelligence.v1.FaceDetectionConfig.fromObject(object.faceDetectionConfig);
                            }
                            if (object.speechTranscriptionConfig != null) {
                                if (typeof object.speechTranscriptionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoContext.speechTranscriptionConfig: object expected");
                                message.speechTranscriptionConfig = $root.google.cloud.videointelligence.v1.SpeechTranscriptionConfig.fromObject(object.speechTranscriptionConfig);
                            }
                            if (object.textDetectionConfig != null) {
                                if (typeof object.textDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoContext.textDetectionConfig: object expected");
                                message.textDetectionConfig = $root.google.cloud.videointelligence.v1.TextDetectionConfig.fromObject(object.textDetectionConfig);
                            }
                            if (object.personDetectionConfig != null) {
                                if (typeof object.personDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoContext.personDetectionConfig: object expected");
                                message.personDetectionConfig = $root.google.cloud.videointelligence.v1.PersonDetectionConfig.fromObject(object.personDetectionConfig);
                            }
                            if (object.objectTrackingConfig != null) {
                                if (typeof object.objectTrackingConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoContext.objectTrackingConfig: object expected");
                                message.objectTrackingConfig = $root.google.cloud.videointelligence.v1.ObjectTrackingConfig.fromObject(object.objectTrackingConfig);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoContext message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1.VideoContext} message VideoContext
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoContext.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.segments = [];
                            if (options.defaults) {
                                object.labelDetectionConfig = null;
                                object.shotChangeDetectionConfig = null;
                                object.explicitContentDetectionConfig = null;
                                object.faceDetectionConfig = null;
                                object.speechTranscriptionConfig = null;
                                object.textDetectionConfig = null;
                                object.personDetectionConfig = null;
                                object.objectTrackingConfig = null;
                            }
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1.VideoSegment.toObject(message.segments[j], options);
                            }
                            if (message.labelDetectionConfig != null && message.hasOwnProperty("labelDetectionConfig"))
                                object.labelDetectionConfig = $root.google.cloud.videointelligence.v1.LabelDetectionConfig.toObject(message.labelDetectionConfig, options);
                            if (message.shotChangeDetectionConfig != null && message.hasOwnProperty("shotChangeDetectionConfig"))
                                object.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1.ShotChangeDetectionConfig.toObject(message.shotChangeDetectionConfig, options);
                            if (message.explicitContentDetectionConfig != null && message.hasOwnProperty("explicitContentDetectionConfig"))
                                object.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1.ExplicitContentDetectionConfig.toObject(message.explicitContentDetectionConfig, options);
                            if (message.faceDetectionConfig != null && message.hasOwnProperty("faceDetectionConfig"))
                                object.faceDetectionConfig = $root.google.cloud.videointelligence.v1.FaceDetectionConfig.toObject(message.faceDetectionConfig, options);
                            if (message.speechTranscriptionConfig != null && message.hasOwnProperty("speechTranscriptionConfig"))
                                object.speechTranscriptionConfig = $root.google.cloud.videointelligence.v1.SpeechTranscriptionConfig.toObject(message.speechTranscriptionConfig, options);
                            if (message.textDetectionConfig != null && message.hasOwnProperty("textDetectionConfig"))
                                object.textDetectionConfig = $root.google.cloud.videointelligence.v1.TextDetectionConfig.toObject(message.textDetectionConfig, options);
                            if (message.personDetectionConfig != null && message.hasOwnProperty("personDetectionConfig"))
                                object.personDetectionConfig = $root.google.cloud.videointelligence.v1.PersonDetectionConfig.toObject(message.personDetectionConfig, options);
                            if (message.objectTrackingConfig != null && message.hasOwnProperty("objectTrackingConfig"))
                                object.objectTrackingConfig = $root.google.cloud.videointelligence.v1.ObjectTrackingConfig.toObject(message.objectTrackingConfig, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoContext to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoContext.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoContext
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.VideoContext
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.VideoContext";
                        };
    
                        return VideoContext;
                    })();
    
                    /**
                     * Feature enum.
                     * @name google.cloud.videointelligence.v1.Feature
                     * @enum {number}
                     * @property {number} FEATURE_UNSPECIFIED=0 FEATURE_UNSPECIFIED value
                     * @property {number} LABEL_DETECTION=1 LABEL_DETECTION value
                     * @property {number} SHOT_CHANGE_DETECTION=2 SHOT_CHANGE_DETECTION value
                     * @property {number} EXPLICIT_CONTENT_DETECTION=3 EXPLICIT_CONTENT_DETECTION value
                     * @property {number} FACE_DETECTION=4 FACE_DETECTION value
                     * @property {number} SPEECH_TRANSCRIPTION=6 SPEECH_TRANSCRIPTION value
                     * @property {number} TEXT_DETECTION=7 TEXT_DETECTION value
                     * @property {number} OBJECT_TRACKING=9 OBJECT_TRACKING value
                     * @property {number} LOGO_RECOGNITION=12 LOGO_RECOGNITION value
                     * @property {number} PERSON_DETECTION=14 PERSON_DETECTION value
                     */
                    v1.Feature = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "FEATURE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "LABEL_DETECTION"] = 1;
                        values[valuesById[2] = "SHOT_CHANGE_DETECTION"] = 2;
                        values[valuesById[3] = "EXPLICIT_CONTENT_DETECTION"] = 3;
                        values[valuesById[4] = "FACE_DETECTION"] = 4;
                        values[valuesById[6] = "SPEECH_TRANSCRIPTION"] = 6;
                        values[valuesById[7] = "TEXT_DETECTION"] = 7;
                        values[valuesById[9] = "OBJECT_TRACKING"] = 9;
                        values[valuesById[12] = "LOGO_RECOGNITION"] = 12;
                        values[valuesById[14] = "PERSON_DETECTION"] = 14;
                        return values;
                    })();
    
                    /**
                     * LabelDetectionMode enum.
                     * @name google.cloud.videointelligence.v1.LabelDetectionMode
                     * @enum {number}
                     * @property {number} LABEL_DETECTION_MODE_UNSPECIFIED=0 LABEL_DETECTION_MODE_UNSPECIFIED value
                     * @property {number} SHOT_MODE=1 SHOT_MODE value
                     * @property {number} FRAME_MODE=2 FRAME_MODE value
                     * @property {number} SHOT_AND_FRAME_MODE=3 SHOT_AND_FRAME_MODE value
                     */
                    v1.LabelDetectionMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LABEL_DETECTION_MODE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "SHOT_MODE"] = 1;
                        values[valuesById[2] = "FRAME_MODE"] = 2;
                        values[valuesById[3] = "SHOT_AND_FRAME_MODE"] = 3;
                        return values;
                    })();
    
                    /**
                     * Likelihood enum.
                     * @name google.cloud.videointelligence.v1.Likelihood
                     * @enum {number}
                     * @property {number} LIKELIHOOD_UNSPECIFIED=0 LIKELIHOOD_UNSPECIFIED value
                     * @property {number} VERY_UNLIKELY=1 VERY_UNLIKELY value
                     * @property {number} UNLIKELY=2 UNLIKELY value
                     * @property {number} POSSIBLE=3 POSSIBLE value
                     * @property {number} LIKELY=4 LIKELY value
                     * @property {number} VERY_LIKELY=5 VERY_LIKELY value
                     */
                    v1.Likelihood = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LIKELIHOOD_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "VERY_UNLIKELY"] = 1;
                        values[valuesById[2] = "UNLIKELY"] = 2;
                        values[valuesById[3] = "POSSIBLE"] = 3;
                        values[valuesById[4] = "LIKELY"] = 4;
                        values[valuesById[5] = "VERY_LIKELY"] = 5;
                        return values;
                    })();
    
                    v1.LabelDetectionConfig = (function() {
    
                        /**
                         * Properties of a LabelDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ILabelDetectionConfig
                         * @property {google.cloud.videointelligence.v1.LabelDetectionMode|null} [labelDetectionMode] LabelDetectionConfig labelDetectionMode
                         * @property {boolean|null} [stationaryCamera] LabelDetectionConfig stationaryCamera
                         * @property {string|null} [model] LabelDetectionConfig model
                         * @property {number|null} [frameConfidenceThreshold] LabelDetectionConfig frameConfidenceThreshold
                         * @property {number|null} [videoConfidenceThreshold] LabelDetectionConfig videoConfidenceThreshold
                         */
    
                        /**
                         * Constructs a new LabelDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a LabelDetectionConfig.
                         * @implements ILabelDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ILabelDetectionConfig=} [properties] Properties to set
                         */
                        function LabelDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelDetectionConfig labelDetectionMode.
                         * @member {google.cloud.videointelligence.v1.LabelDetectionMode} labelDetectionMode
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.labelDetectionMode = 0;
    
                        /**
                         * LabelDetectionConfig stationaryCamera.
                         * @member {boolean} stationaryCamera
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.stationaryCamera = false;
    
                        /**
                         * LabelDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.model = "";
    
                        /**
                         * LabelDetectionConfig frameConfidenceThreshold.
                         * @member {number} frameConfidenceThreshold
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.frameConfidenceThreshold = 0;
    
                        /**
                         * LabelDetectionConfig videoConfidenceThreshold.
                         * @member {number} videoConfidenceThreshold
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.videoConfidenceThreshold = 0;
    
                        /**
                         * Creates a new LabelDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILabelDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.LabelDetectionConfig} LabelDetectionConfig instance
                         */
                        LabelDetectionConfig.create = function create(properties) {
                            return new LabelDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified LabelDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1.LabelDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILabelDetectionConfig} message LabelDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.labelDetectionMode != null && Object.hasOwnProperty.call(message, "labelDetectionMode"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.labelDetectionMode);
                            if (message.stationaryCamera != null && Object.hasOwnProperty.call(message, "stationaryCamera"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.stationaryCamera);
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.model);
                            if (message.frameConfidenceThreshold != null && Object.hasOwnProperty.call(message, "frameConfidenceThreshold"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.frameConfidenceThreshold);
                            if (message.videoConfidenceThreshold != null && Object.hasOwnProperty.call(message, "videoConfidenceThreshold"))
                                writer.uint32(/* id 5, wireType 5 =*/45).float(message.videoConfidenceThreshold);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.LabelDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILabelDetectionConfig} message LabelDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.LabelDetectionConfig} LabelDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.LabelDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.labelDetectionMode = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.stationaryCamera = reader.bool();
                                        break;
                                    }
                                case 3: {
                                        message.model = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.frameConfidenceThreshold = reader.float();
                                        break;
                                    }
                                case 5: {
                                        message.videoConfidenceThreshold = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.LabelDetectionConfig} LabelDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.labelDetectionMode != null && message.hasOwnProperty("labelDetectionMode"))
                                switch (message.labelDetectionMode) {
                                default:
                                    return "labelDetectionMode: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.stationaryCamera != null && message.hasOwnProperty("stationaryCamera"))
                                if (typeof message.stationaryCamera !== "boolean")
                                    return "stationaryCamera: boolean expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            if (message.frameConfidenceThreshold != null && message.hasOwnProperty("frameConfidenceThreshold"))
                                if (typeof message.frameConfidenceThreshold !== "number")
                                    return "frameConfidenceThreshold: number expected";
                            if (message.videoConfidenceThreshold != null && message.hasOwnProperty("videoConfidenceThreshold"))
                                if (typeof message.videoConfidenceThreshold !== "number")
                                    return "videoConfidenceThreshold: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.LabelDetectionConfig} LabelDetectionConfig
                         */
                        LabelDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.LabelDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.LabelDetectionConfig();
                            switch (object.labelDetectionMode) {
                            default:
                                if (typeof object.labelDetectionMode === "number") {
                                    message.labelDetectionMode = object.labelDetectionMode;
                                    break;
                                }
                                break;
                            case "LABEL_DETECTION_MODE_UNSPECIFIED":
                            case 0:
                                message.labelDetectionMode = 0;
                                break;
                            case "SHOT_MODE":
                            case 1:
                                message.labelDetectionMode = 1;
                                break;
                            case "FRAME_MODE":
                            case 2:
                                message.labelDetectionMode = 2;
                                break;
                            case "SHOT_AND_FRAME_MODE":
                            case 3:
                                message.labelDetectionMode = 3;
                                break;
                            }
                            if (object.stationaryCamera != null)
                                message.stationaryCamera = Boolean(object.stationaryCamera);
                            if (object.model != null)
                                message.model = String(object.model);
                            if (object.frameConfidenceThreshold != null)
                                message.frameConfidenceThreshold = Number(object.frameConfidenceThreshold);
                            if (object.videoConfidenceThreshold != null)
                                message.videoConfidenceThreshold = Number(object.videoConfidenceThreshold);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.LabelDetectionConfig} message LabelDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.labelDetectionMode = options.enums === String ? "LABEL_DETECTION_MODE_UNSPECIFIED" : 0;
                                object.stationaryCamera = false;
                                object.model = "";
                                object.frameConfidenceThreshold = 0;
                                object.videoConfidenceThreshold = 0;
                            }
                            if (message.labelDetectionMode != null && message.hasOwnProperty("labelDetectionMode"))
                                object.labelDetectionMode = options.enums === String ? $root.google.cloud.videointelligence.v1.LabelDetectionMode[message.labelDetectionMode] === undefined ? message.labelDetectionMode : $root.google.cloud.videointelligence.v1.LabelDetectionMode[message.labelDetectionMode] : message.labelDetectionMode;
                            if (message.stationaryCamera != null && message.hasOwnProperty("stationaryCamera"))
                                object.stationaryCamera = message.stationaryCamera;
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            if (message.frameConfidenceThreshold != null && message.hasOwnProperty("frameConfidenceThreshold"))
                                object.frameConfidenceThreshold = options.json && !isFinite(message.frameConfidenceThreshold) ? String(message.frameConfidenceThreshold) : message.frameConfidenceThreshold;
                            if (message.videoConfidenceThreshold != null && message.hasOwnProperty("videoConfidenceThreshold"))
                                object.videoConfidenceThreshold = options.json && !isFinite(message.videoConfidenceThreshold) ? String(message.videoConfidenceThreshold) : message.videoConfidenceThreshold;
                            return object;
                        };
    
                        /**
                         * Converts this LabelDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.LabelDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.LabelDetectionConfig";
                        };
    
                        return LabelDetectionConfig;
                    })();
    
                    v1.ShotChangeDetectionConfig = (function() {
    
                        /**
                         * Properties of a ShotChangeDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IShotChangeDetectionConfig
                         * @property {string|null} [model] ShotChangeDetectionConfig model
                         */
    
                        /**
                         * Constructs a new ShotChangeDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a ShotChangeDetectionConfig.
                         * @implements IShotChangeDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IShotChangeDetectionConfig=} [properties] Properties to set
                         */
                        function ShotChangeDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ShotChangeDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1.ShotChangeDetectionConfig
                         * @instance
                         */
                        ShotChangeDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new ShotChangeDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IShotChangeDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.ShotChangeDetectionConfig} ShotChangeDetectionConfig instance
                         */
                        ShotChangeDetectionConfig.create = function create(properties) {
                            return new ShotChangeDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ShotChangeDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1.ShotChangeDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IShotChangeDetectionConfig} message ShotChangeDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ShotChangeDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ShotChangeDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.ShotChangeDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IShotChangeDetectionConfig} message ShotChangeDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ShotChangeDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ShotChangeDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.ShotChangeDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ShotChangeDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.ShotChangeDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ShotChangeDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ShotChangeDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ShotChangeDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ShotChangeDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.ShotChangeDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ShotChangeDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ShotChangeDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.ShotChangeDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         */
                        ShotChangeDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.ShotChangeDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.ShotChangeDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ShotChangeDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.ShotChangeDetectionConfig} message ShotChangeDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ShotChangeDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.model = "";
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this ShotChangeDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.ShotChangeDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ShotChangeDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ShotChangeDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.ShotChangeDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ShotChangeDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.ShotChangeDetectionConfig";
                        };
    
                        return ShotChangeDetectionConfig;
                    })();
    
                    v1.ObjectTrackingConfig = (function() {
    
                        /**
                         * Properties of an ObjectTrackingConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IObjectTrackingConfig
                         * @property {string|null} [model] ObjectTrackingConfig model
                         */
    
                        /**
                         * Constructs a new ObjectTrackingConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents an ObjectTrackingConfig.
                         * @implements IObjectTrackingConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IObjectTrackingConfig=} [properties] Properties to set
                         */
                        function ObjectTrackingConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ObjectTrackingConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingConfig
                         * @instance
                         */
                        ObjectTrackingConfig.prototype.model = "";
    
                        /**
                         * Creates a new ObjectTrackingConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IObjectTrackingConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.ObjectTrackingConfig} ObjectTrackingConfig instance
                         */
                        ObjectTrackingConfig.create = function create(properties) {
                            return new ObjectTrackingConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingConfig message. Does not implicitly {@link google.cloud.videointelligence.v1.ObjectTrackingConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IObjectTrackingConfig} message ObjectTrackingConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.ObjectTrackingConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IObjectTrackingConfig} message ObjectTrackingConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ObjectTrackingConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.ObjectTrackingConfig} ObjectTrackingConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.ObjectTrackingConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ObjectTrackingConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.ObjectTrackingConfig} ObjectTrackingConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ObjectTrackingConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ObjectTrackingConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ObjectTrackingConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.ObjectTrackingConfig} ObjectTrackingConfig
                         */
                        ObjectTrackingConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.ObjectTrackingConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.ObjectTrackingConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ObjectTrackingConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.ObjectTrackingConfig} message ObjectTrackingConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ObjectTrackingConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.model = "";
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this ObjectTrackingConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ObjectTrackingConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ObjectTrackingConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ObjectTrackingConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.ObjectTrackingConfig";
                        };
    
                        return ObjectTrackingConfig;
                    })();
    
                    v1.FaceDetectionConfig = (function() {
    
                        /**
                         * Properties of a FaceDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IFaceDetectionConfig
                         * @property {string|null} [model] FaceDetectionConfig model
                         * @property {boolean|null} [includeBoundingBoxes] FaceDetectionConfig includeBoundingBoxes
                         * @property {boolean|null} [includeAttributes] FaceDetectionConfig includeAttributes
                         */
    
                        /**
                         * Constructs a new FaceDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a FaceDetectionConfig.
                         * @implements IFaceDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IFaceDetectionConfig=} [properties] Properties to set
                         */
                        function FaceDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FaceDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @instance
                         */
                        FaceDetectionConfig.prototype.model = "";
    
                        /**
                         * FaceDetectionConfig includeBoundingBoxes.
                         * @member {boolean} includeBoundingBoxes
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @instance
                         */
                        FaceDetectionConfig.prototype.includeBoundingBoxes = false;
    
                        /**
                         * FaceDetectionConfig includeAttributes.
                         * @member {boolean} includeAttributes
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @instance
                         */
                        FaceDetectionConfig.prototype.includeAttributes = false;
    
                        /**
                         * Creates a new FaceDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.FaceDetectionConfig} FaceDetectionConfig instance
                         */
                        FaceDetectionConfig.create = function create(properties) {
                            return new FaceDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified FaceDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1.FaceDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceDetectionConfig} message FaceDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            if (message.includeBoundingBoxes != null && Object.hasOwnProperty.call(message, "includeBoundingBoxes"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.includeBoundingBoxes);
                            if (message.includeAttributes != null && Object.hasOwnProperty.call(message, "includeAttributes"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.includeAttributes);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FaceDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.FaceDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceDetectionConfig} message FaceDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FaceDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.FaceDetectionConfig} FaceDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.FaceDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.includeBoundingBoxes = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        message.includeAttributes = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FaceDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.FaceDetectionConfig} FaceDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FaceDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FaceDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            if (message.includeBoundingBoxes != null && message.hasOwnProperty("includeBoundingBoxes"))
                                if (typeof message.includeBoundingBoxes !== "boolean")
                                    return "includeBoundingBoxes: boolean expected";
                            if (message.includeAttributes != null && message.hasOwnProperty("includeAttributes"))
                                if (typeof message.includeAttributes !== "boolean")
                                    return "includeAttributes: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a FaceDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.FaceDetectionConfig} FaceDetectionConfig
                         */
                        FaceDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.FaceDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.FaceDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            if (object.includeBoundingBoxes != null)
                                message.includeBoundingBoxes = Boolean(object.includeBoundingBoxes);
                            if (object.includeAttributes != null)
                                message.includeAttributes = Boolean(object.includeAttributes);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FaceDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.FaceDetectionConfig} message FaceDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FaceDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.model = "";
                                object.includeBoundingBoxes = false;
                                object.includeAttributes = false;
                            }
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            if (message.includeBoundingBoxes != null && message.hasOwnProperty("includeBoundingBoxes"))
                                object.includeBoundingBoxes = message.includeBoundingBoxes;
                            if (message.includeAttributes != null && message.hasOwnProperty("includeAttributes"))
                                object.includeAttributes = message.includeAttributes;
                            return object;
                        };
    
                        /**
                         * Converts this FaceDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FaceDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FaceDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FaceDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.FaceDetectionConfig";
                        };
    
                        return FaceDetectionConfig;
                    })();
    
                    v1.PersonDetectionConfig = (function() {
    
                        /**
                         * Properties of a PersonDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IPersonDetectionConfig
                         * @property {boolean|null} [includeBoundingBoxes] PersonDetectionConfig includeBoundingBoxes
                         * @property {boolean|null} [includePoseLandmarks] PersonDetectionConfig includePoseLandmarks
                         * @property {boolean|null} [includeAttributes] PersonDetectionConfig includeAttributes
                         */
    
                        /**
                         * Constructs a new PersonDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a PersonDetectionConfig.
                         * @implements IPersonDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IPersonDetectionConfig=} [properties] Properties to set
                         */
                        function PersonDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PersonDetectionConfig includeBoundingBoxes.
                         * @member {boolean} includeBoundingBoxes
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @instance
                         */
                        PersonDetectionConfig.prototype.includeBoundingBoxes = false;
    
                        /**
                         * PersonDetectionConfig includePoseLandmarks.
                         * @member {boolean} includePoseLandmarks
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @instance
                         */
                        PersonDetectionConfig.prototype.includePoseLandmarks = false;
    
                        /**
                         * PersonDetectionConfig includeAttributes.
                         * @member {boolean} includeAttributes
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @instance
                         */
                        PersonDetectionConfig.prototype.includeAttributes = false;
    
                        /**
                         * Creates a new PersonDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IPersonDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.PersonDetectionConfig} PersonDetectionConfig instance
                         */
                        PersonDetectionConfig.create = function create(properties) {
                            return new PersonDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified PersonDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1.PersonDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IPersonDetectionConfig} message PersonDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PersonDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.includeBoundingBoxes != null && Object.hasOwnProperty.call(message, "includeBoundingBoxes"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.includeBoundingBoxes);
                            if (message.includePoseLandmarks != null && Object.hasOwnProperty.call(message, "includePoseLandmarks"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.includePoseLandmarks);
                            if (message.includeAttributes != null && Object.hasOwnProperty.call(message, "includeAttributes"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.includeAttributes);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PersonDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.PersonDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IPersonDetectionConfig} message PersonDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PersonDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PersonDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.PersonDetectionConfig} PersonDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PersonDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.PersonDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.includeBoundingBoxes = reader.bool();
                                        break;
                                    }
                                case 2: {
                                        message.includePoseLandmarks = reader.bool();
                                        break;
                                    }
                                case 3: {
                                        message.includeAttributes = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PersonDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.PersonDetectionConfig} PersonDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PersonDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PersonDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PersonDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.includeBoundingBoxes != null && message.hasOwnProperty("includeBoundingBoxes"))
                                if (typeof message.includeBoundingBoxes !== "boolean")
                                    return "includeBoundingBoxes: boolean expected";
                            if (message.includePoseLandmarks != null && message.hasOwnProperty("includePoseLandmarks"))
                                if (typeof message.includePoseLandmarks !== "boolean")
                                    return "includePoseLandmarks: boolean expected";
                            if (message.includeAttributes != null && message.hasOwnProperty("includeAttributes"))
                                if (typeof message.includeAttributes !== "boolean")
                                    return "includeAttributes: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a PersonDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.PersonDetectionConfig} PersonDetectionConfig
                         */
                        PersonDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.PersonDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.PersonDetectionConfig();
                            if (object.includeBoundingBoxes != null)
                                message.includeBoundingBoxes = Boolean(object.includeBoundingBoxes);
                            if (object.includePoseLandmarks != null)
                                message.includePoseLandmarks = Boolean(object.includePoseLandmarks);
                            if (object.includeAttributes != null)
                                message.includeAttributes = Boolean(object.includeAttributes);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PersonDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.PersonDetectionConfig} message PersonDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PersonDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.includeBoundingBoxes = false;
                                object.includePoseLandmarks = false;
                                object.includeAttributes = false;
                            }
                            if (message.includeBoundingBoxes != null && message.hasOwnProperty("includeBoundingBoxes"))
                                object.includeBoundingBoxes = message.includeBoundingBoxes;
                            if (message.includePoseLandmarks != null && message.hasOwnProperty("includePoseLandmarks"))
                                object.includePoseLandmarks = message.includePoseLandmarks;
                            if (message.includeAttributes != null && message.hasOwnProperty("includeAttributes"))
                                object.includeAttributes = message.includeAttributes;
                            return object;
                        };
    
                        /**
                         * Converts this PersonDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PersonDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for PersonDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PersonDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.PersonDetectionConfig";
                        };
    
                        return PersonDetectionConfig;
                    })();
    
                    v1.ExplicitContentDetectionConfig = (function() {
    
                        /**
                         * Properties of an ExplicitContentDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IExplicitContentDetectionConfig
                         * @property {string|null} [model] ExplicitContentDetectionConfig model
                         */
    
                        /**
                         * Constructs a new ExplicitContentDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents an ExplicitContentDetectionConfig.
                         * @implements IExplicitContentDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IExplicitContentDetectionConfig=} [properties] Properties to set
                         */
                        function ExplicitContentDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentDetectionConfig
                         * @instance
                         */
                        ExplicitContentDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new ExplicitContentDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IExplicitContentDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig instance
                         */
                        ExplicitContentDetectionConfig.create = function create(properties) {
                            return new ExplicitContentDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1.ExplicitContentDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IExplicitContentDetectionConfig} message ExplicitContentDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.ExplicitContentDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.IExplicitContentDetectionConfig} message ExplicitContentDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.ExplicitContentDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         */
                        ExplicitContentDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.ExplicitContentDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.ExplicitContentDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.ExplicitContentDetectionConfig} message ExplicitContentDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.model = "";
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.ExplicitContentDetectionConfig";
                        };
    
                        return ExplicitContentDetectionConfig;
                    })();
    
                    v1.TextDetectionConfig = (function() {
    
                        /**
                         * Properties of a TextDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ITextDetectionConfig
                         * @property {Array.<string>|null} [languageHints] TextDetectionConfig languageHints
                         * @property {string|null} [model] TextDetectionConfig model
                         */
    
                        /**
                         * Constructs a new TextDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a TextDetectionConfig.
                         * @implements ITextDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ITextDetectionConfig=} [properties] Properties to set
                         */
                        function TextDetectionConfig(properties) {
                            this.languageHints = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextDetectionConfig languageHints.
                         * @member {Array.<string>} languageHints
                         * @memberof google.cloud.videointelligence.v1.TextDetectionConfig
                         * @instance
                         */
                        TextDetectionConfig.prototype.languageHints = $util.emptyArray;
    
                        /**
                         * TextDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1.TextDetectionConfig
                         * @instance
                         */
                        TextDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new TextDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.TextDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITextDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.TextDetectionConfig} TextDetectionConfig instance
                         */
                        TextDetectionConfig.create = function create(properties) {
                            return new TextDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified TextDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1.TextDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.TextDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITextDetectionConfig} message TextDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.languageHints != null && message.languageHints.length)
                                for (var i = 0; i < message.languageHints.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.languageHints[i]);
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.TextDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.TextDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITextDetectionConfig} message TextDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.TextDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.TextDetectionConfig} TextDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.TextDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.languageHints && message.languageHints.length))
                                            message.languageHints = [];
                                        message.languageHints.push(reader.string());
                                        break;
                                    }
                                case 2: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.TextDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.TextDetectionConfig} TextDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.TextDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.languageHints != null && message.hasOwnProperty("languageHints")) {
                                if (!Array.isArray(message.languageHints))
                                    return "languageHints: array expected";
                                for (var i = 0; i < message.languageHints.length; ++i)
                                    if (!$util.isString(message.languageHints[i]))
                                        return "languageHints: string[] expected";
                            }
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a TextDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.TextDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.TextDetectionConfig} TextDetectionConfig
                         */
                        TextDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.TextDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.TextDetectionConfig();
                            if (object.languageHints) {
                                if (!Array.isArray(object.languageHints))
                                    throw TypeError(".google.cloud.videointelligence.v1.TextDetectionConfig.languageHints: array expected");
                                message.languageHints = [];
                                for (var i = 0; i < object.languageHints.length; ++i)
                                    message.languageHints[i] = String(object.languageHints[i]);
                            }
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.TextDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.TextDetectionConfig} message TextDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.languageHints = [];
                            if (options.defaults)
                                object.model = "";
                            if (message.languageHints && message.languageHints.length) {
                                object.languageHints = [];
                                for (var j = 0; j < message.languageHints.length; ++j)
                                    object.languageHints[j] = message.languageHints[j];
                            }
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this TextDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.TextDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.TextDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.TextDetectionConfig";
                        };
    
                        return TextDetectionConfig;
                    })();
    
                    v1.VideoSegment = (function() {
    
                        /**
                         * Properties of a VideoSegment.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IVideoSegment
                         * @property {google.protobuf.IDuration|null} [startTimeOffset] VideoSegment startTimeOffset
                         * @property {google.protobuf.IDuration|null} [endTimeOffset] VideoSegment endTimeOffset
                         */
    
                        /**
                         * Constructs a new VideoSegment.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a VideoSegment.
                         * @implements IVideoSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IVideoSegment=} [properties] Properties to set
                         */
                        function VideoSegment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoSegment startTimeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} startTimeOffset
                         * @memberof google.cloud.videointelligence.v1.VideoSegment
                         * @instance
                         */
                        VideoSegment.prototype.startTimeOffset = null;
    
                        /**
                         * VideoSegment endTimeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} endTimeOffset
                         * @memberof google.cloud.videointelligence.v1.VideoSegment
                         * @instance
                         */
                        VideoSegment.prototype.endTimeOffset = null;
    
                        /**
                         * Creates a new VideoSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.IVideoSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.VideoSegment} VideoSegment instance
                         */
                        VideoSegment.create = function create(properties) {
                            return new VideoSegment(properties);
                        };
    
                        /**
                         * Encodes the specified VideoSegment message. Does not implicitly {@link google.cloud.videointelligence.v1.VideoSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.IVideoSegment} message VideoSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.startTimeOffset != null && Object.hasOwnProperty.call(message, "startTimeOffset"))
                                $root.google.protobuf.Duration.encode(message.startTimeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.endTimeOffset != null && Object.hasOwnProperty.call(message, "endTimeOffset"))
                                $root.google.protobuf.Duration.encode(message.endTimeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.VideoSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.IVideoSegment} message VideoSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.VideoSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.VideoSegment} VideoSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.VideoSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.startTimeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.endTimeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.VideoSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.VideoSegment} VideoSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.VideoSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.startTimeOffset != null && message.hasOwnProperty("startTimeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.startTimeOffset);
                                if (error)
                                    return "startTimeOffset." + error;
                            }
                            if (message.endTimeOffset != null && message.hasOwnProperty("endTimeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.endTimeOffset);
                                if (error)
                                    return "endTimeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.VideoSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.VideoSegment} VideoSegment
                         */
                        VideoSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.VideoSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.VideoSegment();
                            if (object.startTimeOffset != null) {
                                if (typeof object.startTimeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoSegment.startTimeOffset: object expected");
                                message.startTimeOffset = $root.google.protobuf.Duration.fromObject(object.startTimeOffset);
                            }
                            if (object.endTimeOffset != null) {
                                if (typeof object.endTimeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoSegment.endTimeOffset: object expected");
                                message.endTimeOffset = $root.google.protobuf.Duration.fromObject(object.endTimeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.VideoSegment} message VideoSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.startTimeOffset = null;
                                object.endTimeOffset = null;
                            }
                            if (message.startTimeOffset != null && message.hasOwnProperty("startTimeOffset"))
                                object.startTimeOffset = $root.google.protobuf.Duration.toObject(message.startTimeOffset, options);
                            if (message.endTimeOffset != null && message.hasOwnProperty("endTimeOffset"))
                                object.endTimeOffset = $root.google.protobuf.Duration.toObject(message.endTimeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.VideoSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.VideoSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.VideoSegment";
                        };
    
                        return VideoSegment;
                    })();
    
                    v1.LabelSegment = (function() {
    
                        /**
                         * Properties of a LabelSegment.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ILabelSegment
                         * @property {google.cloud.videointelligence.v1.IVideoSegment|null} [segment] LabelSegment segment
                         * @property {number|null} [confidence] LabelSegment confidence
                         */
    
                        /**
                         * Constructs a new LabelSegment.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a LabelSegment.
                         * @implements ILabelSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ILabelSegment=} [properties] Properties to set
                         */
                        function LabelSegment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelSegment segment.
                         * @member {google.cloud.videointelligence.v1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1.LabelSegment
                         * @instance
                         */
                        LabelSegment.prototype.segment = null;
    
                        /**
                         * LabelSegment confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1.LabelSegment
                         * @instance
                         */
                        LabelSegment.prototype.confidence = 0;
    
                        /**
                         * Creates a new LabelSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILabelSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.LabelSegment} LabelSegment instance
                         */
                        LabelSegment.create = function create(properties) {
                            return new LabelSegment(properties);
                        };
    
                        /**
                         * Encodes the specified LabelSegment message. Does not implicitly {@link google.cloud.videointelligence.v1.LabelSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILabelSegment} message LabelSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1.VideoSegment.encode(message.segment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.LabelSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILabelSegment} message LabelSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.LabelSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.LabelSegment} LabelSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.LabelSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.LabelSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.LabelSegment} LabelSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.LabelSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.LabelSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.LabelSegment} LabelSegment
                         */
                        LabelSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.LabelSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.LabelSegment();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.LabelSegment.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.LabelSegment} message LabelSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.segment = null;
                                object.confidence = 0;
                            }
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1.VideoSegment.toObject(message.segment, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this LabelSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.LabelSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.LabelSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.LabelSegment";
                        };
    
                        return LabelSegment;
                    })();
    
                    v1.LabelFrame = (function() {
    
                        /**
                         * Properties of a LabelFrame.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ILabelFrame
                         * @property {google.protobuf.IDuration|null} [timeOffset] LabelFrame timeOffset
                         * @property {number|null} [confidence] LabelFrame confidence
                         */
    
                        /**
                         * Constructs a new LabelFrame.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a LabelFrame.
                         * @implements ILabelFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ILabelFrame=} [properties] Properties to set
                         */
                        function LabelFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1.LabelFrame
                         * @instance
                         */
                        LabelFrame.prototype.timeOffset = null;
    
                        /**
                         * LabelFrame confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1.LabelFrame
                         * @instance
                         */
                        LabelFrame.prototype.confidence = 0;
    
                        /**
                         * Creates a new LabelFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILabelFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.LabelFrame} LabelFrame instance
                         */
                        LabelFrame.create = function create(properties) {
                            return new LabelFrame(properties);
                        };
    
                        /**
                         * Encodes the specified LabelFrame message. Does not implicitly {@link google.cloud.videointelligence.v1.LabelFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILabelFrame} message LabelFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.LabelFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILabelFrame} message LabelFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.LabelFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.LabelFrame} LabelFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.LabelFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.LabelFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.LabelFrame} LabelFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.LabelFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.LabelFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.LabelFrame} LabelFrame
                         */
                        LabelFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.LabelFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.LabelFrame();
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.LabelFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.LabelFrame} message LabelFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.timeOffset = null;
                                object.confidence = 0;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this LabelFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.LabelFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.LabelFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.LabelFrame";
                        };
    
                        return LabelFrame;
                    })();
    
                    v1.Entity = (function() {
    
                        /**
                         * Properties of an Entity.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IEntity
                         * @property {string|null} [entityId] Entity entityId
                         * @property {string|null} [description] Entity description
                         * @property {string|null} [languageCode] Entity languageCode
                         */
    
                        /**
                         * Constructs a new Entity.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents an Entity.
                         * @implements IEntity
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IEntity=} [properties] Properties to set
                         */
                        function Entity(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Entity entityId.
                         * @member {string} entityId
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @instance
                         */
                        Entity.prototype.entityId = "";
    
                        /**
                         * Entity description.
                         * @member {string} description
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @instance
                         */
                        Entity.prototype.description = "";
    
                        /**
                         * Entity languageCode.
                         * @member {string} languageCode
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @instance
                         */
                        Entity.prototype.languageCode = "";
    
                        /**
                         * Creates a new Entity instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1.IEntity=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.Entity} Entity instance
                         */
                        Entity.create = function create(properties) {
                            return new Entity(properties);
                        };
    
                        /**
                         * Encodes the specified Entity message. Does not implicitly {@link google.cloud.videointelligence.v1.Entity.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entityId != null && Object.hasOwnProperty.call(message, "entityId"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.entityId);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                            if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.languageCode);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Entity message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.Entity.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.Entity();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.entityId = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.description = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.languageCode = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Entity message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Entity.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entityId != null && message.hasOwnProperty("entityId"))
                                if (!$util.isString(message.entityId))
                                    return "entityId: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                if (!$util.isString(message.languageCode))
                                    return "languageCode: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an Entity message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.Entity} Entity
                         */
                        Entity.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.Entity)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.Entity();
                            if (object.entityId != null)
                                message.entityId = String(object.entityId);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.languageCode != null)
                                message.languageCode = String(object.languageCode);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Entity message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1.Entity} message Entity
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Entity.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.entityId = "";
                                object.description = "";
                                object.languageCode = "";
                            }
                            if (message.entityId != null && message.hasOwnProperty("entityId"))
                                object.entityId = message.entityId;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                object.languageCode = message.languageCode;
                            return object;
                        };
    
                        /**
                         * Converts this Entity to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Entity.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Entity
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.Entity
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Entity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.Entity";
                        };
    
                        return Entity;
                    })();
    
                    v1.LabelAnnotation = (function() {
    
                        /**
                         * Properties of a LabelAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ILabelAnnotation
                         * @property {google.cloud.videointelligence.v1.IEntity|null} [entity] LabelAnnotation entity
                         * @property {Array.<google.cloud.videointelligence.v1.IEntity>|null} [categoryEntities] LabelAnnotation categoryEntities
                         * @property {Array.<google.cloud.videointelligence.v1.ILabelSegment>|null} [segments] LabelAnnotation segments
                         * @property {Array.<google.cloud.videointelligence.v1.ILabelFrame>|null} [frames] LabelAnnotation frames
                         * @property {string|null} [version] LabelAnnotation version
                         */
    
                        /**
                         * Constructs a new LabelAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a LabelAnnotation.
                         * @implements ILabelAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ILabelAnnotation=} [properties] Properties to set
                         */
                        function LabelAnnotation(properties) {
                            this.categoryEntities = [];
                            this.segments = [];
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelAnnotation entity.
                         * @member {google.cloud.videointelligence.v1.IEntity|null|undefined} entity
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.entity = null;
    
                        /**
                         * LabelAnnotation categoryEntities.
                         * @member {Array.<google.cloud.videointelligence.v1.IEntity>} categoryEntities
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.categoryEntities = $util.emptyArray;
    
                        /**
                         * LabelAnnotation segments.
                         * @member {Array.<google.cloud.videointelligence.v1.ILabelSegment>} segments
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.segments = $util.emptyArray;
    
                        /**
                         * LabelAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1.ILabelFrame>} frames
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * LabelAnnotation version.
                         * @member {string} version
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.version = "";
    
                        /**
                         * Creates a new LabelAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILabelAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.LabelAnnotation} LabelAnnotation instance
                         */
                        LabelAnnotation.create = function create(properties) {
                            return new LabelAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified LabelAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1.LabelAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILabelAnnotation} message LabelAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                                $root.google.cloud.videointelligence.v1.Entity.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.categoryEntities != null && message.categoryEntities.length)
                                for (var i = 0; i < message.categoryEntities.length; ++i)
                                    $root.google.cloud.videointelligence.v1.Entity.encode(message.categoryEntities[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1.LabelSegment.encode(message.segments[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1.LabelFrame.encode(message.frames[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.version);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.LabelAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILabelAnnotation} message LabelAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.LabelAnnotation} LabelAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.LabelAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.entity = $root.google.cloud.videointelligence.v1.Entity.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.categoryEntities && message.categoryEntities.length))
                                            message.categoryEntities = [];
                                        message.categoryEntities.push($root.google.cloud.videointelligence.v1.Entity.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1.LabelSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1.LabelFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 5: {
                                        message.version = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.LabelAnnotation} LabelAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entity != null && message.hasOwnProperty("entity")) {
                                var error = $root.google.cloud.videointelligence.v1.Entity.verify(message.entity);
                                if (error)
                                    return "entity." + error;
                            }
                            if (message.categoryEntities != null && message.hasOwnProperty("categoryEntities")) {
                                if (!Array.isArray(message.categoryEntities))
                                    return "categoryEntities: array expected";
                                for (var i = 0; i < message.categoryEntities.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.Entity.verify(message.categoryEntities[i]);
                                    if (error)
                                        return "categoryEntities." + error;
                                }
                            }
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.LabelSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.LabelFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                if (!$util.isString(message.version))
                                    return "version: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.LabelAnnotation} LabelAnnotation
                         */
                        LabelAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.LabelAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.LabelAnnotation();
                            if (object.entity != null) {
                                if (typeof object.entity !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.LabelAnnotation.entity: object expected");
                                message.entity = $root.google.cloud.videointelligence.v1.Entity.fromObject(object.entity);
                            }
                            if (object.categoryEntities) {
                                if (!Array.isArray(object.categoryEntities))
                                    throw TypeError(".google.cloud.videointelligence.v1.LabelAnnotation.categoryEntities: array expected");
                                message.categoryEntities = [];
                                for (var i = 0; i < object.categoryEntities.length; ++i) {
                                    if (typeof object.categoryEntities[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.LabelAnnotation.categoryEntities: object expected");
                                    message.categoryEntities[i] = $root.google.cloud.videointelligence.v1.Entity.fromObject(object.categoryEntities[i]);
                                }
                            }
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1.LabelAnnotation.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.LabelAnnotation.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1.LabelSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1.LabelAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.LabelAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1.LabelFrame.fromObject(object.frames[i]);
                                }
                            }
                            if (object.version != null)
                                message.version = String(object.version);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.LabelAnnotation} message LabelAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.categoryEntities = [];
                                object.segments = [];
                                object.frames = [];
                            }
                            if (options.defaults) {
                                object.entity = null;
                                object.version = "";
                            }
                            if (message.entity != null && message.hasOwnProperty("entity"))
                                object.entity = $root.google.cloud.videointelligence.v1.Entity.toObject(message.entity, options);
                            if (message.categoryEntities && message.categoryEntities.length) {
                                object.categoryEntities = [];
                                for (var j = 0; j < message.categoryEntities.length; ++j)
                                    object.categoryEntities[j] = $root.google.cloud.videointelligence.v1.Entity.toObject(message.categoryEntities[j], options);
                            }
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1.LabelSegment.toObject(message.segments[j], options);
                            }
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1.LabelFrame.toObject(message.frames[j], options);
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                object.version = message.version;
                            return object;
                        };
    
                        /**
                         * Converts this LabelAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.LabelAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.LabelAnnotation";
                        };
    
                        return LabelAnnotation;
                    })();
    
                    v1.ExplicitContentFrame = (function() {
    
                        /**
                         * Properties of an ExplicitContentFrame.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IExplicitContentFrame
                         * @property {google.protobuf.IDuration|null} [timeOffset] ExplicitContentFrame timeOffset
                         * @property {google.cloud.videointelligence.v1.Likelihood|null} [pornographyLikelihood] ExplicitContentFrame pornographyLikelihood
                         */
    
                        /**
                         * Constructs a new ExplicitContentFrame.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents an ExplicitContentFrame.
                         * @implements IExplicitContentFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IExplicitContentFrame=} [properties] Properties to set
                         */
                        function ExplicitContentFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentFrame
                         * @instance
                         */
                        ExplicitContentFrame.prototype.timeOffset = null;
    
                        /**
                         * ExplicitContentFrame pornographyLikelihood.
                         * @member {google.cloud.videointelligence.v1.Likelihood} pornographyLikelihood
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentFrame
                         * @instance
                         */
                        ExplicitContentFrame.prototype.pornographyLikelihood = 0;
    
                        /**
                         * Creates a new ExplicitContentFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.IExplicitContentFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.ExplicitContentFrame} ExplicitContentFrame instance
                         */
                        ExplicitContentFrame.create = function create(properties) {
                            return new ExplicitContentFrame(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentFrame message. Does not implicitly {@link google.cloud.videointelligence.v1.ExplicitContentFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.IExplicitContentFrame} message ExplicitContentFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.pornographyLikelihood != null && Object.hasOwnProperty.call(message, "pornographyLikelihood"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pornographyLikelihood);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.ExplicitContentFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.IExplicitContentFrame} message ExplicitContentFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.ExplicitContentFrame} ExplicitContentFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.ExplicitContentFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.pornographyLikelihood = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.ExplicitContentFrame} ExplicitContentFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            if (message.pornographyLikelihood != null && message.hasOwnProperty("pornographyLikelihood"))
                                switch (message.pornographyLikelihood) {
                                default:
                                    return "pornographyLikelihood: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.ExplicitContentFrame} ExplicitContentFrame
                         */
                        ExplicitContentFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.ExplicitContentFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.ExplicitContentFrame();
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.ExplicitContentFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            switch (object.pornographyLikelihood) {
                            default:
                                if (typeof object.pornographyLikelihood === "number") {
                                    message.pornographyLikelihood = object.pornographyLikelihood;
                                    break;
                                }
                                break;
                            case "LIKELIHOOD_UNSPECIFIED":
                            case 0:
                                message.pornographyLikelihood = 0;
                                break;
                            case "VERY_UNLIKELY":
                            case 1:
                                message.pornographyLikelihood = 1;
                                break;
                            case "UNLIKELY":
                            case 2:
                                message.pornographyLikelihood = 2;
                                break;
                            case "POSSIBLE":
                            case 3:
                                message.pornographyLikelihood = 3;
                                break;
                            case "LIKELY":
                            case 4:
                                message.pornographyLikelihood = 4;
                                break;
                            case "VERY_LIKELY":
                            case 5:
                                message.pornographyLikelihood = 5;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.ExplicitContentFrame} message ExplicitContentFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.timeOffset = null;
                                object.pornographyLikelihood = options.enums === String ? "LIKELIHOOD_UNSPECIFIED" : 0;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            if (message.pornographyLikelihood != null && message.hasOwnProperty("pornographyLikelihood"))
                                object.pornographyLikelihood = options.enums === String ? $root.google.cloud.videointelligence.v1.Likelihood[message.pornographyLikelihood] === undefined ? message.pornographyLikelihood : $root.google.cloud.videointelligence.v1.Likelihood[message.pornographyLikelihood] : message.pornographyLikelihood;
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.ExplicitContentFrame";
                        };
    
                        return ExplicitContentFrame;
                    })();
    
                    v1.ExplicitContentAnnotation = (function() {
    
                        /**
                         * Properties of an ExplicitContentAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IExplicitContentAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1.IExplicitContentFrame>|null} [frames] ExplicitContentAnnotation frames
                         * @property {string|null} [version] ExplicitContentAnnotation version
                         */
    
                        /**
                         * Constructs a new ExplicitContentAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents an ExplicitContentAnnotation.
                         * @implements IExplicitContentAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IExplicitContentAnnotation=} [properties] Properties to set
                         */
                        function ExplicitContentAnnotation(properties) {
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1.IExplicitContentFrame>} frames
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentAnnotation
                         * @instance
                         */
                        ExplicitContentAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * ExplicitContentAnnotation version.
                         * @member {string} version
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentAnnotation
                         * @instance
                         */
                        ExplicitContentAnnotation.prototype.version = "";
    
                        /**
                         * Creates a new ExplicitContentAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IExplicitContentAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.ExplicitContentAnnotation} ExplicitContentAnnotation instance
                         */
                        ExplicitContentAnnotation.create = function create(properties) {
                            return new ExplicitContentAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1.ExplicitContentAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IExplicitContentAnnotation} message ExplicitContentAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1.ExplicitContentFrame.encode(message.frames[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.ExplicitContentAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IExplicitContentAnnotation} message ExplicitContentAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.ExplicitContentAnnotation} ExplicitContentAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.ExplicitContentAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1.ExplicitContentFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.version = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.ExplicitContentAnnotation} ExplicitContentAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.ExplicitContentFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                if (!$util.isString(message.version))
                                    return "version: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.ExplicitContentAnnotation} ExplicitContentAnnotation
                         */
                        ExplicitContentAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.ExplicitContentAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.ExplicitContentAnnotation();
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1.ExplicitContentAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.ExplicitContentAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1.ExplicitContentFrame.fromObject(object.frames[i]);
                                }
                            }
                            if (object.version != null)
                                message.version = String(object.version);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.ExplicitContentAnnotation} message ExplicitContentAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.frames = [];
                            if (options.defaults)
                                object.version = "";
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1.ExplicitContentFrame.toObject(message.frames[j], options);
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                object.version = message.version;
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.ExplicitContentAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.ExplicitContentAnnotation";
                        };
    
                        return ExplicitContentAnnotation;
                    })();
    
                    v1.NormalizedBoundingBox = (function() {
    
                        /**
                         * Properties of a NormalizedBoundingBox.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface INormalizedBoundingBox
                         * @property {number|null} [left] NormalizedBoundingBox left
                         * @property {number|null} [top] NormalizedBoundingBox top
                         * @property {number|null} [right] NormalizedBoundingBox right
                         * @property {number|null} [bottom] NormalizedBoundingBox bottom
                         */
    
                        /**
                         * Constructs a new NormalizedBoundingBox.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a NormalizedBoundingBox.
                         * @implements INormalizedBoundingBox
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.INormalizedBoundingBox=} [properties] Properties to set
                         */
                        function NormalizedBoundingBox(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * NormalizedBoundingBox left.
                         * @member {number} left
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.left = 0;
    
                        /**
                         * NormalizedBoundingBox top.
                         * @member {number} top
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.top = 0;
    
                        /**
                         * NormalizedBoundingBox right.
                         * @member {number} right
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.right = 0;
    
                        /**
                         * NormalizedBoundingBox bottom.
                         * @member {number} bottom
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.bottom = 0;
    
                        /**
                         * Creates a new NormalizedBoundingBox instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1.INormalizedBoundingBox=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.NormalizedBoundingBox} NormalizedBoundingBox instance
                         */
                        NormalizedBoundingBox.create = function create(properties) {
                            return new NormalizedBoundingBox(properties);
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingBox message. Does not implicitly {@link google.cloud.videointelligence.v1.NormalizedBoundingBox.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1.INormalizedBoundingBox} message NormalizedBoundingBox message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingBox.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.left != null && Object.hasOwnProperty.call(message, "left"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.left);
                            if (message.top != null && Object.hasOwnProperty.call(message, "top"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.top);
                            if (message.right != null && Object.hasOwnProperty.call(message, "right"))
                                writer.uint32(/* id 3, wireType 5 =*/29).float(message.right);
                            if (message.bottom != null && Object.hasOwnProperty.call(message, "bottom"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.bottom);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingBox message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.NormalizedBoundingBox.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1.INormalizedBoundingBox} message NormalizedBoundingBox message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingBox.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a NormalizedBoundingBox message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.NormalizedBoundingBox} NormalizedBoundingBox
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingBox.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.NormalizedBoundingBox();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.left = reader.float();
                                        break;
                                    }
                                case 2: {
                                        message.top = reader.float();
                                        break;
                                    }
                                case 3: {
                                        message.right = reader.float();
                                        break;
                                    }
                                case 4: {
                                        message.bottom = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a NormalizedBoundingBox message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.NormalizedBoundingBox} NormalizedBoundingBox
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingBox.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a NormalizedBoundingBox message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NormalizedBoundingBox.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.left != null && message.hasOwnProperty("left"))
                                if (typeof message.left !== "number")
                                    return "left: number expected";
                            if (message.top != null && message.hasOwnProperty("top"))
                                if (typeof message.top !== "number")
                                    return "top: number expected";
                            if (message.right != null && message.hasOwnProperty("right"))
                                if (typeof message.right !== "number")
                                    return "right: number expected";
                            if (message.bottom != null && message.hasOwnProperty("bottom"))
                                if (typeof message.bottom !== "number")
                                    return "bottom: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a NormalizedBoundingBox message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.NormalizedBoundingBox} NormalizedBoundingBox
                         */
                        NormalizedBoundingBox.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.NormalizedBoundingBox)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.NormalizedBoundingBox();
                            if (object.left != null)
                                message.left = Number(object.left);
                            if (object.top != null)
                                message.top = Number(object.top);
                            if (object.right != null)
                                message.right = Number(object.right);
                            if (object.bottom != null)
                                message.bottom = Number(object.bottom);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a NormalizedBoundingBox message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1.NormalizedBoundingBox} message NormalizedBoundingBox
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NormalizedBoundingBox.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.left = 0;
                                object.top = 0;
                                object.right = 0;
                                object.bottom = 0;
                            }
                            if (message.left != null && message.hasOwnProperty("left"))
                                object.left = options.json && !isFinite(message.left) ? String(message.left) : message.left;
                            if (message.top != null && message.hasOwnProperty("top"))
                                object.top = options.json && !isFinite(message.top) ? String(message.top) : message.top;
                            if (message.right != null && message.hasOwnProperty("right"))
                                object.right = options.json && !isFinite(message.right) ? String(message.right) : message.right;
                            if (message.bottom != null && message.hasOwnProperty("bottom"))
                                object.bottom = options.json && !isFinite(message.bottom) ? String(message.bottom) : message.bottom;
                            return object;
                        };
    
                        /**
                         * Converts this NormalizedBoundingBox to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NormalizedBoundingBox.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for NormalizedBoundingBox
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingBox
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        NormalizedBoundingBox.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.NormalizedBoundingBox";
                        };
    
                        return NormalizedBoundingBox;
                    })();
    
                    v1.FaceDetectionAnnotation = (function() {
    
                        /**
                         * Properties of a FaceDetectionAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IFaceDetectionAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1.ITrack>|null} [tracks] FaceDetectionAnnotation tracks
                         * @property {Uint8Array|null} [thumbnail] FaceDetectionAnnotation thumbnail
                         * @property {string|null} [version] FaceDetectionAnnotation version
                         */
    
                        /**
                         * Constructs a new FaceDetectionAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a FaceDetectionAnnotation.
                         * @implements IFaceDetectionAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IFaceDetectionAnnotation=} [properties] Properties to set
                         */
                        function FaceDetectionAnnotation(properties) {
                            this.tracks = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FaceDetectionAnnotation tracks.
                         * @member {Array.<google.cloud.videointelligence.v1.ITrack>} tracks
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @instance
                         */
                        FaceDetectionAnnotation.prototype.tracks = $util.emptyArray;
    
                        /**
                         * FaceDetectionAnnotation thumbnail.
                         * @member {Uint8Array} thumbnail
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @instance
                         */
                        FaceDetectionAnnotation.prototype.thumbnail = $util.newBuffer([]);
    
                        /**
                         * FaceDetectionAnnotation version.
                         * @member {string} version
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @instance
                         */
                        FaceDetectionAnnotation.prototype.version = "";
    
                        /**
                         * Creates a new FaceDetectionAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceDetectionAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.FaceDetectionAnnotation} FaceDetectionAnnotation instance
                         */
                        FaceDetectionAnnotation.create = function create(properties) {
                            return new FaceDetectionAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified FaceDetectionAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1.FaceDetectionAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceDetectionAnnotation} message FaceDetectionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceDetectionAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tracks != null && message.tracks.length)
                                for (var i = 0; i < message.tracks.length; ++i)
                                    $root.google.cloud.videointelligence.v1.Track.encode(message.tracks[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.thumbnail != null && Object.hasOwnProperty.call(message, "thumbnail"))
                                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.thumbnail);
                            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.version);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FaceDetectionAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.FaceDetectionAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceDetectionAnnotation} message FaceDetectionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceDetectionAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FaceDetectionAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.FaceDetectionAnnotation} FaceDetectionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceDetectionAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.FaceDetectionAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 3: {
                                        if (!(message.tracks && message.tracks.length))
                                            message.tracks = [];
                                        message.tracks.push($root.google.cloud.videointelligence.v1.Track.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        message.thumbnail = reader.bytes();
                                        break;
                                    }
                                case 5: {
                                        message.version = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FaceDetectionAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.FaceDetectionAnnotation} FaceDetectionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceDetectionAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FaceDetectionAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FaceDetectionAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tracks != null && message.hasOwnProperty("tracks")) {
                                if (!Array.isArray(message.tracks))
                                    return "tracks: array expected";
                                for (var i = 0; i < message.tracks.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.Track.verify(message.tracks[i]);
                                    if (error)
                                        return "tracks." + error;
                                }
                            }
                            if (message.thumbnail != null && message.hasOwnProperty("thumbnail"))
                                if (!(message.thumbnail && typeof message.thumbnail.length === "number" || $util.isString(message.thumbnail)))
                                    return "thumbnail: buffer expected";
                            if (message.version != null && message.hasOwnProperty("version"))
                                if (!$util.isString(message.version))
                                    return "version: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a FaceDetectionAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.FaceDetectionAnnotation} FaceDetectionAnnotation
                         */
                        FaceDetectionAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.FaceDetectionAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.FaceDetectionAnnotation();
                            if (object.tracks) {
                                if (!Array.isArray(object.tracks))
                                    throw TypeError(".google.cloud.videointelligence.v1.FaceDetectionAnnotation.tracks: array expected");
                                message.tracks = [];
                                for (var i = 0; i < object.tracks.length; ++i) {
                                    if (typeof object.tracks[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.FaceDetectionAnnotation.tracks: object expected");
                                    message.tracks[i] = $root.google.cloud.videointelligence.v1.Track.fromObject(object.tracks[i]);
                                }
                            }
                            if (object.thumbnail != null)
                                if (typeof object.thumbnail === "string")
                                    $util.base64.decode(object.thumbnail, message.thumbnail = $util.newBuffer($util.base64.length(object.thumbnail)), 0);
                                else if (object.thumbnail.length >= 0)
                                    message.thumbnail = object.thumbnail;
                            if (object.version != null)
                                message.version = String(object.version);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FaceDetectionAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.FaceDetectionAnnotation} message FaceDetectionAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FaceDetectionAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.tracks = [];
                            if (options.defaults) {
                                if (options.bytes === String)
                                    object.thumbnail = "";
                                else {
                                    object.thumbnail = [];
                                    if (options.bytes !== Array)
                                        object.thumbnail = $util.newBuffer(object.thumbnail);
                                }
                                object.version = "";
                            }
                            if (message.tracks && message.tracks.length) {
                                object.tracks = [];
                                for (var j = 0; j < message.tracks.length; ++j)
                                    object.tracks[j] = $root.google.cloud.videointelligence.v1.Track.toObject(message.tracks[j], options);
                            }
                            if (message.thumbnail != null && message.hasOwnProperty("thumbnail"))
                                object.thumbnail = options.bytes === String ? $util.base64.encode(message.thumbnail, 0, message.thumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnail) : message.thumbnail;
                            if (message.version != null && message.hasOwnProperty("version"))
                                object.version = message.version;
                            return object;
                        };
    
                        /**
                         * Converts this FaceDetectionAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FaceDetectionAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FaceDetectionAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.FaceDetectionAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FaceDetectionAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.FaceDetectionAnnotation";
                        };
    
                        return FaceDetectionAnnotation;
                    })();
    
                    v1.PersonDetectionAnnotation = (function() {
    
                        /**
                         * Properties of a PersonDetectionAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IPersonDetectionAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1.ITrack>|null} [tracks] PersonDetectionAnnotation tracks
                         * @property {string|null} [version] PersonDetectionAnnotation version
                         */
    
                        /**
                         * Constructs a new PersonDetectionAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a PersonDetectionAnnotation.
                         * @implements IPersonDetectionAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IPersonDetectionAnnotation=} [properties] Properties to set
                         */
                        function PersonDetectionAnnotation(properties) {
                            this.tracks = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PersonDetectionAnnotation tracks.
                         * @member {Array.<google.cloud.videointelligence.v1.ITrack>} tracks
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionAnnotation
                         * @instance
                         */
                        PersonDetectionAnnotation.prototype.tracks = $util.emptyArray;
    
                        /**
                         * PersonDetectionAnnotation version.
                         * @member {string} version
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionAnnotation
                         * @instance
                         */
                        PersonDetectionAnnotation.prototype.version = "";
    
                        /**
                         * Creates a new PersonDetectionAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IPersonDetectionAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.PersonDetectionAnnotation} PersonDetectionAnnotation instance
                         */
                        PersonDetectionAnnotation.create = function create(properties) {
                            return new PersonDetectionAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified PersonDetectionAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1.PersonDetectionAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IPersonDetectionAnnotation} message PersonDetectionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PersonDetectionAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tracks != null && message.tracks.length)
                                for (var i = 0; i < message.tracks.length; ++i)
                                    $root.google.cloud.videointelligence.v1.Track.encode(message.tracks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PersonDetectionAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.PersonDetectionAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IPersonDetectionAnnotation} message PersonDetectionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PersonDetectionAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PersonDetectionAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.PersonDetectionAnnotation} PersonDetectionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PersonDetectionAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.PersonDetectionAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.tracks && message.tracks.length))
                                            message.tracks = [];
                                        message.tracks.push($root.google.cloud.videointelligence.v1.Track.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.version = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PersonDetectionAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.PersonDetectionAnnotation} PersonDetectionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PersonDetectionAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PersonDetectionAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PersonDetectionAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tracks != null && message.hasOwnProperty("tracks")) {
                                if (!Array.isArray(message.tracks))
                                    return "tracks: array expected";
                                for (var i = 0; i < message.tracks.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.Track.verify(message.tracks[i]);
                                    if (error)
                                        return "tracks." + error;
                                }
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                if (!$util.isString(message.version))
                                    return "version: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a PersonDetectionAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.PersonDetectionAnnotation} PersonDetectionAnnotation
                         */
                        PersonDetectionAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.PersonDetectionAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.PersonDetectionAnnotation();
                            if (object.tracks) {
                                if (!Array.isArray(object.tracks))
                                    throw TypeError(".google.cloud.videointelligence.v1.PersonDetectionAnnotation.tracks: array expected");
                                message.tracks = [];
                                for (var i = 0; i < object.tracks.length; ++i) {
                                    if (typeof object.tracks[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.PersonDetectionAnnotation.tracks: object expected");
                                    message.tracks[i] = $root.google.cloud.videointelligence.v1.Track.fromObject(object.tracks[i]);
                                }
                            }
                            if (object.version != null)
                                message.version = String(object.version);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PersonDetectionAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.PersonDetectionAnnotation} message PersonDetectionAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PersonDetectionAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.tracks = [];
                            if (options.defaults)
                                object.version = "";
                            if (message.tracks && message.tracks.length) {
                                object.tracks = [];
                                for (var j = 0; j < message.tracks.length; ++j)
                                    object.tracks[j] = $root.google.cloud.videointelligence.v1.Track.toObject(message.tracks[j], options);
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                object.version = message.version;
                            return object;
                        };
    
                        /**
                         * Converts this PersonDetectionAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PersonDetectionAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for PersonDetectionAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.PersonDetectionAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PersonDetectionAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.PersonDetectionAnnotation";
                        };
    
                        return PersonDetectionAnnotation;
                    })();
    
                    v1.FaceSegment = (function() {
    
                        /**
                         * Properties of a FaceSegment.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IFaceSegment
                         * @property {google.cloud.videointelligence.v1.IVideoSegment|null} [segment] FaceSegment segment
                         */
    
                        /**
                         * Constructs a new FaceSegment.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a FaceSegment.
                         * @implements IFaceSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IFaceSegment=} [properties] Properties to set
                         */
                        function FaceSegment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FaceSegment segment.
                         * @member {google.cloud.videointelligence.v1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1.FaceSegment
                         * @instance
                         */
                        FaceSegment.prototype.segment = null;
    
                        /**
                         * Creates a new FaceSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.FaceSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.FaceSegment} FaceSegment instance
                         */
                        FaceSegment.create = function create(properties) {
                            return new FaceSegment(properties);
                        };
    
                        /**
                         * Encodes the specified FaceSegment message. Does not implicitly {@link google.cloud.videointelligence.v1.FaceSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.FaceSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceSegment} message FaceSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1.VideoSegment.encode(message.segment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FaceSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.FaceSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.FaceSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceSegment} message FaceSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FaceSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.FaceSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.FaceSegment} FaceSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.FaceSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FaceSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.FaceSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.FaceSegment} FaceSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FaceSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.FaceSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FaceSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a FaceSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.FaceSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.FaceSegment} FaceSegment
                         */
                        FaceSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.FaceSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.FaceSegment();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.FaceSegment.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.fromObject(object.segment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FaceSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.FaceSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.FaceSegment} message FaceSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FaceSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.segment = null;
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1.VideoSegment.toObject(message.segment, options);
                            return object;
                        };
    
                        /**
                         * Converts this FaceSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.FaceSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FaceSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FaceSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.FaceSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FaceSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.FaceSegment";
                        };
    
                        return FaceSegment;
                    })();
    
                    v1.FaceFrame = (function() {
    
                        /**
                         * Properties of a FaceFrame.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IFaceFrame
                         * @property {Array.<google.cloud.videointelligence.v1.INormalizedBoundingBox>|null} [normalizedBoundingBoxes] FaceFrame normalizedBoundingBoxes
                         * @property {google.protobuf.IDuration|null} [timeOffset] FaceFrame timeOffset
                         */
    
                        /**
                         * Constructs a new FaceFrame.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a FaceFrame.
                         * @implements IFaceFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IFaceFrame=} [properties] Properties to set
                         */
                        function FaceFrame(properties) {
                            this.normalizedBoundingBoxes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FaceFrame normalizedBoundingBoxes.
                         * @member {Array.<google.cloud.videointelligence.v1.INormalizedBoundingBox>} normalizedBoundingBoxes
                         * @memberof google.cloud.videointelligence.v1.FaceFrame
                         * @instance
                         */
                        FaceFrame.prototype.normalizedBoundingBoxes = $util.emptyArray;
    
                        /**
                         * FaceFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1.FaceFrame
                         * @instance
                         */
                        FaceFrame.prototype.timeOffset = null;
    
                        /**
                         * Creates a new FaceFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.FaceFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.FaceFrame} FaceFrame instance
                         */
                        FaceFrame.create = function create(properties) {
                            return new FaceFrame(properties);
                        };
    
                        /**
                         * Encodes the specified FaceFrame message. Does not implicitly {@link google.cloud.videointelligence.v1.FaceFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.FaceFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceFrame} message FaceFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.normalizedBoundingBoxes != null && message.normalizedBoundingBoxes.length)
                                for (var i = 0; i < message.normalizedBoundingBoxes.length; ++i)
                                    $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.encode(message.normalizedBoundingBoxes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FaceFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.FaceFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.FaceFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceFrame} message FaceFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FaceFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.FaceFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.FaceFrame} FaceFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.FaceFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.normalizedBoundingBoxes && message.normalizedBoundingBoxes.length))
                                            message.normalizedBoundingBoxes = [];
                                        message.normalizedBoundingBoxes.push($root.google.cloud.videointelligence.v1.NormalizedBoundingBox.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FaceFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.FaceFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.FaceFrame} FaceFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FaceFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.FaceFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FaceFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.normalizedBoundingBoxes != null && message.hasOwnProperty("normalizedBoundingBoxes")) {
                                if (!Array.isArray(message.normalizedBoundingBoxes))
                                    return "normalizedBoundingBoxes: array expected";
                                for (var i = 0; i < message.normalizedBoundingBoxes.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.verify(message.normalizedBoundingBoxes[i]);
                                    if (error)
                                        return "normalizedBoundingBoxes." + error;
                                }
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a FaceFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.FaceFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.FaceFrame} FaceFrame
                         */
                        FaceFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.FaceFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.FaceFrame();
                            if (object.normalizedBoundingBoxes) {
                                if (!Array.isArray(object.normalizedBoundingBoxes))
                                    throw TypeError(".google.cloud.videointelligence.v1.FaceFrame.normalizedBoundingBoxes: array expected");
                                message.normalizedBoundingBoxes = [];
                                for (var i = 0; i < object.normalizedBoundingBoxes.length; ++i) {
                                    if (typeof object.normalizedBoundingBoxes[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.FaceFrame.normalizedBoundingBoxes: object expected");
                                    message.normalizedBoundingBoxes[i] = $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.fromObject(object.normalizedBoundingBoxes[i]);
                                }
                            }
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.FaceFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FaceFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.FaceFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.FaceFrame} message FaceFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FaceFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.normalizedBoundingBoxes = [];
                            if (options.defaults)
                                object.timeOffset = null;
                            if (message.normalizedBoundingBoxes && message.normalizedBoundingBoxes.length) {
                                object.normalizedBoundingBoxes = [];
                                for (var j = 0; j < message.normalizedBoundingBoxes.length; ++j)
                                    object.normalizedBoundingBoxes[j] = $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.toObject(message.normalizedBoundingBoxes[j], options);
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this FaceFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.FaceFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FaceFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FaceFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.FaceFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FaceFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.FaceFrame";
                        };
    
                        return FaceFrame;
                    })();
    
                    v1.FaceAnnotation = (function() {
    
                        /**
                         * Properties of a FaceAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IFaceAnnotation
                         * @property {Uint8Array|null} [thumbnail] FaceAnnotation thumbnail
                         * @property {Array.<google.cloud.videointelligence.v1.IFaceSegment>|null} [segments] FaceAnnotation segments
                         * @property {Array.<google.cloud.videointelligence.v1.IFaceFrame>|null} [frames] FaceAnnotation frames
                         */
    
                        /**
                         * Constructs a new FaceAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a FaceAnnotation.
                         * @implements IFaceAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IFaceAnnotation=} [properties] Properties to set
                         */
                        function FaceAnnotation(properties) {
                            this.segments = [];
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FaceAnnotation thumbnail.
                         * @member {Uint8Array} thumbnail
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @instance
                         */
                        FaceAnnotation.prototype.thumbnail = $util.newBuffer([]);
    
                        /**
                         * FaceAnnotation segments.
                         * @member {Array.<google.cloud.videointelligence.v1.IFaceSegment>} segments
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @instance
                         */
                        FaceAnnotation.prototype.segments = $util.emptyArray;
    
                        /**
                         * FaceAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1.IFaceFrame>} frames
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @instance
                         */
                        FaceAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new FaceAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.FaceAnnotation} FaceAnnotation instance
                         */
                        FaceAnnotation.create = function create(properties) {
                            return new FaceAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified FaceAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1.FaceAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceAnnotation} message FaceAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.thumbnail != null && Object.hasOwnProperty.call(message, "thumbnail"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.thumbnail);
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1.FaceSegment.encode(message.segments[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1.FaceFrame.encode(message.frames[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FaceAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.FaceAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IFaceAnnotation} message FaceAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FaceAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.FaceAnnotation} FaceAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.FaceAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.thumbnail = reader.bytes();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1.FaceSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1.FaceFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FaceAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.FaceAnnotation} FaceAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FaceAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FaceAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.thumbnail != null && message.hasOwnProperty("thumbnail"))
                                if (!(message.thumbnail && typeof message.thumbnail.length === "number" || $util.isString(message.thumbnail)))
                                    return "thumbnail: buffer expected";
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.FaceSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.FaceFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a FaceAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.FaceAnnotation} FaceAnnotation
                         */
                        FaceAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.FaceAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.FaceAnnotation();
                            if (object.thumbnail != null)
                                if (typeof object.thumbnail === "string")
                                    $util.base64.decode(object.thumbnail, message.thumbnail = $util.newBuffer($util.base64.length(object.thumbnail)), 0);
                                else if (object.thumbnail.length >= 0)
                                    message.thumbnail = object.thumbnail;
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1.FaceAnnotation.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.FaceAnnotation.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1.FaceSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1.FaceAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.FaceAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1.FaceFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FaceAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.FaceAnnotation} message FaceAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FaceAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.segments = [];
                                object.frames = [];
                            }
                            if (options.defaults)
                                if (options.bytes === String)
                                    object.thumbnail = "";
                                else {
                                    object.thumbnail = [];
                                    if (options.bytes !== Array)
                                        object.thumbnail = $util.newBuffer(object.thumbnail);
                                }
                            if (message.thumbnail != null && message.hasOwnProperty("thumbnail"))
                                object.thumbnail = options.bytes === String ? $util.base64.encode(message.thumbnail, 0, message.thumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnail) : message.thumbnail;
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1.FaceSegment.toObject(message.segments[j], options);
                            }
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1.FaceFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this FaceAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FaceAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FaceAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.FaceAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FaceAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.FaceAnnotation";
                        };
    
                        return FaceAnnotation;
                    })();
    
                    v1.TimestampedObject = (function() {
    
                        /**
                         * Properties of a TimestampedObject.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ITimestampedObject
                         * @property {google.cloud.videointelligence.v1.INormalizedBoundingBox|null} [normalizedBoundingBox] TimestampedObject normalizedBoundingBox
                         * @property {google.protobuf.IDuration|null} [timeOffset] TimestampedObject timeOffset
                         * @property {Array.<google.cloud.videointelligence.v1.IDetectedAttribute>|null} [attributes] TimestampedObject attributes
                         * @property {Array.<google.cloud.videointelligence.v1.IDetectedLandmark>|null} [landmarks] TimestampedObject landmarks
                         */
    
                        /**
                         * Constructs a new TimestampedObject.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a TimestampedObject.
                         * @implements ITimestampedObject
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ITimestampedObject=} [properties] Properties to set
                         */
                        function TimestampedObject(properties) {
                            this.attributes = [];
                            this.landmarks = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TimestampedObject normalizedBoundingBox.
                         * @member {google.cloud.videointelligence.v1.INormalizedBoundingBox|null|undefined} normalizedBoundingBox
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @instance
                         */
                        TimestampedObject.prototype.normalizedBoundingBox = null;
    
                        /**
                         * TimestampedObject timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @instance
                         */
                        TimestampedObject.prototype.timeOffset = null;
    
                        /**
                         * TimestampedObject attributes.
                         * @member {Array.<google.cloud.videointelligence.v1.IDetectedAttribute>} attributes
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @instance
                         */
                        TimestampedObject.prototype.attributes = $util.emptyArray;
    
                        /**
                         * TimestampedObject landmarks.
                         * @member {Array.<google.cloud.videointelligence.v1.IDetectedLandmark>} landmarks
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @instance
                         */
                        TimestampedObject.prototype.landmarks = $util.emptyArray;
    
                        /**
                         * Creates a new TimestampedObject instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITimestampedObject=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.TimestampedObject} TimestampedObject instance
                         */
                        TimestampedObject.create = function create(properties) {
                            return new TimestampedObject(properties);
                        };
    
                        /**
                         * Encodes the specified TimestampedObject message. Does not implicitly {@link google.cloud.videointelligence.v1.TimestampedObject.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITimestampedObject} message TimestampedObject message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TimestampedObject.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.normalizedBoundingBox != null && Object.hasOwnProperty.call(message, "normalizedBoundingBox"))
                                $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.encode(message.normalizedBoundingBox, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.attributes != null && message.attributes.length)
                                for (var i = 0; i < message.attributes.length; ++i)
                                    $root.google.cloud.videointelligence.v1.DetectedAttribute.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.landmarks != null && message.landmarks.length)
                                for (var i = 0; i < message.landmarks.length; ++i)
                                    $root.google.cloud.videointelligence.v1.DetectedLandmark.encode(message.landmarks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TimestampedObject message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.TimestampedObject.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITimestampedObject} message TimestampedObject message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TimestampedObject.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TimestampedObject message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.TimestampedObject} TimestampedObject
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TimestampedObject.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.TimestampedObject();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.normalizedBoundingBox = $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        if (!(message.attributes && message.attributes.length))
                                            message.attributes = [];
                                        message.attributes.push($root.google.cloud.videointelligence.v1.DetectedAttribute.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (!(message.landmarks && message.landmarks.length))
                                            message.landmarks = [];
                                        message.landmarks.push($root.google.cloud.videointelligence.v1.DetectedLandmark.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TimestampedObject message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.TimestampedObject} TimestampedObject
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TimestampedObject.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TimestampedObject message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TimestampedObject.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.normalizedBoundingBox != null && message.hasOwnProperty("normalizedBoundingBox")) {
                                var error = $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.verify(message.normalizedBoundingBox);
                                if (error)
                                    return "normalizedBoundingBox." + error;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            if (message.attributes != null && message.hasOwnProperty("attributes")) {
                                if (!Array.isArray(message.attributes))
                                    return "attributes: array expected";
                                for (var i = 0; i < message.attributes.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.DetectedAttribute.verify(message.attributes[i]);
                                    if (error)
                                        return "attributes." + error;
                                }
                            }
                            if (message.landmarks != null && message.hasOwnProperty("landmarks")) {
                                if (!Array.isArray(message.landmarks))
                                    return "landmarks: array expected";
                                for (var i = 0; i < message.landmarks.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.DetectedLandmark.verify(message.landmarks[i]);
                                    if (error)
                                        return "landmarks." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TimestampedObject message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.TimestampedObject} TimestampedObject
                         */
                        TimestampedObject.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.TimestampedObject)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.TimestampedObject();
                            if (object.normalizedBoundingBox != null) {
                                if (typeof object.normalizedBoundingBox !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.TimestampedObject.normalizedBoundingBox: object expected");
                                message.normalizedBoundingBox = $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.fromObject(object.normalizedBoundingBox);
                            }
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.TimestampedObject.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            if (object.attributes) {
                                if (!Array.isArray(object.attributes))
                                    throw TypeError(".google.cloud.videointelligence.v1.TimestampedObject.attributes: array expected");
                                message.attributes = [];
                                for (var i = 0; i < object.attributes.length; ++i) {
                                    if (typeof object.attributes[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.TimestampedObject.attributes: object expected");
                                    message.attributes[i] = $root.google.cloud.videointelligence.v1.DetectedAttribute.fromObject(object.attributes[i]);
                                }
                            }
                            if (object.landmarks) {
                                if (!Array.isArray(object.landmarks))
                                    throw TypeError(".google.cloud.videointelligence.v1.TimestampedObject.landmarks: array expected");
                                message.landmarks = [];
                                for (var i = 0; i < object.landmarks.length; ++i) {
                                    if (typeof object.landmarks[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.TimestampedObject.landmarks: object expected");
                                    message.landmarks[i] = $root.google.cloud.videointelligence.v1.DetectedLandmark.fromObject(object.landmarks[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TimestampedObject message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @static
                         * @param {google.cloud.videointelligence.v1.TimestampedObject} message TimestampedObject
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TimestampedObject.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.attributes = [];
                                object.landmarks = [];
                            }
                            if (options.defaults) {
                                object.normalizedBoundingBox = null;
                                object.timeOffset = null;
                            }
                            if (message.normalizedBoundingBox != null && message.hasOwnProperty("normalizedBoundingBox"))
                                object.normalizedBoundingBox = $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.toObject(message.normalizedBoundingBox, options);
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            if (message.attributes && message.attributes.length) {
                                object.attributes = [];
                                for (var j = 0; j < message.attributes.length; ++j)
                                    object.attributes[j] = $root.google.cloud.videointelligence.v1.DetectedAttribute.toObject(message.attributes[j], options);
                            }
                            if (message.landmarks && message.landmarks.length) {
                                object.landmarks = [];
                                for (var j = 0; j < message.landmarks.length; ++j)
                                    object.landmarks[j] = $root.google.cloud.videointelligence.v1.DetectedLandmark.toObject(message.landmarks[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TimestampedObject to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TimestampedObject.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TimestampedObject
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.TimestampedObject
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TimestampedObject.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.TimestampedObject";
                        };
    
                        return TimestampedObject;
                    })();
    
                    v1.Track = (function() {
    
                        /**
                         * Properties of a Track.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ITrack
                         * @property {google.cloud.videointelligence.v1.IVideoSegment|null} [segment] Track segment
                         * @property {Array.<google.cloud.videointelligence.v1.ITimestampedObject>|null} [timestampedObjects] Track timestampedObjects
                         * @property {Array.<google.cloud.videointelligence.v1.IDetectedAttribute>|null} [attributes] Track attributes
                         * @property {number|null} [confidence] Track confidence
                         */
    
                        /**
                         * Constructs a new Track.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a Track.
                         * @implements ITrack
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ITrack=} [properties] Properties to set
                         */
                        function Track(properties) {
                            this.timestampedObjects = [];
                            this.attributes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Track segment.
                         * @member {google.cloud.videointelligence.v1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @instance
                         */
                        Track.prototype.segment = null;
    
                        /**
                         * Track timestampedObjects.
                         * @member {Array.<google.cloud.videointelligence.v1.ITimestampedObject>} timestampedObjects
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @instance
                         */
                        Track.prototype.timestampedObjects = $util.emptyArray;
    
                        /**
                         * Track attributes.
                         * @member {Array.<google.cloud.videointelligence.v1.IDetectedAttribute>} attributes
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @instance
                         */
                        Track.prototype.attributes = $util.emptyArray;
    
                        /**
                         * Track confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @instance
                         */
                        Track.prototype.confidence = 0;
    
                        /**
                         * Creates a new Track instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITrack=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.Track} Track instance
                         */
                        Track.create = function create(properties) {
                            return new Track(properties);
                        };
    
                        /**
                         * Encodes the specified Track message. Does not implicitly {@link google.cloud.videointelligence.v1.Track.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITrack} message Track message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Track.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1.VideoSegment.encode(message.segment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timestampedObjects != null && message.timestampedObjects.length)
                                for (var i = 0; i < message.timestampedObjects.length; ++i)
                                    $root.google.cloud.videointelligence.v1.TimestampedObject.encode(message.timestampedObjects[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.attributes != null && message.attributes.length)
                                for (var i = 0; i < message.attributes.length; ++i)
                                    $root.google.cloud.videointelligence.v1.DetectedAttribute.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Track message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.Track.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITrack} message Track message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Track.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Track message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.Track} Track
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Track.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.Track();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.timestampedObjects && message.timestampedObjects.length))
                                            message.timestampedObjects = [];
                                        message.timestampedObjects.push($root.google.cloud.videointelligence.v1.TimestampedObject.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.attributes && message.attributes.length))
                                            message.attributes = [];
                                        message.attributes.push($root.google.cloud.videointelligence.v1.DetectedAttribute.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Track message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.Track} Track
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Track.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Track message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Track.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            if (message.timestampedObjects != null && message.hasOwnProperty("timestampedObjects")) {
                                if (!Array.isArray(message.timestampedObjects))
                                    return "timestampedObjects: array expected";
                                for (var i = 0; i < message.timestampedObjects.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.TimestampedObject.verify(message.timestampedObjects[i]);
                                    if (error)
                                        return "timestampedObjects." + error;
                                }
                            }
                            if (message.attributes != null && message.hasOwnProperty("attributes")) {
                                if (!Array.isArray(message.attributes))
                                    return "attributes: array expected";
                                for (var i = 0; i < message.attributes.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.DetectedAttribute.verify(message.attributes[i]);
                                    if (error)
                                        return "attributes." + error;
                                }
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a Track message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.Track} Track
                         */
                        Track.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.Track)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.Track();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.Track.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.timestampedObjects) {
                                if (!Array.isArray(object.timestampedObjects))
                                    throw TypeError(".google.cloud.videointelligence.v1.Track.timestampedObjects: array expected");
                                message.timestampedObjects = [];
                                for (var i = 0; i < object.timestampedObjects.length; ++i) {
                                    if (typeof object.timestampedObjects[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.Track.timestampedObjects: object expected");
                                    message.timestampedObjects[i] = $root.google.cloud.videointelligence.v1.TimestampedObject.fromObject(object.timestampedObjects[i]);
                                }
                            }
                            if (object.attributes) {
                                if (!Array.isArray(object.attributes))
                                    throw TypeError(".google.cloud.videointelligence.v1.Track.attributes: array expected");
                                message.attributes = [];
                                for (var i = 0; i < object.attributes.length; ++i) {
                                    if (typeof object.attributes[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.Track.attributes: object expected");
                                    message.attributes[i] = $root.google.cloud.videointelligence.v1.DetectedAttribute.fromObject(object.attributes[i]);
                                }
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Track message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @static
                         * @param {google.cloud.videointelligence.v1.Track} message Track
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Track.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.timestampedObjects = [];
                                object.attributes = [];
                            }
                            if (options.defaults) {
                                object.segment = null;
                                object.confidence = 0;
                            }
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1.VideoSegment.toObject(message.segment, options);
                            if (message.timestampedObjects && message.timestampedObjects.length) {
                                object.timestampedObjects = [];
                                for (var j = 0; j < message.timestampedObjects.length; ++j)
                                    object.timestampedObjects[j] = $root.google.cloud.videointelligence.v1.TimestampedObject.toObject(message.timestampedObjects[j], options);
                            }
                            if (message.attributes && message.attributes.length) {
                                object.attributes = [];
                                for (var j = 0; j < message.attributes.length; ++j)
                                    object.attributes[j] = $root.google.cloud.videointelligence.v1.DetectedAttribute.toObject(message.attributes[j], options);
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this Track to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Track.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Track
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.Track
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Track.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.Track";
                        };
    
                        return Track;
                    })();
    
                    v1.DetectedAttribute = (function() {
    
                        /**
                         * Properties of a DetectedAttribute.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IDetectedAttribute
                         * @property {string|null} [name] DetectedAttribute name
                         * @property {number|null} [confidence] DetectedAttribute confidence
                         * @property {string|null} [value] DetectedAttribute value
                         */
    
                        /**
                         * Constructs a new DetectedAttribute.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a DetectedAttribute.
                         * @implements IDetectedAttribute
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IDetectedAttribute=} [properties] Properties to set
                         */
                        function DetectedAttribute(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DetectedAttribute name.
                         * @member {string} name
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @instance
                         */
                        DetectedAttribute.prototype.name = "";
    
                        /**
                         * DetectedAttribute confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @instance
                         */
                        DetectedAttribute.prototype.confidence = 0;
    
                        /**
                         * DetectedAttribute value.
                         * @member {string} value
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @instance
                         */
                        DetectedAttribute.prototype.value = "";
    
                        /**
                         * Creates a new DetectedAttribute instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @static
                         * @param {google.cloud.videointelligence.v1.IDetectedAttribute=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.DetectedAttribute} DetectedAttribute instance
                         */
                        DetectedAttribute.create = function create(properties) {
                            return new DetectedAttribute(properties);
                        };
    
                        /**
                         * Encodes the specified DetectedAttribute message. Does not implicitly {@link google.cloud.videointelligence.v1.DetectedAttribute.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @static
                         * @param {google.cloud.videointelligence.v1.IDetectedAttribute} message DetectedAttribute message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DetectedAttribute.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.value);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DetectedAttribute message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.DetectedAttribute.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @static
                         * @param {google.cloud.videointelligence.v1.IDetectedAttribute} message DetectedAttribute message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DetectedAttribute.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DetectedAttribute message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.DetectedAttribute} DetectedAttribute
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DetectedAttribute.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.DetectedAttribute();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 3: {
                                        message.value = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DetectedAttribute message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.DetectedAttribute} DetectedAttribute
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DetectedAttribute.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DetectedAttribute message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DetectedAttribute.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isString(message.value))
                                    return "value: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DetectedAttribute message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.DetectedAttribute} DetectedAttribute
                         */
                        DetectedAttribute.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.DetectedAttribute)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.DetectedAttribute();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.value != null)
                                message.value = String(object.value);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DetectedAttribute message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @static
                         * @param {google.cloud.videointelligence.v1.DetectedAttribute} message DetectedAttribute
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DetectedAttribute.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.confidence = 0;
                                object.value = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };
    
                        /**
                         * Converts this DetectedAttribute to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DetectedAttribute.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for DetectedAttribute
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.DetectedAttribute
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DetectedAttribute.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.DetectedAttribute";
                        };
    
                        return DetectedAttribute;
                    })();
    
                    v1.DetectedLandmark = (function() {
    
                        /**
                         * Properties of a DetectedLandmark.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IDetectedLandmark
                         * @property {string|null} [name] DetectedLandmark name
                         * @property {google.cloud.videointelligence.v1.INormalizedVertex|null} [point] DetectedLandmark point
                         * @property {number|null} [confidence] DetectedLandmark confidence
                         */
    
                        /**
                         * Constructs a new DetectedLandmark.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a DetectedLandmark.
                         * @implements IDetectedLandmark
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IDetectedLandmark=} [properties] Properties to set
                         */
                        function DetectedLandmark(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DetectedLandmark name.
                         * @member {string} name
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @instance
                         */
                        DetectedLandmark.prototype.name = "";
    
                        /**
                         * DetectedLandmark point.
                         * @member {google.cloud.videointelligence.v1.INormalizedVertex|null|undefined} point
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @instance
                         */
                        DetectedLandmark.prototype.point = null;
    
                        /**
                         * DetectedLandmark confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @instance
                         */
                        DetectedLandmark.prototype.confidence = 0;
    
                        /**
                         * Creates a new DetectedLandmark instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @static
                         * @param {google.cloud.videointelligence.v1.IDetectedLandmark=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.DetectedLandmark} DetectedLandmark instance
                         */
                        DetectedLandmark.create = function create(properties) {
                            return new DetectedLandmark(properties);
                        };
    
                        /**
                         * Encodes the specified DetectedLandmark message. Does not implicitly {@link google.cloud.videointelligence.v1.DetectedLandmark.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @static
                         * @param {google.cloud.videointelligence.v1.IDetectedLandmark} message DetectedLandmark message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DetectedLandmark.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.point != null && Object.hasOwnProperty.call(message, "point"))
                                $root.google.cloud.videointelligence.v1.NormalizedVertex.encode(message.point, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 3, wireType 5 =*/29).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DetectedLandmark message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.DetectedLandmark.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @static
                         * @param {google.cloud.videointelligence.v1.IDetectedLandmark} message DetectedLandmark message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DetectedLandmark.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DetectedLandmark message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.DetectedLandmark} DetectedLandmark
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DetectedLandmark.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.DetectedLandmark();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.point = $root.google.cloud.videointelligence.v1.NormalizedVertex.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DetectedLandmark message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.DetectedLandmark} DetectedLandmark
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DetectedLandmark.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DetectedLandmark message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DetectedLandmark.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.point != null && message.hasOwnProperty("point")) {
                                var error = $root.google.cloud.videointelligence.v1.NormalizedVertex.verify(message.point);
                                if (error)
                                    return "point." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a DetectedLandmark message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.DetectedLandmark} DetectedLandmark
                         */
                        DetectedLandmark.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.DetectedLandmark)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.DetectedLandmark();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.point != null) {
                                if (typeof object.point !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.DetectedLandmark.point: object expected");
                                message.point = $root.google.cloud.videointelligence.v1.NormalizedVertex.fromObject(object.point);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DetectedLandmark message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @static
                         * @param {google.cloud.videointelligence.v1.DetectedLandmark} message DetectedLandmark
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DetectedLandmark.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.point = null;
                                object.confidence = 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.point != null && message.hasOwnProperty("point"))
                                object.point = $root.google.cloud.videointelligence.v1.NormalizedVertex.toObject(message.point, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this DetectedLandmark to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DetectedLandmark.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for DetectedLandmark
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.DetectedLandmark
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DetectedLandmark.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.DetectedLandmark";
                        };
    
                        return DetectedLandmark;
                    })();
    
                    v1.VideoAnnotationResults = (function() {
    
                        /**
                         * Properties of a VideoAnnotationResults.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IVideoAnnotationResults
                         * @property {string|null} [inputUri] VideoAnnotationResults inputUri
                         * @property {google.cloud.videointelligence.v1.IVideoSegment|null} [segment] VideoAnnotationResults segment
                         * @property {Array.<google.cloud.videointelligence.v1.ILabelAnnotation>|null} [segmentLabelAnnotations] VideoAnnotationResults segmentLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1.ILabelAnnotation>|null} [segmentPresenceLabelAnnotations] VideoAnnotationResults segmentPresenceLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1.ILabelAnnotation>|null} [shotLabelAnnotations] VideoAnnotationResults shotLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1.ILabelAnnotation>|null} [shotPresenceLabelAnnotations] VideoAnnotationResults shotPresenceLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1.ILabelAnnotation>|null} [frameLabelAnnotations] VideoAnnotationResults frameLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1.IFaceAnnotation>|null} [faceAnnotations] VideoAnnotationResults faceAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1.IFaceDetectionAnnotation>|null} [faceDetectionAnnotations] VideoAnnotationResults faceDetectionAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1.IVideoSegment>|null} [shotAnnotations] VideoAnnotationResults shotAnnotations
                         * @property {google.cloud.videointelligence.v1.IExplicitContentAnnotation|null} [explicitAnnotation] VideoAnnotationResults explicitAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1.ISpeechTranscription>|null} [speechTranscriptions] VideoAnnotationResults speechTranscriptions
                         * @property {Array.<google.cloud.videointelligence.v1.ITextAnnotation>|null} [textAnnotations] VideoAnnotationResults textAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1.IObjectTrackingAnnotation>|null} [objectAnnotations] VideoAnnotationResults objectAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1.ILogoRecognitionAnnotation>|null} [logoRecognitionAnnotations] VideoAnnotationResults logoRecognitionAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1.IPersonDetectionAnnotation>|null} [personDetectionAnnotations] VideoAnnotationResults personDetectionAnnotations
                         * @property {google.rpc.IStatus|null} [error] VideoAnnotationResults error
                         */
    
                        /**
                         * Constructs a new VideoAnnotationResults.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a VideoAnnotationResults.
                         * @implements IVideoAnnotationResults
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IVideoAnnotationResults=} [properties] Properties to set
                         */
                        function VideoAnnotationResults(properties) {
                            this.segmentLabelAnnotations = [];
                            this.segmentPresenceLabelAnnotations = [];
                            this.shotLabelAnnotations = [];
                            this.shotPresenceLabelAnnotations = [];
                            this.frameLabelAnnotations = [];
                            this.faceAnnotations = [];
                            this.faceDetectionAnnotations = [];
                            this.shotAnnotations = [];
                            this.speechTranscriptions = [];
                            this.textAnnotations = [];
                            this.objectAnnotations = [];
                            this.logoRecognitionAnnotations = [];
                            this.personDetectionAnnotations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoAnnotationResults inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.inputUri = "";
    
                        /**
                         * VideoAnnotationResults segment.
                         * @member {google.cloud.videointelligence.v1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.segment = null;
    
                        /**
                         * VideoAnnotationResults segmentLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1.ILabelAnnotation>} segmentLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.segmentLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults segmentPresenceLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1.ILabelAnnotation>} segmentPresenceLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.segmentPresenceLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults shotLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1.ILabelAnnotation>} shotLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.shotLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults shotPresenceLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1.ILabelAnnotation>} shotPresenceLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.shotPresenceLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults frameLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1.ILabelAnnotation>} frameLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.frameLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults faceAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1.IFaceAnnotation>} faceAnnotations
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.faceAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults faceDetectionAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1.IFaceDetectionAnnotation>} faceDetectionAnnotations
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.faceDetectionAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults shotAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1.IVideoSegment>} shotAnnotations
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.shotAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults explicitAnnotation.
                         * @member {google.cloud.videointelligence.v1.IExplicitContentAnnotation|null|undefined} explicitAnnotation
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.explicitAnnotation = null;
    
                        /**
                         * VideoAnnotationResults speechTranscriptions.
                         * @member {Array.<google.cloud.videointelligence.v1.ISpeechTranscription>} speechTranscriptions
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.speechTranscriptions = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults textAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1.ITextAnnotation>} textAnnotations
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.textAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults objectAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1.IObjectTrackingAnnotation>} objectAnnotations
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.objectAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults logoRecognitionAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1.ILogoRecognitionAnnotation>} logoRecognitionAnnotations
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.logoRecognitionAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults personDetectionAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1.IPersonDetectionAnnotation>} personDetectionAnnotations
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.personDetectionAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults error.
                         * @member {google.rpc.IStatus|null|undefined} error
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.error = null;
    
                        /**
                         * Creates a new VideoAnnotationResults instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1.IVideoAnnotationResults=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.VideoAnnotationResults} VideoAnnotationResults instance
                         */
                        VideoAnnotationResults.create = function create(properties) {
                            return new VideoAnnotationResults(properties);
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationResults message. Does not implicitly {@link google.cloud.videointelligence.v1.VideoAnnotationResults.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1.IVideoAnnotationResults} message VideoAnnotationResults message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationResults.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.segmentLabelAnnotations != null && message.segmentLabelAnnotations.length)
                                for (var i = 0; i < message.segmentLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1.LabelAnnotation.encode(message.segmentLabelAnnotations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.shotLabelAnnotations != null && message.shotLabelAnnotations.length)
                                for (var i = 0; i < message.shotLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1.LabelAnnotation.encode(message.shotLabelAnnotations[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.frameLabelAnnotations != null && message.frameLabelAnnotations.length)
                                for (var i = 0; i < message.frameLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1.LabelAnnotation.encode(message.frameLabelAnnotations[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.faceAnnotations != null && message.faceAnnotations.length)
                                for (var i = 0; i < message.faceAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1.FaceAnnotation.encode(message.faceAnnotations[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.shotAnnotations != null && message.shotAnnotations.length)
                                for (var i = 0; i < message.shotAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1.VideoSegment.encode(message.shotAnnotations[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.explicitAnnotation != null && Object.hasOwnProperty.call(message, "explicitAnnotation"))
                                $root.google.cloud.videointelligence.v1.ExplicitContentAnnotation.encode(message.explicitAnnotation, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                                $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1.VideoSegment.encode(message.segment, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            if (message.speechTranscriptions != null && message.speechTranscriptions.length)
                                for (var i = 0; i < message.speechTranscriptions.length; ++i)
                                    $root.google.cloud.videointelligence.v1.SpeechTranscription.encode(message.speechTranscriptions[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            if (message.textAnnotations != null && message.textAnnotations.length)
                                for (var i = 0; i < message.textAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1.TextAnnotation.encode(message.textAnnotations[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                            if (message.faceDetectionAnnotations != null && message.faceDetectionAnnotations.length)
                                for (var i = 0; i < message.faceDetectionAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1.FaceDetectionAnnotation.encode(message.faceDetectionAnnotations[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            if (message.objectAnnotations != null && message.objectAnnotations.length)
                                for (var i = 0; i < message.objectAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1.ObjectTrackingAnnotation.encode(message.objectAnnotations[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                            if (message.logoRecognitionAnnotations != null && message.logoRecognitionAnnotations.length)
                                for (var i = 0; i < message.logoRecognitionAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1.LogoRecognitionAnnotation.encode(message.logoRecognitionAnnotations[i], writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                            if (message.personDetectionAnnotations != null && message.personDetectionAnnotations.length)
                                for (var i = 0; i < message.personDetectionAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1.PersonDetectionAnnotation.encode(message.personDetectionAnnotations[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                            if (message.segmentPresenceLabelAnnotations != null && message.segmentPresenceLabelAnnotations.length)
                                for (var i = 0; i < message.segmentPresenceLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1.LabelAnnotation.encode(message.segmentPresenceLabelAnnotations[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                            if (message.shotPresenceLabelAnnotations != null && message.shotPresenceLabelAnnotations.length)
                                for (var i = 0; i < message.shotPresenceLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1.LabelAnnotation.encode(message.shotPresenceLabelAnnotations[i], writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationResults message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.VideoAnnotationResults.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1.IVideoAnnotationResults} message VideoAnnotationResults message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationResults.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoAnnotationResults message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.VideoAnnotationResults} VideoAnnotationResults
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationResults.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.VideoAnnotationResults();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 10: {
                                        message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.segmentLabelAnnotations && message.segmentLabelAnnotations.length))
                                            message.segmentLabelAnnotations = [];
                                        message.segmentLabelAnnotations.push($root.google.cloud.videointelligence.v1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 23: {
                                        if (!(message.segmentPresenceLabelAnnotations && message.segmentPresenceLabelAnnotations.length))
                                            message.segmentPresenceLabelAnnotations = [];
                                        message.segmentPresenceLabelAnnotations.push($root.google.cloud.videointelligence.v1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.shotLabelAnnotations && message.shotLabelAnnotations.length))
                                            message.shotLabelAnnotations = [];
                                        message.shotLabelAnnotations.push($root.google.cloud.videointelligence.v1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 24: {
                                        if (!(message.shotPresenceLabelAnnotations && message.shotPresenceLabelAnnotations.length))
                                            message.shotPresenceLabelAnnotations = [];
                                        message.shotPresenceLabelAnnotations.push($root.google.cloud.videointelligence.v1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (!(message.frameLabelAnnotations && message.frameLabelAnnotations.length))
                                            message.frameLabelAnnotations = [];
                                        message.frameLabelAnnotations.push($root.google.cloud.videointelligence.v1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 5: {
                                        if (!(message.faceAnnotations && message.faceAnnotations.length))
                                            message.faceAnnotations = [];
                                        message.faceAnnotations.push($root.google.cloud.videointelligence.v1.FaceAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 13: {
                                        if (!(message.faceDetectionAnnotations && message.faceDetectionAnnotations.length))
                                            message.faceDetectionAnnotations = [];
                                        message.faceDetectionAnnotations.push($root.google.cloud.videointelligence.v1.FaceDetectionAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 6: {
                                        if (!(message.shotAnnotations && message.shotAnnotations.length))
                                            message.shotAnnotations = [];
                                        message.shotAnnotations.push($root.google.cloud.videointelligence.v1.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 7: {
                                        message.explicitAnnotation = $root.google.cloud.videointelligence.v1.ExplicitContentAnnotation.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        if (!(message.speechTranscriptions && message.speechTranscriptions.length))
                                            message.speechTranscriptions = [];
                                        message.speechTranscriptions.push($root.google.cloud.videointelligence.v1.SpeechTranscription.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 12: {
                                        if (!(message.textAnnotations && message.textAnnotations.length))
                                            message.textAnnotations = [];
                                        message.textAnnotations.push($root.google.cloud.videointelligence.v1.TextAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 14: {
                                        if (!(message.objectAnnotations && message.objectAnnotations.length))
                                            message.objectAnnotations = [];
                                        message.objectAnnotations.push($root.google.cloud.videointelligence.v1.ObjectTrackingAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 19: {
                                        if (!(message.logoRecognitionAnnotations && message.logoRecognitionAnnotations.length))
                                            message.logoRecognitionAnnotations = [];
                                        message.logoRecognitionAnnotations.push($root.google.cloud.videointelligence.v1.LogoRecognitionAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 20: {
                                        if (!(message.personDetectionAnnotations && message.personDetectionAnnotations.length))
                                            message.personDetectionAnnotations = [];
                                        message.personDetectionAnnotations.push($root.google.cloud.videointelligence.v1.PersonDetectionAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 9: {
                                        message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoAnnotationResults message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.VideoAnnotationResults} VideoAnnotationResults
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationResults.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoAnnotationResults message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoAnnotationResults.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            if (message.segmentLabelAnnotations != null && message.hasOwnProperty("segmentLabelAnnotations")) {
                                if (!Array.isArray(message.segmentLabelAnnotations))
                                    return "segmentLabelAnnotations: array expected";
                                for (var i = 0; i < message.segmentLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.LabelAnnotation.verify(message.segmentLabelAnnotations[i]);
                                    if (error)
                                        return "segmentLabelAnnotations." + error;
                                }
                            }
                            if (message.segmentPresenceLabelAnnotations != null && message.hasOwnProperty("segmentPresenceLabelAnnotations")) {
                                if (!Array.isArray(message.segmentPresenceLabelAnnotations))
                                    return "segmentPresenceLabelAnnotations: array expected";
                                for (var i = 0; i < message.segmentPresenceLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.LabelAnnotation.verify(message.segmentPresenceLabelAnnotations[i]);
                                    if (error)
                                        return "segmentPresenceLabelAnnotations." + error;
                                }
                            }
                            if (message.shotLabelAnnotations != null && message.hasOwnProperty("shotLabelAnnotations")) {
                                if (!Array.isArray(message.shotLabelAnnotations))
                                    return "shotLabelAnnotations: array expected";
                                for (var i = 0; i < message.shotLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.LabelAnnotation.verify(message.shotLabelAnnotations[i]);
                                    if (error)
                                        return "shotLabelAnnotations." + error;
                                }
                            }
                            if (message.shotPresenceLabelAnnotations != null && message.hasOwnProperty("shotPresenceLabelAnnotations")) {
                                if (!Array.isArray(message.shotPresenceLabelAnnotations))
                                    return "shotPresenceLabelAnnotations: array expected";
                                for (var i = 0; i < message.shotPresenceLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.LabelAnnotation.verify(message.shotPresenceLabelAnnotations[i]);
                                    if (error)
                                        return "shotPresenceLabelAnnotations." + error;
                                }
                            }
                            if (message.frameLabelAnnotations != null && message.hasOwnProperty("frameLabelAnnotations")) {
                                if (!Array.isArray(message.frameLabelAnnotations))
                                    return "frameLabelAnnotations: array expected";
                                for (var i = 0; i < message.frameLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.LabelAnnotation.verify(message.frameLabelAnnotations[i]);
                                    if (error)
                                        return "frameLabelAnnotations." + error;
                                }
                            }
                            if (message.faceAnnotations != null && message.hasOwnProperty("faceAnnotations")) {
                                if (!Array.isArray(message.faceAnnotations))
                                    return "faceAnnotations: array expected";
                                for (var i = 0; i < message.faceAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.FaceAnnotation.verify(message.faceAnnotations[i]);
                                    if (error)
                                        return "faceAnnotations." + error;
                                }
                            }
                            if (message.faceDetectionAnnotations != null && message.hasOwnProperty("faceDetectionAnnotations")) {
                                if (!Array.isArray(message.faceDetectionAnnotations))
                                    return "faceDetectionAnnotations: array expected";
                                for (var i = 0; i < message.faceDetectionAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.FaceDetectionAnnotation.verify(message.faceDetectionAnnotations[i]);
                                    if (error)
                                        return "faceDetectionAnnotations." + error;
                                }
                            }
                            if (message.shotAnnotations != null && message.hasOwnProperty("shotAnnotations")) {
                                if (!Array.isArray(message.shotAnnotations))
                                    return "shotAnnotations: array expected";
                                for (var i = 0; i < message.shotAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.VideoSegment.verify(message.shotAnnotations[i]);
                                    if (error)
                                        return "shotAnnotations." + error;
                                }
                            }
                            if (message.explicitAnnotation != null && message.hasOwnProperty("explicitAnnotation")) {
                                var error = $root.google.cloud.videointelligence.v1.ExplicitContentAnnotation.verify(message.explicitAnnotation);
                                if (error)
                                    return "explicitAnnotation." + error;
                            }
                            if (message.speechTranscriptions != null && message.hasOwnProperty("speechTranscriptions")) {
                                if (!Array.isArray(message.speechTranscriptions))
                                    return "speechTranscriptions: array expected";
                                for (var i = 0; i < message.speechTranscriptions.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.SpeechTranscription.verify(message.speechTranscriptions[i]);
                                    if (error)
                                        return "speechTranscriptions." + error;
                                }
                            }
                            if (message.textAnnotations != null && message.hasOwnProperty("textAnnotations")) {
                                if (!Array.isArray(message.textAnnotations))
                                    return "textAnnotations: array expected";
                                for (var i = 0; i < message.textAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.TextAnnotation.verify(message.textAnnotations[i]);
                                    if (error)
                                        return "textAnnotations." + error;
                                }
                            }
                            if (message.objectAnnotations != null && message.hasOwnProperty("objectAnnotations")) {
                                if (!Array.isArray(message.objectAnnotations))
                                    return "objectAnnotations: array expected";
                                for (var i = 0; i < message.objectAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.ObjectTrackingAnnotation.verify(message.objectAnnotations[i]);
                                    if (error)
                                        return "objectAnnotations." + error;
                                }
                            }
                            if (message.logoRecognitionAnnotations != null && message.hasOwnProperty("logoRecognitionAnnotations")) {
                                if (!Array.isArray(message.logoRecognitionAnnotations))
                                    return "logoRecognitionAnnotations: array expected";
                                for (var i = 0; i < message.logoRecognitionAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.LogoRecognitionAnnotation.verify(message.logoRecognitionAnnotations[i]);
                                    if (error)
                                        return "logoRecognitionAnnotations." + error;
                                }
                            }
                            if (message.personDetectionAnnotations != null && message.hasOwnProperty("personDetectionAnnotations")) {
                                if (!Array.isArray(message.personDetectionAnnotations))
                                    return "personDetectionAnnotations: array expected";
                                for (var i = 0; i < message.personDetectionAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.PersonDetectionAnnotation.verify(message.personDetectionAnnotations[i]);
                                    if (error)
                                        return "personDetectionAnnotations." + error;
                                }
                            }
                            if (message.error != null && message.hasOwnProperty("error")) {
                                var error = $root.google.rpc.Status.verify(message.error);
                                if (error)
                                    return "error." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoAnnotationResults message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.VideoAnnotationResults} VideoAnnotationResults
                         */
                        VideoAnnotationResults.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.VideoAnnotationResults)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.VideoAnnotationResults();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.segmentLabelAnnotations) {
                                if (!Array.isArray(object.segmentLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.segmentLabelAnnotations: array expected");
                                message.segmentLabelAnnotations = [];
                                for (var i = 0; i < object.segmentLabelAnnotations.length; ++i) {
                                    if (typeof object.segmentLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.segmentLabelAnnotations: object expected");
                                    message.segmentLabelAnnotations[i] = $root.google.cloud.videointelligence.v1.LabelAnnotation.fromObject(object.segmentLabelAnnotations[i]);
                                }
                            }
                            if (object.segmentPresenceLabelAnnotations) {
                                if (!Array.isArray(object.segmentPresenceLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.segmentPresenceLabelAnnotations: array expected");
                                message.segmentPresenceLabelAnnotations = [];
                                for (var i = 0; i < object.segmentPresenceLabelAnnotations.length; ++i) {
                                    if (typeof object.segmentPresenceLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.segmentPresenceLabelAnnotations: object expected");
                                    message.segmentPresenceLabelAnnotations[i] = $root.google.cloud.videointelligence.v1.LabelAnnotation.fromObject(object.segmentPresenceLabelAnnotations[i]);
                                }
                            }
                            if (object.shotLabelAnnotations) {
                                if (!Array.isArray(object.shotLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.shotLabelAnnotations: array expected");
                                message.shotLabelAnnotations = [];
                                for (var i = 0; i < object.shotLabelAnnotations.length; ++i) {
                                    if (typeof object.shotLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.shotLabelAnnotations: object expected");
                                    message.shotLabelAnnotations[i] = $root.google.cloud.videointelligence.v1.LabelAnnotation.fromObject(object.shotLabelAnnotations[i]);
                                }
                            }
                            if (object.shotPresenceLabelAnnotations) {
                                if (!Array.isArray(object.shotPresenceLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.shotPresenceLabelAnnotations: array expected");
                                message.shotPresenceLabelAnnotations = [];
                                for (var i = 0; i < object.shotPresenceLabelAnnotations.length; ++i) {
                                    if (typeof object.shotPresenceLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.shotPresenceLabelAnnotations: object expected");
                                    message.shotPresenceLabelAnnotations[i] = $root.google.cloud.videointelligence.v1.LabelAnnotation.fromObject(object.shotPresenceLabelAnnotations[i]);
                                }
                            }
                            if (object.frameLabelAnnotations) {
                                if (!Array.isArray(object.frameLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.frameLabelAnnotations: array expected");
                                message.frameLabelAnnotations = [];
                                for (var i = 0; i < object.frameLabelAnnotations.length; ++i) {
                                    if (typeof object.frameLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.frameLabelAnnotations: object expected");
                                    message.frameLabelAnnotations[i] = $root.google.cloud.videointelligence.v1.LabelAnnotation.fromObject(object.frameLabelAnnotations[i]);
                                }
                            }
                            if (object.faceAnnotations) {
                                if (!Array.isArray(object.faceAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.faceAnnotations: array expected");
                                message.faceAnnotations = [];
                                for (var i = 0; i < object.faceAnnotations.length; ++i) {
                                    if (typeof object.faceAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.faceAnnotations: object expected");
                                    message.faceAnnotations[i] = $root.google.cloud.videointelligence.v1.FaceAnnotation.fromObject(object.faceAnnotations[i]);
                                }
                            }
                            if (object.faceDetectionAnnotations) {
                                if (!Array.isArray(object.faceDetectionAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.faceDetectionAnnotations: array expected");
                                message.faceDetectionAnnotations = [];
                                for (var i = 0; i < object.faceDetectionAnnotations.length; ++i) {
                                    if (typeof object.faceDetectionAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.faceDetectionAnnotations: object expected");
                                    message.faceDetectionAnnotations[i] = $root.google.cloud.videointelligence.v1.FaceDetectionAnnotation.fromObject(object.faceDetectionAnnotations[i]);
                                }
                            }
                            if (object.shotAnnotations) {
                                if (!Array.isArray(object.shotAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.shotAnnotations: array expected");
                                message.shotAnnotations = [];
                                for (var i = 0; i < object.shotAnnotations.length; ++i) {
                                    if (typeof object.shotAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.shotAnnotations: object expected");
                                    message.shotAnnotations[i] = $root.google.cloud.videointelligence.v1.VideoSegment.fromObject(object.shotAnnotations[i]);
                                }
                            }
                            if (object.explicitAnnotation != null) {
                                if (typeof object.explicitAnnotation !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.explicitAnnotation: object expected");
                                message.explicitAnnotation = $root.google.cloud.videointelligence.v1.ExplicitContentAnnotation.fromObject(object.explicitAnnotation);
                            }
                            if (object.speechTranscriptions) {
                                if (!Array.isArray(object.speechTranscriptions))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.speechTranscriptions: array expected");
                                message.speechTranscriptions = [];
                                for (var i = 0; i < object.speechTranscriptions.length; ++i) {
                                    if (typeof object.speechTranscriptions[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.speechTranscriptions: object expected");
                                    message.speechTranscriptions[i] = $root.google.cloud.videointelligence.v1.SpeechTranscription.fromObject(object.speechTranscriptions[i]);
                                }
                            }
                            if (object.textAnnotations) {
                                if (!Array.isArray(object.textAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.textAnnotations: array expected");
                                message.textAnnotations = [];
                                for (var i = 0; i < object.textAnnotations.length; ++i) {
                                    if (typeof object.textAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.textAnnotations: object expected");
                                    message.textAnnotations[i] = $root.google.cloud.videointelligence.v1.TextAnnotation.fromObject(object.textAnnotations[i]);
                                }
                            }
                            if (object.objectAnnotations) {
                                if (!Array.isArray(object.objectAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.objectAnnotations: array expected");
                                message.objectAnnotations = [];
                                for (var i = 0; i < object.objectAnnotations.length; ++i) {
                                    if (typeof object.objectAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.objectAnnotations: object expected");
                                    message.objectAnnotations[i] = $root.google.cloud.videointelligence.v1.ObjectTrackingAnnotation.fromObject(object.objectAnnotations[i]);
                                }
                            }
                            if (object.logoRecognitionAnnotations) {
                                if (!Array.isArray(object.logoRecognitionAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.logoRecognitionAnnotations: array expected");
                                message.logoRecognitionAnnotations = [];
                                for (var i = 0; i < object.logoRecognitionAnnotations.length; ++i) {
                                    if (typeof object.logoRecognitionAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.logoRecognitionAnnotations: object expected");
                                    message.logoRecognitionAnnotations[i] = $root.google.cloud.videointelligence.v1.LogoRecognitionAnnotation.fromObject(object.logoRecognitionAnnotations[i]);
                                }
                            }
                            if (object.personDetectionAnnotations) {
                                if (!Array.isArray(object.personDetectionAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.personDetectionAnnotations: array expected");
                                message.personDetectionAnnotations = [];
                                for (var i = 0; i < object.personDetectionAnnotations.length; ++i) {
                                    if (typeof object.personDetectionAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.personDetectionAnnotations: object expected");
                                    message.personDetectionAnnotations[i] = $root.google.cloud.videointelligence.v1.PersonDetectionAnnotation.fromObject(object.personDetectionAnnotations[i]);
                                }
                            }
                            if (object.error != null) {
                                if (typeof object.error !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationResults.error: object expected");
                                message.error = $root.google.rpc.Status.fromObject(object.error);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoAnnotationResults message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1.VideoAnnotationResults} message VideoAnnotationResults
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoAnnotationResults.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.segmentLabelAnnotations = [];
                                object.shotLabelAnnotations = [];
                                object.frameLabelAnnotations = [];
                                object.faceAnnotations = [];
                                object.shotAnnotations = [];
                                object.speechTranscriptions = [];
                                object.textAnnotations = [];
                                object.faceDetectionAnnotations = [];
                                object.objectAnnotations = [];
                                object.logoRecognitionAnnotations = [];
                                object.personDetectionAnnotations = [];
                                object.segmentPresenceLabelAnnotations = [];
                                object.shotPresenceLabelAnnotations = [];
                            }
                            if (options.defaults) {
                                object.inputUri = "";
                                object.explicitAnnotation = null;
                                object.error = null;
                                object.segment = null;
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.segmentLabelAnnotations && message.segmentLabelAnnotations.length) {
                                object.segmentLabelAnnotations = [];
                                for (var j = 0; j < message.segmentLabelAnnotations.length; ++j)
                                    object.segmentLabelAnnotations[j] = $root.google.cloud.videointelligence.v1.LabelAnnotation.toObject(message.segmentLabelAnnotations[j], options);
                            }
                            if (message.shotLabelAnnotations && message.shotLabelAnnotations.length) {
                                object.shotLabelAnnotations = [];
                                for (var j = 0; j < message.shotLabelAnnotations.length; ++j)
                                    object.shotLabelAnnotations[j] = $root.google.cloud.videointelligence.v1.LabelAnnotation.toObject(message.shotLabelAnnotations[j], options);
                            }
                            if (message.frameLabelAnnotations && message.frameLabelAnnotations.length) {
                                object.frameLabelAnnotations = [];
                                for (var j = 0; j < message.frameLabelAnnotations.length; ++j)
                                    object.frameLabelAnnotations[j] = $root.google.cloud.videointelligence.v1.LabelAnnotation.toObject(message.frameLabelAnnotations[j], options);
                            }
                            if (message.faceAnnotations && message.faceAnnotations.length) {
                                object.faceAnnotations = [];
                                for (var j = 0; j < message.faceAnnotations.length; ++j)
                                    object.faceAnnotations[j] = $root.google.cloud.videointelligence.v1.FaceAnnotation.toObject(message.faceAnnotations[j], options);
                            }
                            if (message.shotAnnotations && message.shotAnnotations.length) {
                                object.shotAnnotations = [];
                                for (var j = 0; j < message.shotAnnotations.length; ++j)
                                    object.shotAnnotations[j] = $root.google.cloud.videointelligence.v1.VideoSegment.toObject(message.shotAnnotations[j], options);
                            }
                            if (message.explicitAnnotation != null && message.hasOwnProperty("explicitAnnotation"))
                                object.explicitAnnotation = $root.google.cloud.videointelligence.v1.ExplicitContentAnnotation.toObject(message.explicitAnnotation, options);
                            if (message.error != null && message.hasOwnProperty("error"))
                                object.error = $root.google.rpc.Status.toObject(message.error, options);
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1.VideoSegment.toObject(message.segment, options);
                            if (message.speechTranscriptions && message.speechTranscriptions.length) {
                                object.speechTranscriptions = [];
                                for (var j = 0; j < message.speechTranscriptions.length; ++j)
                                    object.speechTranscriptions[j] = $root.google.cloud.videointelligence.v1.SpeechTranscription.toObject(message.speechTranscriptions[j], options);
                            }
                            if (message.textAnnotations && message.textAnnotations.length) {
                                object.textAnnotations = [];
                                for (var j = 0; j < message.textAnnotations.length; ++j)
                                    object.textAnnotations[j] = $root.google.cloud.videointelligence.v1.TextAnnotation.toObject(message.textAnnotations[j], options);
                            }
                            if (message.faceDetectionAnnotations && message.faceDetectionAnnotations.length) {
                                object.faceDetectionAnnotations = [];
                                for (var j = 0; j < message.faceDetectionAnnotations.length; ++j)
                                    object.faceDetectionAnnotations[j] = $root.google.cloud.videointelligence.v1.FaceDetectionAnnotation.toObject(message.faceDetectionAnnotations[j], options);
                            }
                            if (message.objectAnnotations && message.objectAnnotations.length) {
                                object.objectAnnotations = [];
                                for (var j = 0; j < message.objectAnnotations.length; ++j)
                                    object.objectAnnotations[j] = $root.google.cloud.videointelligence.v1.ObjectTrackingAnnotation.toObject(message.objectAnnotations[j], options);
                            }
                            if (message.logoRecognitionAnnotations && message.logoRecognitionAnnotations.length) {
                                object.logoRecognitionAnnotations = [];
                                for (var j = 0; j < message.logoRecognitionAnnotations.length; ++j)
                                    object.logoRecognitionAnnotations[j] = $root.google.cloud.videointelligence.v1.LogoRecognitionAnnotation.toObject(message.logoRecognitionAnnotations[j], options);
                            }
                            if (message.personDetectionAnnotations && message.personDetectionAnnotations.length) {
                                object.personDetectionAnnotations = [];
                                for (var j = 0; j < message.personDetectionAnnotations.length; ++j)
                                    object.personDetectionAnnotations[j] = $root.google.cloud.videointelligence.v1.PersonDetectionAnnotation.toObject(message.personDetectionAnnotations[j], options);
                            }
                            if (message.segmentPresenceLabelAnnotations && message.segmentPresenceLabelAnnotations.length) {
                                object.segmentPresenceLabelAnnotations = [];
                                for (var j = 0; j < message.segmentPresenceLabelAnnotations.length; ++j)
                                    object.segmentPresenceLabelAnnotations[j] = $root.google.cloud.videointelligence.v1.LabelAnnotation.toObject(message.segmentPresenceLabelAnnotations[j], options);
                            }
                            if (message.shotPresenceLabelAnnotations && message.shotPresenceLabelAnnotations.length) {
                                object.shotPresenceLabelAnnotations = [];
                                for (var j = 0; j < message.shotPresenceLabelAnnotations.length; ++j)
                                    object.shotPresenceLabelAnnotations[j] = $root.google.cloud.videointelligence.v1.LabelAnnotation.toObject(message.shotPresenceLabelAnnotations[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this VideoAnnotationResults to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoAnnotationResults.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoAnnotationResults
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationResults
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoAnnotationResults.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.VideoAnnotationResults";
                        };
    
                        return VideoAnnotationResults;
                    })();
    
                    v1.AnnotateVideoResponse = (function() {
    
                        /**
                         * Properties of an AnnotateVideoResponse.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IAnnotateVideoResponse
                         * @property {Array.<google.cloud.videointelligence.v1.IVideoAnnotationResults>|null} [annotationResults] AnnotateVideoResponse annotationResults
                         */
    
                        /**
                         * Constructs a new AnnotateVideoResponse.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents an AnnotateVideoResponse.
                         * @implements IAnnotateVideoResponse
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoResponse=} [properties] Properties to set
                         */
                        function AnnotateVideoResponse(properties) {
                            this.annotationResults = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoResponse annotationResults.
                         * @member {Array.<google.cloud.videointelligence.v1.IVideoAnnotationResults>} annotationResults
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoResponse
                         * @instance
                         */
                        AnnotateVideoResponse.prototype.annotationResults = $util.emptyArray;
    
                        /**
                         * Creates a new AnnotateVideoResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoResponse=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.AnnotateVideoResponse} AnnotateVideoResponse instance
                         */
                        AnnotateVideoResponse.create = function create(properties) {
                            return new AnnotateVideoResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoResponse message. Does not implicitly {@link google.cloud.videointelligence.v1.AnnotateVideoResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoResponse} message AnnotateVideoResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.annotationResults != null && message.annotationResults.length)
                                for (var i = 0; i < message.annotationResults.length; ++i)
                                    $root.google.cloud.videointelligence.v1.VideoAnnotationResults.encode(message.annotationResults[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoResponse message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.AnnotateVideoResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoResponse} message AnnotateVideoResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.AnnotateVideoResponse} AnnotateVideoResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.AnnotateVideoResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.annotationResults && message.annotationResults.length))
                                            message.annotationResults = [];
                                        message.annotationResults.push($root.google.cloud.videointelligence.v1.VideoAnnotationResults.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.AnnotateVideoResponse} AnnotateVideoResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoResponse message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.annotationResults != null && message.hasOwnProperty("annotationResults")) {
                                if (!Array.isArray(message.annotationResults))
                                    return "annotationResults: array expected";
                                for (var i = 0; i < message.annotationResults.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.VideoAnnotationResults.verify(message.annotationResults[i]);
                                    if (error)
                                        return "annotationResults." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.AnnotateVideoResponse} AnnotateVideoResponse
                         */
                        AnnotateVideoResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.AnnotateVideoResponse)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.AnnotateVideoResponse();
                            if (object.annotationResults) {
                                if (!Array.isArray(object.annotationResults))
                                    throw TypeError(".google.cloud.videointelligence.v1.AnnotateVideoResponse.annotationResults: array expected");
                                message.annotationResults = [];
                                for (var i = 0; i < object.annotationResults.length; ++i) {
                                    if (typeof object.annotationResults[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.AnnotateVideoResponse.annotationResults: object expected");
                                    message.annotationResults[i] = $root.google.cloud.videointelligence.v1.VideoAnnotationResults.fromObject(object.annotationResults[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1.AnnotateVideoResponse} message AnnotateVideoResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.annotationResults = [];
                            if (message.annotationResults && message.annotationResults.length) {
                                object.annotationResults = [];
                                for (var j = 0; j < message.annotationResults.length; ++j)
                                    object.annotationResults[j] = $root.google.cloud.videointelligence.v1.VideoAnnotationResults.toObject(message.annotationResults[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.AnnotateVideoResponse";
                        };
    
                        return AnnotateVideoResponse;
                    })();
    
                    v1.VideoAnnotationProgress = (function() {
    
                        /**
                         * Properties of a VideoAnnotationProgress.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IVideoAnnotationProgress
                         * @property {string|null} [inputUri] VideoAnnotationProgress inputUri
                         * @property {number|null} [progressPercent] VideoAnnotationProgress progressPercent
                         * @property {google.protobuf.ITimestamp|null} [startTime] VideoAnnotationProgress startTime
                         * @property {google.protobuf.ITimestamp|null} [updateTime] VideoAnnotationProgress updateTime
                         * @property {google.cloud.videointelligence.v1.Feature|null} [feature] VideoAnnotationProgress feature
                         * @property {google.cloud.videointelligence.v1.IVideoSegment|null} [segment] VideoAnnotationProgress segment
                         */
    
                        /**
                         * Constructs a new VideoAnnotationProgress.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a VideoAnnotationProgress.
                         * @implements IVideoAnnotationProgress
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IVideoAnnotationProgress=} [properties] Properties to set
                         */
                        function VideoAnnotationProgress(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoAnnotationProgress inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.inputUri = "";
    
                        /**
                         * VideoAnnotationProgress progressPercent.
                         * @member {number} progressPercent
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.progressPercent = 0;
    
                        /**
                         * VideoAnnotationProgress startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.startTime = null;
    
                        /**
                         * VideoAnnotationProgress updateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.updateTime = null;
    
                        /**
                         * VideoAnnotationProgress feature.
                         * @member {google.cloud.videointelligence.v1.Feature} feature
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.feature = 0;
    
                        /**
                         * VideoAnnotationProgress segment.
                         * @member {google.cloud.videointelligence.v1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.segment = null;
    
                        /**
                         * Creates a new VideoAnnotationProgress instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1.IVideoAnnotationProgress=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.VideoAnnotationProgress} VideoAnnotationProgress instance
                         */
                        VideoAnnotationProgress.create = function create(properties) {
                            return new VideoAnnotationProgress(properties);
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationProgress message. Does not implicitly {@link google.cloud.videointelligence.v1.VideoAnnotationProgress.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1.IVideoAnnotationProgress} message VideoAnnotationProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationProgress.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.progressPercent != null && Object.hasOwnProperty.call(message, "progressPercent"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.progressPercent);
                            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                                $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.feature != null && Object.hasOwnProperty.call(message, "feature"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.feature);
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1.VideoSegment.encode(message.segment, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationProgress message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.VideoAnnotationProgress.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1.IVideoAnnotationProgress} message VideoAnnotationProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationProgress.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoAnnotationProgress message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.VideoAnnotationProgress} VideoAnnotationProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationProgress.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.VideoAnnotationProgress();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.progressPercent = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.feature = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoAnnotationProgress message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.VideoAnnotationProgress} VideoAnnotationProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationProgress.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoAnnotationProgress message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoAnnotationProgress.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                if (!$util.isInteger(message.progressPercent))
                                    return "progressPercent: integer expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                                if (error)
                                    return "updateTime." + error;
                            }
                            if (message.feature != null && message.hasOwnProperty("feature"))
                                switch (message.feature) {
                                default:
                                    return "feature: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 6:
                                case 7:
                                case 9:
                                case 12:
                                case 14:
                                    break;
                                }
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoAnnotationProgress message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.VideoAnnotationProgress} VideoAnnotationProgress
                         */
                        VideoAnnotationProgress.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.VideoAnnotationProgress)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.VideoAnnotationProgress();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.progressPercent != null)
                                message.progressPercent = object.progressPercent | 0;
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationProgress.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.updateTime != null) {
                                if (typeof object.updateTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationProgress.updateTime: object expected");
                                message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                            }
                            switch (object.feature) {
                            default:
                                if (typeof object.feature === "number") {
                                    message.feature = object.feature;
                                    break;
                                }
                                break;
                            case "FEATURE_UNSPECIFIED":
                            case 0:
                                message.feature = 0;
                                break;
                            case "LABEL_DETECTION":
                            case 1:
                                message.feature = 1;
                                break;
                            case "SHOT_CHANGE_DETECTION":
                            case 2:
                                message.feature = 2;
                                break;
                            case "EXPLICIT_CONTENT_DETECTION":
                            case 3:
                                message.feature = 3;
                                break;
                            case "FACE_DETECTION":
                            case 4:
                                message.feature = 4;
                                break;
                            case "SPEECH_TRANSCRIPTION":
                            case 6:
                                message.feature = 6;
                                break;
                            case "TEXT_DETECTION":
                            case 7:
                                message.feature = 7;
                                break;
                            case "OBJECT_TRACKING":
                            case 9:
                                message.feature = 9;
                                break;
                            case "LOGO_RECOGNITION":
                            case 12:
                                message.feature = 12;
                                break;
                            case "PERSON_DETECTION":
                            case 14:
                                message.feature = 14;
                                break;
                            }
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.VideoAnnotationProgress.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.fromObject(object.segment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoAnnotationProgress message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1.VideoAnnotationProgress} message VideoAnnotationProgress
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoAnnotationProgress.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.inputUri = "";
                                object.progressPercent = 0;
                                object.startTime = null;
                                object.updateTime = null;
                                object.feature = options.enums === String ? "FEATURE_UNSPECIFIED" : 0;
                                object.segment = null;
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                object.progressPercent = message.progressPercent;
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                                object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                            if (message.feature != null && message.hasOwnProperty("feature"))
                                object.feature = options.enums === String ? $root.google.cloud.videointelligence.v1.Feature[message.feature] === undefined ? message.feature : $root.google.cloud.videointelligence.v1.Feature[message.feature] : message.feature;
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1.VideoSegment.toObject(message.segment, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoAnnotationProgress to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoAnnotationProgress.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoAnnotationProgress
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.VideoAnnotationProgress
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoAnnotationProgress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.VideoAnnotationProgress";
                        };
    
                        return VideoAnnotationProgress;
                    })();
    
                    v1.AnnotateVideoProgress = (function() {
    
                        /**
                         * Properties of an AnnotateVideoProgress.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IAnnotateVideoProgress
                         * @property {Array.<google.cloud.videointelligence.v1.IVideoAnnotationProgress>|null} [annotationProgress] AnnotateVideoProgress annotationProgress
                         */
    
                        /**
                         * Constructs a new AnnotateVideoProgress.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents an AnnotateVideoProgress.
                         * @implements IAnnotateVideoProgress
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoProgress=} [properties] Properties to set
                         */
                        function AnnotateVideoProgress(properties) {
                            this.annotationProgress = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoProgress annotationProgress.
                         * @member {Array.<google.cloud.videointelligence.v1.IVideoAnnotationProgress>} annotationProgress
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoProgress
                         * @instance
                         */
                        AnnotateVideoProgress.prototype.annotationProgress = $util.emptyArray;
    
                        /**
                         * Creates a new AnnotateVideoProgress instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoProgress=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.AnnotateVideoProgress} AnnotateVideoProgress instance
                         */
                        AnnotateVideoProgress.create = function create(properties) {
                            return new AnnotateVideoProgress(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoProgress message. Does not implicitly {@link google.cloud.videointelligence.v1.AnnotateVideoProgress.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoProgress} message AnnotateVideoProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoProgress.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.annotationProgress != null && message.annotationProgress.length)
                                for (var i = 0; i < message.annotationProgress.length; ++i)
                                    $root.google.cloud.videointelligence.v1.VideoAnnotationProgress.encode(message.annotationProgress[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoProgress message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.AnnotateVideoProgress.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1.IAnnotateVideoProgress} message AnnotateVideoProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoProgress.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoProgress message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.AnnotateVideoProgress} AnnotateVideoProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoProgress.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.AnnotateVideoProgress();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.annotationProgress && message.annotationProgress.length))
                                            message.annotationProgress = [];
                                        message.annotationProgress.push($root.google.cloud.videointelligence.v1.VideoAnnotationProgress.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoProgress message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.AnnotateVideoProgress} AnnotateVideoProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoProgress.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoProgress message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoProgress
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoProgress.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.annotationProgress != null && message.hasOwnProperty("annotationProgress")) {
                                if (!Array.isArray(message.annotationProgress))
                                    return "annotationProgress: array expected";
                                for (var i = 0; i < message.annotationProgress.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.VideoAnnotationProgress.verify(message.annotationProgress[i]);
                                    if (error)
                                        return "annotationProgress." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoProgress message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoProgress
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.AnnotateVideoProgress} AnnotateVideoProgress
                         */
                        AnnotateVideoProgress.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.AnnotateVideoProgress)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.AnnotateVideoProgress();
                            if (object.annotationProgress) {
                                if (!Array.isArray(object.annotationProgress))
                                    throw TypeError(".google.cloud.videointelligence.v1.AnnotateVideoProgress.annotationProgress: array expected");
                                message.annotationProgress = [];
                                for (var i = 0; i < object.annotationProgress.length; ++i) {
                                    if (typeof object.annotationProgress[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.AnnotateVideoProgress.annotationProgress: object expected");
                                    message.annotationProgress[i] = $root.google.cloud.videointelligence.v1.VideoAnnotationProgress.fromObject(object.annotationProgress[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoProgress message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1.AnnotateVideoProgress} message AnnotateVideoProgress
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoProgress.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.annotationProgress = [];
                            if (message.annotationProgress && message.annotationProgress.length) {
                                object.annotationProgress = [];
                                for (var j = 0; j < message.annotationProgress.length; ++j)
                                    object.annotationProgress[j] = $root.google.cloud.videointelligence.v1.VideoAnnotationProgress.toObject(message.annotationProgress[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoProgress to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoProgress
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoProgress.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoProgress
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.AnnotateVideoProgress
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoProgress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.AnnotateVideoProgress";
                        };
    
                        return AnnotateVideoProgress;
                    })();
    
                    v1.SpeechTranscriptionConfig = (function() {
    
                        /**
                         * Properties of a SpeechTranscriptionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ISpeechTranscriptionConfig
                         * @property {string|null} [languageCode] SpeechTranscriptionConfig languageCode
                         * @property {number|null} [maxAlternatives] SpeechTranscriptionConfig maxAlternatives
                         * @property {boolean|null} [filterProfanity] SpeechTranscriptionConfig filterProfanity
                         * @property {Array.<google.cloud.videointelligence.v1.ISpeechContext>|null} [speechContexts] SpeechTranscriptionConfig speechContexts
                         * @property {boolean|null} [enableAutomaticPunctuation] SpeechTranscriptionConfig enableAutomaticPunctuation
                         * @property {Array.<number>|null} [audioTracks] SpeechTranscriptionConfig audioTracks
                         * @property {boolean|null} [enableSpeakerDiarization] SpeechTranscriptionConfig enableSpeakerDiarization
                         * @property {number|null} [diarizationSpeakerCount] SpeechTranscriptionConfig diarizationSpeakerCount
                         * @property {boolean|null} [enableWordConfidence] SpeechTranscriptionConfig enableWordConfidence
                         */
    
                        /**
                         * Constructs a new SpeechTranscriptionConfig.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a SpeechTranscriptionConfig.
                         * @implements ISpeechTranscriptionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ISpeechTranscriptionConfig=} [properties] Properties to set
                         */
                        function SpeechTranscriptionConfig(properties) {
                            this.speechContexts = [];
                            this.audioTracks = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpeechTranscriptionConfig languageCode.
                         * @member {string} languageCode
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.languageCode = "";
    
                        /**
                         * SpeechTranscriptionConfig maxAlternatives.
                         * @member {number} maxAlternatives
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.maxAlternatives = 0;
    
                        /**
                         * SpeechTranscriptionConfig filterProfanity.
                         * @member {boolean} filterProfanity
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.filterProfanity = false;
    
                        /**
                         * SpeechTranscriptionConfig speechContexts.
                         * @member {Array.<google.cloud.videointelligence.v1.ISpeechContext>} speechContexts
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.speechContexts = $util.emptyArray;
    
                        /**
                         * SpeechTranscriptionConfig enableAutomaticPunctuation.
                         * @member {boolean} enableAutomaticPunctuation
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.enableAutomaticPunctuation = false;
    
                        /**
                         * SpeechTranscriptionConfig audioTracks.
                         * @member {Array.<number>} audioTracks
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.audioTracks = $util.emptyArray;
    
                        /**
                         * SpeechTranscriptionConfig enableSpeakerDiarization.
                         * @member {boolean} enableSpeakerDiarization
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.enableSpeakerDiarization = false;
    
                        /**
                         * SpeechTranscriptionConfig diarizationSpeakerCount.
                         * @member {number} diarizationSpeakerCount
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.diarizationSpeakerCount = 0;
    
                        /**
                         * SpeechTranscriptionConfig enableWordConfidence.
                         * @member {boolean} enableWordConfidence
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.enableWordConfidence = false;
    
                        /**
                         * Creates a new SpeechTranscriptionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.ISpeechTranscriptionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.SpeechTranscriptionConfig} SpeechTranscriptionConfig instance
                         */
                        SpeechTranscriptionConfig.create = function create(properties) {
                            return new SpeechTranscriptionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified SpeechTranscriptionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1.SpeechTranscriptionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.ISpeechTranscriptionConfig} message SpeechTranscriptionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechTranscriptionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.languageCode);
                            if (message.maxAlternatives != null && Object.hasOwnProperty.call(message, "maxAlternatives"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.maxAlternatives);
                            if (message.filterProfanity != null && Object.hasOwnProperty.call(message, "filterProfanity"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.filterProfanity);
                            if (message.speechContexts != null && message.speechContexts.length)
                                for (var i = 0; i < message.speechContexts.length; ++i)
                                    $root.google.cloud.videointelligence.v1.SpeechContext.encode(message.speechContexts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.enableAutomaticPunctuation != null && Object.hasOwnProperty.call(message, "enableAutomaticPunctuation"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.enableAutomaticPunctuation);
                            if (message.audioTracks != null && message.audioTracks.length) {
                                writer.uint32(/* id 6, wireType 2 =*/50).fork();
                                for (var i = 0; i < message.audioTracks.length; ++i)
                                    writer.int32(message.audioTracks[i]);
                                writer.ldelim();
                            }
                            if (message.enableSpeakerDiarization != null && Object.hasOwnProperty.call(message, "enableSpeakerDiarization"))
                                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.enableSpeakerDiarization);
                            if (message.diarizationSpeakerCount != null && Object.hasOwnProperty.call(message, "diarizationSpeakerCount"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.diarizationSpeakerCount);
                            if (message.enableWordConfidence != null && Object.hasOwnProperty.call(message, "enableWordConfidence"))
                                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.enableWordConfidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpeechTranscriptionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.SpeechTranscriptionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.ISpeechTranscriptionConfig} message SpeechTranscriptionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechTranscriptionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpeechTranscriptionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.SpeechTranscriptionConfig} SpeechTranscriptionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechTranscriptionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.SpeechTranscriptionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.languageCode = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.maxAlternatives = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.filterProfanity = reader.bool();
                                        break;
                                    }
                                case 4: {
                                        if (!(message.speechContexts && message.speechContexts.length))
                                            message.speechContexts = [];
                                        message.speechContexts.push($root.google.cloud.videointelligence.v1.SpeechContext.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 5: {
                                        message.enableAutomaticPunctuation = reader.bool();
                                        break;
                                    }
                                case 6: {
                                        if (!(message.audioTracks && message.audioTracks.length))
                                            message.audioTracks = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.audioTracks.push(reader.int32());
                                        } else
                                            message.audioTracks.push(reader.int32());
                                        break;
                                    }
                                case 7: {
                                        message.enableSpeakerDiarization = reader.bool();
                                        break;
                                    }
                                case 8: {
                                        message.diarizationSpeakerCount = reader.int32();
                                        break;
                                    }
                                case 9: {
                                        message.enableWordConfidence = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpeechTranscriptionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.SpeechTranscriptionConfig} SpeechTranscriptionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechTranscriptionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpeechTranscriptionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpeechTranscriptionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                if (!$util.isString(message.languageCode))
                                    return "languageCode: string expected";
                            if (message.maxAlternatives != null && message.hasOwnProperty("maxAlternatives"))
                                if (!$util.isInteger(message.maxAlternatives))
                                    return "maxAlternatives: integer expected";
                            if (message.filterProfanity != null && message.hasOwnProperty("filterProfanity"))
                                if (typeof message.filterProfanity !== "boolean")
                                    return "filterProfanity: boolean expected";
                            if (message.speechContexts != null && message.hasOwnProperty("speechContexts")) {
                                if (!Array.isArray(message.speechContexts))
                                    return "speechContexts: array expected";
                                for (var i = 0; i < message.speechContexts.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.SpeechContext.verify(message.speechContexts[i]);
                                    if (error)
                                        return "speechContexts." + error;
                                }
                            }
                            if (message.enableAutomaticPunctuation != null && message.hasOwnProperty("enableAutomaticPunctuation"))
                                if (typeof message.enableAutomaticPunctuation !== "boolean")
                                    return "enableAutomaticPunctuation: boolean expected";
                            if (message.audioTracks != null && message.hasOwnProperty("audioTracks")) {
                                if (!Array.isArray(message.audioTracks))
                                    return "audioTracks: array expected";
                                for (var i = 0; i < message.audioTracks.length; ++i)
                                    if (!$util.isInteger(message.audioTracks[i]))
                                        return "audioTracks: integer[] expected";
                            }
                            if (message.enableSpeakerDiarization != null && message.hasOwnProperty("enableSpeakerDiarization"))
                                if (typeof message.enableSpeakerDiarization !== "boolean")
                                    return "enableSpeakerDiarization: boolean expected";
                            if (message.diarizationSpeakerCount != null && message.hasOwnProperty("diarizationSpeakerCount"))
                                if (!$util.isInteger(message.diarizationSpeakerCount))
                                    return "diarizationSpeakerCount: integer expected";
                            if (message.enableWordConfidence != null && message.hasOwnProperty("enableWordConfidence"))
                                if (typeof message.enableWordConfidence !== "boolean")
                                    return "enableWordConfidence: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a SpeechTranscriptionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.SpeechTranscriptionConfig} SpeechTranscriptionConfig
                         */
                        SpeechTranscriptionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.SpeechTranscriptionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.SpeechTranscriptionConfig();
                            if (object.languageCode != null)
                                message.languageCode = String(object.languageCode);
                            if (object.maxAlternatives != null)
                                message.maxAlternatives = object.maxAlternatives | 0;
                            if (object.filterProfanity != null)
                                message.filterProfanity = Boolean(object.filterProfanity);
                            if (object.speechContexts) {
                                if (!Array.isArray(object.speechContexts))
                                    throw TypeError(".google.cloud.videointelligence.v1.SpeechTranscriptionConfig.speechContexts: array expected");
                                message.speechContexts = [];
                                for (var i = 0; i < object.speechContexts.length; ++i) {
                                    if (typeof object.speechContexts[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.SpeechTranscriptionConfig.speechContexts: object expected");
                                    message.speechContexts[i] = $root.google.cloud.videointelligence.v1.SpeechContext.fromObject(object.speechContexts[i]);
                                }
                            }
                            if (object.enableAutomaticPunctuation != null)
                                message.enableAutomaticPunctuation = Boolean(object.enableAutomaticPunctuation);
                            if (object.audioTracks) {
                                if (!Array.isArray(object.audioTracks))
                                    throw TypeError(".google.cloud.videointelligence.v1.SpeechTranscriptionConfig.audioTracks: array expected");
                                message.audioTracks = [];
                                for (var i = 0; i < object.audioTracks.length; ++i)
                                    message.audioTracks[i] = object.audioTracks[i] | 0;
                            }
                            if (object.enableSpeakerDiarization != null)
                                message.enableSpeakerDiarization = Boolean(object.enableSpeakerDiarization);
                            if (object.diarizationSpeakerCount != null)
                                message.diarizationSpeakerCount = object.diarizationSpeakerCount | 0;
                            if (object.enableWordConfidence != null)
                                message.enableWordConfidence = Boolean(object.enableWordConfidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpeechTranscriptionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1.SpeechTranscriptionConfig} message SpeechTranscriptionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpeechTranscriptionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.speechContexts = [];
                                object.audioTracks = [];
                            }
                            if (options.defaults) {
                                object.languageCode = "";
                                object.maxAlternatives = 0;
                                object.filterProfanity = false;
                                object.enableAutomaticPunctuation = false;
                                object.enableSpeakerDiarization = false;
                                object.diarizationSpeakerCount = 0;
                                object.enableWordConfidence = false;
                            }
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                object.languageCode = message.languageCode;
                            if (message.maxAlternatives != null && message.hasOwnProperty("maxAlternatives"))
                                object.maxAlternatives = message.maxAlternatives;
                            if (message.filterProfanity != null && message.hasOwnProperty("filterProfanity"))
                                object.filterProfanity = message.filterProfanity;
                            if (message.speechContexts && message.speechContexts.length) {
                                object.speechContexts = [];
                                for (var j = 0; j < message.speechContexts.length; ++j)
                                    object.speechContexts[j] = $root.google.cloud.videointelligence.v1.SpeechContext.toObject(message.speechContexts[j], options);
                            }
                            if (message.enableAutomaticPunctuation != null && message.hasOwnProperty("enableAutomaticPunctuation"))
                                object.enableAutomaticPunctuation = message.enableAutomaticPunctuation;
                            if (message.audioTracks && message.audioTracks.length) {
                                object.audioTracks = [];
                                for (var j = 0; j < message.audioTracks.length; ++j)
                                    object.audioTracks[j] = message.audioTracks[j];
                            }
                            if (message.enableSpeakerDiarization != null && message.hasOwnProperty("enableSpeakerDiarization"))
                                object.enableSpeakerDiarization = message.enableSpeakerDiarization;
                            if (message.diarizationSpeakerCount != null && message.hasOwnProperty("diarizationSpeakerCount"))
                                object.diarizationSpeakerCount = message.diarizationSpeakerCount;
                            if (message.enableWordConfidence != null && message.hasOwnProperty("enableWordConfidence"))
                                object.enableWordConfidence = message.enableWordConfidence;
                            return object;
                        };
    
                        /**
                         * Converts this SpeechTranscriptionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpeechTranscriptionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpeechTranscriptionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscriptionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpeechTranscriptionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.SpeechTranscriptionConfig";
                        };
    
                        return SpeechTranscriptionConfig;
                    })();
    
                    v1.SpeechContext = (function() {
    
                        /**
                         * Properties of a SpeechContext.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ISpeechContext
                         * @property {Array.<string>|null} [phrases] SpeechContext phrases
                         */
    
                        /**
                         * Constructs a new SpeechContext.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a SpeechContext.
                         * @implements ISpeechContext
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ISpeechContext=} [properties] Properties to set
                         */
                        function SpeechContext(properties) {
                            this.phrases = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpeechContext phrases.
                         * @member {Array.<string>} phrases
                         * @memberof google.cloud.videointelligence.v1.SpeechContext
                         * @instance
                         */
                        SpeechContext.prototype.phrases = $util.emptyArray;
    
                        /**
                         * Creates a new SpeechContext instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.SpeechContext
                         * @static
                         * @param {google.cloud.videointelligence.v1.ISpeechContext=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.SpeechContext} SpeechContext instance
                         */
                        SpeechContext.create = function create(properties) {
                            return new SpeechContext(properties);
                        };
    
                        /**
                         * Encodes the specified SpeechContext message. Does not implicitly {@link google.cloud.videointelligence.v1.SpeechContext.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.SpeechContext
                         * @static
                         * @param {google.cloud.videointelligence.v1.ISpeechContext} message SpeechContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechContext.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.phrases != null && message.phrases.length)
                                for (var i = 0; i < message.phrases.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.phrases[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpeechContext message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.SpeechContext.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.SpeechContext
                         * @static
                         * @param {google.cloud.videointelligence.v1.ISpeechContext} message SpeechContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechContext.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpeechContext message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.SpeechContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.SpeechContext} SpeechContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechContext.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.SpeechContext();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.phrases && message.phrases.length))
                                            message.phrases = [];
                                        message.phrases.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpeechContext message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.SpeechContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.SpeechContext} SpeechContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechContext.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpeechContext message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.SpeechContext
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpeechContext.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.phrases != null && message.hasOwnProperty("phrases")) {
                                if (!Array.isArray(message.phrases))
                                    return "phrases: array expected";
                                for (var i = 0; i < message.phrases.length; ++i)
                                    if (!$util.isString(message.phrases[i]))
                                        return "phrases: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a SpeechContext message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.SpeechContext
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.SpeechContext} SpeechContext
                         */
                        SpeechContext.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.SpeechContext)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.SpeechContext();
                            if (object.phrases) {
                                if (!Array.isArray(object.phrases))
                                    throw TypeError(".google.cloud.videointelligence.v1.SpeechContext.phrases: array expected");
                                message.phrases = [];
                                for (var i = 0; i < object.phrases.length; ++i)
                                    message.phrases[i] = String(object.phrases[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpeechContext message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.SpeechContext
                         * @static
                         * @param {google.cloud.videointelligence.v1.SpeechContext} message SpeechContext
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpeechContext.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.phrases = [];
                            if (message.phrases && message.phrases.length) {
                                object.phrases = [];
                                for (var j = 0; j < message.phrases.length; ++j)
                                    object.phrases[j] = message.phrases[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this SpeechContext to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.SpeechContext
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpeechContext.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpeechContext
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.SpeechContext
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpeechContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.SpeechContext";
                        };
    
                        return SpeechContext;
                    })();
    
                    v1.SpeechTranscription = (function() {
    
                        /**
                         * Properties of a SpeechTranscription.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ISpeechTranscription
                         * @property {Array.<google.cloud.videointelligence.v1.ISpeechRecognitionAlternative>|null} [alternatives] SpeechTranscription alternatives
                         * @property {string|null} [languageCode] SpeechTranscription languageCode
                         */
    
                        /**
                         * Constructs a new SpeechTranscription.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a SpeechTranscription.
                         * @implements ISpeechTranscription
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ISpeechTranscription=} [properties] Properties to set
                         */
                        function SpeechTranscription(properties) {
                            this.alternatives = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpeechTranscription alternatives.
                         * @member {Array.<google.cloud.videointelligence.v1.ISpeechRecognitionAlternative>} alternatives
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscription
                         * @instance
                         */
                        SpeechTranscription.prototype.alternatives = $util.emptyArray;
    
                        /**
                         * SpeechTranscription languageCode.
                         * @member {string} languageCode
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscription
                         * @instance
                         */
                        SpeechTranscription.prototype.languageCode = "";
    
                        /**
                         * Creates a new SpeechTranscription instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscription
                         * @static
                         * @param {google.cloud.videointelligence.v1.ISpeechTranscription=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.SpeechTranscription} SpeechTranscription instance
                         */
                        SpeechTranscription.create = function create(properties) {
                            return new SpeechTranscription(properties);
                        };
    
                        /**
                         * Encodes the specified SpeechTranscription message. Does not implicitly {@link google.cloud.videointelligence.v1.SpeechTranscription.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscription
                         * @static
                         * @param {google.cloud.videointelligence.v1.ISpeechTranscription} message SpeechTranscription message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechTranscription.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.alternatives != null && message.alternatives.length)
                                for (var i = 0; i < message.alternatives.length; ++i)
                                    $root.google.cloud.videointelligence.v1.SpeechRecognitionAlternative.encode(message.alternatives[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.languageCode);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpeechTranscription message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.SpeechTranscription.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscription
                         * @static
                         * @param {google.cloud.videointelligence.v1.ISpeechTranscription} message SpeechTranscription message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechTranscription.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpeechTranscription message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscription
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.SpeechTranscription} SpeechTranscription
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechTranscription.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.SpeechTranscription();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.alternatives && message.alternatives.length))
                                            message.alternatives = [];
                                        message.alternatives.push($root.google.cloud.videointelligence.v1.SpeechRecognitionAlternative.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.languageCode = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpeechTranscription message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscription
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.SpeechTranscription} SpeechTranscription
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechTranscription.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpeechTranscription message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscription
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpeechTranscription.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.alternatives != null && message.hasOwnProperty("alternatives")) {
                                if (!Array.isArray(message.alternatives))
                                    return "alternatives: array expected";
                                for (var i = 0; i < message.alternatives.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.SpeechRecognitionAlternative.verify(message.alternatives[i]);
                                    if (error)
                                        return "alternatives." + error;
                                }
                            }
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                if (!$util.isString(message.languageCode))
                                    return "languageCode: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a SpeechTranscription message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscription
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.SpeechTranscription} SpeechTranscription
                         */
                        SpeechTranscription.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.SpeechTranscription)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.SpeechTranscription();
                            if (object.alternatives) {
                                if (!Array.isArray(object.alternatives))
                                    throw TypeError(".google.cloud.videointelligence.v1.SpeechTranscription.alternatives: array expected");
                                message.alternatives = [];
                                for (var i = 0; i < object.alternatives.length; ++i) {
                                    if (typeof object.alternatives[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.SpeechTranscription.alternatives: object expected");
                                    message.alternatives[i] = $root.google.cloud.videointelligence.v1.SpeechRecognitionAlternative.fromObject(object.alternatives[i]);
                                }
                            }
                            if (object.languageCode != null)
                                message.languageCode = String(object.languageCode);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpeechTranscription message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscription
                         * @static
                         * @param {google.cloud.videointelligence.v1.SpeechTranscription} message SpeechTranscription
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpeechTranscription.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.alternatives = [];
                            if (options.defaults)
                                object.languageCode = "";
                            if (message.alternatives && message.alternatives.length) {
                                object.alternatives = [];
                                for (var j = 0; j < message.alternatives.length; ++j)
                                    object.alternatives[j] = $root.google.cloud.videointelligence.v1.SpeechRecognitionAlternative.toObject(message.alternatives[j], options);
                            }
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                object.languageCode = message.languageCode;
                            return object;
                        };
    
                        /**
                         * Converts this SpeechTranscription to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscription
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpeechTranscription.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpeechTranscription
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.SpeechTranscription
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpeechTranscription.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.SpeechTranscription";
                        };
    
                        return SpeechTranscription;
                    })();
    
                    v1.SpeechRecognitionAlternative = (function() {
    
                        /**
                         * Properties of a SpeechRecognitionAlternative.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ISpeechRecognitionAlternative
                         * @property {string|null} [transcript] SpeechRecognitionAlternative transcript
                         * @property {number|null} [confidence] SpeechRecognitionAlternative confidence
                         * @property {Array.<google.cloud.videointelligence.v1.IWordInfo>|null} [words] SpeechRecognitionAlternative words
                         */
    
                        /**
                         * Constructs a new SpeechRecognitionAlternative.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a SpeechRecognitionAlternative.
                         * @implements ISpeechRecognitionAlternative
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ISpeechRecognitionAlternative=} [properties] Properties to set
                         */
                        function SpeechRecognitionAlternative(properties) {
                            this.words = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpeechRecognitionAlternative transcript.
                         * @member {string} transcript
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @instance
                         */
                        SpeechRecognitionAlternative.prototype.transcript = "";
    
                        /**
                         * SpeechRecognitionAlternative confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @instance
                         */
                        SpeechRecognitionAlternative.prototype.confidence = 0;
    
                        /**
                         * SpeechRecognitionAlternative words.
                         * @member {Array.<google.cloud.videointelligence.v1.IWordInfo>} words
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @instance
                         */
                        SpeechRecognitionAlternative.prototype.words = $util.emptyArray;
    
                        /**
                         * Creates a new SpeechRecognitionAlternative instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @static
                         * @param {google.cloud.videointelligence.v1.ISpeechRecognitionAlternative=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.SpeechRecognitionAlternative} SpeechRecognitionAlternative instance
                         */
                        SpeechRecognitionAlternative.create = function create(properties) {
                            return new SpeechRecognitionAlternative(properties);
                        };
    
                        /**
                         * Encodes the specified SpeechRecognitionAlternative message. Does not implicitly {@link google.cloud.videointelligence.v1.SpeechRecognitionAlternative.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @static
                         * @param {google.cloud.videointelligence.v1.ISpeechRecognitionAlternative} message SpeechRecognitionAlternative message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechRecognitionAlternative.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.transcript != null && Object.hasOwnProperty.call(message, "transcript"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.transcript);
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            if (message.words != null && message.words.length)
                                for (var i = 0; i < message.words.length; ++i)
                                    $root.google.cloud.videointelligence.v1.WordInfo.encode(message.words[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpeechRecognitionAlternative message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.SpeechRecognitionAlternative.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @static
                         * @param {google.cloud.videointelligence.v1.ISpeechRecognitionAlternative} message SpeechRecognitionAlternative message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechRecognitionAlternative.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpeechRecognitionAlternative message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.SpeechRecognitionAlternative} SpeechRecognitionAlternative
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechRecognitionAlternative.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.SpeechRecognitionAlternative();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.transcript = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.words && message.words.length))
                                            message.words = [];
                                        message.words.push($root.google.cloud.videointelligence.v1.WordInfo.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpeechRecognitionAlternative message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.SpeechRecognitionAlternative} SpeechRecognitionAlternative
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechRecognitionAlternative.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpeechRecognitionAlternative message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpeechRecognitionAlternative.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.transcript != null && message.hasOwnProperty("transcript"))
                                if (!$util.isString(message.transcript))
                                    return "transcript: string expected";
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.words != null && message.hasOwnProperty("words")) {
                                if (!Array.isArray(message.words))
                                    return "words: array expected";
                                for (var i = 0; i < message.words.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.WordInfo.verify(message.words[i]);
                                    if (error)
                                        return "words." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a SpeechRecognitionAlternative message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.SpeechRecognitionAlternative} SpeechRecognitionAlternative
                         */
                        SpeechRecognitionAlternative.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.SpeechRecognitionAlternative)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.SpeechRecognitionAlternative();
                            if (object.transcript != null)
                                message.transcript = String(object.transcript);
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.words) {
                                if (!Array.isArray(object.words))
                                    throw TypeError(".google.cloud.videointelligence.v1.SpeechRecognitionAlternative.words: array expected");
                                message.words = [];
                                for (var i = 0; i < object.words.length; ++i) {
                                    if (typeof object.words[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.SpeechRecognitionAlternative.words: object expected");
                                    message.words[i] = $root.google.cloud.videointelligence.v1.WordInfo.fromObject(object.words[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpeechRecognitionAlternative message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @static
                         * @param {google.cloud.videointelligence.v1.SpeechRecognitionAlternative} message SpeechRecognitionAlternative
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpeechRecognitionAlternative.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.words = [];
                            if (options.defaults) {
                                object.transcript = "";
                                object.confidence = 0;
                            }
                            if (message.transcript != null && message.hasOwnProperty("transcript"))
                                object.transcript = message.transcript;
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.words && message.words.length) {
                                object.words = [];
                                for (var j = 0; j < message.words.length; ++j)
                                    object.words[j] = $root.google.cloud.videointelligence.v1.WordInfo.toObject(message.words[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this SpeechRecognitionAlternative to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpeechRecognitionAlternative.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpeechRecognitionAlternative
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.SpeechRecognitionAlternative
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpeechRecognitionAlternative.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.SpeechRecognitionAlternative";
                        };
    
                        return SpeechRecognitionAlternative;
                    })();
    
                    v1.WordInfo = (function() {
    
                        /**
                         * Properties of a WordInfo.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IWordInfo
                         * @property {google.protobuf.IDuration|null} [startTime] WordInfo startTime
                         * @property {google.protobuf.IDuration|null} [endTime] WordInfo endTime
                         * @property {string|null} [word] WordInfo word
                         * @property {number|null} [confidence] WordInfo confidence
                         * @property {number|null} [speakerTag] WordInfo speakerTag
                         */
    
                        /**
                         * Constructs a new WordInfo.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a WordInfo.
                         * @implements IWordInfo
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IWordInfo=} [properties] Properties to set
                         */
                        function WordInfo(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * WordInfo startTime.
                         * @member {google.protobuf.IDuration|null|undefined} startTime
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.startTime = null;
    
                        /**
                         * WordInfo endTime.
                         * @member {google.protobuf.IDuration|null|undefined} endTime
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.endTime = null;
    
                        /**
                         * WordInfo word.
                         * @member {string} word
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.word = "";
    
                        /**
                         * WordInfo confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.confidence = 0;
    
                        /**
                         * WordInfo speakerTag.
                         * @member {number} speakerTag
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.speakerTag = 0;
    
                        /**
                         * Creates a new WordInfo instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @static
                         * @param {google.cloud.videointelligence.v1.IWordInfo=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.WordInfo} WordInfo instance
                         */
                        WordInfo.create = function create(properties) {
                            return new WordInfo(properties);
                        };
    
                        /**
                         * Encodes the specified WordInfo message. Does not implicitly {@link google.cloud.videointelligence.v1.WordInfo.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @static
                         * @param {google.cloud.videointelligence.v1.IWordInfo} message WordInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WordInfo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                $root.google.protobuf.Duration.encode(message.startTime, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                                $root.google.protobuf.Duration.encode(message.endTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.word != null && Object.hasOwnProperty.call(message, "word"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.word);
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.confidence);
                            if (message.speakerTag != null && Object.hasOwnProperty.call(message, "speakerTag"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.speakerTag);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified WordInfo message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.WordInfo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @static
                         * @param {google.cloud.videointelligence.v1.IWordInfo} message WordInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WordInfo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a WordInfo message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.WordInfo} WordInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WordInfo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.WordInfo();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.startTime = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.endTime = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.word = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 5: {
                                        message.speakerTag = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a WordInfo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.WordInfo} WordInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WordInfo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a WordInfo message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        WordInfo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Duration.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                var error = $root.google.protobuf.Duration.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                            if (message.word != null && message.hasOwnProperty("word"))
                                if (!$util.isString(message.word))
                                    return "word: string expected";
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.speakerTag != null && message.hasOwnProperty("speakerTag"))
                                if (!$util.isInteger(message.speakerTag))
                                    return "speakerTag: integer expected";
                            return null;
                        };
    
                        /**
                         * Creates a WordInfo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.WordInfo} WordInfo
                         */
                        WordInfo.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.WordInfo)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.WordInfo();
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.WordInfo.startTime: object expected");
                                message.startTime = $root.google.protobuf.Duration.fromObject(object.startTime);
                            }
                            if (object.endTime != null) {
                                if (typeof object.endTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.WordInfo.endTime: object expected");
                                message.endTime = $root.google.protobuf.Duration.fromObject(object.endTime);
                            }
                            if (object.word != null)
                                message.word = String(object.word);
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.speakerTag != null)
                                message.speakerTag = object.speakerTag | 0;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a WordInfo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @static
                         * @param {google.cloud.videointelligence.v1.WordInfo} message WordInfo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        WordInfo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.startTime = null;
                                object.endTime = null;
                                object.word = "";
                                object.confidence = 0;
                                object.speakerTag = 0;
                            }
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Duration.toObject(message.startTime, options);
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                object.endTime = $root.google.protobuf.Duration.toObject(message.endTime, options);
                            if (message.word != null && message.hasOwnProperty("word"))
                                object.word = message.word;
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.speakerTag != null && message.hasOwnProperty("speakerTag"))
                                object.speakerTag = message.speakerTag;
                            return object;
                        };
    
                        /**
                         * Converts this WordInfo to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        WordInfo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for WordInfo
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.WordInfo
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        WordInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.WordInfo";
                        };
    
                        return WordInfo;
                    })();
    
                    v1.NormalizedVertex = (function() {
    
                        /**
                         * Properties of a NormalizedVertex.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface INormalizedVertex
                         * @property {number|null} [x] NormalizedVertex x
                         * @property {number|null} [y] NormalizedVertex y
                         */
    
                        /**
                         * Constructs a new NormalizedVertex.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a NormalizedVertex.
                         * @implements INormalizedVertex
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.INormalizedVertex=} [properties] Properties to set
                         */
                        function NormalizedVertex(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * NormalizedVertex x.
                         * @member {number} x
                         * @memberof google.cloud.videointelligence.v1.NormalizedVertex
                         * @instance
                         */
                        NormalizedVertex.prototype.x = 0;
    
                        /**
                         * NormalizedVertex y.
                         * @member {number} y
                         * @memberof google.cloud.videointelligence.v1.NormalizedVertex
                         * @instance
                         */
                        NormalizedVertex.prototype.y = 0;
    
                        /**
                         * Creates a new NormalizedVertex instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.NormalizedVertex
                         * @static
                         * @param {google.cloud.videointelligence.v1.INormalizedVertex=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.NormalizedVertex} NormalizedVertex instance
                         */
                        NormalizedVertex.create = function create(properties) {
                            return new NormalizedVertex(properties);
                        };
    
                        /**
                         * Encodes the specified NormalizedVertex message. Does not implicitly {@link google.cloud.videointelligence.v1.NormalizedVertex.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.NormalizedVertex
                         * @static
                         * @param {google.cloud.videointelligence.v1.INormalizedVertex} message NormalizedVertex message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedVertex.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);
                            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.y);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified NormalizedVertex message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.NormalizedVertex.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.NormalizedVertex
                         * @static
                         * @param {google.cloud.videointelligence.v1.INormalizedVertex} message NormalizedVertex message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedVertex.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a NormalizedVertex message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.NormalizedVertex
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.NormalizedVertex} NormalizedVertex
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedVertex.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.NormalizedVertex();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.x = reader.float();
                                        break;
                                    }
                                case 2: {
                                        message.y = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a NormalizedVertex message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.NormalizedVertex
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.NormalizedVertex} NormalizedVertex
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedVertex.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a NormalizedVertex message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.NormalizedVertex
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NormalizedVertex.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.x != null && message.hasOwnProperty("x"))
                                if (typeof message.x !== "number")
                                    return "x: number expected";
                            if (message.y != null && message.hasOwnProperty("y"))
                                if (typeof message.y !== "number")
                                    return "y: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a NormalizedVertex message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.NormalizedVertex
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.NormalizedVertex} NormalizedVertex
                         */
                        NormalizedVertex.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.NormalizedVertex)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.NormalizedVertex();
                            if (object.x != null)
                                message.x = Number(object.x);
                            if (object.y != null)
                                message.y = Number(object.y);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a NormalizedVertex message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.NormalizedVertex
                         * @static
                         * @param {google.cloud.videointelligence.v1.NormalizedVertex} message NormalizedVertex
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NormalizedVertex.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.x = 0;
                                object.y = 0;
                            }
                            if (message.x != null && message.hasOwnProperty("x"))
                                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;
                            if (message.y != null && message.hasOwnProperty("y"))
                                object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
                            return object;
                        };
    
                        /**
                         * Converts this NormalizedVertex to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.NormalizedVertex
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NormalizedVertex.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for NormalizedVertex
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.NormalizedVertex
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        NormalizedVertex.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.NormalizedVertex";
                        };
    
                        return NormalizedVertex;
                    })();
    
                    v1.NormalizedBoundingPoly = (function() {
    
                        /**
                         * Properties of a NormalizedBoundingPoly.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface INormalizedBoundingPoly
                         * @property {Array.<google.cloud.videointelligence.v1.INormalizedVertex>|null} [vertices] NormalizedBoundingPoly vertices
                         */
    
                        /**
                         * Constructs a new NormalizedBoundingPoly.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a NormalizedBoundingPoly.
                         * @implements INormalizedBoundingPoly
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.INormalizedBoundingPoly=} [properties] Properties to set
                         */
                        function NormalizedBoundingPoly(properties) {
                            this.vertices = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * NormalizedBoundingPoly vertices.
                         * @member {Array.<google.cloud.videointelligence.v1.INormalizedVertex>} vertices
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingPoly
                         * @instance
                         */
                        NormalizedBoundingPoly.prototype.vertices = $util.emptyArray;
    
                        /**
                         * Creates a new NormalizedBoundingPoly instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingPoly
                         * @static
                         * @param {google.cloud.videointelligence.v1.INormalizedBoundingPoly=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.NormalizedBoundingPoly} NormalizedBoundingPoly instance
                         */
                        NormalizedBoundingPoly.create = function create(properties) {
                            return new NormalizedBoundingPoly(properties);
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingPoly message. Does not implicitly {@link google.cloud.videointelligence.v1.NormalizedBoundingPoly.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingPoly
                         * @static
                         * @param {google.cloud.videointelligence.v1.INormalizedBoundingPoly} message NormalizedBoundingPoly message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingPoly.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.vertices != null && message.vertices.length)
                                for (var i = 0; i < message.vertices.length; ++i)
                                    $root.google.cloud.videointelligence.v1.NormalizedVertex.encode(message.vertices[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingPoly message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.NormalizedBoundingPoly.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingPoly
                         * @static
                         * @param {google.cloud.videointelligence.v1.INormalizedBoundingPoly} message NormalizedBoundingPoly message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingPoly.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a NormalizedBoundingPoly message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingPoly
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.NormalizedBoundingPoly} NormalizedBoundingPoly
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingPoly.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.NormalizedBoundingPoly();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.vertices && message.vertices.length))
                                            message.vertices = [];
                                        message.vertices.push($root.google.cloud.videointelligence.v1.NormalizedVertex.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a NormalizedBoundingPoly message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingPoly
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.NormalizedBoundingPoly} NormalizedBoundingPoly
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingPoly.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a NormalizedBoundingPoly message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingPoly
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NormalizedBoundingPoly.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.vertices != null && message.hasOwnProperty("vertices")) {
                                if (!Array.isArray(message.vertices))
                                    return "vertices: array expected";
                                for (var i = 0; i < message.vertices.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.NormalizedVertex.verify(message.vertices[i]);
                                    if (error)
                                        return "vertices." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a NormalizedBoundingPoly message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingPoly
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.NormalizedBoundingPoly} NormalizedBoundingPoly
                         */
                        NormalizedBoundingPoly.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.NormalizedBoundingPoly)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.NormalizedBoundingPoly();
                            if (object.vertices) {
                                if (!Array.isArray(object.vertices))
                                    throw TypeError(".google.cloud.videointelligence.v1.NormalizedBoundingPoly.vertices: array expected");
                                message.vertices = [];
                                for (var i = 0; i < object.vertices.length; ++i) {
                                    if (typeof object.vertices[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.NormalizedBoundingPoly.vertices: object expected");
                                    message.vertices[i] = $root.google.cloud.videointelligence.v1.NormalizedVertex.fromObject(object.vertices[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a NormalizedBoundingPoly message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingPoly
                         * @static
                         * @param {google.cloud.videointelligence.v1.NormalizedBoundingPoly} message NormalizedBoundingPoly
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NormalizedBoundingPoly.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.vertices = [];
                            if (message.vertices && message.vertices.length) {
                                object.vertices = [];
                                for (var j = 0; j < message.vertices.length; ++j)
                                    object.vertices[j] = $root.google.cloud.videointelligence.v1.NormalizedVertex.toObject(message.vertices[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this NormalizedBoundingPoly to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingPoly
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NormalizedBoundingPoly.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for NormalizedBoundingPoly
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.NormalizedBoundingPoly
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        NormalizedBoundingPoly.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.NormalizedBoundingPoly";
                        };
    
                        return NormalizedBoundingPoly;
                    })();
    
                    v1.TextSegment = (function() {
    
                        /**
                         * Properties of a TextSegment.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ITextSegment
                         * @property {google.cloud.videointelligence.v1.IVideoSegment|null} [segment] TextSegment segment
                         * @property {number|null} [confidence] TextSegment confidence
                         * @property {Array.<google.cloud.videointelligence.v1.ITextFrame>|null} [frames] TextSegment frames
                         */
    
                        /**
                         * Constructs a new TextSegment.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a TextSegment.
                         * @implements ITextSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ITextSegment=} [properties] Properties to set
                         */
                        function TextSegment(properties) {
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextSegment segment.
                         * @member {google.cloud.videointelligence.v1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @instance
                         */
                        TextSegment.prototype.segment = null;
    
                        /**
                         * TextSegment confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @instance
                         */
                        TextSegment.prototype.confidence = 0;
    
                        /**
                         * TextSegment frames.
                         * @member {Array.<google.cloud.videointelligence.v1.ITextFrame>} frames
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @instance
                         */
                        TextSegment.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new TextSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITextSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.TextSegment} TextSegment instance
                         */
                        TextSegment.create = function create(properties) {
                            return new TextSegment(properties);
                        };
    
                        /**
                         * Encodes the specified TextSegment message. Does not implicitly {@link google.cloud.videointelligence.v1.TextSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITextSegment} message TextSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1.VideoSegment.encode(message.segment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1.TextFrame.encode(message.frames[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.TextSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITextSegment} message TextSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.TextSegment} TextSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.TextSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1.TextFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.TextSegment} TextSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.TextFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TextSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.TextSegment} TextSegment
                         */
                        TextSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.TextSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.TextSegment();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.TextSegment.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1.TextSegment.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.TextSegment.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1.TextFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1.TextSegment} message TextSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.frames = [];
                            if (options.defaults) {
                                object.segment = null;
                                object.confidence = 0;
                            }
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1.VideoSegment.toObject(message.segment, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1.TextFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TextSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.TextSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.TextSegment";
                        };
    
                        return TextSegment;
                    })();
    
                    v1.TextFrame = (function() {
    
                        /**
                         * Properties of a TextFrame.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ITextFrame
                         * @property {google.cloud.videointelligence.v1.INormalizedBoundingPoly|null} [rotatedBoundingBox] TextFrame rotatedBoundingBox
                         * @property {google.protobuf.IDuration|null} [timeOffset] TextFrame timeOffset
                         */
    
                        /**
                         * Constructs a new TextFrame.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a TextFrame.
                         * @implements ITextFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ITextFrame=} [properties] Properties to set
                         */
                        function TextFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextFrame rotatedBoundingBox.
                         * @member {google.cloud.videointelligence.v1.INormalizedBoundingPoly|null|undefined} rotatedBoundingBox
                         * @memberof google.cloud.videointelligence.v1.TextFrame
                         * @instance
                         */
                        TextFrame.prototype.rotatedBoundingBox = null;
    
                        /**
                         * TextFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1.TextFrame
                         * @instance
                         */
                        TextFrame.prototype.timeOffset = null;
    
                        /**
                         * Creates a new TextFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.TextFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITextFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.TextFrame} TextFrame instance
                         */
                        TextFrame.create = function create(properties) {
                            return new TextFrame(properties);
                        };
    
                        /**
                         * Encodes the specified TextFrame message. Does not implicitly {@link google.cloud.videointelligence.v1.TextFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.TextFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITextFrame} message TextFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.rotatedBoundingBox != null && Object.hasOwnProperty.call(message, "rotatedBoundingBox"))
                                $root.google.cloud.videointelligence.v1.NormalizedBoundingPoly.encode(message.rotatedBoundingBox, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.TextFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.TextFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITextFrame} message TextFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.TextFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.TextFrame} TextFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.TextFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.rotatedBoundingBox = $root.google.cloud.videointelligence.v1.NormalizedBoundingPoly.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.TextFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.TextFrame} TextFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.TextFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.rotatedBoundingBox != null && message.hasOwnProperty("rotatedBoundingBox")) {
                                var error = $root.google.cloud.videointelligence.v1.NormalizedBoundingPoly.verify(message.rotatedBoundingBox);
                                if (error)
                                    return "rotatedBoundingBox." + error;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TextFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.TextFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.TextFrame} TextFrame
                         */
                        TextFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.TextFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.TextFrame();
                            if (object.rotatedBoundingBox != null) {
                                if (typeof object.rotatedBoundingBox !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.TextFrame.rotatedBoundingBox: object expected");
                                message.rotatedBoundingBox = $root.google.cloud.videointelligence.v1.NormalizedBoundingPoly.fromObject(object.rotatedBoundingBox);
                            }
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.TextFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.TextFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.TextFrame} message TextFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.rotatedBoundingBox = null;
                                object.timeOffset = null;
                            }
                            if (message.rotatedBoundingBox != null && message.hasOwnProperty("rotatedBoundingBox"))
                                object.rotatedBoundingBox = $root.google.cloud.videointelligence.v1.NormalizedBoundingPoly.toObject(message.rotatedBoundingBox, options);
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this TextFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.TextFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.TextFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.TextFrame";
                        };
    
                        return TextFrame;
                    })();
    
                    v1.TextAnnotation = (function() {
    
                        /**
                         * Properties of a TextAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ITextAnnotation
                         * @property {string|null} [text] TextAnnotation text
                         * @property {Array.<google.cloud.videointelligence.v1.ITextSegment>|null} [segments] TextAnnotation segments
                         * @property {string|null} [version] TextAnnotation version
                         */
    
                        /**
                         * Constructs a new TextAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a TextAnnotation.
                         * @implements ITextAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ITextAnnotation=} [properties] Properties to set
                         */
                        function TextAnnotation(properties) {
                            this.segments = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextAnnotation text.
                         * @member {string} text
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @instance
                         */
                        TextAnnotation.prototype.text = "";
    
                        /**
                         * TextAnnotation segments.
                         * @member {Array.<google.cloud.videointelligence.v1.ITextSegment>} segments
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @instance
                         */
                        TextAnnotation.prototype.segments = $util.emptyArray;
    
                        /**
                         * TextAnnotation version.
                         * @member {string} version
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @instance
                         */
                        TextAnnotation.prototype.version = "";
    
                        /**
                         * Creates a new TextAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITextAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.TextAnnotation} TextAnnotation instance
                         */
                        TextAnnotation.create = function create(properties) {
                            return new TextAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified TextAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1.TextAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITextAnnotation} message TextAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1.TextSegment.encode(message.segments[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.version);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.TextAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.ITextAnnotation} message TextAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.TextAnnotation} TextAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.TextAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1.TextSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        message.version = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.TextAnnotation} TextAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.TextSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                if (!$util.isString(message.version))
                                    return "version: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a TextAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.TextAnnotation} TextAnnotation
                         */
                        TextAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.TextAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.TextAnnotation();
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1.TextAnnotation.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.TextAnnotation.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1.TextSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.version != null)
                                message.version = String(object.version);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.TextAnnotation} message TextAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.segments = [];
                            if (options.defaults) {
                                object.text = "";
                                object.version = "";
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1.TextSegment.toObject(message.segments[j], options);
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                object.version = message.version;
                            return object;
                        };
    
                        /**
                         * Converts this TextAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.TextAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.TextAnnotation";
                        };
    
                        return TextAnnotation;
                    })();
    
                    v1.ObjectTrackingFrame = (function() {
    
                        /**
                         * Properties of an ObjectTrackingFrame.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IObjectTrackingFrame
                         * @property {google.cloud.videointelligence.v1.INormalizedBoundingBox|null} [normalizedBoundingBox] ObjectTrackingFrame normalizedBoundingBox
                         * @property {google.protobuf.IDuration|null} [timeOffset] ObjectTrackingFrame timeOffset
                         */
    
                        /**
                         * Constructs a new ObjectTrackingFrame.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents an ObjectTrackingFrame.
                         * @implements IObjectTrackingFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IObjectTrackingFrame=} [properties] Properties to set
                         */
                        function ObjectTrackingFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ObjectTrackingFrame normalizedBoundingBox.
                         * @member {google.cloud.videointelligence.v1.INormalizedBoundingBox|null|undefined} normalizedBoundingBox
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingFrame
                         * @instance
                         */
                        ObjectTrackingFrame.prototype.normalizedBoundingBox = null;
    
                        /**
                         * ObjectTrackingFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingFrame
                         * @instance
                         */
                        ObjectTrackingFrame.prototype.timeOffset = null;
    
                        /**
                         * Creates a new ObjectTrackingFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.IObjectTrackingFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.ObjectTrackingFrame} ObjectTrackingFrame instance
                         */
                        ObjectTrackingFrame.create = function create(properties) {
                            return new ObjectTrackingFrame(properties);
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingFrame message. Does not implicitly {@link google.cloud.videointelligence.v1.ObjectTrackingFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.IObjectTrackingFrame} message ObjectTrackingFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.normalizedBoundingBox != null && Object.hasOwnProperty.call(message, "normalizedBoundingBox"))
                                $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.encode(message.normalizedBoundingBox, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.ObjectTrackingFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.IObjectTrackingFrame} message ObjectTrackingFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ObjectTrackingFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.ObjectTrackingFrame} ObjectTrackingFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.ObjectTrackingFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.normalizedBoundingBox = $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ObjectTrackingFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.ObjectTrackingFrame} ObjectTrackingFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ObjectTrackingFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ObjectTrackingFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.normalizedBoundingBox != null && message.hasOwnProperty("normalizedBoundingBox")) {
                                var error = $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.verify(message.normalizedBoundingBox);
                                if (error)
                                    return "normalizedBoundingBox." + error;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ObjectTrackingFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.ObjectTrackingFrame} ObjectTrackingFrame
                         */
                        ObjectTrackingFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.ObjectTrackingFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.ObjectTrackingFrame();
                            if (object.normalizedBoundingBox != null) {
                                if (typeof object.normalizedBoundingBox !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.ObjectTrackingFrame.normalizedBoundingBox: object expected");
                                message.normalizedBoundingBox = $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.fromObject(object.normalizedBoundingBox);
                            }
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.ObjectTrackingFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ObjectTrackingFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1.ObjectTrackingFrame} message ObjectTrackingFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ObjectTrackingFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.normalizedBoundingBox = null;
                                object.timeOffset = null;
                            }
                            if (message.normalizedBoundingBox != null && message.hasOwnProperty("normalizedBoundingBox"))
                                object.normalizedBoundingBox = $root.google.cloud.videointelligence.v1.NormalizedBoundingBox.toObject(message.normalizedBoundingBox, options);
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this ObjectTrackingFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ObjectTrackingFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ObjectTrackingFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ObjectTrackingFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.ObjectTrackingFrame";
                        };
    
                        return ObjectTrackingFrame;
                    })();
    
                    v1.ObjectTrackingAnnotation = (function() {
    
                        /**
                         * Properties of an ObjectTrackingAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface IObjectTrackingAnnotation
                         * @property {google.cloud.videointelligence.v1.IVideoSegment|null} [segment] ObjectTrackingAnnotation segment
                         * @property {number|Long|null} [trackId] ObjectTrackingAnnotation trackId
                         * @property {google.cloud.videointelligence.v1.IEntity|null} [entity] ObjectTrackingAnnotation entity
                         * @property {number|null} [confidence] ObjectTrackingAnnotation confidence
                         * @property {Array.<google.cloud.videointelligence.v1.IObjectTrackingFrame>|null} [frames] ObjectTrackingAnnotation frames
                         * @property {string|null} [version] ObjectTrackingAnnotation version
                         */
    
                        /**
                         * Constructs a new ObjectTrackingAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents an ObjectTrackingAnnotation.
                         * @implements IObjectTrackingAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.IObjectTrackingAnnotation=} [properties] Properties to set
                         */
                        function ObjectTrackingAnnotation(properties) {
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ObjectTrackingAnnotation segment.
                         * @member {google.cloud.videointelligence.v1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.segment = null;
    
                        /**
                         * ObjectTrackingAnnotation trackId.
                         * @member {number|Long|null|undefined} trackId
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.trackId = null;
    
                        /**
                         * ObjectTrackingAnnotation entity.
                         * @member {google.cloud.videointelligence.v1.IEntity|null|undefined} entity
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.entity = null;
    
                        /**
                         * ObjectTrackingAnnotation confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.confidence = 0;
    
                        /**
                         * ObjectTrackingAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1.IObjectTrackingFrame>} frames
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * ObjectTrackingAnnotation version.
                         * @member {string} version
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.version = "";
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * ObjectTrackingAnnotation trackInfo.
                         * @member {"segment"|"trackId"|undefined} trackInfo
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @instance
                         */
                        Object.defineProperty(ObjectTrackingAnnotation.prototype, "trackInfo", {
                            get: $util.oneOfGetter($oneOfFields = ["segment", "trackId"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new ObjectTrackingAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IObjectTrackingAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.ObjectTrackingAnnotation} ObjectTrackingAnnotation instance
                         */
                        ObjectTrackingAnnotation.create = function create(properties) {
                            return new ObjectTrackingAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1.ObjectTrackingAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IObjectTrackingAnnotation} message ObjectTrackingAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                                $root.google.cloud.videointelligence.v1.Entity.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1.ObjectTrackingFrame.encode(message.frames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1.VideoSegment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.confidence);
                            if (message.trackId != null && Object.hasOwnProperty.call(message, "trackId"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.trackId);
                            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.version);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.ObjectTrackingAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.IObjectTrackingAnnotation} message ObjectTrackingAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ObjectTrackingAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.ObjectTrackingAnnotation} ObjectTrackingAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.ObjectTrackingAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 3: {
                                        message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.trackId = reader.int64();
                                        break;
                                    }
                                case 1: {
                                        message.entity = $root.google.cloud.videointelligence.v1.Entity.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1.ObjectTrackingFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 6: {
                                        message.version = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ObjectTrackingAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.ObjectTrackingAnnotation} ObjectTrackingAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ObjectTrackingAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ObjectTrackingAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                properties.trackInfo = 1;
                                {
                                    var error = $root.google.cloud.videointelligence.v1.VideoSegment.verify(message.segment);
                                    if (error)
                                        return "segment." + error;
                                }
                            }
                            if (message.trackId != null && message.hasOwnProperty("trackId")) {
                                if (properties.trackInfo === 1)
                                    return "trackInfo: multiple values";
                                properties.trackInfo = 1;
                                if (!$util.isInteger(message.trackId) && !(message.trackId && $util.isInteger(message.trackId.low) && $util.isInteger(message.trackId.high)))
                                    return "trackId: integer|Long expected";
                            }
                            if (message.entity != null && message.hasOwnProperty("entity")) {
                                var error = $root.google.cloud.videointelligence.v1.Entity.verify(message.entity);
                                if (error)
                                    return "entity." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.ObjectTrackingFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                if (!$util.isString(message.version))
                                    return "version: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ObjectTrackingAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.ObjectTrackingAnnotation} ObjectTrackingAnnotation
                         */
                        ObjectTrackingAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.ObjectTrackingAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.ObjectTrackingAnnotation();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.ObjectTrackingAnnotation.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.trackId != null)
                                if ($util.Long)
                                    (message.trackId = $util.Long.fromValue(object.trackId)).unsigned = false;
                                else if (typeof object.trackId === "string")
                                    message.trackId = parseInt(object.trackId, 10);
                                else if (typeof object.trackId === "number")
                                    message.trackId = object.trackId;
                                else if (typeof object.trackId === "object")
                                    message.trackId = new $util.LongBits(object.trackId.low >>> 0, object.trackId.high >>> 0).toNumber();
                            if (object.entity != null) {
                                if (typeof object.entity !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.ObjectTrackingAnnotation.entity: object expected");
                                message.entity = $root.google.cloud.videointelligence.v1.Entity.fromObject(object.entity);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1.ObjectTrackingAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.ObjectTrackingAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1.ObjectTrackingFrame.fromObject(object.frames[i]);
                                }
                            }
                            if (object.version != null)
                                message.version = String(object.version);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ObjectTrackingAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.ObjectTrackingAnnotation} message ObjectTrackingAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ObjectTrackingAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.frames = [];
                            if (options.defaults) {
                                object.entity = null;
                                object.confidence = 0;
                                object.version = "";
                            }
                            if (message.entity != null && message.hasOwnProperty("entity"))
                                object.entity = $root.google.cloud.videointelligence.v1.Entity.toObject(message.entity, options);
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1.ObjectTrackingFrame.toObject(message.frames[j], options);
                            }
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                object.segment = $root.google.cloud.videointelligence.v1.VideoSegment.toObject(message.segment, options);
                                if (options.oneofs)
                                    object.trackInfo = "segment";
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.trackId != null && message.hasOwnProperty("trackId")) {
                                if (typeof message.trackId === "number")
                                    object.trackId = options.longs === String ? String(message.trackId) : message.trackId;
                                else
                                    object.trackId = options.longs === String ? $util.Long.prototype.toString.call(message.trackId) : options.longs === Number ? new $util.LongBits(message.trackId.low >>> 0, message.trackId.high >>> 0).toNumber() : message.trackId;
                                if (options.oneofs)
                                    object.trackInfo = "trackId";
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                object.version = message.version;
                            return object;
                        };
    
                        /**
                         * Converts this ObjectTrackingAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ObjectTrackingAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ObjectTrackingAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.ObjectTrackingAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ObjectTrackingAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.ObjectTrackingAnnotation";
                        };
    
                        return ObjectTrackingAnnotation;
                    })();
    
                    v1.LogoRecognitionAnnotation = (function() {
    
                        /**
                         * Properties of a LogoRecognitionAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @interface ILogoRecognitionAnnotation
                         * @property {google.cloud.videointelligence.v1.IEntity|null} [entity] LogoRecognitionAnnotation entity
                         * @property {Array.<google.cloud.videointelligence.v1.ITrack>|null} [tracks] LogoRecognitionAnnotation tracks
                         * @property {Array.<google.cloud.videointelligence.v1.IVideoSegment>|null} [segments] LogoRecognitionAnnotation segments
                         */
    
                        /**
                         * Constructs a new LogoRecognitionAnnotation.
                         * @memberof google.cloud.videointelligence.v1
                         * @classdesc Represents a LogoRecognitionAnnotation.
                         * @implements ILogoRecognitionAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1.ILogoRecognitionAnnotation=} [properties] Properties to set
                         */
                        function LogoRecognitionAnnotation(properties) {
                            this.tracks = [];
                            this.segments = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LogoRecognitionAnnotation entity.
                         * @member {google.cloud.videointelligence.v1.IEntity|null|undefined} entity
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @instance
                         */
                        LogoRecognitionAnnotation.prototype.entity = null;
    
                        /**
                         * LogoRecognitionAnnotation tracks.
                         * @member {Array.<google.cloud.videointelligence.v1.ITrack>} tracks
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @instance
                         */
                        LogoRecognitionAnnotation.prototype.tracks = $util.emptyArray;
    
                        /**
                         * LogoRecognitionAnnotation segments.
                         * @member {Array.<google.cloud.videointelligence.v1.IVideoSegment>} segments
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @instance
                         */
                        LogoRecognitionAnnotation.prototype.segments = $util.emptyArray;
    
                        /**
                         * Creates a new LogoRecognitionAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILogoRecognitionAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1.LogoRecognitionAnnotation} LogoRecognitionAnnotation instance
                         */
                        LogoRecognitionAnnotation.create = function create(properties) {
                            return new LogoRecognitionAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified LogoRecognitionAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1.LogoRecognitionAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILogoRecognitionAnnotation} message LogoRecognitionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogoRecognitionAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                                $root.google.cloud.videointelligence.v1.Entity.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.tracks != null && message.tracks.length)
                                for (var i = 0; i < message.tracks.length; ++i)
                                    $root.google.cloud.videointelligence.v1.Track.encode(message.tracks[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1.VideoSegment.encode(message.segments[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LogoRecognitionAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1.LogoRecognitionAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.ILogoRecognitionAnnotation} message LogoRecognitionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogoRecognitionAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LogoRecognitionAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1.LogoRecognitionAnnotation} LogoRecognitionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogoRecognitionAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1.LogoRecognitionAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.entity = $root.google.cloud.videointelligence.v1.Entity.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.tracks && message.tracks.length))
                                            message.tracks = [];
                                        message.tracks.push($root.google.cloud.videointelligence.v1.Track.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LogoRecognitionAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1.LogoRecognitionAnnotation} LogoRecognitionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogoRecognitionAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LogoRecognitionAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LogoRecognitionAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entity != null && message.hasOwnProperty("entity")) {
                                var error = $root.google.cloud.videointelligence.v1.Entity.verify(message.entity);
                                if (error)
                                    return "entity." + error;
                            }
                            if (message.tracks != null && message.hasOwnProperty("tracks")) {
                                if (!Array.isArray(message.tracks))
                                    return "tracks: array expected";
                                for (var i = 0; i < message.tracks.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.Track.verify(message.tracks[i]);
                                    if (error)
                                        return "tracks." + error;
                                }
                            }
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1.VideoSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a LogoRecognitionAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1.LogoRecognitionAnnotation} LogoRecognitionAnnotation
                         */
                        LogoRecognitionAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1.LogoRecognitionAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1.LogoRecognitionAnnotation();
                            if (object.entity != null) {
                                if (typeof object.entity !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1.LogoRecognitionAnnotation.entity: object expected");
                                message.entity = $root.google.cloud.videointelligence.v1.Entity.fromObject(object.entity);
                            }
                            if (object.tracks) {
                                if (!Array.isArray(object.tracks))
                                    throw TypeError(".google.cloud.videointelligence.v1.LogoRecognitionAnnotation.tracks: array expected");
                                message.tracks = [];
                                for (var i = 0; i < object.tracks.length; ++i) {
                                    if (typeof object.tracks[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.LogoRecognitionAnnotation.tracks: object expected");
                                    message.tracks[i] = $root.google.cloud.videointelligence.v1.Track.fromObject(object.tracks[i]);
                                }
                            }
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1.LogoRecognitionAnnotation.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1.LogoRecognitionAnnotation.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1.VideoSegment.fromObject(object.segments[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LogoRecognitionAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1.LogoRecognitionAnnotation} message LogoRecognitionAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LogoRecognitionAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.tracks = [];
                                object.segments = [];
                            }
                            if (options.defaults)
                                object.entity = null;
                            if (message.entity != null && message.hasOwnProperty("entity"))
                                object.entity = $root.google.cloud.videointelligence.v1.Entity.toObject(message.entity, options);
                            if (message.tracks && message.tracks.length) {
                                object.tracks = [];
                                for (var j = 0; j < message.tracks.length; ++j)
                                    object.tracks[j] = $root.google.cloud.videointelligence.v1.Track.toObject(message.tracks[j], options);
                            }
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1.VideoSegment.toObject(message.segments[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this LogoRecognitionAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LogoRecognitionAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LogoRecognitionAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1.LogoRecognitionAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LogoRecognitionAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1.LogoRecognitionAnnotation";
                        };
    
                        return LogoRecognitionAnnotation;
                    })();
    
                    return v1;
                })();
    
                videointelligence.v1beta2 = (function() {
    
                    /**
                     * Namespace v1beta2.
                     * @memberof google.cloud.videointelligence
                     * @namespace
                     */
                    var v1beta2 = {};
    
                    v1beta2.VideoIntelligenceService = (function() {
    
                        /**
                         * Constructs a new VideoIntelligenceService service.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a VideoIntelligenceService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function VideoIntelligenceService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (VideoIntelligenceService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = VideoIntelligenceService;
    
                        /**
                         * Creates new VideoIntelligenceService service using the specified rpc implementation.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.VideoIntelligenceService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {VideoIntelligenceService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        VideoIntelligenceService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.cloud.videointelligence.v1beta2.VideoIntelligenceService|annotateVideo}.
                         * @memberof google.cloud.videointelligence.v1beta2.VideoIntelligenceService
                         * @typedef AnnotateVideoCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls AnnotateVideo.
                         * @function annotateVideo
                         * @memberof google.cloud.videointelligence.v1beta2.VideoIntelligenceService
                         * @instance
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoRequest} request AnnotateVideoRequest message or plain object
                         * @param {google.cloud.videointelligence.v1beta2.VideoIntelligenceService.AnnotateVideoCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(VideoIntelligenceService.prototype.annotateVideo = function annotateVideo(request, callback) {
                            return this.rpcCall(annotateVideo, $root.google.cloud.videointelligence.v1beta2.AnnotateVideoRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "AnnotateVideo" });
    
                        /**
                         * Calls AnnotateVideo.
                         * @function annotateVideo
                         * @memberof google.cloud.videointelligence.v1beta2.VideoIntelligenceService
                         * @instance
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoRequest} request AnnotateVideoRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        return VideoIntelligenceService;
                    })();
    
                    v1beta2.AnnotateVideoRequest = (function() {
    
                        /**
                         * Properties of an AnnotateVideoRequest.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IAnnotateVideoRequest
                         * @property {string|null} [inputUri] AnnotateVideoRequest inputUri
                         * @property {Uint8Array|null} [inputContent] AnnotateVideoRequest inputContent
                         * @property {Array.<google.cloud.videointelligence.v1beta2.Feature>|null} [features] AnnotateVideoRequest features
                         * @property {google.cloud.videointelligence.v1beta2.IVideoContext|null} [videoContext] AnnotateVideoRequest videoContext
                         * @property {string|null} [outputUri] AnnotateVideoRequest outputUri
                         * @property {string|null} [locationId] AnnotateVideoRequest locationId
                         */
    
                        /**
                         * Constructs a new AnnotateVideoRequest.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents an AnnotateVideoRequest.
                         * @implements IAnnotateVideoRequest
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoRequest=} [properties] Properties to set
                         */
                        function AnnotateVideoRequest(properties) {
                            this.features = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoRequest inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.inputUri = "";
    
                        /**
                         * AnnotateVideoRequest inputContent.
                         * @member {Uint8Array} inputContent
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.inputContent = $util.newBuffer([]);
    
                        /**
                         * AnnotateVideoRequest features.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.Feature>} features
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.features = $util.emptyArray;
    
                        /**
                         * AnnotateVideoRequest videoContext.
                         * @member {google.cloud.videointelligence.v1beta2.IVideoContext|null|undefined} videoContext
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.videoContext = null;
    
                        /**
                         * AnnotateVideoRequest outputUri.
                         * @member {string} outputUri
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.outputUri = "";
    
                        /**
                         * AnnotateVideoRequest locationId.
                         * @member {string} locationId
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new AnnotateVideoRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoRequest=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.AnnotateVideoRequest} AnnotateVideoRequest instance
                         */
                        AnnotateVideoRequest.create = function create(properties) {
                            return new AnnotateVideoRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoRequest message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoRequest} message AnnotateVideoRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.features != null && message.features.length) {
                                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                                for (var i = 0; i < message.features.length; ++i)
                                    writer.int32(message.features[i]);
                                writer.ldelim();
                            }
                            if (message.videoContext != null && Object.hasOwnProperty.call(message, "videoContext"))
                                $root.google.cloud.videointelligence.v1beta2.VideoContext.encode(message.videoContext, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.outputUri != null && Object.hasOwnProperty.call(message, "outputUri"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.outputUri);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.locationId);
                            if (message.inputContent != null && Object.hasOwnProperty.call(message, "inputContent"))
                                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.inputContent);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoRequest message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoRequest} message AnnotateVideoRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.AnnotateVideoRequest} AnnotateVideoRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.AnnotateVideoRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.inputContent = reader.bytes();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.features && message.features.length))
                                            message.features = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.features.push(reader.int32());
                                        } else
                                            message.features.push(reader.int32());
                                        break;
                                    }
                                case 3: {
                                        message.videoContext = $root.google.cloud.videointelligence.v1beta2.VideoContext.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.outputUri = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.locationId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.AnnotateVideoRequest} AnnotateVideoRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoRequest message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.inputContent != null && message.hasOwnProperty("inputContent"))
                                if (!(message.inputContent && typeof message.inputContent.length === "number" || $util.isString(message.inputContent)))
                                    return "inputContent: buffer expected";
                            if (message.features != null && message.hasOwnProperty("features")) {
                                if (!Array.isArray(message.features))
                                    return "features: array expected";
                                for (var i = 0; i < message.features.length; ++i)
                                    switch (message.features[i]) {
                                    default:
                                        return "features: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                        break;
                                    }
                            }
                            if (message.videoContext != null && message.hasOwnProperty("videoContext")) {
                                var error = $root.google.cloud.videointelligence.v1beta2.VideoContext.verify(message.videoContext);
                                if (error)
                                    return "videoContext." + error;
                            }
                            if (message.outputUri != null && message.hasOwnProperty("outputUri"))
                                if (!$util.isString(message.outputUri))
                                    return "outputUri: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.AnnotateVideoRequest} AnnotateVideoRequest
                         */
                        AnnotateVideoRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.AnnotateVideoRequest)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.AnnotateVideoRequest();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.inputContent != null)
                                if (typeof object.inputContent === "string")
                                    $util.base64.decode(object.inputContent, message.inputContent = $util.newBuffer($util.base64.length(object.inputContent)), 0);
                                else if (object.inputContent.length >= 0)
                                    message.inputContent = object.inputContent;
                            if (object.features) {
                                if (!Array.isArray(object.features))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.features: array expected");
                                message.features = [];
                                for (var i = 0; i < object.features.length; ++i)
                                    switch (object.features[i]) {
                                    default:
                                        if (typeof object.features[i] === "number") {
                                            message.features[i] = object.features[i];
                                            break;
                                        }
                                    case "FEATURE_UNSPECIFIED":
                                    case 0:
                                        message.features[i] = 0;
                                        break;
                                    case "LABEL_DETECTION":
                                    case 1:
                                        message.features[i] = 1;
                                        break;
                                    case "SHOT_CHANGE_DETECTION":
                                    case 2:
                                        message.features[i] = 2;
                                        break;
                                    case "EXPLICIT_CONTENT_DETECTION":
                                    case 3:
                                        message.features[i] = 3;
                                        break;
                                    case "FACE_DETECTION":
                                    case 4:
                                        message.features[i] = 4;
                                        break;
                                    }
                            }
                            if (object.videoContext != null) {
                                if (typeof object.videoContext !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.AnnotateVideoRequest.videoContext: object expected");
                                message.videoContext = $root.google.cloud.videointelligence.v1beta2.VideoContext.fromObject(object.videoContext);
                            }
                            if (object.outputUri != null)
                                message.outputUri = String(object.outputUri);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.AnnotateVideoRequest} message AnnotateVideoRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.features = [];
                            if (options.defaults) {
                                object.inputUri = "";
                                object.videoContext = null;
                                object.outputUri = "";
                                object.locationId = "";
                                if (options.bytes === String)
                                    object.inputContent = "";
                                else {
                                    object.inputContent = [];
                                    if (options.bytes !== Array)
                                        object.inputContent = $util.newBuffer(object.inputContent);
                                }
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.features && message.features.length) {
                                object.features = [];
                                for (var j = 0; j < message.features.length; ++j)
                                    object.features[j] = options.enums === String ? $root.google.cloud.videointelligence.v1beta2.Feature[message.features[j]] === undefined ? message.features[j] : $root.google.cloud.videointelligence.v1beta2.Feature[message.features[j]] : message.features[j];
                            }
                            if (message.videoContext != null && message.hasOwnProperty("videoContext"))
                                object.videoContext = $root.google.cloud.videointelligence.v1beta2.VideoContext.toObject(message.videoContext, options);
                            if (message.outputUri != null && message.hasOwnProperty("outputUri"))
                                object.outputUri = message.outputUri;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            if (message.inputContent != null && message.hasOwnProperty("inputContent"))
                                object.inputContent = options.bytes === String ? $util.base64.encode(message.inputContent, 0, message.inputContent.length) : options.bytes === Array ? Array.prototype.slice.call(message.inputContent) : message.inputContent;
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.AnnotateVideoRequest";
                        };
    
                        return AnnotateVideoRequest;
                    })();
    
                    v1beta2.VideoContext = (function() {
    
                        /**
                         * Properties of a VideoContext.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IVideoContext
                         * @property {Array.<google.cloud.videointelligence.v1beta2.IVideoSegment>|null} [segments] VideoContext segments
                         * @property {google.cloud.videointelligence.v1beta2.ILabelDetectionConfig|null} [labelDetectionConfig] VideoContext labelDetectionConfig
                         * @property {google.cloud.videointelligence.v1beta2.IShotChangeDetectionConfig|null} [shotChangeDetectionConfig] VideoContext shotChangeDetectionConfig
                         * @property {google.cloud.videointelligence.v1beta2.IExplicitContentDetectionConfig|null} [explicitContentDetectionConfig] VideoContext explicitContentDetectionConfig
                         * @property {google.cloud.videointelligence.v1beta2.IFaceDetectionConfig|null} [faceDetectionConfig] VideoContext faceDetectionConfig
                         */
    
                        /**
                         * Constructs a new VideoContext.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a VideoContext.
                         * @implements IVideoContext
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IVideoContext=} [properties] Properties to set
                         */
                        function VideoContext(properties) {
                            this.segments = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoContext segments.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.IVideoSegment>} segments
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.segments = $util.emptyArray;
    
                        /**
                         * VideoContext labelDetectionConfig.
                         * @member {google.cloud.videointelligence.v1beta2.ILabelDetectionConfig|null|undefined} labelDetectionConfig
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.labelDetectionConfig = null;
    
                        /**
                         * VideoContext shotChangeDetectionConfig.
                         * @member {google.cloud.videointelligence.v1beta2.IShotChangeDetectionConfig|null|undefined} shotChangeDetectionConfig
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.shotChangeDetectionConfig = null;
    
                        /**
                         * VideoContext explicitContentDetectionConfig.
                         * @member {google.cloud.videointelligence.v1beta2.IExplicitContentDetectionConfig|null|undefined} explicitContentDetectionConfig
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.explicitContentDetectionConfig = null;
    
                        /**
                         * VideoContext faceDetectionConfig.
                         * @member {google.cloud.videointelligence.v1beta2.IFaceDetectionConfig|null|undefined} faceDetectionConfig
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.faceDetectionConfig = null;
    
                        /**
                         * Creates a new VideoContext instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IVideoContext=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.VideoContext} VideoContext instance
                         */
                        VideoContext.create = function create(properties) {
                            return new VideoContext(properties);
                        };
    
                        /**
                         * Encodes the specified VideoContext message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.VideoContext.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IVideoContext} message VideoContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoContext.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.VideoSegment.encode(message.segments[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.labelDetectionConfig != null && Object.hasOwnProperty.call(message, "labelDetectionConfig"))
                                $root.google.cloud.videointelligence.v1beta2.LabelDetectionConfig.encode(message.labelDetectionConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.shotChangeDetectionConfig != null && Object.hasOwnProperty.call(message, "shotChangeDetectionConfig"))
                                $root.google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.encode(message.shotChangeDetectionConfig, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.explicitContentDetectionConfig != null && Object.hasOwnProperty.call(message, "explicitContentDetectionConfig"))
                                $root.google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.encode(message.explicitContentDetectionConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.faceDetectionConfig != null && Object.hasOwnProperty.call(message, "faceDetectionConfig"))
                                $root.google.cloud.videointelligence.v1beta2.FaceDetectionConfig.encode(message.faceDetectionConfig, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoContext message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.VideoContext.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IVideoContext} message VideoContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoContext.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoContext message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.VideoContext} VideoContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoContext.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.VideoContext();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1beta2.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.labelDetectionConfig = $root.google.cloud.videointelligence.v1beta2.LabelDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.faceDetectionConfig = $root.google.cloud.videointelligence.v1beta2.FaceDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoContext message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.VideoContext} VideoContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoContext.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoContext message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoContext.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.VideoSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.labelDetectionConfig != null && message.hasOwnProperty("labelDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1beta2.LabelDetectionConfig.verify(message.labelDetectionConfig);
                                if (error)
                                    return "labelDetectionConfig." + error;
                            }
                            if (message.shotChangeDetectionConfig != null && message.hasOwnProperty("shotChangeDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.verify(message.shotChangeDetectionConfig);
                                if (error)
                                    return "shotChangeDetectionConfig." + error;
                            }
                            if (message.explicitContentDetectionConfig != null && message.hasOwnProperty("explicitContentDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.verify(message.explicitContentDetectionConfig);
                                if (error)
                                    return "explicitContentDetectionConfig." + error;
                            }
                            if (message.faceDetectionConfig != null && message.hasOwnProperty("faceDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1beta2.FaceDetectionConfig.verify(message.faceDetectionConfig);
                                if (error)
                                    return "faceDetectionConfig." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoContext message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.VideoContext} VideoContext
                         */
                        VideoContext.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.VideoContext)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.VideoContext();
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoContext.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.VideoContext.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1beta2.VideoSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.labelDetectionConfig != null) {
                                if (typeof object.labelDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoContext.labelDetectionConfig: object expected");
                                message.labelDetectionConfig = $root.google.cloud.videointelligence.v1beta2.LabelDetectionConfig.fromObject(object.labelDetectionConfig);
                            }
                            if (object.shotChangeDetectionConfig != null) {
                                if (typeof object.shotChangeDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoContext.shotChangeDetectionConfig: object expected");
                                message.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.fromObject(object.shotChangeDetectionConfig);
                            }
                            if (object.explicitContentDetectionConfig != null) {
                                if (typeof object.explicitContentDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoContext.explicitContentDetectionConfig: object expected");
                                message.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.fromObject(object.explicitContentDetectionConfig);
                            }
                            if (object.faceDetectionConfig != null) {
                                if (typeof object.faceDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoContext.faceDetectionConfig: object expected");
                                message.faceDetectionConfig = $root.google.cloud.videointelligence.v1beta2.FaceDetectionConfig.fromObject(object.faceDetectionConfig);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoContext message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.VideoContext} message VideoContext
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoContext.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.segments = [];
                            if (options.defaults) {
                                object.labelDetectionConfig = null;
                                object.shotChangeDetectionConfig = null;
                                object.explicitContentDetectionConfig = null;
                                object.faceDetectionConfig = null;
                            }
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1beta2.VideoSegment.toObject(message.segments[j], options);
                            }
                            if (message.labelDetectionConfig != null && message.hasOwnProperty("labelDetectionConfig"))
                                object.labelDetectionConfig = $root.google.cloud.videointelligence.v1beta2.LabelDetectionConfig.toObject(message.labelDetectionConfig, options);
                            if (message.shotChangeDetectionConfig != null && message.hasOwnProperty("shotChangeDetectionConfig"))
                                object.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.toObject(message.shotChangeDetectionConfig, options);
                            if (message.explicitContentDetectionConfig != null && message.hasOwnProperty("explicitContentDetectionConfig"))
                                object.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.toObject(message.explicitContentDetectionConfig, options);
                            if (message.faceDetectionConfig != null && message.hasOwnProperty("faceDetectionConfig"))
                                object.faceDetectionConfig = $root.google.cloud.videointelligence.v1beta2.FaceDetectionConfig.toObject(message.faceDetectionConfig, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoContext to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoContext.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoContext
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.VideoContext
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.VideoContext";
                        };
    
                        return VideoContext;
                    })();
    
                    v1beta2.LabelDetectionConfig = (function() {
    
                        /**
                         * Properties of a LabelDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface ILabelDetectionConfig
                         * @property {google.cloud.videointelligence.v1beta2.LabelDetectionMode|null} [labelDetectionMode] LabelDetectionConfig labelDetectionMode
                         * @property {boolean|null} [stationaryCamera] LabelDetectionConfig stationaryCamera
                         * @property {string|null} [model] LabelDetectionConfig model
                         */
    
                        /**
                         * Constructs a new LabelDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a LabelDetectionConfig.
                         * @implements ILabelDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.ILabelDetectionConfig=} [properties] Properties to set
                         */
                        function LabelDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelDetectionConfig labelDetectionMode.
                         * @member {google.cloud.videointelligence.v1beta2.LabelDetectionMode} labelDetectionMode
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.labelDetectionMode = 0;
    
                        /**
                         * LabelDetectionConfig stationaryCamera.
                         * @member {boolean} stationaryCamera
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.stationaryCamera = false;
    
                        /**
                         * LabelDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new LabelDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ILabelDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.LabelDetectionConfig} LabelDetectionConfig instance
                         */
                        LabelDetectionConfig.create = function create(properties) {
                            return new LabelDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified LabelDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.LabelDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ILabelDetectionConfig} message LabelDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.labelDetectionMode != null && Object.hasOwnProperty.call(message, "labelDetectionMode"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.labelDetectionMode);
                            if (message.stationaryCamera != null && Object.hasOwnProperty.call(message, "stationaryCamera"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.stationaryCamera);
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.LabelDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ILabelDetectionConfig} message LabelDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.LabelDetectionConfig} LabelDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.LabelDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.labelDetectionMode = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.stationaryCamera = reader.bool();
                                        break;
                                    }
                                case 3: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.LabelDetectionConfig} LabelDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.labelDetectionMode != null && message.hasOwnProperty("labelDetectionMode"))
                                switch (message.labelDetectionMode) {
                                default:
                                    return "labelDetectionMode: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.stationaryCamera != null && message.hasOwnProperty("stationaryCamera"))
                                if (typeof message.stationaryCamera !== "boolean")
                                    return "stationaryCamera: boolean expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.LabelDetectionConfig} LabelDetectionConfig
                         */
                        LabelDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.LabelDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.LabelDetectionConfig();
                            switch (object.labelDetectionMode) {
                            default:
                                if (typeof object.labelDetectionMode === "number") {
                                    message.labelDetectionMode = object.labelDetectionMode;
                                    break;
                                }
                                break;
                            case "LABEL_DETECTION_MODE_UNSPECIFIED":
                            case 0:
                                message.labelDetectionMode = 0;
                                break;
                            case "SHOT_MODE":
                            case 1:
                                message.labelDetectionMode = 1;
                                break;
                            case "FRAME_MODE":
                            case 2:
                                message.labelDetectionMode = 2;
                                break;
                            case "SHOT_AND_FRAME_MODE":
                            case 3:
                                message.labelDetectionMode = 3;
                                break;
                            }
                            if (object.stationaryCamera != null)
                                message.stationaryCamera = Boolean(object.stationaryCamera);
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.LabelDetectionConfig} message LabelDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.labelDetectionMode = options.enums === String ? "LABEL_DETECTION_MODE_UNSPECIFIED" : 0;
                                object.stationaryCamera = false;
                                object.model = "";
                            }
                            if (message.labelDetectionMode != null && message.hasOwnProperty("labelDetectionMode"))
                                object.labelDetectionMode = options.enums === String ? $root.google.cloud.videointelligence.v1beta2.LabelDetectionMode[message.labelDetectionMode] === undefined ? message.labelDetectionMode : $root.google.cloud.videointelligence.v1beta2.LabelDetectionMode[message.labelDetectionMode] : message.labelDetectionMode;
                            if (message.stationaryCamera != null && message.hasOwnProperty("stationaryCamera"))
                                object.stationaryCamera = message.stationaryCamera;
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this LabelDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.LabelDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.LabelDetectionConfig";
                        };
    
                        return LabelDetectionConfig;
                    })();
    
                    v1beta2.ShotChangeDetectionConfig = (function() {
    
                        /**
                         * Properties of a ShotChangeDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IShotChangeDetectionConfig
                         * @property {string|null} [model] ShotChangeDetectionConfig model
                         */
    
                        /**
                         * Constructs a new ShotChangeDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a ShotChangeDetectionConfig.
                         * @implements IShotChangeDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IShotChangeDetectionConfig=} [properties] Properties to set
                         */
                        function ShotChangeDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ShotChangeDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig
                         * @instance
                         */
                        ShotChangeDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new ShotChangeDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IShotChangeDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig} ShotChangeDetectionConfig instance
                         */
                        ShotChangeDetectionConfig.create = function create(properties) {
                            return new ShotChangeDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ShotChangeDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IShotChangeDetectionConfig} message ShotChangeDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ShotChangeDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ShotChangeDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IShotChangeDetectionConfig} message ShotChangeDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ShotChangeDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ShotChangeDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ShotChangeDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ShotChangeDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ShotChangeDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ShotChangeDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ShotChangeDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ShotChangeDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         */
                        ShotChangeDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ShotChangeDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig} message ShotChangeDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ShotChangeDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.model = "";
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this ShotChangeDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ShotChangeDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ShotChangeDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ShotChangeDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.ShotChangeDetectionConfig";
                        };
    
                        return ShotChangeDetectionConfig;
                    })();
    
                    v1beta2.ExplicitContentDetectionConfig = (function() {
    
                        /**
                         * Properties of an ExplicitContentDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IExplicitContentDetectionConfig
                         * @property {string|null} [model] ExplicitContentDetectionConfig model
                         */
    
                        /**
                         * Constructs a new ExplicitContentDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents an ExplicitContentDetectionConfig.
                         * @implements IExplicitContentDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IExplicitContentDetectionConfig=} [properties] Properties to set
                         */
                        function ExplicitContentDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig
                         * @instance
                         */
                        ExplicitContentDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new ExplicitContentDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IExplicitContentDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig instance
                         */
                        ExplicitContentDetectionConfig.create = function create(properties) {
                            return new ExplicitContentDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IExplicitContentDetectionConfig} message ExplicitContentDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IExplicitContentDetectionConfig} message ExplicitContentDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         */
                        ExplicitContentDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig} message ExplicitContentDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.model = "";
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.ExplicitContentDetectionConfig";
                        };
    
                        return ExplicitContentDetectionConfig;
                    })();
    
                    v1beta2.FaceDetectionConfig = (function() {
    
                        /**
                         * Properties of a FaceDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IFaceDetectionConfig
                         * @property {string|null} [model] FaceDetectionConfig model
                         * @property {boolean|null} [includeBoundingBoxes] FaceDetectionConfig includeBoundingBoxes
                         */
    
                        /**
                         * Constructs a new FaceDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a FaceDetectionConfig.
                         * @implements IFaceDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IFaceDetectionConfig=} [properties] Properties to set
                         */
                        function FaceDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FaceDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1beta2.FaceDetectionConfig
                         * @instance
                         */
                        FaceDetectionConfig.prototype.model = "";
    
                        /**
                         * FaceDetectionConfig includeBoundingBoxes.
                         * @member {boolean} includeBoundingBoxes
                         * @memberof google.cloud.videointelligence.v1beta2.FaceDetectionConfig
                         * @instance
                         */
                        FaceDetectionConfig.prototype.includeBoundingBoxes = false;
    
                        /**
                         * Creates a new FaceDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.FaceDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IFaceDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.FaceDetectionConfig} FaceDetectionConfig instance
                         */
                        FaceDetectionConfig.create = function create(properties) {
                            return new FaceDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified FaceDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.FaceDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.FaceDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IFaceDetectionConfig} message FaceDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            if (message.includeBoundingBoxes != null && Object.hasOwnProperty.call(message, "includeBoundingBoxes"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.includeBoundingBoxes);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FaceDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.FaceDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.FaceDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IFaceDetectionConfig} message FaceDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FaceDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.FaceDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.FaceDetectionConfig} FaceDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.FaceDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.includeBoundingBoxes = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FaceDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.FaceDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.FaceDetectionConfig} FaceDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FaceDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.FaceDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FaceDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            if (message.includeBoundingBoxes != null && message.hasOwnProperty("includeBoundingBoxes"))
                                if (typeof message.includeBoundingBoxes !== "boolean")
                                    return "includeBoundingBoxes: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a FaceDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.FaceDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.FaceDetectionConfig} FaceDetectionConfig
                         */
                        FaceDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.FaceDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.FaceDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            if (object.includeBoundingBoxes != null)
                                message.includeBoundingBoxes = Boolean(object.includeBoundingBoxes);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FaceDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.FaceDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.FaceDetectionConfig} message FaceDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FaceDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.model = "";
                                object.includeBoundingBoxes = false;
                            }
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            if (message.includeBoundingBoxes != null && message.hasOwnProperty("includeBoundingBoxes"))
                                object.includeBoundingBoxes = message.includeBoundingBoxes;
                            return object;
                        };
    
                        /**
                         * Converts this FaceDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.FaceDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FaceDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FaceDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.FaceDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FaceDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.FaceDetectionConfig";
                        };
    
                        return FaceDetectionConfig;
                    })();
    
                    v1beta2.VideoSegment = (function() {
    
                        /**
                         * Properties of a VideoSegment.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IVideoSegment
                         * @property {google.protobuf.IDuration|null} [startTimeOffset] VideoSegment startTimeOffset
                         * @property {google.protobuf.IDuration|null} [endTimeOffset] VideoSegment endTimeOffset
                         */
    
                        /**
                         * Constructs a new VideoSegment.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a VideoSegment.
                         * @implements IVideoSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IVideoSegment=} [properties] Properties to set
                         */
                        function VideoSegment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoSegment startTimeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} startTimeOffset
                         * @memberof google.cloud.videointelligence.v1beta2.VideoSegment
                         * @instance
                         */
                        VideoSegment.prototype.startTimeOffset = null;
    
                        /**
                         * VideoSegment endTimeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} endTimeOffset
                         * @memberof google.cloud.videointelligence.v1beta2.VideoSegment
                         * @instance
                         */
                        VideoSegment.prototype.endTimeOffset = null;
    
                        /**
                         * Creates a new VideoSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IVideoSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.VideoSegment} VideoSegment instance
                         */
                        VideoSegment.create = function create(properties) {
                            return new VideoSegment(properties);
                        };
    
                        /**
                         * Encodes the specified VideoSegment message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.VideoSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IVideoSegment} message VideoSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.startTimeOffset != null && Object.hasOwnProperty.call(message, "startTimeOffset"))
                                $root.google.protobuf.Duration.encode(message.startTimeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.endTimeOffset != null && Object.hasOwnProperty.call(message, "endTimeOffset"))
                                $root.google.protobuf.Duration.encode(message.endTimeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.VideoSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IVideoSegment} message VideoSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.VideoSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.VideoSegment} VideoSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.VideoSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.startTimeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.endTimeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.VideoSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.VideoSegment} VideoSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.VideoSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.startTimeOffset != null && message.hasOwnProperty("startTimeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.startTimeOffset);
                                if (error)
                                    return "startTimeOffset." + error;
                            }
                            if (message.endTimeOffset != null && message.hasOwnProperty("endTimeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.endTimeOffset);
                                if (error)
                                    return "endTimeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.VideoSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.VideoSegment} VideoSegment
                         */
                        VideoSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.VideoSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.VideoSegment();
                            if (object.startTimeOffset != null) {
                                if (typeof object.startTimeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoSegment.startTimeOffset: object expected");
                                message.startTimeOffset = $root.google.protobuf.Duration.fromObject(object.startTimeOffset);
                            }
                            if (object.endTimeOffset != null) {
                                if (typeof object.endTimeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoSegment.endTimeOffset: object expected");
                                message.endTimeOffset = $root.google.protobuf.Duration.fromObject(object.endTimeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.VideoSegment} message VideoSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.startTimeOffset = null;
                                object.endTimeOffset = null;
                            }
                            if (message.startTimeOffset != null && message.hasOwnProperty("startTimeOffset"))
                                object.startTimeOffset = $root.google.protobuf.Duration.toObject(message.startTimeOffset, options);
                            if (message.endTimeOffset != null && message.hasOwnProperty("endTimeOffset"))
                                object.endTimeOffset = $root.google.protobuf.Duration.toObject(message.endTimeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.VideoSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.VideoSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.VideoSegment";
                        };
    
                        return VideoSegment;
                    })();
    
                    v1beta2.LabelSegment = (function() {
    
                        /**
                         * Properties of a LabelSegment.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface ILabelSegment
                         * @property {google.cloud.videointelligence.v1beta2.IVideoSegment|null} [segment] LabelSegment segment
                         * @property {number|null} [confidence] LabelSegment confidence
                         */
    
                        /**
                         * Constructs a new LabelSegment.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a LabelSegment.
                         * @implements ILabelSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.ILabelSegment=} [properties] Properties to set
                         */
                        function LabelSegment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelSegment segment.
                         * @member {google.cloud.videointelligence.v1beta2.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1beta2.LabelSegment
                         * @instance
                         */
                        LabelSegment.prototype.segment = null;
    
                        /**
                         * LabelSegment confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1beta2.LabelSegment
                         * @instance
                         */
                        LabelSegment.prototype.confidence = 0;
    
                        /**
                         * Creates a new LabelSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ILabelSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.LabelSegment} LabelSegment instance
                         */
                        LabelSegment.create = function create(properties) {
                            return new LabelSegment(properties);
                        };
    
                        /**
                         * Encodes the specified LabelSegment message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.LabelSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ILabelSegment} message LabelSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1beta2.VideoSegment.encode(message.segment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.LabelSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ILabelSegment} message LabelSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.LabelSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.LabelSegment} LabelSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.LabelSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.segment = $root.google.cloud.videointelligence.v1beta2.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.LabelSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.LabelSegment} LabelSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.LabelSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1beta2.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.LabelSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.LabelSegment} LabelSegment
                         */
                        LabelSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.LabelSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.LabelSegment();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.LabelSegment.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1beta2.VideoSegment.fromObject(object.segment);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.LabelSegment} message LabelSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.segment = null;
                                object.confidence = 0;
                            }
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1beta2.VideoSegment.toObject(message.segment, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this LabelSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.LabelSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.LabelSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.LabelSegment";
                        };
    
                        return LabelSegment;
                    })();
    
                    v1beta2.LabelFrame = (function() {
    
                        /**
                         * Properties of a LabelFrame.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface ILabelFrame
                         * @property {google.protobuf.IDuration|null} [timeOffset] LabelFrame timeOffset
                         * @property {number|null} [confidence] LabelFrame confidence
                         */
    
                        /**
                         * Constructs a new LabelFrame.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a LabelFrame.
                         * @implements ILabelFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.ILabelFrame=} [properties] Properties to set
                         */
                        function LabelFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1beta2.LabelFrame
                         * @instance
                         */
                        LabelFrame.prototype.timeOffset = null;
    
                        /**
                         * LabelFrame confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1beta2.LabelFrame
                         * @instance
                         */
                        LabelFrame.prototype.confidence = 0;
    
                        /**
                         * Creates a new LabelFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ILabelFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.LabelFrame} LabelFrame instance
                         */
                        LabelFrame.create = function create(properties) {
                            return new LabelFrame(properties);
                        };
    
                        /**
                         * Encodes the specified LabelFrame message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.LabelFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ILabelFrame} message LabelFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.LabelFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ILabelFrame} message LabelFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.LabelFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.LabelFrame} LabelFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.LabelFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.LabelFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.LabelFrame} LabelFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.LabelFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.LabelFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.LabelFrame} LabelFrame
                         */
                        LabelFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.LabelFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.LabelFrame();
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.LabelFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.LabelFrame} message LabelFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.timeOffset = null;
                                object.confidence = 0;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this LabelFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.LabelFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.LabelFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.LabelFrame";
                        };
    
                        return LabelFrame;
                    })();
    
                    v1beta2.Entity = (function() {
    
                        /**
                         * Properties of an Entity.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IEntity
                         * @property {string|null} [entityId] Entity entityId
                         * @property {string|null} [description] Entity description
                         * @property {string|null} [languageCode] Entity languageCode
                         */
    
                        /**
                         * Constructs a new Entity.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents an Entity.
                         * @implements IEntity
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IEntity=} [properties] Properties to set
                         */
                        function Entity(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Entity entityId.
                         * @member {string} entityId
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @instance
                         */
                        Entity.prototype.entityId = "";
    
                        /**
                         * Entity description.
                         * @member {string} description
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @instance
                         */
                        Entity.prototype.description = "";
    
                        /**
                         * Entity languageCode.
                         * @member {string} languageCode
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @instance
                         */
                        Entity.prototype.languageCode = "";
    
                        /**
                         * Creates a new Entity instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IEntity=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.Entity} Entity instance
                         */
                        Entity.create = function create(properties) {
                            return new Entity(properties);
                        };
    
                        /**
                         * Encodes the specified Entity message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.Entity.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entityId != null && Object.hasOwnProperty.call(message, "entityId"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.entityId);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                            if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.languageCode);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Entity message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.Entity.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.Entity();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.entityId = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.description = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.languageCode = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Entity message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Entity.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entityId != null && message.hasOwnProperty("entityId"))
                                if (!$util.isString(message.entityId))
                                    return "entityId: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                if (!$util.isString(message.languageCode))
                                    return "languageCode: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an Entity message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.Entity} Entity
                         */
                        Entity.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.Entity)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.Entity();
                            if (object.entityId != null)
                                message.entityId = String(object.entityId);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.languageCode != null)
                                message.languageCode = String(object.languageCode);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Entity message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.Entity} message Entity
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Entity.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.entityId = "";
                                object.description = "";
                                object.languageCode = "";
                            }
                            if (message.entityId != null && message.hasOwnProperty("entityId"))
                                object.entityId = message.entityId;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                object.languageCode = message.languageCode;
                            return object;
                        };
    
                        /**
                         * Converts this Entity to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Entity.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Entity
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.Entity
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Entity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.Entity";
                        };
    
                        return Entity;
                    })();
    
                    v1beta2.LabelAnnotation = (function() {
    
                        /**
                         * Properties of a LabelAnnotation.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface ILabelAnnotation
                         * @property {google.cloud.videointelligence.v1beta2.IEntity|null} [entity] LabelAnnotation entity
                         * @property {Array.<google.cloud.videointelligence.v1beta2.IEntity>|null} [categoryEntities] LabelAnnotation categoryEntities
                         * @property {Array.<google.cloud.videointelligence.v1beta2.ILabelSegment>|null} [segments] LabelAnnotation segments
                         * @property {Array.<google.cloud.videointelligence.v1beta2.ILabelFrame>|null} [frames] LabelAnnotation frames
                         */
    
                        /**
                         * Constructs a new LabelAnnotation.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a LabelAnnotation.
                         * @implements ILabelAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.ILabelAnnotation=} [properties] Properties to set
                         */
                        function LabelAnnotation(properties) {
                            this.categoryEntities = [];
                            this.segments = [];
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelAnnotation entity.
                         * @member {google.cloud.videointelligence.v1beta2.IEntity|null|undefined} entity
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.entity = null;
    
                        /**
                         * LabelAnnotation categoryEntities.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.IEntity>} categoryEntities
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.categoryEntities = $util.emptyArray;
    
                        /**
                         * LabelAnnotation segments.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.ILabelSegment>} segments
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.segments = $util.emptyArray;
    
                        /**
                         * LabelAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.ILabelFrame>} frames
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new LabelAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ILabelAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.LabelAnnotation} LabelAnnotation instance
                         */
                        LabelAnnotation.create = function create(properties) {
                            return new LabelAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified LabelAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.LabelAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ILabelAnnotation} message LabelAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                                $root.google.cloud.videointelligence.v1beta2.Entity.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.categoryEntities != null && message.categoryEntities.length)
                                for (var i = 0; i < message.categoryEntities.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.Entity.encode(message.categoryEntities[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.LabelSegment.encode(message.segments[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.LabelFrame.encode(message.frames[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.LabelAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ILabelAnnotation} message LabelAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.LabelAnnotation} LabelAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.LabelAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.entity = $root.google.cloud.videointelligence.v1beta2.Entity.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.categoryEntities && message.categoryEntities.length))
                                            message.categoryEntities = [];
                                        message.categoryEntities.push($root.google.cloud.videointelligence.v1beta2.Entity.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1beta2.LabelSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1beta2.LabelFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.LabelAnnotation} LabelAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entity != null && message.hasOwnProperty("entity")) {
                                var error = $root.google.cloud.videointelligence.v1beta2.Entity.verify(message.entity);
                                if (error)
                                    return "entity." + error;
                            }
                            if (message.categoryEntities != null && message.hasOwnProperty("categoryEntities")) {
                                if (!Array.isArray(message.categoryEntities))
                                    return "categoryEntities: array expected";
                                for (var i = 0; i < message.categoryEntities.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.Entity.verify(message.categoryEntities[i]);
                                    if (error)
                                        return "categoryEntities." + error;
                                }
                            }
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.LabelSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.LabelFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a LabelAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.LabelAnnotation} LabelAnnotation
                         */
                        LabelAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.LabelAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.LabelAnnotation();
                            if (object.entity != null) {
                                if (typeof object.entity !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.LabelAnnotation.entity: object expected");
                                message.entity = $root.google.cloud.videointelligence.v1beta2.Entity.fromObject(object.entity);
                            }
                            if (object.categoryEntities) {
                                if (!Array.isArray(object.categoryEntities))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.LabelAnnotation.categoryEntities: array expected");
                                message.categoryEntities = [];
                                for (var i = 0; i < object.categoryEntities.length; ++i) {
                                    if (typeof object.categoryEntities[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.LabelAnnotation.categoryEntities: object expected");
                                    message.categoryEntities[i] = $root.google.cloud.videointelligence.v1beta2.Entity.fromObject(object.categoryEntities[i]);
                                }
                            }
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.LabelAnnotation.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.LabelAnnotation.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1beta2.LabelSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.LabelAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.LabelAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1beta2.LabelFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.LabelAnnotation} message LabelAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.categoryEntities = [];
                                object.segments = [];
                                object.frames = [];
                            }
                            if (options.defaults)
                                object.entity = null;
                            if (message.entity != null && message.hasOwnProperty("entity"))
                                object.entity = $root.google.cloud.videointelligence.v1beta2.Entity.toObject(message.entity, options);
                            if (message.categoryEntities && message.categoryEntities.length) {
                                object.categoryEntities = [];
                                for (var j = 0; j < message.categoryEntities.length; ++j)
                                    object.categoryEntities[j] = $root.google.cloud.videointelligence.v1beta2.Entity.toObject(message.categoryEntities[j], options);
                            }
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1beta2.LabelSegment.toObject(message.segments[j], options);
                            }
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1beta2.LabelFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this LabelAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.LabelAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.LabelAnnotation";
                        };
    
                        return LabelAnnotation;
                    })();
    
                    v1beta2.ExplicitContentFrame = (function() {
    
                        /**
                         * Properties of an ExplicitContentFrame.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IExplicitContentFrame
                         * @property {google.protobuf.IDuration|null} [timeOffset] ExplicitContentFrame timeOffset
                         * @property {google.cloud.videointelligence.v1beta2.Likelihood|null} [pornographyLikelihood] ExplicitContentFrame pornographyLikelihood
                         */
    
                        /**
                         * Constructs a new ExplicitContentFrame.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents an ExplicitContentFrame.
                         * @implements IExplicitContentFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IExplicitContentFrame=} [properties] Properties to set
                         */
                        function ExplicitContentFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentFrame
                         * @instance
                         */
                        ExplicitContentFrame.prototype.timeOffset = null;
    
                        /**
                         * ExplicitContentFrame pornographyLikelihood.
                         * @member {google.cloud.videointelligence.v1beta2.Likelihood} pornographyLikelihood
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentFrame
                         * @instance
                         */
                        ExplicitContentFrame.prototype.pornographyLikelihood = 0;
    
                        /**
                         * Creates a new ExplicitContentFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IExplicitContentFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.ExplicitContentFrame} ExplicitContentFrame instance
                         */
                        ExplicitContentFrame.create = function create(properties) {
                            return new ExplicitContentFrame(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentFrame message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.ExplicitContentFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IExplicitContentFrame} message ExplicitContentFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.pornographyLikelihood != null && Object.hasOwnProperty.call(message, "pornographyLikelihood"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pornographyLikelihood);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.ExplicitContentFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IExplicitContentFrame} message ExplicitContentFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.ExplicitContentFrame} ExplicitContentFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.ExplicitContentFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.pornographyLikelihood = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.ExplicitContentFrame} ExplicitContentFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            if (message.pornographyLikelihood != null && message.hasOwnProperty("pornographyLikelihood"))
                                switch (message.pornographyLikelihood) {
                                default:
                                    return "pornographyLikelihood: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.ExplicitContentFrame} ExplicitContentFrame
                         */
                        ExplicitContentFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.ExplicitContentFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.ExplicitContentFrame();
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.ExplicitContentFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            switch (object.pornographyLikelihood) {
                            default:
                                if (typeof object.pornographyLikelihood === "number") {
                                    message.pornographyLikelihood = object.pornographyLikelihood;
                                    break;
                                }
                                break;
                            case "LIKELIHOOD_UNSPECIFIED":
                            case 0:
                                message.pornographyLikelihood = 0;
                                break;
                            case "VERY_UNLIKELY":
                            case 1:
                                message.pornographyLikelihood = 1;
                                break;
                            case "UNLIKELY":
                            case 2:
                                message.pornographyLikelihood = 2;
                                break;
                            case "POSSIBLE":
                            case 3:
                                message.pornographyLikelihood = 3;
                                break;
                            case "LIKELY":
                            case 4:
                                message.pornographyLikelihood = 4;
                                break;
                            case "VERY_LIKELY":
                            case 5:
                                message.pornographyLikelihood = 5;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ExplicitContentFrame} message ExplicitContentFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.timeOffset = null;
                                object.pornographyLikelihood = options.enums === String ? "LIKELIHOOD_UNSPECIFIED" : 0;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            if (message.pornographyLikelihood != null && message.hasOwnProperty("pornographyLikelihood"))
                                object.pornographyLikelihood = options.enums === String ? $root.google.cloud.videointelligence.v1beta2.Likelihood[message.pornographyLikelihood] === undefined ? message.pornographyLikelihood : $root.google.cloud.videointelligence.v1beta2.Likelihood[message.pornographyLikelihood] : message.pornographyLikelihood;
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.ExplicitContentFrame";
                        };
    
                        return ExplicitContentFrame;
                    })();
    
                    v1beta2.ExplicitContentAnnotation = (function() {
    
                        /**
                         * Properties of an ExplicitContentAnnotation.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IExplicitContentAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1beta2.IExplicitContentFrame>|null} [frames] ExplicitContentAnnotation frames
                         */
    
                        /**
                         * Constructs a new ExplicitContentAnnotation.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents an ExplicitContentAnnotation.
                         * @implements IExplicitContentAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IExplicitContentAnnotation=} [properties] Properties to set
                         */
                        function ExplicitContentAnnotation(properties) {
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.IExplicitContentFrame>} frames
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation
                         * @instance
                         */
                        ExplicitContentAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new ExplicitContentAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IExplicitContentAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation} ExplicitContentAnnotation instance
                         */
                        ExplicitContentAnnotation.create = function create(properties) {
                            return new ExplicitContentAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IExplicitContentAnnotation} message ExplicitContentAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.ExplicitContentFrame.encode(message.frames[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IExplicitContentAnnotation} message ExplicitContentAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation} ExplicitContentAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1beta2.ExplicitContentFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation} ExplicitContentAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.ExplicitContentFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation} ExplicitContentAnnotation
                         */
                        ExplicitContentAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation();
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1beta2.ExplicitContentFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation} message ExplicitContentAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.frames = [];
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1beta2.ExplicitContentFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation";
                        };
    
                        return ExplicitContentAnnotation;
                    })();
    
                    v1beta2.NormalizedBoundingBox = (function() {
    
                        /**
                         * Properties of a NormalizedBoundingBox.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface INormalizedBoundingBox
                         * @property {number|null} [left] NormalizedBoundingBox left
                         * @property {number|null} [top] NormalizedBoundingBox top
                         * @property {number|null} [right] NormalizedBoundingBox right
                         * @property {number|null} [bottom] NormalizedBoundingBox bottom
                         */
    
                        /**
                         * Constructs a new NormalizedBoundingBox.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a NormalizedBoundingBox.
                         * @implements INormalizedBoundingBox
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.INormalizedBoundingBox=} [properties] Properties to set
                         */
                        function NormalizedBoundingBox(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * NormalizedBoundingBox left.
                         * @member {number} left
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.left = 0;
    
                        /**
                         * NormalizedBoundingBox top.
                         * @member {number} top
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.top = 0;
    
                        /**
                         * NormalizedBoundingBox right.
                         * @member {number} right
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.right = 0;
    
                        /**
                         * NormalizedBoundingBox bottom.
                         * @member {number} bottom
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.bottom = 0;
    
                        /**
                         * Creates a new NormalizedBoundingBox instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.INormalizedBoundingBox=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.NormalizedBoundingBox} NormalizedBoundingBox instance
                         */
                        NormalizedBoundingBox.create = function create(properties) {
                            return new NormalizedBoundingBox(properties);
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingBox message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.INormalizedBoundingBox} message NormalizedBoundingBox message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingBox.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.left != null && Object.hasOwnProperty.call(message, "left"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.left);
                            if (message.top != null && Object.hasOwnProperty.call(message, "top"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.top);
                            if (message.right != null && Object.hasOwnProperty.call(message, "right"))
                                writer.uint32(/* id 3, wireType 5 =*/29).float(message.right);
                            if (message.bottom != null && Object.hasOwnProperty.call(message, "bottom"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.bottom);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingBox message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.INormalizedBoundingBox} message NormalizedBoundingBox message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingBox.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a NormalizedBoundingBox message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.NormalizedBoundingBox} NormalizedBoundingBox
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingBox.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.NormalizedBoundingBox();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.left = reader.float();
                                        break;
                                    }
                                case 2: {
                                        message.top = reader.float();
                                        break;
                                    }
                                case 3: {
                                        message.right = reader.float();
                                        break;
                                    }
                                case 4: {
                                        message.bottom = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a NormalizedBoundingBox message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.NormalizedBoundingBox} NormalizedBoundingBox
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingBox.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a NormalizedBoundingBox message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NormalizedBoundingBox.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.left != null && message.hasOwnProperty("left"))
                                if (typeof message.left !== "number")
                                    return "left: number expected";
                            if (message.top != null && message.hasOwnProperty("top"))
                                if (typeof message.top !== "number")
                                    return "top: number expected";
                            if (message.right != null && message.hasOwnProperty("right"))
                                if (typeof message.right !== "number")
                                    return "right: number expected";
                            if (message.bottom != null && message.hasOwnProperty("bottom"))
                                if (typeof message.bottom !== "number")
                                    return "bottom: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a NormalizedBoundingBox message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.NormalizedBoundingBox} NormalizedBoundingBox
                         */
                        NormalizedBoundingBox.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.NormalizedBoundingBox)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.NormalizedBoundingBox();
                            if (object.left != null)
                                message.left = Number(object.left);
                            if (object.top != null)
                                message.top = Number(object.top);
                            if (object.right != null)
                                message.right = Number(object.right);
                            if (object.bottom != null)
                                message.bottom = Number(object.bottom);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a NormalizedBoundingBox message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.NormalizedBoundingBox} message NormalizedBoundingBox
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NormalizedBoundingBox.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.left = 0;
                                object.top = 0;
                                object.right = 0;
                                object.bottom = 0;
                            }
                            if (message.left != null && message.hasOwnProperty("left"))
                                object.left = options.json && !isFinite(message.left) ? String(message.left) : message.left;
                            if (message.top != null && message.hasOwnProperty("top"))
                                object.top = options.json && !isFinite(message.top) ? String(message.top) : message.top;
                            if (message.right != null && message.hasOwnProperty("right"))
                                object.right = options.json && !isFinite(message.right) ? String(message.right) : message.right;
                            if (message.bottom != null && message.hasOwnProperty("bottom"))
                                object.bottom = options.json && !isFinite(message.bottom) ? String(message.bottom) : message.bottom;
                            return object;
                        };
    
                        /**
                         * Converts this NormalizedBoundingBox to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NormalizedBoundingBox.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for NormalizedBoundingBox
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.NormalizedBoundingBox
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        NormalizedBoundingBox.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.NormalizedBoundingBox";
                        };
    
                        return NormalizedBoundingBox;
                    })();
    
                    v1beta2.FaceSegment = (function() {
    
                        /**
                         * Properties of a FaceSegment.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IFaceSegment
                         * @property {google.cloud.videointelligence.v1beta2.IVideoSegment|null} [segment] FaceSegment segment
                         */
    
                        /**
                         * Constructs a new FaceSegment.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a FaceSegment.
                         * @implements IFaceSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IFaceSegment=} [properties] Properties to set
                         */
                        function FaceSegment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FaceSegment segment.
                         * @member {google.cloud.videointelligence.v1beta2.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1beta2.FaceSegment
                         * @instance
                         */
                        FaceSegment.prototype.segment = null;
    
                        /**
                         * Creates a new FaceSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.FaceSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IFaceSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.FaceSegment} FaceSegment instance
                         */
                        FaceSegment.create = function create(properties) {
                            return new FaceSegment(properties);
                        };
    
                        /**
                         * Encodes the specified FaceSegment message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.FaceSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.FaceSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IFaceSegment} message FaceSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1beta2.VideoSegment.encode(message.segment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FaceSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.FaceSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.FaceSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IFaceSegment} message FaceSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FaceSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.FaceSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.FaceSegment} FaceSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.FaceSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.segment = $root.google.cloud.videointelligence.v1beta2.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FaceSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.FaceSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.FaceSegment} FaceSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FaceSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.FaceSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FaceSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1beta2.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a FaceSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.FaceSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.FaceSegment} FaceSegment
                         */
                        FaceSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.FaceSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.FaceSegment();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.FaceSegment.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1beta2.VideoSegment.fromObject(object.segment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FaceSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.FaceSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.FaceSegment} message FaceSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FaceSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.segment = null;
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1beta2.VideoSegment.toObject(message.segment, options);
                            return object;
                        };
    
                        /**
                         * Converts this FaceSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.FaceSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FaceSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FaceSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.FaceSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FaceSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.FaceSegment";
                        };
    
                        return FaceSegment;
                    })();
    
                    v1beta2.FaceFrame = (function() {
    
                        /**
                         * Properties of a FaceFrame.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IFaceFrame
                         * @property {Array.<google.cloud.videointelligence.v1beta2.INormalizedBoundingBox>|null} [normalizedBoundingBoxes] FaceFrame normalizedBoundingBoxes
                         * @property {google.protobuf.IDuration|null} [timeOffset] FaceFrame timeOffset
                         */
    
                        /**
                         * Constructs a new FaceFrame.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a FaceFrame.
                         * @implements IFaceFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IFaceFrame=} [properties] Properties to set
                         */
                        function FaceFrame(properties) {
                            this.normalizedBoundingBoxes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FaceFrame normalizedBoundingBoxes.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.INormalizedBoundingBox>} normalizedBoundingBoxes
                         * @memberof google.cloud.videointelligence.v1beta2.FaceFrame
                         * @instance
                         */
                        FaceFrame.prototype.normalizedBoundingBoxes = $util.emptyArray;
    
                        /**
                         * FaceFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1beta2.FaceFrame
                         * @instance
                         */
                        FaceFrame.prototype.timeOffset = null;
    
                        /**
                         * Creates a new FaceFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.FaceFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IFaceFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.FaceFrame} FaceFrame instance
                         */
                        FaceFrame.create = function create(properties) {
                            return new FaceFrame(properties);
                        };
    
                        /**
                         * Encodes the specified FaceFrame message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.FaceFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.FaceFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IFaceFrame} message FaceFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.normalizedBoundingBoxes != null && message.normalizedBoundingBoxes.length)
                                for (var i = 0; i < message.normalizedBoundingBoxes.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.encode(message.normalizedBoundingBoxes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FaceFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.FaceFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.FaceFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IFaceFrame} message FaceFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FaceFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.FaceFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.FaceFrame} FaceFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.FaceFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.normalizedBoundingBoxes && message.normalizedBoundingBoxes.length))
                                            message.normalizedBoundingBoxes = [];
                                        message.normalizedBoundingBoxes.push($root.google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FaceFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.FaceFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.FaceFrame} FaceFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FaceFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.FaceFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FaceFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.normalizedBoundingBoxes != null && message.hasOwnProperty("normalizedBoundingBoxes")) {
                                if (!Array.isArray(message.normalizedBoundingBoxes))
                                    return "normalizedBoundingBoxes: array expected";
                                for (var i = 0; i < message.normalizedBoundingBoxes.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.verify(message.normalizedBoundingBoxes[i]);
                                    if (error)
                                        return "normalizedBoundingBoxes." + error;
                                }
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a FaceFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.FaceFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.FaceFrame} FaceFrame
                         */
                        FaceFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.FaceFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.FaceFrame();
                            if (object.normalizedBoundingBoxes) {
                                if (!Array.isArray(object.normalizedBoundingBoxes))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.FaceFrame.normalizedBoundingBoxes: array expected");
                                message.normalizedBoundingBoxes = [];
                                for (var i = 0; i < object.normalizedBoundingBoxes.length; ++i) {
                                    if (typeof object.normalizedBoundingBoxes[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.FaceFrame.normalizedBoundingBoxes: object expected");
                                    message.normalizedBoundingBoxes[i] = $root.google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.fromObject(object.normalizedBoundingBoxes[i]);
                                }
                            }
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.FaceFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FaceFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.FaceFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.FaceFrame} message FaceFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FaceFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.normalizedBoundingBoxes = [];
                            if (options.defaults)
                                object.timeOffset = null;
                            if (message.normalizedBoundingBoxes && message.normalizedBoundingBoxes.length) {
                                object.normalizedBoundingBoxes = [];
                                for (var j = 0; j < message.normalizedBoundingBoxes.length; ++j)
                                    object.normalizedBoundingBoxes[j] = $root.google.cloud.videointelligence.v1beta2.NormalizedBoundingBox.toObject(message.normalizedBoundingBoxes[j], options);
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this FaceFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.FaceFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FaceFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FaceFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.FaceFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FaceFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.FaceFrame";
                        };
    
                        return FaceFrame;
                    })();
    
                    v1beta2.FaceAnnotation = (function() {
    
                        /**
                         * Properties of a FaceAnnotation.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IFaceAnnotation
                         * @property {Uint8Array|null} [thumbnail] FaceAnnotation thumbnail
                         * @property {Array.<google.cloud.videointelligence.v1beta2.IFaceSegment>|null} [segments] FaceAnnotation segments
                         * @property {Array.<google.cloud.videointelligence.v1beta2.IFaceFrame>|null} [frames] FaceAnnotation frames
                         */
    
                        /**
                         * Constructs a new FaceAnnotation.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a FaceAnnotation.
                         * @implements IFaceAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IFaceAnnotation=} [properties] Properties to set
                         */
                        function FaceAnnotation(properties) {
                            this.segments = [];
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FaceAnnotation thumbnail.
                         * @member {Uint8Array} thumbnail
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @instance
                         */
                        FaceAnnotation.prototype.thumbnail = $util.newBuffer([]);
    
                        /**
                         * FaceAnnotation segments.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.IFaceSegment>} segments
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @instance
                         */
                        FaceAnnotation.prototype.segments = $util.emptyArray;
    
                        /**
                         * FaceAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.IFaceFrame>} frames
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @instance
                         */
                        FaceAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new FaceAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IFaceAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.FaceAnnotation} FaceAnnotation instance
                         */
                        FaceAnnotation.create = function create(properties) {
                            return new FaceAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified FaceAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.FaceAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IFaceAnnotation} message FaceAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.thumbnail != null && Object.hasOwnProperty.call(message, "thumbnail"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.thumbnail);
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.FaceSegment.encode(message.segments[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.FaceFrame.encode(message.frames[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FaceAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.FaceAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IFaceAnnotation} message FaceAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FaceAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.FaceAnnotation} FaceAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.FaceAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.thumbnail = reader.bytes();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1beta2.FaceSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1beta2.FaceFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FaceAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.FaceAnnotation} FaceAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FaceAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FaceAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.thumbnail != null && message.hasOwnProperty("thumbnail"))
                                if (!(message.thumbnail && typeof message.thumbnail.length === "number" || $util.isString(message.thumbnail)))
                                    return "thumbnail: buffer expected";
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.FaceSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.FaceFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a FaceAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.FaceAnnotation} FaceAnnotation
                         */
                        FaceAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.FaceAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.FaceAnnotation();
                            if (object.thumbnail != null)
                                if (typeof object.thumbnail === "string")
                                    $util.base64.decode(object.thumbnail, message.thumbnail = $util.newBuffer($util.base64.length(object.thumbnail)), 0);
                                else if (object.thumbnail.length >= 0)
                                    message.thumbnail = object.thumbnail;
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.FaceAnnotation.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.FaceAnnotation.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1beta2.FaceSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.FaceAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.FaceAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1beta2.FaceFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FaceAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.FaceAnnotation} message FaceAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FaceAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.segments = [];
                                object.frames = [];
                            }
                            if (options.defaults)
                                if (options.bytes === String)
                                    object.thumbnail = "";
                                else {
                                    object.thumbnail = [];
                                    if (options.bytes !== Array)
                                        object.thumbnail = $util.newBuffer(object.thumbnail);
                                }
                            if (message.thumbnail != null && message.hasOwnProperty("thumbnail"))
                                object.thumbnail = options.bytes === String ? $util.base64.encode(message.thumbnail, 0, message.thumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnail) : message.thumbnail;
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1beta2.FaceSegment.toObject(message.segments[j], options);
                            }
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1beta2.FaceFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this FaceAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FaceAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FaceAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.FaceAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FaceAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.FaceAnnotation";
                        };
    
                        return FaceAnnotation;
                    })();
    
                    v1beta2.VideoAnnotationResults = (function() {
    
                        /**
                         * Properties of a VideoAnnotationResults.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IVideoAnnotationResults
                         * @property {string|null} [inputUri] VideoAnnotationResults inputUri
                         * @property {Array.<google.cloud.videointelligence.v1beta2.ILabelAnnotation>|null} [segmentLabelAnnotations] VideoAnnotationResults segmentLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1beta2.ILabelAnnotation>|null} [shotLabelAnnotations] VideoAnnotationResults shotLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1beta2.ILabelAnnotation>|null} [frameLabelAnnotations] VideoAnnotationResults frameLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1beta2.IFaceAnnotation>|null} [faceAnnotations] VideoAnnotationResults faceAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1beta2.IVideoSegment>|null} [shotAnnotations] VideoAnnotationResults shotAnnotations
                         * @property {google.cloud.videointelligence.v1beta2.IExplicitContentAnnotation|null} [explicitAnnotation] VideoAnnotationResults explicitAnnotation
                         * @property {google.rpc.IStatus|null} [error] VideoAnnotationResults error
                         */
    
                        /**
                         * Constructs a new VideoAnnotationResults.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a VideoAnnotationResults.
                         * @implements IVideoAnnotationResults
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IVideoAnnotationResults=} [properties] Properties to set
                         */
                        function VideoAnnotationResults(properties) {
                            this.segmentLabelAnnotations = [];
                            this.shotLabelAnnotations = [];
                            this.frameLabelAnnotations = [];
                            this.faceAnnotations = [];
                            this.shotAnnotations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoAnnotationResults inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.inputUri = "";
    
                        /**
                         * VideoAnnotationResults segmentLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.ILabelAnnotation>} segmentLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.segmentLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults shotLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.ILabelAnnotation>} shotLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.shotLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults frameLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.ILabelAnnotation>} frameLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.frameLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults faceAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.IFaceAnnotation>} faceAnnotations
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.faceAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults shotAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.IVideoSegment>} shotAnnotations
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.shotAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults explicitAnnotation.
                         * @member {google.cloud.videointelligence.v1beta2.IExplicitContentAnnotation|null|undefined} explicitAnnotation
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.explicitAnnotation = null;
    
                        /**
                         * VideoAnnotationResults error.
                         * @member {google.rpc.IStatus|null|undefined} error
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.error = null;
    
                        /**
                         * Creates a new VideoAnnotationResults instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IVideoAnnotationResults=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.VideoAnnotationResults} VideoAnnotationResults instance
                         */
                        VideoAnnotationResults.create = function create(properties) {
                            return new VideoAnnotationResults(properties);
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationResults message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.VideoAnnotationResults.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IVideoAnnotationResults} message VideoAnnotationResults message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationResults.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.segmentLabelAnnotations != null && message.segmentLabelAnnotations.length)
                                for (var i = 0; i < message.segmentLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.LabelAnnotation.encode(message.segmentLabelAnnotations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.shotLabelAnnotations != null && message.shotLabelAnnotations.length)
                                for (var i = 0; i < message.shotLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.LabelAnnotation.encode(message.shotLabelAnnotations[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.frameLabelAnnotations != null && message.frameLabelAnnotations.length)
                                for (var i = 0; i < message.frameLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.LabelAnnotation.encode(message.frameLabelAnnotations[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.faceAnnotations != null && message.faceAnnotations.length)
                                for (var i = 0; i < message.faceAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.FaceAnnotation.encode(message.faceAnnotations[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.shotAnnotations != null && message.shotAnnotations.length)
                                for (var i = 0; i < message.shotAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.VideoSegment.encode(message.shotAnnotations[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.explicitAnnotation != null && Object.hasOwnProperty.call(message, "explicitAnnotation"))
                                $root.google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.encode(message.explicitAnnotation, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                                $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationResults message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.VideoAnnotationResults.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IVideoAnnotationResults} message VideoAnnotationResults message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationResults.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoAnnotationResults message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.VideoAnnotationResults} VideoAnnotationResults
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationResults.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.VideoAnnotationResults();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.segmentLabelAnnotations && message.segmentLabelAnnotations.length))
                                            message.segmentLabelAnnotations = [];
                                        message.segmentLabelAnnotations.push($root.google.cloud.videointelligence.v1beta2.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.shotLabelAnnotations && message.shotLabelAnnotations.length))
                                            message.shotLabelAnnotations = [];
                                        message.shotLabelAnnotations.push($root.google.cloud.videointelligence.v1beta2.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (!(message.frameLabelAnnotations && message.frameLabelAnnotations.length))
                                            message.frameLabelAnnotations = [];
                                        message.frameLabelAnnotations.push($root.google.cloud.videointelligence.v1beta2.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 5: {
                                        if (!(message.faceAnnotations && message.faceAnnotations.length))
                                            message.faceAnnotations = [];
                                        message.faceAnnotations.push($root.google.cloud.videointelligence.v1beta2.FaceAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 6: {
                                        if (!(message.shotAnnotations && message.shotAnnotations.length))
                                            message.shotAnnotations = [];
                                        message.shotAnnotations.push($root.google.cloud.videointelligence.v1beta2.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 7: {
                                        message.explicitAnnotation = $root.google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoAnnotationResults message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.VideoAnnotationResults} VideoAnnotationResults
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationResults.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoAnnotationResults message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoAnnotationResults.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.segmentLabelAnnotations != null && message.hasOwnProperty("segmentLabelAnnotations")) {
                                if (!Array.isArray(message.segmentLabelAnnotations))
                                    return "segmentLabelAnnotations: array expected";
                                for (var i = 0; i < message.segmentLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.LabelAnnotation.verify(message.segmentLabelAnnotations[i]);
                                    if (error)
                                        return "segmentLabelAnnotations." + error;
                                }
                            }
                            if (message.shotLabelAnnotations != null && message.hasOwnProperty("shotLabelAnnotations")) {
                                if (!Array.isArray(message.shotLabelAnnotations))
                                    return "shotLabelAnnotations: array expected";
                                for (var i = 0; i < message.shotLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.LabelAnnotation.verify(message.shotLabelAnnotations[i]);
                                    if (error)
                                        return "shotLabelAnnotations." + error;
                                }
                            }
                            if (message.frameLabelAnnotations != null && message.hasOwnProperty("frameLabelAnnotations")) {
                                if (!Array.isArray(message.frameLabelAnnotations))
                                    return "frameLabelAnnotations: array expected";
                                for (var i = 0; i < message.frameLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.LabelAnnotation.verify(message.frameLabelAnnotations[i]);
                                    if (error)
                                        return "frameLabelAnnotations." + error;
                                }
                            }
                            if (message.faceAnnotations != null && message.hasOwnProperty("faceAnnotations")) {
                                if (!Array.isArray(message.faceAnnotations))
                                    return "faceAnnotations: array expected";
                                for (var i = 0; i < message.faceAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.FaceAnnotation.verify(message.faceAnnotations[i]);
                                    if (error)
                                        return "faceAnnotations." + error;
                                }
                            }
                            if (message.shotAnnotations != null && message.hasOwnProperty("shotAnnotations")) {
                                if (!Array.isArray(message.shotAnnotations))
                                    return "shotAnnotations: array expected";
                                for (var i = 0; i < message.shotAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.VideoSegment.verify(message.shotAnnotations[i]);
                                    if (error)
                                        return "shotAnnotations." + error;
                                }
                            }
                            if (message.explicitAnnotation != null && message.hasOwnProperty("explicitAnnotation")) {
                                var error = $root.google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.verify(message.explicitAnnotation);
                                if (error)
                                    return "explicitAnnotation." + error;
                            }
                            if (message.error != null && message.hasOwnProperty("error")) {
                                var error = $root.google.rpc.Status.verify(message.error);
                                if (error)
                                    return "error." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoAnnotationResults message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.VideoAnnotationResults} VideoAnnotationResults
                         */
                        VideoAnnotationResults.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.VideoAnnotationResults)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.VideoAnnotationResults();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.segmentLabelAnnotations) {
                                if (!Array.isArray(object.segmentLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationResults.segmentLabelAnnotations: array expected");
                                message.segmentLabelAnnotations = [];
                                for (var i = 0; i < object.segmentLabelAnnotations.length; ++i) {
                                    if (typeof object.segmentLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationResults.segmentLabelAnnotations: object expected");
                                    message.segmentLabelAnnotations[i] = $root.google.cloud.videointelligence.v1beta2.LabelAnnotation.fromObject(object.segmentLabelAnnotations[i]);
                                }
                            }
                            if (object.shotLabelAnnotations) {
                                if (!Array.isArray(object.shotLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shotLabelAnnotations: array expected");
                                message.shotLabelAnnotations = [];
                                for (var i = 0; i < object.shotLabelAnnotations.length; ++i) {
                                    if (typeof object.shotLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shotLabelAnnotations: object expected");
                                    message.shotLabelAnnotations[i] = $root.google.cloud.videointelligence.v1beta2.LabelAnnotation.fromObject(object.shotLabelAnnotations[i]);
                                }
                            }
                            if (object.frameLabelAnnotations) {
                                if (!Array.isArray(object.frameLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationResults.frameLabelAnnotations: array expected");
                                message.frameLabelAnnotations = [];
                                for (var i = 0; i < object.frameLabelAnnotations.length; ++i) {
                                    if (typeof object.frameLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationResults.frameLabelAnnotations: object expected");
                                    message.frameLabelAnnotations[i] = $root.google.cloud.videointelligence.v1beta2.LabelAnnotation.fromObject(object.frameLabelAnnotations[i]);
                                }
                            }
                            if (object.faceAnnotations) {
                                if (!Array.isArray(object.faceAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationResults.faceAnnotations: array expected");
                                message.faceAnnotations = [];
                                for (var i = 0; i < object.faceAnnotations.length; ++i) {
                                    if (typeof object.faceAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationResults.faceAnnotations: object expected");
                                    message.faceAnnotations[i] = $root.google.cloud.videointelligence.v1beta2.FaceAnnotation.fromObject(object.faceAnnotations[i]);
                                }
                            }
                            if (object.shotAnnotations) {
                                if (!Array.isArray(object.shotAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shotAnnotations: array expected");
                                message.shotAnnotations = [];
                                for (var i = 0; i < object.shotAnnotations.length; ++i) {
                                    if (typeof object.shotAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationResults.shotAnnotations: object expected");
                                    message.shotAnnotations[i] = $root.google.cloud.videointelligence.v1beta2.VideoSegment.fromObject(object.shotAnnotations[i]);
                                }
                            }
                            if (object.explicitAnnotation != null) {
                                if (typeof object.explicitAnnotation !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationResults.explicitAnnotation: object expected");
                                message.explicitAnnotation = $root.google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.fromObject(object.explicitAnnotation);
                            }
                            if (object.error != null) {
                                if (typeof object.error !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationResults.error: object expected");
                                message.error = $root.google.rpc.Status.fromObject(object.error);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoAnnotationResults message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.VideoAnnotationResults} message VideoAnnotationResults
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoAnnotationResults.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.segmentLabelAnnotations = [];
                                object.shotLabelAnnotations = [];
                                object.frameLabelAnnotations = [];
                                object.faceAnnotations = [];
                                object.shotAnnotations = [];
                            }
                            if (options.defaults) {
                                object.inputUri = "";
                                object.explicitAnnotation = null;
                                object.error = null;
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.segmentLabelAnnotations && message.segmentLabelAnnotations.length) {
                                object.segmentLabelAnnotations = [];
                                for (var j = 0; j < message.segmentLabelAnnotations.length; ++j)
                                    object.segmentLabelAnnotations[j] = $root.google.cloud.videointelligence.v1beta2.LabelAnnotation.toObject(message.segmentLabelAnnotations[j], options);
                            }
                            if (message.shotLabelAnnotations && message.shotLabelAnnotations.length) {
                                object.shotLabelAnnotations = [];
                                for (var j = 0; j < message.shotLabelAnnotations.length; ++j)
                                    object.shotLabelAnnotations[j] = $root.google.cloud.videointelligence.v1beta2.LabelAnnotation.toObject(message.shotLabelAnnotations[j], options);
                            }
                            if (message.frameLabelAnnotations && message.frameLabelAnnotations.length) {
                                object.frameLabelAnnotations = [];
                                for (var j = 0; j < message.frameLabelAnnotations.length; ++j)
                                    object.frameLabelAnnotations[j] = $root.google.cloud.videointelligence.v1beta2.LabelAnnotation.toObject(message.frameLabelAnnotations[j], options);
                            }
                            if (message.faceAnnotations && message.faceAnnotations.length) {
                                object.faceAnnotations = [];
                                for (var j = 0; j < message.faceAnnotations.length; ++j)
                                    object.faceAnnotations[j] = $root.google.cloud.videointelligence.v1beta2.FaceAnnotation.toObject(message.faceAnnotations[j], options);
                            }
                            if (message.shotAnnotations && message.shotAnnotations.length) {
                                object.shotAnnotations = [];
                                for (var j = 0; j < message.shotAnnotations.length; ++j)
                                    object.shotAnnotations[j] = $root.google.cloud.videointelligence.v1beta2.VideoSegment.toObject(message.shotAnnotations[j], options);
                            }
                            if (message.explicitAnnotation != null && message.hasOwnProperty("explicitAnnotation"))
                                object.explicitAnnotation = $root.google.cloud.videointelligence.v1beta2.ExplicitContentAnnotation.toObject(message.explicitAnnotation, options);
                            if (message.error != null && message.hasOwnProperty("error"))
                                object.error = $root.google.rpc.Status.toObject(message.error, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoAnnotationResults to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoAnnotationResults.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoAnnotationResults
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationResults
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoAnnotationResults.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.VideoAnnotationResults";
                        };
    
                        return VideoAnnotationResults;
                    })();
    
                    v1beta2.AnnotateVideoResponse = (function() {
    
                        /**
                         * Properties of an AnnotateVideoResponse.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IAnnotateVideoResponse
                         * @property {Array.<google.cloud.videointelligence.v1beta2.IVideoAnnotationResults>|null} [annotationResults] AnnotateVideoResponse annotationResults
                         */
    
                        /**
                         * Constructs a new AnnotateVideoResponse.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents an AnnotateVideoResponse.
                         * @implements IAnnotateVideoResponse
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoResponse=} [properties] Properties to set
                         */
                        function AnnotateVideoResponse(properties) {
                            this.annotationResults = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoResponse annotationResults.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.IVideoAnnotationResults>} annotationResults
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoResponse
                         * @instance
                         */
                        AnnotateVideoResponse.prototype.annotationResults = $util.emptyArray;
    
                        /**
                         * Creates a new AnnotateVideoResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoResponse=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.AnnotateVideoResponse} AnnotateVideoResponse instance
                         */
                        AnnotateVideoResponse.create = function create(properties) {
                            return new AnnotateVideoResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoResponse message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.AnnotateVideoResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoResponse} message AnnotateVideoResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.annotationResults != null && message.annotationResults.length)
                                for (var i = 0; i < message.annotationResults.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.VideoAnnotationResults.encode(message.annotationResults[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoResponse message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.AnnotateVideoResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoResponse} message AnnotateVideoResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.AnnotateVideoResponse} AnnotateVideoResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.AnnotateVideoResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.annotationResults && message.annotationResults.length))
                                            message.annotationResults = [];
                                        message.annotationResults.push($root.google.cloud.videointelligence.v1beta2.VideoAnnotationResults.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.AnnotateVideoResponse} AnnotateVideoResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoResponse message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.annotationResults != null && message.hasOwnProperty("annotationResults")) {
                                if (!Array.isArray(message.annotationResults))
                                    return "annotationResults: array expected";
                                for (var i = 0; i < message.annotationResults.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.VideoAnnotationResults.verify(message.annotationResults[i]);
                                    if (error)
                                        return "annotationResults." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.AnnotateVideoResponse} AnnotateVideoResponse
                         */
                        AnnotateVideoResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.AnnotateVideoResponse)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.AnnotateVideoResponse();
                            if (object.annotationResults) {
                                if (!Array.isArray(object.annotationResults))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.AnnotateVideoResponse.annotationResults: array expected");
                                message.annotationResults = [];
                                for (var i = 0; i < object.annotationResults.length; ++i) {
                                    if (typeof object.annotationResults[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.AnnotateVideoResponse.annotationResults: object expected");
                                    message.annotationResults[i] = $root.google.cloud.videointelligence.v1beta2.VideoAnnotationResults.fromObject(object.annotationResults[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.AnnotateVideoResponse} message AnnotateVideoResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.annotationResults = [];
                            if (message.annotationResults && message.annotationResults.length) {
                                object.annotationResults = [];
                                for (var j = 0; j < message.annotationResults.length; ++j)
                                    object.annotationResults[j] = $root.google.cloud.videointelligence.v1beta2.VideoAnnotationResults.toObject(message.annotationResults[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.AnnotateVideoResponse";
                        };
    
                        return AnnotateVideoResponse;
                    })();
    
                    v1beta2.VideoAnnotationProgress = (function() {
    
                        /**
                         * Properties of a VideoAnnotationProgress.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IVideoAnnotationProgress
                         * @property {string|null} [inputUri] VideoAnnotationProgress inputUri
                         * @property {number|null} [progressPercent] VideoAnnotationProgress progressPercent
                         * @property {google.protobuf.ITimestamp|null} [startTime] VideoAnnotationProgress startTime
                         * @property {google.protobuf.ITimestamp|null} [updateTime] VideoAnnotationProgress updateTime
                         */
    
                        /**
                         * Constructs a new VideoAnnotationProgress.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents a VideoAnnotationProgress.
                         * @implements IVideoAnnotationProgress
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IVideoAnnotationProgress=} [properties] Properties to set
                         */
                        function VideoAnnotationProgress(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoAnnotationProgress inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.inputUri = "";
    
                        /**
                         * VideoAnnotationProgress progressPercent.
                         * @member {number} progressPercent
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.progressPercent = 0;
    
                        /**
                         * VideoAnnotationProgress startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.startTime = null;
    
                        /**
                         * VideoAnnotationProgress updateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.updateTime = null;
    
                        /**
                         * Creates a new VideoAnnotationProgress instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IVideoAnnotationProgress=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.VideoAnnotationProgress} VideoAnnotationProgress instance
                         */
                        VideoAnnotationProgress.create = function create(properties) {
                            return new VideoAnnotationProgress(properties);
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationProgress message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IVideoAnnotationProgress} message VideoAnnotationProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationProgress.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.progressPercent != null && Object.hasOwnProperty.call(message, "progressPercent"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.progressPercent);
                            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                                $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationProgress message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IVideoAnnotationProgress} message VideoAnnotationProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationProgress.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoAnnotationProgress message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.VideoAnnotationProgress} VideoAnnotationProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationProgress.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.VideoAnnotationProgress();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.progressPercent = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoAnnotationProgress message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.VideoAnnotationProgress} VideoAnnotationProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationProgress.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoAnnotationProgress message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoAnnotationProgress.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                if (!$util.isInteger(message.progressPercent))
                                    return "progressPercent: integer expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                                if (error)
                                    return "updateTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoAnnotationProgress message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.VideoAnnotationProgress} VideoAnnotationProgress
                         */
                        VideoAnnotationProgress.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.VideoAnnotationProgress)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.VideoAnnotationProgress();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.progressPercent != null)
                                message.progressPercent = object.progressPercent | 0;
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.updateTime != null) {
                                if (typeof object.updateTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.updateTime: object expected");
                                message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoAnnotationProgress message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.VideoAnnotationProgress} message VideoAnnotationProgress
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoAnnotationProgress.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.inputUri = "";
                                object.progressPercent = 0;
                                object.startTime = null;
                                object.updateTime = null;
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                object.progressPercent = message.progressPercent;
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                                object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoAnnotationProgress to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoAnnotationProgress.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoAnnotationProgress
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.VideoAnnotationProgress
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoAnnotationProgress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.VideoAnnotationProgress";
                        };
    
                        return VideoAnnotationProgress;
                    })();
    
                    v1beta2.AnnotateVideoProgress = (function() {
    
                        /**
                         * Properties of an AnnotateVideoProgress.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @interface IAnnotateVideoProgress
                         * @property {Array.<google.cloud.videointelligence.v1beta2.IVideoAnnotationProgress>|null} [annotationProgress] AnnotateVideoProgress annotationProgress
                         */
    
                        /**
                         * Constructs a new AnnotateVideoProgress.
                         * @memberof google.cloud.videointelligence.v1beta2
                         * @classdesc Represents an AnnotateVideoProgress.
                         * @implements IAnnotateVideoProgress
                         * @constructor
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoProgress=} [properties] Properties to set
                         */
                        function AnnotateVideoProgress(properties) {
                            this.annotationProgress = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoProgress annotationProgress.
                         * @member {Array.<google.cloud.videointelligence.v1beta2.IVideoAnnotationProgress>} annotationProgress
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoProgress
                         * @instance
                         */
                        AnnotateVideoProgress.prototype.annotationProgress = $util.emptyArray;
    
                        /**
                         * Creates a new AnnotateVideoProgress instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoProgress=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1beta2.AnnotateVideoProgress} AnnotateVideoProgress instance
                         */
                        AnnotateVideoProgress.create = function create(properties) {
                            return new AnnotateVideoProgress(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoProgress message. Does not implicitly {@link google.cloud.videointelligence.v1beta2.AnnotateVideoProgress.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoProgress} message AnnotateVideoProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoProgress.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.annotationProgress != null && message.annotationProgress.length)
                                for (var i = 0; i < message.annotationProgress.length; ++i)
                                    $root.google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.encode(message.annotationProgress[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoProgress message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1beta2.AnnotateVideoProgress.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.IAnnotateVideoProgress} message AnnotateVideoProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoProgress.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoProgress message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1beta2.AnnotateVideoProgress} AnnotateVideoProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoProgress.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1beta2.AnnotateVideoProgress();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.annotationProgress && message.annotationProgress.length))
                                            message.annotationProgress = [];
                                        message.annotationProgress.push($root.google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoProgress message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1beta2.AnnotateVideoProgress} AnnotateVideoProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoProgress.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoProgress message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoProgress
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoProgress.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.annotationProgress != null && message.hasOwnProperty("annotationProgress")) {
                                if (!Array.isArray(message.annotationProgress))
                                    return "annotationProgress: array expected";
                                for (var i = 0; i < message.annotationProgress.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.verify(message.annotationProgress[i]);
                                    if (error)
                                        return "annotationProgress." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoProgress message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoProgress
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1beta2.AnnotateVideoProgress} AnnotateVideoProgress
                         */
                        AnnotateVideoProgress.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1beta2.AnnotateVideoProgress)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1beta2.AnnotateVideoProgress();
                            if (object.annotationProgress) {
                                if (!Array.isArray(object.annotationProgress))
                                    throw TypeError(".google.cloud.videointelligence.v1beta2.AnnotateVideoProgress.annotationProgress: array expected");
                                message.annotationProgress = [];
                                for (var i = 0; i < object.annotationProgress.length; ++i) {
                                    if (typeof object.annotationProgress[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1beta2.AnnotateVideoProgress.annotationProgress: object expected");
                                    message.annotationProgress[i] = $root.google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.fromObject(object.annotationProgress[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoProgress message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1beta2.AnnotateVideoProgress} message AnnotateVideoProgress
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoProgress.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.annotationProgress = [];
                            if (message.annotationProgress && message.annotationProgress.length) {
                                object.annotationProgress = [];
                                for (var j = 0; j < message.annotationProgress.length; ++j)
                                    object.annotationProgress[j] = $root.google.cloud.videointelligence.v1beta2.VideoAnnotationProgress.toObject(message.annotationProgress[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoProgress to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoProgress
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoProgress.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoProgress
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1beta2.AnnotateVideoProgress
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoProgress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1beta2.AnnotateVideoProgress";
                        };
    
                        return AnnotateVideoProgress;
                    })();
    
                    /**
                     * Feature enum.
                     * @name google.cloud.videointelligence.v1beta2.Feature
                     * @enum {number}
                     * @property {number} FEATURE_UNSPECIFIED=0 FEATURE_UNSPECIFIED value
                     * @property {number} LABEL_DETECTION=1 LABEL_DETECTION value
                     * @property {number} SHOT_CHANGE_DETECTION=2 SHOT_CHANGE_DETECTION value
                     * @property {number} EXPLICIT_CONTENT_DETECTION=3 EXPLICIT_CONTENT_DETECTION value
                     * @property {number} FACE_DETECTION=4 FACE_DETECTION value
                     */
                    v1beta2.Feature = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "FEATURE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "LABEL_DETECTION"] = 1;
                        values[valuesById[2] = "SHOT_CHANGE_DETECTION"] = 2;
                        values[valuesById[3] = "EXPLICIT_CONTENT_DETECTION"] = 3;
                        values[valuesById[4] = "FACE_DETECTION"] = 4;
                        return values;
                    })();
    
                    /**
                     * LabelDetectionMode enum.
                     * @name google.cloud.videointelligence.v1beta2.LabelDetectionMode
                     * @enum {number}
                     * @property {number} LABEL_DETECTION_MODE_UNSPECIFIED=0 LABEL_DETECTION_MODE_UNSPECIFIED value
                     * @property {number} SHOT_MODE=1 SHOT_MODE value
                     * @property {number} FRAME_MODE=2 FRAME_MODE value
                     * @property {number} SHOT_AND_FRAME_MODE=3 SHOT_AND_FRAME_MODE value
                     */
                    v1beta2.LabelDetectionMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LABEL_DETECTION_MODE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "SHOT_MODE"] = 1;
                        values[valuesById[2] = "FRAME_MODE"] = 2;
                        values[valuesById[3] = "SHOT_AND_FRAME_MODE"] = 3;
                        return values;
                    })();
    
                    /**
                     * Likelihood enum.
                     * @name google.cloud.videointelligence.v1beta2.Likelihood
                     * @enum {number}
                     * @property {number} LIKELIHOOD_UNSPECIFIED=0 LIKELIHOOD_UNSPECIFIED value
                     * @property {number} VERY_UNLIKELY=1 VERY_UNLIKELY value
                     * @property {number} UNLIKELY=2 UNLIKELY value
                     * @property {number} POSSIBLE=3 POSSIBLE value
                     * @property {number} LIKELY=4 LIKELY value
                     * @property {number} VERY_LIKELY=5 VERY_LIKELY value
                     */
                    v1beta2.Likelihood = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LIKELIHOOD_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "VERY_UNLIKELY"] = 1;
                        values[valuesById[2] = "UNLIKELY"] = 2;
                        values[valuesById[3] = "POSSIBLE"] = 3;
                        values[valuesById[4] = "LIKELY"] = 4;
                        values[valuesById[5] = "VERY_LIKELY"] = 5;
                        return values;
                    })();
    
                    return v1beta2;
                })();
    
                videointelligence.v1p1beta1 = (function() {
    
                    /**
                     * Namespace v1p1beta1.
                     * @memberof google.cloud.videointelligence
                     * @namespace
                     */
                    var v1p1beta1 = {};
    
                    v1p1beta1.VideoIntelligenceService = (function() {
    
                        /**
                         * Constructs a new VideoIntelligenceService service.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a VideoIntelligenceService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function VideoIntelligenceService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (VideoIntelligenceService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = VideoIntelligenceService;
    
                        /**
                         * Creates new VideoIntelligenceService service using the specified rpc implementation.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoIntelligenceService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {VideoIntelligenceService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        VideoIntelligenceService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.cloud.videointelligence.v1p1beta1.VideoIntelligenceService|annotateVideo}.
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoIntelligenceService
                         * @typedef AnnotateVideoCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls AnnotateVideo.
                         * @function annotateVideo
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoIntelligenceService
                         * @instance
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoRequest} request AnnotateVideoRequest message or plain object
                         * @param {google.cloud.videointelligence.v1p1beta1.VideoIntelligenceService.AnnotateVideoCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(VideoIntelligenceService.prototype.annotateVideo = function annotateVideo(request, callback) {
                            return this.rpcCall(annotateVideo, $root.google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "AnnotateVideo" });
    
                        /**
                         * Calls AnnotateVideo.
                         * @function annotateVideo
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoIntelligenceService
                         * @instance
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoRequest} request AnnotateVideoRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        return VideoIntelligenceService;
                    })();
    
                    v1p1beta1.AnnotateVideoRequest = (function() {
    
                        /**
                         * Properties of an AnnotateVideoRequest.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IAnnotateVideoRequest
                         * @property {string|null} [inputUri] AnnotateVideoRequest inputUri
                         * @property {Uint8Array|null} [inputContent] AnnotateVideoRequest inputContent
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.Feature>|null} [features] AnnotateVideoRequest features
                         * @property {google.cloud.videointelligence.v1p1beta1.IVideoContext|null} [videoContext] AnnotateVideoRequest videoContext
                         * @property {string|null} [outputUri] AnnotateVideoRequest outputUri
                         * @property {string|null} [locationId] AnnotateVideoRequest locationId
                         */
    
                        /**
                         * Constructs a new AnnotateVideoRequest.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents an AnnotateVideoRequest.
                         * @implements IAnnotateVideoRequest
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoRequest=} [properties] Properties to set
                         */
                        function AnnotateVideoRequest(properties) {
                            this.features = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoRequest inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.inputUri = "";
    
                        /**
                         * AnnotateVideoRequest inputContent.
                         * @member {Uint8Array} inputContent
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.inputContent = $util.newBuffer([]);
    
                        /**
                         * AnnotateVideoRequest features.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.Feature>} features
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.features = $util.emptyArray;
    
                        /**
                         * AnnotateVideoRequest videoContext.
                         * @member {google.cloud.videointelligence.v1p1beta1.IVideoContext|null|undefined} videoContext
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.videoContext = null;
    
                        /**
                         * AnnotateVideoRequest outputUri.
                         * @member {string} outputUri
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.outputUri = "";
    
                        /**
                         * AnnotateVideoRequest locationId.
                         * @member {string} locationId
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new AnnotateVideoRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoRequest=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest} AnnotateVideoRequest instance
                         */
                        AnnotateVideoRequest.create = function create(properties) {
                            return new AnnotateVideoRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoRequest message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoRequest} message AnnotateVideoRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.features != null && message.features.length) {
                                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                                for (var i = 0; i < message.features.length; ++i)
                                    writer.int32(message.features[i]);
                                writer.ldelim();
                            }
                            if (message.videoContext != null && Object.hasOwnProperty.call(message, "videoContext"))
                                $root.google.cloud.videointelligence.v1p1beta1.VideoContext.encode(message.videoContext, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.outputUri != null && Object.hasOwnProperty.call(message, "outputUri"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.outputUri);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.locationId);
                            if (message.inputContent != null && Object.hasOwnProperty.call(message, "inputContent"))
                                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.inputContent);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoRequest message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoRequest} message AnnotateVideoRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest} AnnotateVideoRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.inputContent = reader.bytes();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.features && message.features.length))
                                            message.features = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.features.push(reader.int32());
                                        } else
                                            message.features.push(reader.int32());
                                        break;
                                    }
                                case 3: {
                                        message.videoContext = $root.google.cloud.videointelligence.v1p1beta1.VideoContext.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.outputUri = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.locationId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest} AnnotateVideoRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoRequest message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.inputContent != null && message.hasOwnProperty("inputContent"))
                                if (!(message.inputContent && typeof message.inputContent.length === "number" || $util.isString(message.inputContent)))
                                    return "inputContent: buffer expected";
                            if (message.features != null && message.hasOwnProperty("features")) {
                                if (!Array.isArray(message.features))
                                    return "features: array expected";
                                for (var i = 0; i < message.features.length; ++i)
                                    switch (message.features[i]) {
                                    default:
                                        return "features: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 6:
                                        break;
                                    }
                            }
                            if (message.videoContext != null && message.hasOwnProperty("videoContext")) {
                                var error = $root.google.cloud.videointelligence.v1p1beta1.VideoContext.verify(message.videoContext);
                                if (error)
                                    return "videoContext." + error;
                            }
                            if (message.outputUri != null && message.hasOwnProperty("outputUri"))
                                if (!$util.isString(message.outputUri))
                                    return "outputUri: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest} AnnotateVideoRequest
                         */
                        AnnotateVideoRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.inputContent != null)
                                if (typeof object.inputContent === "string")
                                    $util.base64.decode(object.inputContent, message.inputContent = $util.newBuffer($util.base64.length(object.inputContent)), 0);
                                else if (object.inputContent.length >= 0)
                                    message.inputContent = object.inputContent;
                            if (object.features) {
                                if (!Array.isArray(object.features))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.features: array expected");
                                message.features = [];
                                for (var i = 0; i < object.features.length; ++i)
                                    switch (object.features[i]) {
                                    default:
                                        if (typeof object.features[i] === "number") {
                                            message.features[i] = object.features[i];
                                            break;
                                        }
                                    case "FEATURE_UNSPECIFIED":
                                    case 0:
                                        message.features[i] = 0;
                                        break;
                                    case "LABEL_DETECTION":
                                    case 1:
                                        message.features[i] = 1;
                                        break;
                                    case "SHOT_CHANGE_DETECTION":
                                    case 2:
                                        message.features[i] = 2;
                                        break;
                                    case "EXPLICIT_CONTENT_DETECTION":
                                    case 3:
                                        message.features[i] = 3;
                                        break;
                                    case "SPEECH_TRANSCRIPTION":
                                    case 6:
                                        message.features[i] = 6;
                                        break;
                                    }
                            }
                            if (object.videoContext != null) {
                                if (typeof object.videoContext !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest.videoContext: object expected");
                                message.videoContext = $root.google.cloud.videointelligence.v1p1beta1.VideoContext.fromObject(object.videoContext);
                            }
                            if (object.outputUri != null)
                                message.outputUri = String(object.outputUri);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest} message AnnotateVideoRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.features = [];
                            if (options.defaults) {
                                object.inputUri = "";
                                object.videoContext = null;
                                object.outputUri = "";
                                object.locationId = "";
                                if (options.bytes === String)
                                    object.inputContent = "";
                                else {
                                    object.inputContent = [];
                                    if (options.bytes !== Array)
                                        object.inputContent = $util.newBuffer(object.inputContent);
                                }
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.features && message.features.length) {
                                object.features = [];
                                for (var j = 0; j < message.features.length; ++j)
                                    object.features[j] = options.enums === String ? $root.google.cloud.videointelligence.v1p1beta1.Feature[message.features[j]] === undefined ? message.features[j] : $root.google.cloud.videointelligence.v1p1beta1.Feature[message.features[j]] : message.features[j];
                            }
                            if (message.videoContext != null && message.hasOwnProperty("videoContext"))
                                object.videoContext = $root.google.cloud.videointelligence.v1p1beta1.VideoContext.toObject(message.videoContext, options);
                            if (message.outputUri != null && message.hasOwnProperty("outputUri"))
                                object.outputUri = message.outputUri;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            if (message.inputContent != null && message.hasOwnProperty("inputContent"))
                                object.inputContent = options.bytes === String ? $util.base64.encode(message.inputContent, 0, message.inputContent.length) : options.bytes === Array ? Array.prototype.slice.call(message.inputContent) : message.inputContent;
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.AnnotateVideoRequest";
                        };
    
                        return AnnotateVideoRequest;
                    })();
    
                    v1p1beta1.VideoContext = (function() {
    
                        /**
                         * Properties of a VideoContext.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IVideoContext
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.IVideoSegment>|null} [segments] VideoContext segments
                         * @property {google.cloud.videointelligence.v1p1beta1.ILabelDetectionConfig|null} [labelDetectionConfig] VideoContext labelDetectionConfig
                         * @property {google.cloud.videointelligence.v1p1beta1.IShotChangeDetectionConfig|null} [shotChangeDetectionConfig] VideoContext shotChangeDetectionConfig
                         * @property {google.cloud.videointelligence.v1p1beta1.IExplicitContentDetectionConfig|null} [explicitContentDetectionConfig] VideoContext explicitContentDetectionConfig
                         * @property {google.cloud.videointelligence.v1p1beta1.ISpeechTranscriptionConfig|null} [speechTranscriptionConfig] VideoContext speechTranscriptionConfig
                         */
    
                        /**
                         * Constructs a new VideoContext.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a VideoContext.
                         * @implements IVideoContext
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoContext=} [properties] Properties to set
                         */
                        function VideoContext(properties) {
                            this.segments = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoContext segments.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.IVideoSegment>} segments
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.segments = $util.emptyArray;
    
                        /**
                         * VideoContext labelDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p1beta1.ILabelDetectionConfig|null|undefined} labelDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.labelDetectionConfig = null;
    
                        /**
                         * VideoContext shotChangeDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p1beta1.IShotChangeDetectionConfig|null|undefined} shotChangeDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.shotChangeDetectionConfig = null;
    
                        /**
                         * VideoContext explicitContentDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p1beta1.IExplicitContentDetectionConfig|null|undefined} explicitContentDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.explicitContentDetectionConfig = null;
    
                        /**
                         * VideoContext speechTranscriptionConfig.
                         * @member {google.cloud.videointelligence.v1p1beta1.ISpeechTranscriptionConfig|null|undefined} speechTranscriptionConfig
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.speechTranscriptionConfig = null;
    
                        /**
                         * Creates a new VideoContext instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoContext=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoContext} VideoContext instance
                         */
                        VideoContext.create = function create(properties) {
                            return new VideoContext(properties);
                        };
    
                        /**
                         * Encodes the specified VideoContext message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.VideoContext.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoContext} message VideoContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoContext.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.encode(message.segments[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.labelDetectionConfig != null && Object.hasOwnProperty.call(message, "labelDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.encode(message.labelDetectionConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.shotChangeDetectionConfig != null && Object.hasOwnProperty.call(message, "shotChangeDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.encode(message.shotChangeDetectionConfig, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.explicitContentDetectionConfig != null && Object.hasOwnProperty.call(message, "explicitContentDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.encode(message.explicitContentDetectionConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.speechTranscriptionConfig != null && Object.hasOwnProperty.call(message, "speechTranscriptionConfig"))
                                $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.encode(message.speechTranscriptionConfig, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoContext message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.VideoContext.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoContext} message VideoContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoContext.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoContext message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoContext} VideoContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoContext.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.VideoContext();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1p1beta1.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.labelDetectionConfig = $root.google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.speechTranscriptionConfig = $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoContext message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoContext} VideoContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoContext.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoContext message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoContext.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.labelDetectionConfig != null && message.hasOwnProperty("labelDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.verify(message.labelDetectionConfig);
                                if (error)
                                    return "labelDetectionConfig." + error;
                            }
                            if (message.shotChangeDetectionConfig != null && message.hasOwnProperty("shotChangeDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.verify(message.shotChangeDetectionConfig);
                                if (error)
                                    return "shotChangeDetectionConfig." + error;
                            }
                            if (message.explicitContentDetectionConfig != null && message.hasOwnProperty("explicitContentDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.verify(message.explicitContentDetectionConfig);
                                if (error)
                                    return "explicitContentDetectionConfig." + error;
                            }
                            if (message.speechTranscriptionConfig != null && message.hasOwnProperty("speechTranscriptionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.verify(message.speechTranscriptionConfig);
                                if (error)
                                    return "speechTranscriptionConfig." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoContext message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoContext} VideoContext
                         */
                        VideoContext.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.VideoContext)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.VideoContext();
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoContext.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoContext.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.labelDetectionConfig != null) {
                                if (typeof object.labelDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoContext.labelDetectionConfig: object expected");
                                message.labelDetectionConfig = $root.google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.fromObject(object.labelDetectionConfig);
                            }
                            if (object.shotChangeDetectionConfig != null) {
                                if (typeof object.shotChangeDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoContext.shotChangeDetectionConfig: object expected");
                                message.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.fromObject(object.shotChangeDetectionConfig);
                            }
                            if (object.explicitContentDetectionConfig != null) {
                                if (typeof object.explicitContentDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoContext.explicitContentDetectionConfig: object expected");
                                message.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.fromObject(object.explicitContentDetectionConfig);
                            }
                            if (object.speechTranscriptionConfig != null) {
                                if (typeof object.speechTranscriptionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoContext.speechTranscriptionConfig: object expected");
                                message.speechTranscriptionConfig = $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.fromObject(object.speechTranscriptionConfig);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoContext message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.VideoContext} message VideoContext
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoContext.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.segments = [];
                            if (options.defaults) {
                                object.labelDetectionConfig = null;
                                object.shotChangeDetectionConfig = null;
                                object.explicitContentDetectionConfig = null;
                                object.speechTranscriptionConfig = null;
                            }
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.toObject(message.segments[j], options);
                            }
                            if (message.labelDetectionConfig != null && message.hasOwnProperty("labelDetectionConfig"))
                                object.labelDetectionConfig = $root.google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.toObject(message.labelDetectionConfig, options);
                            if (message.shotChangeDetectionConfig != null && message.hasOwnProperty("shotChangeDetectionConfig"))
                                object.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.toObject(message.shotChangeDetectionConfig, options);
                            if (message.explicitContentDetectionConfig != null && message.hasOwnProperty("explicitContentDetectionConfig"))
                                object.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.toObject(message.explicitContentDetectionConfig, options);
                            if (message.speechTranscriptionConfig != null && message.hasOwnProperty("speechTranscriptionConfig"))
                                object.speechTranscriptionConfig = $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.toObject(message.speechTranscriptionConfig, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoContext to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoContext.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoContext
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoContext
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.VideoContext";
                        };
    
                        return VideoContext;
                    })();
    
                    v1p1beta1.LabelDetectionConfig = (function() {
    
                        /**
                         * Properties of a LabelDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface ILabelDetectionConfig
                         * @property {google.cloud.videointelligence.v1p1beta1.LabelDetectionMode|null} [labelDetectionMode] LabelDetectionConfig labelDetectionMode
                         * @property {boolean|null} [stationaryCamera] LabelDetectionConfig stationaryCamera
                         * @property {string|null} [model] LabelDetectionConfig model
                         */
    
                        /**
                         * Constructs a new LabelDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a LabelDetectionConfig.
                         * @implements ILabelDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelDetectionConfig=} [properties] Properties to set
                         */
                        function LabelDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelDetectionConfig labelDetectionMode.
                         * @member {google.cloud.videointelligence.v1p1beta1.LabelDetectionMode} labelDetectionMode
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.labelDetectionMode = 0;
    
                        /**
                         * LabelDetectionConfig stationaryCamera.
                         * @member {boolean} stationaryCamera
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.stationaryCamera = false;
    
                        /**
                         * LabelDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new LabelDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig} LabelDetectionConfig instance
                         */
                        LabelDetectionConfig.create = function create(properties) {
                            return new LabelDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified LabelDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelDetectionConfig} message LabelDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.labelDetectionMode != null && Object.hasOwnProperty.call(message, "labelDetectionMode"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.labelDetectionMode);
                            if (message.stationaryCamera != null && Object.hasOwnProperty.call(message, "stationaryCamera"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.stationaryCamera);
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelDetectionConfig} message LabelDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig} LabelDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.labelDetectionMode = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.stationaryCamera = reader.bool();
                                        break;
                                    }
                                case 3: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig} LabelDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.labelDetectionMode != null && message.hasOwnProperty("labelDetectionMode"))
                                switch (message.labelDetectionMode) {
                                default:
                                    return "labelDetectionMode: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.stationaryCamera != null && message.hasOwnProperty("stationaryCamera"))
                                if (typeof message.stationaryCamera !== "boolean")
                                    return "stationaryCamera: boolean expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig} LabelDetectionConfig
                         */
                        LabelDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig();
                            switch (object.labelDetectionMode) {
                            default:
                                if (typeof object.labelDetectionMode === "number") {
                                    message.labelDetectionMode = object.labelDetectionMode;
                                    break;
                                }
                                break;
                            case "LABEL_DETECTION_MODE_UNSPECIFIED":
                            case 0:
                                message.labelDetectionMode = 0;
                                break;
                            case "SHOT_MODE":
                            case 1:
                                message.labelDetectionMode = 1;
                                break;
                            case "FRAME_MODE":
                            case 2:
                                message.labelDetectionMode = 2;
                                break;
                            case "SHOT_AND_FRAME_MODE":
                            case 3:
                                message.labelDetectionMode = 3;
                                break;
                            }
                            if (object.stationaryCamera != null)
                                message.stationaryCamera = Boolean(object.stationaryCamera);
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig} message LabelDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.labelDetectionMode = options.enums === String ? "LABEL_DETECTION_MODE_UNSPECIFIED" : 0;
                                object.stationaryCamera = false;
                                object.model = "";
                            }
                            if (message.labelDetectionMode != null && message.hasOwnProperty("labelDetectionMode"))
                                object.labelDetectionMode = options.enums === String ? $root.google.cloud.videointelligence.v1p1beta1.LabelDetectionMode[message.labelDetectionMode] === undefined ? message.labelDetectionMode : $root.google.cloud.videointelligence.v1p1beta1.LabelDetectionMode[message.labelDetectionMode] : message.labelDetectionMode;
                            if (message.stationaryCamera != null && message.hasOwnProperty("stationaryCamera"))
                                object.stationaryCamera = message.stationaryCamera;
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this LabelDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.LabelDetectionConfig";
                        };
    
                        return LabelDetectionConfig;
                    })();
    
                    v1p1beta1.ShotChangeDetectionConfig = (function() {
    
                        /**
                         * Properties of a ShotChangeDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IShotChangeDetectionConfig
                         * @property {string|null} [model] ShotChangeDetectionConfig model
                         */
    
                        /**
                         * Constructs a new ShotChangeDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a ShotChangeDetectionConfig.
                         * @implements IShotChangeDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IShotChangeDetectionConfig=} [properties] Properties to set
                         */
                        function ShotChangeDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ShotChangeDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig
                         * @instance
                         */
                        ShotChangeDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new ShotChangeDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IShotChangeDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig} ShotChangeDetectionConfig instance
                         */
                        ShotChangeDetectionConfig.create = function create(properties) {
                            return new ShotChangeDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ShotChangeDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IShotChangeDetectionConfig} message ShotChangeDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ShotChangeDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ShotChangeDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IShotChangeDetectionConfig} message ShotChangeDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ShotChangeDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ShotChangeDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ShotChangeDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ShotChangeDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ShotChangeDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ShotChangeDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ShotChangeDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ShotChangeDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         */
                        ShotChangeDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ShotChangeDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig} message ShotChangeDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ShotChangeDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.model = "";
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this ShotChangeDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ShotChangeDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ShotChangeDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ShotChangeDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.ShotChangeDetectionConfig";
                        };
    
                        return ShotChangeDetectionConfig;
                    })();
    
                    v1p1beta1.ExplicitContentDetectionConfig = (function() {
    
                        /**
                         * Properties of an ExplicitContentDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IExplicitContentDetectionConfig
                         * @property {string|null} [model] ExplicitContentDetectionConfig model
                         */
    
                        /**
                         * Constructs a new ExplicitContentDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents an ExplicitContentDetectionConfig.
                         * @implements IExplicitContentDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IExplicitContentDetectionConfig=} [properties] Properties to set
                         */
                        function ExplicitContentDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig
                         * @instance
                         */
                        ExplicitContentDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new ExplicitContentDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IExplicitContentDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig instance
                         */
                        ExplicitContentDetectionConfig.create = function create(properties) {
                            return new ExplicitContentDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IExplicitContentDetectionConfig} message ExplicitContentDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IExplicitContentDetectionConfig} message ExplicitContentDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         */
                        ExplicitContentDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig} message ExplicitContentDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.model = "";
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.ExplicitContentDetectionConfig";
                        };
    
                        return ExplicitContentDetectionConfig;
                    })();
    
                    v1p1beta1.VideoSegment = (function() {
    
                        /**
                         * Properties of a VideoSegment.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IVideoSegment
                         * @property {google.protobuf.IDuration|null} [startTimeOffset] VideoSegment startTimeOffset
                         * @property {google.protobuf.IDuration|null} [endTimeOffset] VideoSegment endTimeOffset
                         */
    
                        /**
                         * Constructs a new VideoSegment.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a VideoSegment.
                         * @implements IVideoSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoSegment=} [properties] Properties to set
                         */
                        function VideoSegment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoSegment startTimeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} startTimeOffset
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoSegment
                         * @instance
                         */
                        VideoSegment.prototype.startTimeOffset = null;
    
                        /**
                         * VideoSegment endTimeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} endTimeOffset
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoSegment
                         * @instance
                         */
                        VideoSegment.prototype.endTimeOffset = null;
    
                        /**
                         * Creates a new VideoSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoSegment} VideoSegment instance
                         */
                        VideoSegment.create = function create(properties) {
                            return new VideoSegment(properties);
                        };
    
                        /**
                         * Encodes the specified VideoSegment message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.VideoSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoSegment} message VideoSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.startTimeOffset != null && Object.hasOwnProperty.call(message, "startTimeOffset"))
                                $root.google.protobuf.Duration.encode(message.startTimeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.endTimeOffset != null && Object.hasOwnProperty.call(message, "endTimeOffset"))
                                $root.google.protobuf.Duration.encode(message.endTimeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.VideoSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoSegment} message VideoSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoSegment} VideoSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.VideoSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.startTimeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.endTimeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoSegment} VideoSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.startTimeOffset != null && message.hasOwnProperty("startTimeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.startTimeOffset);
                                if (error)
                                    return "startTimeOffset." + error;
                            }
                            if (message.endTimeOffset != null && message.hasOwnProperty("endTimeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.endTimeOffset);
                                if (error)
                                    return "endTimeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoSegment} VideoSegment
                         */
                        VideoSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.VideoSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.VideoSegment();
                            if (object.startTimeOffset != null) {
                                if (typeof object.startTimeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoSegment.startTimeOffset: object expected");
                                message.startTimeOffset = $root.google.protobuf.Duration.fromObject(object.startTimeOffset);
                            }
                            if (object.endTimeOffset != null) {
                                if (typeof object.endTimeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoSegment.endTimeOffset: object expected");
                                message.endTimeOffset = $root.google.protobuf.Duration.fromObject(object.endTimeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.VideoSegment} message VideoSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.startTimeOffset = null;
                                object.endTimeOffset = null;
                            }
                            if (message.startTimeOffset != null && message.hasOwnProperty("startTimeOffset"))
                                object.startTimeOffset = $root.google.protobuf.Duration.toObject(message.startTimeOffset, options);
                            if (message.endTimeOffset != null && message.hasOwnProperty("endTimeOffset"))
                                object.endTimeOffset = $root.google.protobuf.Duration.toObject(message.endTimeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.VideoSegment";
                        };
    
                        return VideoSegment;
                    })();
    
                    v1p1beta1.LabelSegment = (function() {
    
                        /**
                         * Properties of a LabelSegment.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface ILabelSegment
                         * @property {google.cloud.videointelligence.v1p1beta1.IVideoSegment|null} [segment] LabelSegment segment
                         * @property {number|null} [confidence] LabelSegment confidence
                         */
    
                        /**
                         * Constructs a new LabelSegment.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a LabelSegment.
                         * @implements ILabelSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelSegment=} [properties] Properties to set
                         */
                        function LabelSegment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelSegment segment.
                         * @member {google.cloud.videointelligence.v1p1beta1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelSegment
                         * @instance
                         */
                        LabelSegment.prototype.segment = null;
    
                        /**
                         * LabelSegment confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelSegment
                         * @instance
                         */
                        LabelSegment.prototype.confidence = 0;
    
                        /**
                         * Creates a new LabelSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelSegment} LabelSegment instance
                         */
                        LabelSegment.create = function create(properties) {
                            return new LabelSegment(properties);
                        };
    
                        /**
                         * Encodes the specified LabelSegment message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.LabelSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelSegment} message LabelSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.encode(message.segment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.LabelSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelSegment} message LabelSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelSegment} LabelSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.LabelSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.segment = $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelSegment} LabelSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelSegment} LabelSegment
                         */
                        LabelSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.LabelSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.LabelSegment();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.LabelSegment.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.LabelSegment} message LabelSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.segment = null;
                                object.confidence = 0;
                            }
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.toObject(message.segment, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this LabelSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.LabelSegment";
                        };
    
                        return LabelSegment;
                    })();
    
                    v1p1beta1.LabelFrame = (function() {
    
                        /**
                         * Properties of a LabelFrame.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface ILabelFrame
                         * @property {google.protobuf.IDuration|null} [timeOffset] LabelFrame timeOffset
                         * @property {number|null} [confidence] LabelFrame confidence
                         */
    
                        /**
                         * Constructs a new LabelFrame.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a LabelFrame.
                         * @implements ILabelFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelFrame=} [properties] Properties to set
                         */
                        function LabelFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelFrame
                         * @instance
                         */
                        LabelFrame.prototype.timeOffset = null;
    
                        /**
                         * LabelFrame confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelFrame
                         * @instance
                         */
                        LabelFrame.prototype.confidence = 0;
    
                        /**
                         * Creates a new LabelFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelFrame} LabelFrame instance
                         */
                        LabelFrame.create = function create(properties) {
                            return new LabelFrame(properties);
                        };
    
                        /**
                         * Encodes the specified LabelFrame message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.LabelFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelFrame} message LabelFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.LabelFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelFrame} message LabelFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelFrame} LabelFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.LabelFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelFrame} LabelFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelFrame} LabelFrame
                         */
                        LabelFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.LabelFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.LabelFrame();
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.LabelFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.LabelFrame} message LabelFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.timeOffset = null;
                                object.confidence = 0;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this LabelFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.LabelFrame";
                        };
    
                        return LabelFrame;
                    })();
    
                    v1p1beta1.Entity = (function() {
    
                        /**
                         * Properties of an Entity.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IEntity
                         * @property {string|null} [entityId] Entity entityId
                         * @property {string|null} [description] Entity description
                         * @property {string|null} [languageCode] Entity languageCode
                         */
    
                        /**
                         * Constructs a new Entity.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents an Entity.
                         * @implements IEntity
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IEntity=} [properties] Properties to set
                         */
                        function Entity(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Entity entityId.
                         * @member {string} entityId
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @instance
                         */
                        Entity.prototype.entityId = "";
    
                        /**
                         * Entity description.
                         * @member {string} description
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @instance
                         */
                        Entity.prototype.description = "";
    
                        /**
                         * Entity languageCode.
                         * @member {string} languageCode
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @instance
                         */
                        Entity.prototype.languageCode = "";
    
                        /**
                         * Creates a new Entity instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IEntity=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.Entity} Entity instance
                         */
                        Entity.create = function create(properties) {
                            return new Entity(properties);
                        };
    
                        /**
                         * Encodes the specified Entity message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.Entity.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entityId != null && Object.hasOwnProperty.call(message, "entityId"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.entityId);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                            if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.languageCode);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Entity message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.Entity.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.Entity();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.entityId = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.description = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.languageCode = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Entity message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Entity.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entityId != null && message.hasOwnProperty("entityId"))
                                if (!$util.isString(message.entityId))
                                    return "entityId: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                if (!$util.isString(message.languageCode))
                                    return "languageCode: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an Entity message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.Entity} Entity
                         */
                        Entity.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.Entity)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.Entity();
                            if (object.entityId != null)
                                message.entityId = String(object.entityId);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.languageCode != null)
                                message.languageCode = String(object.languageCode);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Entity message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.Entity} message Entity
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Entity.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.entityId = "";
                                object.description = "";
                                object.languageCode = "";
                            }
                            if (message.entityId != null && message.hasOwnProperty("entityId"))
                                object.entityId = message.entityId;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                object.languageCode = message.languageCode;
                            return object;
                        };
    
                        /**
                         * Converts this Entity to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Entity.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Entity
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.Entity
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Entity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.Entity";
                        };
    
                        return Entity;
                    })();
    
                    v1p1beta1.LabelAnnotation = (function() {
    
                        /**
                         * Properties of a LabelAnnotation.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface ILabelAnnotation
                         * @property {google.cloud.videointelligence.v1p1beta1.IEntity|null} [entity] LabelAnnotation entity
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.IEntity>|null} [categoryEntities] LabelAnnotation categoryEntities
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.ILabelSegment>|null} [segments] LabelAnnotation segments
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.ILabelFrame>|null} [frames] LabelAnnotation frames
                         */
    
                        /**
                         * Constructs a new LabelAnnotation.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a LabelAnnotation.
                         * @implements ILabelAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelAnnotation=} [properties] Properties to set
                         */
                        function LabelAnnotation(properties) {
                            this.categoryEntities = [];
                            this.segments = [];
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelAnnotation entity.
                         * @member {google.cloud.videointelligence.v1p1beta1.IEntity|null|undefined} entity
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.entity = null;
    
                        /**
                         * LabelAnnotation categoryEntities.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.IEntity>} categoryEntities
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.categoryEntities = $util.emptyArray;
    
                        /**
                         * LabelAnnotation segments.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.ILabelSegment>} segments
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.segments = $util.emptyArray;
    
                        /**
                         * LabelAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.ILabelFrame>} frames
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new LabelAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelAnnotation} LabelAnnotation instance
                         */
                        LabelAnnotation.create = function create(properties) {
                            return new LabelAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified LabelAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.LabelAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelAnnotation} message LabelAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                                $root.google.cloud.videointelligence.v1p1beta1.Entity.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.categoryEntities != null && message.categoryEntities.length)
                                for (var i = 0; i < message.categoryEntities.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.Entity.encode(message.categoryEntities[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.LabelSegment.encode(message.segments[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.LabelFrame.encode(message.frames[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.LabelAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ILabelAnnotation} message LabelAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelAnnotation} LabelAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.entity = $root.google.cloud.videointelligence.v1p1beta1.Entity.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.categoryEntities && message.categoryEntities.length))
                                            message.categoryEntities = [];
                                        message.categoryEntities.push($root.google.cloud.videointelligence.v1p1beta1.Entity.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1p1beta1.LabelSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1p1beta1.LabelFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelAnnotation} LabelAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entity != null && message.hasOwnProperty("entity")) {
                                var error = $root.google.cloud.videointelligence.v1p1beta1.Entity.verify(message.entity);
                                if (error)
                                    return "entity." + error;
                            }
                            if (message.categoryEntities != null && message.hasOwnProperty("categoryEntities")) {
                                if (!Array.isArray(message.categoryEntities))
                                    return "categoryEntities: array expected";
                                for (var i = 0; i < message.categoryEntities.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.Entity.verify(message.categoryEntities[i]);
                                    if (error)
                                        return "categoryEntities." + error;
                                }
                            }
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.LabelSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.LabelFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a LabelAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.LabelAnnotation} LabelAnnotation
                         */
                        LabelAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation();
                            if (object.entity != null) {
                                if (typeof object.entity !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.LabelAnnotation.entity: object expected");
                                message.entity = $root.google.cloud.videointelligence.v1p1beta1.Entity.fromObject(object.entity);
                            }
                            if (object.categoryEntities) {
                                if (!Array.isArray(object.categoryEntities))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.LabelAnnotation.categoryEntities: array expected");
                                message.categoryEntities = [];
                                for (var i = 0; i < object.categoryEntities.length; ++i) {
                                    if (typeof object.categoryEntities[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.LabelAnnotation.categoryEntities: object expected");
                                    message.categoryEntities[i] = $root.google.cloud.videointelligence.v1p1beta1.Entity.fromObject(object.categoryEntities[i]);
                                }
                            }
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.LabelAnnotation.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.LabelAnnotation.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1p1beta1.LabelSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.LabelAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.LabelAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1p1beta1.LabelFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.LabelAnnotation} message LabelAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.categoryEntities = [];
                                object.segments = [];
                                object.frames = [];
                            }
                            if (options.defaults)
                                object.entity = null;
                            if (message.entity != null && message.hasOwnProperty("entity"))
                                object.entity = $root.google.cloud.videointelligence.v1p1beta1.Entity.toObject(message.entity, options);
                            if (message.categoryEntities && message.categoryEntities.length) {
                                object.categoryEntities = [];
                                for (var j = 0; j < message.categoryEntities.length; ++j)
                                    object.categoryEntities[j] = $root.google.cloud.videointelligence.v1p1beta1.Entity.toObject(message.categoryEntities[j], options);
                            }
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1p1beta1.LabelSegment.toObject(message.segments[j], options);
                            }
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1p1beta1.LabelFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this LabelAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.LabelAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.LabelAnnotation";
                        };
    
                        return LabelAnnotation;
                    })();
    
                    v1p1beta1.ExplicitContentFrame = (function() {
    
                        /**
                         * Properties of an ExplicitContentFrame.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IExplicitContentFrame
                         * @property {google.protobuf.IDuration|null} [timeOffset] ExplicitContentFrame timeOffset
                         * @property {google.cloud.videointelligence.v1p1beta1.Likelihood|null} [pornographyLikelihood] ExplicitContentFrame pornographyLikelihood
                         */
    
                        /**
                         * Constructs a new ExplicitContentFrame.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents an ExplicitContentFrame.
                         * @implements IExplicitContentFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IExplicitContentFrame=} [properties] Properties to set
                         */
                        function ExplicitContentFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame
                         * @instance
                         */
                        ExplicitContentFrame.prototype.timeOffset = null;
    
                        /**
                         * ExplicitContentFrame pornographyLikelihood.
                         * @member {google.cloud.videointelligence.v1p1beta1.Likelihood} pornographyLikelihood
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame
                         * @instance
                         */
                        ExplicitContentFrame.prototype.pornographyLikelihood = 0;
    
                        /**
                         * Creates a new ExplicitContentFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IExplicitContentFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame} ExplicitContentFrame instance
                         */
                        ExplicitContentFrame.create = function create(properties) {
                            return new ExplicitContentFrame(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentFrame message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IExplicitContentFrame} message ExplicitContentFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.pornographyLikelihood != null && Object.hasOwnProperty.call(message, "pornographyLikelihood"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pornographyLikelihood);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IExplicitContentFrame} message ExplicitContentFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame} ExplicitContentFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.pornographyLikelihood = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame} ExplicitContentFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            if (message.pornographyLikelihood != null && message.hasOwnProperty("pornographyLikelihood"))
                                switch (message.pornographyLikelihood) {
                                default:
                                    return "pornographyLikelihood: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame} ExplicitContentFrame
                         */
                        ExplicitContentFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame();
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            switch (object.pornographyLikelihood) {
                            default:
                                if (typeof object.pornographyLikelihood === "number") {
                                    message.pornographyLikelihood = object.pornographyLikelihood;
                                    break;
                                }
                                break;
                            case "LIKELIHOOD_UNSPECIFIED":
                            case 0:
                                message.pornographyLikelihood = 0;
                                break;
                            case "VERY_UNLIKELY":
                            case 1:
                                message.pornographyLikelihood = 1;
                                break;
                            case "UNLIKELY":
                            case 2:
                                message.pornographyLikelihood = 2;
                                break;
                            case "POSSIBLE":
                            case 3:
                                message.pornographyLikelihood = 3;
                                break;
                            case "LIKELY":
                            case 4:
                                message.pornographyLikelihood = 4;
                                break;
                            case "VERY_LIKELY":
                            case 5:
                                message.pornographyLikelihood = 5;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame} message ExplicitContentFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.timeOffset = null;
                                object.pornographyLikelihood = options.enums === String ? "LIKELIHOOD_UNSPECIFIED" : 0;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            if (message.pornographyLikelihood != null && message.hasOwnProperty("pornographyLikelihood"))
                                object.pornographyLikelihood = options.enums === String ? $root.google.cloud.videointelligence.v1p1beta1.Likelihood[message.pornographyLikelihood] === undefined ? message.pornographyLikelihood : $root.google.cloud.videointelligence.v1p1beta1.Likelihood[message.pornographyLikelihood] : message.pornographyLikelihood;
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame";
                        };
    
                        return ExplicitContentFrame;
                    })();
    
                    v1p1beta1.ExplicitContentAnnotation = (function() {
    
                        /**
                         * Properties of an ExplicitContentAnnotation.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IExplicitContentAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.IExplicitContentFrame>|null} [frames] ExplicitContentAnnotation frames
                         */
    
                        /**
                         * Constructs a new ExplicitContentAnnotation.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents an ExplicitContentAnnotation.
                         * @implements IExplicitContentAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IExplicitContentAnnotation=} [properties] Properties to set
                         */
                        function ExplicitContentAnnotation(properties) {
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.IExplicitContentFrame>} frames
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation
                         * @instance
                         */
                        ExplicitContentAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new ExplicitContentAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IExplicitContentAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation} ExplicitContentAnnotation instance
                         */
                        ExplicitContentAnnotation.create = function create(properties) {
                            return new ExplicitContentAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IExplicitContentAnnotation} message ExplicitContentAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.encode(message.frames[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IExplicitContentAnnotation} message ExplicitContentAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation} ExplicitContentAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation} ExplicitContentAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation} ExplicitContentAnnotation
                         */
                        ExplicitContentAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation();
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation} message ExplicitContentAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.frames = [];
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation";
                        };
    
                        return ExplicitContentAnnotation;
                    })();
    
                    v1p1beta1.VideoAnnotationResults = (function() {
    
                        /**
                         * Properties of a VideoAnnotationResults.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IVideoAnnotationResults
                         * @property {string|null} [inputUri] VideoAnnotationResults inputUri
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.ILabelAnnotation>|null} [segmentLabelAnnotations] VideoAnnotationResults segmentLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.ILabelAnnotation>|null} [shotLabelAnnotations] VideoAnnotationResults shotLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.ILabelAnnotation>|null} [frameLabelAnnotations] VideoAnnotationResults frameLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.IVideoSegment>|null} [shotAnnotations] VideoAnnotationResults shotAnnotations
                         * @property {google.cloud.videointelligence.v1p1beta1.IExplicitContentAnnotation|null} [explicitAnnotation] VideoAnnotationResults explicitAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.ISpeechTranscription>|null} [speechTranscriptions] VideoAnnotationResults speechTranscriptions
                         * @property {google.rpc.IStatus|null} [error] VideoAnnotationResults error
                         */
    
                        /**
                         * Constructs a new VideoAnnotationResults.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a VideoAnnotationResults.
                         * @implements IVideoAnnotationResults
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoAnnotationResults=} [properties] Properties to set
                         */
                        function VideoAnnotationResults(properties) {
                            this.segmentLabelAnnotations = [];
                            this.shotLabelAnnotations = [];
                            this.frameLabelAnnotations = [];
                            this.shotAnnotations = [];
                            this.speechTranscriptions = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoAnnotationResults inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.inputUri = "";
    
                        /**
                         * VideoAnnotationResults segmentLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.ILabelAnnotation>} segmentLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.segmentLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults shotLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.ILabelAnnotation>} shotLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.shotLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults frameLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.ILabelAnnotation>} frameLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.frameLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults shotAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.IVideoSegment>} shotAnnotations
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.shotAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults explicitAnnotation.
                         * @member {google.cloud.videointelligence.v1p1beta1.IExplicitContentAnnotation|null|undefined} explicitAnnotation
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.explicitAnnotation = null;
    
                        /**
                         * VideoAnnotationResults speechTranscriptions.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.ISpeechTranscription>} speechTranscriptions
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.speechTranscriptions = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults error.
                         * @member {google.rpc.IStatus|null|undefined} error
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.error = null;
    
                        /**
                         * Creates a new VideoAnnotationResults instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoAnnotationResults=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults} VideoAnnotationResults instance
                         */
                        VideoAnnotationResults.create = function create(properties) {
                            return new VideoAnnotationResults(properties);
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationResults message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoAnnotationResults} message VideoAnnotationResults message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationResults.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.segmentLabelAnnotations != null && message.segmentLabelAnnotations.length)
                                for (var i = 0; i < message.segmentLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.encode(message.segmentLabelAnnotations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.shotLabelAnnotations != null && message.shotLabelAnnotations.length)
                                for (var i = 0; i < message.shotLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.encode(message.shotLabelAnnotations[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.frameLabelAnnotations != null && message.frameLabelAnnotations.length)
                                for (var i = 0; i < message.frameLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.encode(message.frameLabelAnnotations[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.shotAnnotations != null && message.shotAnnotations.length)
                                for (var i = 0; i < message.shotAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.encode(message.shotAnnotations[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.explicitAnnotation != null && Object.hasOwnProperty.call(message, "explicitAnnotation"))
                                $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.encode(message.explicitAnnotation, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                                $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.speechTranscriptions != null && message.speechTranscriptions.length)
                                for (var i = 0; i < message.speechTranscriptions.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscription.encode(message.speechTranscriptions[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationResults message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoAnnotationResults} message VideoAnnotationResults message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationResults.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoAnnotationResults message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults} VideoAnnotationResults
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationResults.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.segmentLabelAnnotations && message.segmentLabelAnnotations.length))
                                            message.segmentLabelAnnotations = [];
                                        message.segmentLabelAnnotations.push($root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.shotLabelAnnotations && message.shotLabelAnnotations.length))
                                            message.shotLabelAnnotations = [];
                                        message.shotLabelAnnotations.push($root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (!(message.frameLabelAnnotations && message.frameLabelAnnotations.length))
                                            message.frameLabelAnnotations = [];
                                        message.frameLabelAnnotations.push($root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 6: {
                                        if (!(message.shotAnnotations && message.shotAnnotations.length))
                                            message.shotAnnotations = [];
                                        message.shotAnnotations.push($root.google.cloud.videointelligence.v1p1beta1.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 7: {
                                        message.explicitAnnotation = $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        if (!(message.speechTranscriptions && message.speechTranscriptions.length))
                                            message.speechTranscriptions = [];
                                        message.speechTranscriptions.push($root.google.cloud.videointelligence.v1p1beta1.SpeechTranscription.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 9: {
                                        message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoAnnotationResults message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults} VideoAnnotationResults
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationResults.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoAnnotationResults message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoAnnotationResults.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.segmentLabelAnnotations != null && message.hasOwnProperty("segmentLabelAnnotations")) {
                                if (!Array.isArray(message.segmentLabelAnnotations))
                                    return "segmentLabelAnnotations: array expected";
                                for (var i = 0; i < message.segmentLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.verify(message.segmentLabelAnnotations[i]);
                                    if (error)
                                        return "segmentLabelAnnotations." + error;
                                }
                            }
                            if (message.shotLabelAnnotations != null && message.hasOwnProperty("shotLabelAnnotations")) {
                                if (!Array.isArray(message.shotLabelAnnotations))
                                    return "shotLabelAnnotations: array expected";
                                for (var i = 0; i < message.shotLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.verify(message.shotLabelAnnotations[i]);
                                    if (error)
                                        return "shotLabelAnnotations." + error;
                                }
                            }
                            if (message.frameLabelAnnotations != null && message.hasOwnProperty("frameLabelAnnotations")) {
                                if (!Array.isArray(message.frameLabelAnnotations))
                                    return "frameLabelAnnotations: array expected";
                                for (var i = 0; i < message.frameLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.verify(message.frameLabelAnnotations[i]);
                                    if (error)
                                        return "frameLabelAnnotations." + error;
                                }
                            }
                            if (message.shotAnnotations != null && message.hasOwnProperty("shotAnnotations")) {
                                if (!Array.isArray(message.shotAnnotations))
                                    return "shotAnnotations: array expected";
                                for (var i = 0; i < message.shotAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.verify(message.shotAnnotations[i]);
                                    if (error)
                                        return "shotAnnotations." + error;
                                }
                            }
                            if (message.explicitAnnotation != null && message.hasOwnProperty("explicitAnnotation")) {
                                var error = $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.verify(message.explicitAnnotation);
                                if (error)
                                    return "explicitAnnotation." + error;
                            }
                            if (message.speechTranscriptions != null && message.hasOwnProperty("speechTranscriptions")) {
                                if (!Array.isArray(message.speechTranscriptions))
                                    return "speechTranscriptions: array expected";
                                for (var i = 0; i < message.speechTranscriptions.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscription.verify(message.speechTranscriptions[i]);
                                    if (error)
                                        return "speechTranscriptions." + error;
                                }
                            }
                            if (message.error != null && message.hasOwnProperty("error")) {
                                var error = $root.google.rpc.Status.verify(message.error);
                                if (error)
                                    return "error." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoAnnotationResults message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults} VideoAnnotationResults
                         */
                        VideoAnnotationResults.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.segmentLabelAnnotations) {
                                if (!Array.isArray(object.segmentLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.segmentLabelAnnotations: array expected");
                                message.segmentLabelAnnotations = [];
                                for (var i = 0; i < object.segmentLabelAnnotations.length; ++i) {
                                    if (typeof object.segmentLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.segmentLabelAnnotations: object expected");
                                    message.segmentLabelAnnotations[i] = $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.fromObject(object.segmentLabelAnnotations[i]);
                                }
                            }
                            if (object.shotLabelAnnotations) {
                                if (!Array.isArray(object.shotLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shotLabelAnnotations: array expected");
                                message.shotLabelAnnotations = [];
                                for (var i = 0; i < object.shotLabelAnnotations.length; ++i) {
                                    if (typeof object.shotLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shotLabelAnnotations: object expected");
                                    message.shotLabelAnnotations[i] = $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.fromObject(object.shotLabelAnnotations[i]);
                                }
                            }
                            if (object.frameLabelAnnotations) {
                                if (!Array.isArray(object.frameLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.frameLabelAnnotations: array expected");
                                message.frameLabelAnnotations = [];
                                for (var i = 0; i < object.frameLabelAnnotations.length; ++i) {
                                    if (typeof object.frameLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.frameLabelAnnotations: object expected");
                                    message.frameLabelAnnotations[i] = $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.fromObject(object.frameLabelAnnotations[i]);
                                }
                            }
                            if (object.shotAnnotations) {
                                if (!Array.isArray(object.shotAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shotAnnotations: array expected");
                                message.shotAnnotations = [];
                                for (var i = 0; i < object.shotAnnotations.length; ++i) {
                                    if (typeof object.shotAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.shotAnnotations: object expected");
                                    message.shotAnnotations[i] = $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.fromObject(object.shotAnnotations[i]);
                                }
                            }
                            if (object.explicitAnnotation != null) {
                                if (typeof object.explicitAnnotation !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.explicitAnnotation: object expected");
                                message.explicitAnnotation = $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.fromObject(object.explicitAnnotation);
                            }
                            if (object.speechTranscriptions) {
                                if (!Array.isArray(object.speechTranscriptions))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.speechTranscriptions: array expected");
                                message.speechTranscriptions = [];
                                for (var i = 0; i < object.speechTranscriptions.length; ++i) {
                                    if (typeof object.speechTranscriptions[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.speechTranscriptions: object expected");
                                    message.speechTranscriptions[i] = $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscription.fromObject(object.speechTranscriptions[i]);
                                }
                            }
                            if (object.error != null) {
                                if (typeof object.error !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.error: object expected");
                                message.error = $root.google.rpc.Status.fromObject(object.error);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoAnnotationResults message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults} message VideoAnnotationResults
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoAnnotationResults.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.segmentLabelAnnotations = [];
                                object.shotLabelAnnotations = [];
                                object.frameLabelAnnotations = [];
                                object.shotAnnotations = [];
                                object.speechTranscriptions = [];
                            }
                            if (options.defaults) {
                                object.inputUri = "";
                                object.explicitAnnotation = null;
                                object.error = null;
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.segmentLabelAnnotations && message.segmentLabelAnnotations.length) {
                                object.segmentLabelAnnotations = [];
                                for (var j = 0; j < message.segmentLabelAnnotations.length; ++j)
                                    object.segmentLabelAnnotations[j] = $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.toObject(message.segmentLabelAnnotations[j], options);
                            }
                            if (message.shotLabelAnnotations && message.shotLabelAnnotations.length) {
                                object.shotLabelAnnotations = [];
                                for (var j = 0; j < message.shotLabelAnnotations.length; ++j)
                                    object.shotLabelAnnotations[j] = $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.toObject(message.shotLabelAnnotations[j], options);
                            }
                            if (message.frameLabelAnnotations && message.frameLabelAnnotations.length) {
                                object.frameLabelAnnotations = [];
                                for (var j = 0; j < message.frameLabelAnnotations.length; ++j)
                                    object.frameLabelAnnotations[j] = $root.google.cloud.videointelligence.v1p1beta1.LabelAnnotation.toObject(message.frameLabelAnnotations[j], options);
                            }
                            if (message.shotAnnotations && message.shotAnnotations.length) {
                                object.shotAnnotations = [];
                                for (var j = 0; j < message.shotAnnotations.length; ++j)
                                    object.shotAnnotations[j] = $root.google.cloud.videointelligence.v1p1beta1.VideoSegment.toObject(message.shotAnnotations[j], options);
                            }
                            if (message.explicitAnnotation != null && message.hasOwnProperty("explicitAnnotation"))
                                object.explicitAnnotation = $root.google.cloud.videointelligence.v1p1beta1.ExplicitContentAnnotation.toObject(message.explicitAnnotation, options);
                            if (message.error != null && message.hasOwnProperty("error"))
                                object.error = $root.google.rpc.Status.toObject(message.error, options);
                            if (message.speechTranscriptions && message.speechTranscriptions.length) {
                                object.speechTranscriptions = [];
                                for (var j = 0; j < message.speechTranscriptions.length; ++j)
                                    object.speechTranscriptions[j] = $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscription.toObject(message.speechTranscriptions[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this VideoAnnotationResults to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoAnnotationResults.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoAnnotationResults
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoAnnotationResults.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults";
                        };
    
                        return VideoAnnotationResults;
                    })();
    
                    v1p1beta1.AnnotateVideoResponse = (function() {
    
                        /**
                         * Properties of an AnnotateVideoResponse.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IAnnotateVideoResponse
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.IVideoAnnotationResults>|null} [annotationResults] AnnotateVideoResponse annotationResults
                         */
    
                        /**
                         * Constructs a new AnnotateVideoResponse.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents an AnnotateVideoResponse.
                         * @implements IAnnotateVideoResponse
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoResponse=} [properties] Properties to set
                         */
                        function AnnotateVideoResponse(properties) {
                            this.annotationResults = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoResponse annotationResults.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.IVideoAnnotationResults>} annotationResults
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse
                         * @instance
                         */
                        AnnotateVideoResponse.prototype.annotationResults = $util.emptyArray;
    
                        /**
                         * Creates a new AnnotateVideoResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoResponse=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse} AnnotateVideoResponse instance
                         */
                        AnnotateVideoResponse.create = function create(properties) {
                            return new AnnotateVideoResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoResponse message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoResponse} message AnnotateVideoResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.annotationResults != null && message.annotationResults.length)
                                for (var i = 0; i < message.annotationResults.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.encode(message.annotationResults[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoResponse message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoResponse} message AnnotateVideoResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse} AnnotateVideoResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.annotationResults && message.annotationResults.length))
                                            message.annotationResults = [];
                                        message.annotationResults.push($root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse} AnnotateVideoResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoResponse message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.annotationResults != null && message.hasOwnProperty("annotationResults")) {
                                if (!Array.isArray(message.annotationResults))
                                    return "annotationResults: array expected";
                                for (var i = 0; i < message.annotationResults.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.verify(message.annotationResults[i]);
                                    if (error)
                                        return "annotationResults." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse} AnnotateVideoResponse
                         */
                        AnnotateVideoResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse();
                            if (object.annotationResults) {
                                if (!Array.isArray(object.annotationResults))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse.annotationResults: array expected");
                                message.annotationResults = [];
                                for (var i = 0; i < object.annotationResults.length; ++i) {
                                    if (typeof object.annotationResults[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse.annotationResults: object expected");
                                    message.annotationResults[i] = $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.fromObject(object.annotationResults[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse} message AnnotateVideoResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.annotationResults = [];
                            if (message.annotationResults && message.annotationResults.length) {
                                object.annotationResults = [];
                                for (var j = 0; j < message.annotationResults.length; ++j)
                                    object.annotationResults[j] = $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationResults.toObject(message.annotationResults[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.AnnotateVideoResponse";
                        };
    
                        return AnnotateVideoResponse;
                    })();
    
                    v1p1beta1.VideoAnnotationProgress = (function() {
    
                        /**
                         * Properties of a VideoAnnotationProgress.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IVideoAnnotationProgress
                         * @property {string|null} [inputUri] VideoAnnotationProgress inputUri
                         * @property {number|null} [progressPercent] VideoAnnotationProgress progressPercent
                         * @property {google.protobuf.ITimestamp|null} [startTime] VideoAnnotationProgress startTime
                         * @property {google.protobuf.ITimestamp|null} [updateTime] VideoAnnotationProgress updateTime
                         */
    
                        /**
                         * Constructs a new VideoAnnotationProgress.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a VideoAnnotationProgress.
                         * @implements IVideoAnnotationProgress
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoAnnotationProgress=} [properties] Properties to set
                         */
                        function VideoAnnotationProgress(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoAnnotationProgress inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.inputUri = "";
    
                        /**
                         * VideoAnnotationProgress progressPercent.
                         * @member {number} progressPercent
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.progressPercent = 0;
    
                        /**
                         * VideoAnnotationProgress startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.startTime = null;
    
                        /**
                         * VideoAnnotationProgress updateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.updateTime = null;
    
                        /**
                         * Creates a new VideoAnnotationProgress instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoAnnotationProgress=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress} VideoAnnotationProgress instance
                         */
                        VideoAnnotationProgress.create = function create(properties) {
                            return new VideoAnnotationProgress(properties);
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationProgress message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoAnnotationProgress} message VideoAnnotationProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationProgress.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.progressPercent != null && Object.hasOwnProperty.call(message, "progressPercent"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.progressPercent);
                            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                                $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationProgress message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IVideoAnnotationProgress} message VideoAnnotationProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationProgress.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoAnnotationProgress message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress} VideoAnnotationProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationProgress.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.progressPercent = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoAnnotationProgress message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress} VideoAnnotationProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationProgress.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoAnnotationProgress message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoAnnotationProgress.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                if (!$util.isInteger(message.progressPercent))
                                    return "progressPercent: integer expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                                if (error)
                                    return "updateTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoAnnotationProgress message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress} VideoAnnotationProgress
                         */
                        VideoAnnotationProgress.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.progressPercent != null)
                                message.progressPercent = object.progressPercent | 0;
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.updateTime != null) {
                                if (typeof object.updateTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.updateTime: object expected");
                                message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoAnnotationProgress message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress} message VideoAnnotationProgress
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoAnnotationProgress.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.inputUri = "";
                                object.progressPercent = 0;
                                object.startTime = null;
                                object.updateTime = null;
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                object.progressPercent = message.progressPercent;
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                                object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoAnnotationProgress to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoAnnotationProgress.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoAnnotationProgress
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoAnnotationProgress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress";
                        };
    
                        return VideoAnnotationProgress;
                    })();
    
                    v1p1beta1.AnnotateVideoProgress = (function() {
    
                        /**
                         * Properties of an AnnotateVideoProgress.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IAnnotateVideoProgress
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.IVideoAnnotationProgress>|null} [annotationProgress] AnnotateVideoProgress annotationProgress
                         */
    
                        /**
                         * Constructs a new AnnotateVideoProgress.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents an AnnotateVideoProgress.
                         * @implements IAnnotateVideoProgress
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoProgress=} [properties] Properties to set
                         */
                        function AnnotateVideoProgress(properties) {
                            this.annotationProgress = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoProgress annotationProgress.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.IVideoAnnotationProgress>} annotationProgress
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress
                         * @instance
                         */
                        AnnotateVideoProgress.prototype.annotationProgress = $util.emptyArray;
    
                        /**
                         * Creates a new AnnotateVideoProgress instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoProgress=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress} AnnotateVideoProgress instance
                         */
                        AnnotateVideoProgress.create = function create(properties) {
                            return new AnnotateVideoProgress(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoProgress message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoProgress} message AnnotateVideoProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoProgress.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.annotationProgress != null && message.annotationProgress.length)
                                for (var i = 0; i < message.annotationProgress.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.encode(message.annotationProgress[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoProgress message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IAnnotateVideoProgress} message AnnotateVideoProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoProgress.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoProgress message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress} AnnotateVideoProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoProgress.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.annotationProgress && message.annotationProgress.length))
                                            message.annotationProgress = [];
                                        message.annotationProgress.push($root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoProgress message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress} AnnotateVideoProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoProgress.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoProgress message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoProgress.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.annotationProgress != null && message.hasOwnProperty("annotationProgress")) {
                                if (!Array.isArray(message.annotationProgress))
                                    return "annotationProgress: array expected";
                                for (var i = 0; i < message.annotationProgress.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.verify(message.annotationProgress[i]);
                                    if (error)
                                        return "annotationProgress." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoProgress message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress} AnnotateVideoProgress
                         */
                        AnnotateVideoProgress.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress();
                            if (object.annotationProgress) {
                                if (!Array.isArray(object.annotationProgress))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress.annotationProgress: array expected");
                                message.annotationProgress = [];
                                for (var i = 0; i < object.annotationProgress.length; ++i) {
                                    if (typeof object.annotationProgress[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress.annotationProgress: object expected");
                                    message.annotationProgress[i] = $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.fromObject(object.annotationProgress[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoProgress message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress} message AnnotateVideoProgress
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoProgress.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.annotationProgress = [];
                            if (message.annotationProgress && message.annotationProgress.length) {
                                object.annotationProgress = [];
                                for (var j = 0; j < message.annotationProgress.length; ++j)
                                    object.annotationProgress[j] = $root.google.cloud.videointelligence.v1p1beta1.VideoAnnotationProgress.toObject(message.annotationProgress[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoProgress to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoProgress.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoProgress
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoProgress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.AnnotateVideoProgress";
                        };
    
                        return AnnotateVideoProgress;
                    })();
    
                    v1p1beta1.SpeechTranscriptionConfig = (function() {
    
                        /**
                         * Properties of a SpeechTranscriptionConfig.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface ISpeechTranscriptionConfig
                         * @property {string|null} [languageCode] SpeechTranscriptionConfig languageCode
                         * @property {number|null} [maxAlternatives] SpeechTranscriptionConfig maxAlternatives
                         * @property {boolean|null} [filterProfanity] SpeechTranscriptionConfig filterProfanity
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.ISpeechContext>|null} [speechContexts] SpeechTranscriptionConfig speechContexts
                         * @property {boolean|null} [enableAutomaticPunctuation] SpeechTranscriptionConfig enableAutomaticPunctuation
                         * @property {Array.<number>|null} [audioTracks] SpeechTranscriptionConfig audioTracks
                         */
    
                        /**
                         * Constructs a new SpeechTranscriptionConfig.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a SpeechTranscriptionConfig.
                         * @implements ISpeechTranscriptionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechTranscriptionConfig=} [properties] Properties to set
                         */
                        function SpeechTranscriptionConfig(properties) {
                            this.speechContexts = [];
                            this.audioTracks = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpeechTranscriptionConfig languageCode.
                         * @member {string} languageCode
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.languageCode = "";
    
                        /**
                         * SpeechTranscriptionConfig maxAlternatives.
                         * @member {number} maxAlternatives
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.maxAlternatives = 0;
    
                        /**
                         * SpeechTranscriptionConfig filterProfanity.
                         * @member {boolean} filterProfanity
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.filterProfanity = false;
    
                        /**
                         * SpeechTranscriptionConfig speechContexts.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.ISpeechContext>} speechContexts
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.speechContexts = $util.emptyArray;
    
                        /**
                         * SpeechTranscriptionConfig enableAutomaticPunctuation.
                         * @member {boolean} enableAutomaticPunctuation
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.enableAutomaticPunctuation = false;
    
                        /**
                         * SpeechTranscriptionConfig audioTracks.
                         * @member {Array.<number>} audioTracks
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.audioTracks = $util.emptyArray;
    
                        /**
                         * Creates a new SpeechTranscriptionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechTranscriptionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig} SpeechTranscriptionConfig instance
                         */
                        SpeechTranscriptionConfig.create = function create(properties) {
                            return new SpeechTranscriptionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified SpeechTranscriptionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechTranscriptionConfig} message SpeechTranscriptionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechTranscriptionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.languageCode);
                            if (message.maxAlternatives != null && Object.hasOwnProperty.call(message, "maxAlternatives"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.maxAlternatives);
                            if (message.filterProfanity != null && Object.hasOwnProperty.call(message, "filterProfanity"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.filterProfanity);
                            if (message.speechContexts != null && message.speechContexts.length)
                                for (var i = 0; i < message.speechContexts.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.SpeechContext.encode(message.speechContexts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.enableAutomaticPunctuation != null && Object.hasOwnProperty.call(message, "enableAutomaticPunctuation"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.enableAutomaticPunctuation);
                            if (message.audioTracks != null && message.audioTracks.length) {
                                writer.uint32(/* id 6, wireType 2 =*/50).fork();
                                for (var i = 0; i < message.audioTracks.length; ++i)
                                    writer.int32(message.audioTracks[i]);
                                writer.ldelim();
                            }
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpeechTranscriptionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechTranscriptionConfig} message SpeechTranscriptionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechTranscriptionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpeechTranscriptionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig} SpeechTranscriptionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechTranscriptionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.languageCode = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.maxAlternatives = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.filterProfanity = reader.bool();
                                        break;
                                    }
                                case 4: {
                                        if (!(message.speechContexts && message.speechContexts.length))
                                            message.speechContexts = [];
                                        message.speechContexts.push($root.google.cloud.videointelligence.v1p1beta1.SpeechContext.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 5: {
                                        message.enableAutomaticPunctuation = reader.bool();
                                        break;
                                    }
                                case 6: {
                                        if (!(message.audioTracks && message.audioTracks.length))
                                            message.audioTracks = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.audioTracks.push(reader.int32());
                                        } else
                                            message.audioTracks.push(reader.int32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpeechTranscriptionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig} SpeechTranscriptionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechTranscriptionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpeechTranscriptionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpeechTranscriptionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                if (!$util.isString(message.languageCode))
                                    return "languageCode: string expected";
                            if (message.maxAlternatives != null && message.hasOwnProperty("maxAlternatives"))
                                if (!$util.isInteger(message.maxAlternatives))
                                    return "maxAlternatives: integer expected";
                            if (message.filterProfanity != null && message.hasOwnProperty("filterProfanity"))
                                if (typeof message.filterProfanity !== "boolean")
                                    return "filterProfanity: boolean expected";
                            if (message.speechContexts != null && message.hasOwnProperty("speechContexts")) {
                                if (!Array.isArray(message.speechContexts))
                                    return "speechContexts: array expected";
                                for (var i = 0; i < message.speechContexts.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.SpeechContext.verify(message.speechContexts[i]);
                                    if (error)
                                        return "speechContexts." + error;
                                }
                            }
                            if (message.enableAutomaticPunctuation != null && message.hasOwnProperty("enableAutomaticPunctuation"))
                                if (typeof message.enableAutomaticPunctuation !== "boolean")
                                    return "enableAutomaticPunctuation: boolean expected";
                            if (message.audioTracks != null && message.hasOwnProperty("audioTracks")) {
                                if (!Array.isArray(message.audioTracks))
                                    return "audioTracks: array expected";
                                for (var i = 0; i < message.audioTracks.length; ++i)
                                    if (!$util.isInteger(message.audioTracks[i]))
                                        return "audioTracks: integer[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a SpeechTranscriptionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig} SpeechTranscriptionConfig
                         */
                        SpeechTranscriptionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig();
                            if (object.languageCode != null)
                                message.languageCode = String(object.languageCode);
                            if (object.maxAlternatives != null)
                                message.maxAlternatives = object.maxAlternatives | 0;
                            if (object.filterProfanity != null)
                                message.filterProfanity = Boolean(object.filterProfanity);
                            if (object.speechContexts) {
                                if (!Array.isArray(object.speechContexts))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.speechContexts: array expected");
                                message.speechContexts = [];
                                for (var i = 0; i < object.speechContexts.length; ++i) {
                                    if (typeof object.speechContexts[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.speechContexts: object expected");
                                    message.speechContexts[i] = $root.google.cloud.videointelligence.v1p1beta1.SpeechContext.fromObject(object.speechContexts[i]);
                                }
                            }
                            if (object.enableAutomaticPunctuation != null)
                                message.enableAutomaticPunctuation = Boolean(object.enableAutomaticPunctuation);
                            if (object.audioTracks) {
                                if (!Array.isArray(object.audioTracks))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig.audioTracks: array expected");
                                message.audioTracks = [];
                                for (var i = 0; i < object.audioTracks.length; ++i)
                                    message.audioTracks[i] = object.audioTracks[i] | 0;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpeechTranscriptionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig} message SpeechTranscriptionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpeechTranscriptionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.speechContexts = [];
                                object.audioTracks = [];
                            }
                            if (options.defaults) {
                                object.languageCode = "";
                                object.maxAlternatives = 0;
                                object.filterProfanity = false;
                                object.enableAutomaticPunctuation = false;
                            }
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                object.languageCode = message.languageCode;
                            if (message.maxAlternatives != null && message.hasOwnProperty("maxAlternatives"))
                                object.maxAlternatives = message.maxAlternatives;
                            if (message.filterProfanity != null && message.hasOwnProperty("filterProfanity"))
                                object.filterProfanity = message.filterProfanity;
                            if (message.speechContexts && message.speechContexts.length) {
                                object.speechContexts = [];
                                for (var j = 0; j < message.speechContexts.length; ++j)
                                    object.speechContexts[j] = $root.google.cloud.videointelligence.v1p1beta1.SpeechContext.toObject(message.speechContexts[j], options);
                            }
                            if (message.enableAutomaticPunctuation != null && message.hasOwnProperty("enableAutomaticPunctuation"))
                                object.enableAutomaticPunctuation = message.enableAutomaticPunctuation;
                            if (message.audioTracks && message.audioTracks.length) {
                                object.audioTracks = [];
                                for (var j = 0; j < message.audioTracks.length; ++j)
                                    object.audioTracks[j] = message.audioTracks[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this SpeechTranscriptionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpeechTranscriptionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpeechTranscriptionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpeechTranscriptionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.SpeechTranscriptionConfig";
                        };
    
                        return SpeechTranscriptionConfig;
                    })();
    
                    v1p1beta1.SpeechContext = (function() {
    
                        /**
                         * Properties of a SpeechContext.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface ISpeechContext
                         * @property {Array.<string>|null} [phrases] SpeechContext phrases
                         */
    
                        /**
                         * Constructs a new SpeechContext.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a SpeechContext.
                         * @implements ISpeechContext
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechContext=} [properties] Properties to set
                         */
                        function SpeechContext(properties) {
                            this.phrases = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpeechContext phrases.
                         * @member {Array.<string>} phrases
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechContext
                         * @instance
                         */
                        SpeechContext.prototype.phrases = $util.emptyArray;
    
                        /**
                         * Creates a new SpeechContext instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechContext=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechContext} SpeechContext instance
                         */
                        SpeechContext.create = function create(properties) {
                            return new SpeechContext(properties);
                        };
    
                        /**
                         * Encodes the specified SpeechContext message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.SpeechContext.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechContext} message SpeechContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechContext.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.phrases != null && message.phrases.length)
                                for (var i = 0; i < message.phrases.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.phrases[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpeechContext message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.SpeechContext.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechContext} message SpeechContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechContext.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpeechContext message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechContext} SpeechContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechContext.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.SpeechContext();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.phrases && message.phrases.length))
                                            message.phrases = [];
                                        message.phrases.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpeechContext message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechContext} SpeechContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechContext.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpeechContext message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechContext
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpeechContext.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.phrases != null && message.hasOwnProperty("phrases")) {
                                if (!Array.isArray(message.phrases))
                                    return "phrases: array expected";
                                for (var i = 0; i < message.phrases.length; ++i)
                                    if (!$util.isString(message.phrases[i]))
                                        return "phrases: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a SpeechContext message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechContext
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechContext} SpeechContext
                         */
                        SpeechContext.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.SpeechContext)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.SpeechContext();
                            if (object.phrases) {
                                if (!Array.isArray(object.phrases))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.SpeechContext.phrases: array expected");
                                message.phrases = [];
                                for (var i = 0; i < object.phrases.length; ++i)
                                    message.phrases[i] = String(object.phrases[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpeechContext message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.SpeechContext} message SpeechContext
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpeechContext.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.phrases = [];
                            if (message.phrases && message.phrases.length) {
                                object.phrases = [];
                                for (var j = 0; j < message.phrases.length; ++j)
                                    object.phrases[j] = message.phrases[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this SpeechContext to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechContext
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpeechContext.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpeechContext
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechContext
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpeechContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.SpeechContext";
                        };
    
                        return SpeechContext;
                    })();
    
                    v1p1beta1.SpeechTranscription = (function() {
    
                        /**
                         * Properties of a SpeechTranscription.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface ISpeechTranscription
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.ISpeechRecognitionAlternative>|null} [alternatives] SpeechTranscription alternatives
                         */
    
                        /**
                         * Constructs a new SpeechTranscription.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a SpeechTranscription.
                         * @implements ISpeechTranscription
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechTranscription=} [properties] Properties to set
                         */
                        function SpeechTranscription(properties) {
                            this.alternatives = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpeechTranscription alternatives.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.ISpeechRecognitionAlternative>} alternatives
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscription
                         * @instance
                         */
                        SpeechTranscription.prototype.alternatives = $util.emptyArray;
    
                        /**
                         * Creates a new SpeechTranscription instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscription
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechTranscription=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechTranscription} SpeechTranscription instance
                         */
                        SpeechTranscription.create = function create(properties) {
                            return new SpeechTranscription(properties);
                        };
    
                        /**
                         * Encodes the specified SpeechTranscription message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.SpeechTranscription.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscription
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechTranscription} message SpeechTranscription message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechTranscription.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.alternatives != null && message.alternatives.length)
                                for (var i = 0; i < message.alternatives.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.encode(message.alternatives[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpeechTranscription message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.SpeechTranscription.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscription
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechTranscription} message SpeechTranscription message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechTranscription.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpeechTranscription message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscription
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechTranscription} SpeechTranscription
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechTranscription.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscription();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.alternatives && message.alternatives.length))
                                            message.alternatives = [];
                                        message.alternatives.push($root.google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpeechTranscription message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscription
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechTranscription} SpeechTranscription
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechTranscription.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpeechTranscription message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscription
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpeechTranscription.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.alternatives != null && message.hasOwnProperty("alternatives")) {
                                if (!Array.isArray(message.alternatives))
                                    return "alternatives: array expected";
                                for (var i = 0; i < message.alternatives.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.verify(message.alternatives[i]);
                                    if (error)
                                        return "alternatives." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a SpeechTranscription message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscription
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechTranscription} SpeechTranscription
                         */
                        SpeechTranscription.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscription)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.SpeechTranscription();
                            if (object.alternatives) {
                                if (!Array.isArray(object.alternatives))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.SpeechTranscription.alternatives: array expected");
                                message.alternatives = [];
                                for (var i = 0; i < object.alternatives.length; ++i) {
                                    if (typeof object.alternatives[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.SpeechTranscription.alternatives: object expected");
                                    message.alternatives[i] = $root.google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.fromObject(object.alternatives[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpeechTranscription message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscription
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.SpeechTranscription} message SpeechTranscription
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpeechTranscription.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.alternatives = [];
                            if (message.alternatives && message.alternatives.length) {
                                object.alternatives = [];
                                for (var j = 0; j < message.alternatives.length; ++j)
                                    object.alternatives[j] = $root.google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.toObject(message.alternatives[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this SpeechTranscription to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscription
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpeechTranscription.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpeechTranscription
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechTranscription
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpeechTranscription.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.SpeechTranscription";
                        };
    
                        return SpeechTranscription;
                    })();
    
                    v1p1beta1.SpeechRecognitionAlternative = (function() {
    
                        /**
                         * Properties of a SpeechRecognitionAlternative.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface ISpeechRecognitionAlternative
                         * @property {string|null} [transcript] SpeechRecognitionAlternative transcript
                         * @property {number|null} [confidence] SpeechRecognitionAlternative confidence
                         * @property {Array.<google.cloud.videointelligence.v1p1beta1.IWordInfo>|null} [words] SpeechRecognitionAlternative words
                         */
    
                        /**
                         * Constructs a new SpeechRecognitionAlternative.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a SpeechRecognitionAlternative.
                         * @implements ISpeechRecognitionAlternative
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechRecognitionAlternative=} [properties] Properties to set
                         */
                        function SpeechRecognitionAlternative(properties) {
                            this.words = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpeechRecognitionAlternative transcript.
                         * @member {string} transcript
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @instance
                         */
                        SpeechRecognitionAlternative.prototype.transcript = "";
    
                        /**
                         * SpeechRecognitionAlternative confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @instance
                         */
                        SpeechRecognitionAlternative.prototype.confidence = 0;
    
                        /**
                         * SpeechRecognitionAlternative words.
                         * @member {Array.<google.cloud.videointelligence.v1p1beta1.IWordInfo>} words
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @instance
                         */
                        SpeechRecognitionAlternative.prototype.words = $util.emptyArray;
    
                        /**
                         * Creates a new SpeechRecognitionAlternative instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechRecognitionAlternative=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative} SpeechRecognitionAlternative instance
                         */
                        SpeechRecognitionAlternative.create = function create(properties) {
                            return new SpeechRecognitionAlternative(properties);
                        };
    
                        /**
                         * Encodes the specified SpeechRecognitionAlternative message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechRecognitionAlternative} message SpeechRecognitionAlternative message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechRecognitionAlternative.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.transcript != null && Object.hasOwnProperty.call(message, "transcript"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.transcript);
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            if (message.words != null && message.words.length)
                                for (var i = 0; i < message.words.length; ++i)
                                    $root.google.cloud.videointelligence.v1p1beta1.WordInfo.encode(message.words[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpeechRecognitionAlternative message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.ISpeechRecognitionAlternative} message SpeechRecognitionAlternative message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechRecognitionAlternative.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpeechRecognitionAlternative message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative} SpeechRecognitionAlternative
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechRecognitionAlternative.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.transcript = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.words && message.words.length))
                                            message.words = [];
                                        message.words.push($root.google.cloud.videointelligence.v1p1beta1.WordInfo.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpeechRecognitionAlternative message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative} SpeechRecognitionAlternative
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechRecognitionAlternative.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpeechRecognitionAlternative message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpeechRecognitionAlternative.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.transcript != null && message.hasOwnProperty("transcript"))
                                if (!$util.isString(message.transcript))
                                    return "transcript: string expected";
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.words != null && message.hasOwnProperty("words")) {
                                if (!Array.isArray(message.words))
                                    return "words: array expected";
                                for (var i = 0; i < message.words.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p1beta1.WordInfo.verify(message.words[i]);
                                    if (error)
                                        return "words." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a SpeechRecognitionAlternative message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative} SpeechRecognitionAlternative
                         */
                        SpeechRecognitionAlternative.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative();
                            if (object.transcript != null)
                                message.transcript = String(object.transcript);
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.words) {
                                if (!Array.isArray(object.words))
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.words: array expected");
                                message.words = [];
                                for (var i = 0; i < object.words.length; ++i) {
                                    if (typeof object.words[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative.words: object expected");
                                    message.words[i] = $root.google.cloud.videointelligence.v1p1beta1.WordInfo.fromObject(object.words[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpeechRecognitionAlternative message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative} message SpeechRecognitionAlternative
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpeechRecognitionAlternative.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.words = [];
                            if (options.defaults) {
                                object.transcript = "";
                                object.confidence = 0;
                            }
                            if (message.transcript != null && message.hasOwnProperty("transcript"))
                                object.transcript = message.transcript;
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.words && message.words.length) {
                                object.words = [];
                                for (var j = 0; j < message.words.length; ++j)
                                    object.words[j] = $root.google.cloud.videointelligence.v1p1beta1.WordInfo.toObject(message.words[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this SpeechRecognitionAlternative to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpeechRecognitionAlternative.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpeechRecognitionAlternative
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpeechRecognitionAlternative.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.SpeechRecognitionAlternative";
                        };
    
                        return SpeechRecognitionAlternative;
                    })();
    
                    v1p1beta1.WordInfo = (function() {
    
                        /**
                         * Properties of a WordInfo.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @interface IWordInfo
                         * @property {google.protobuf.IDuration|null} [startTime] WordInfo startTime
                         * @property {google.protobuf.IDuration|null} [endTime] WordInfo endTime
                         * @property {string|null} [word] WordInfo word
                         */
    
                        /**
                         * Constructs a new WordInfo.
                         * @memberof google.cloud.videointelligence.v1p1beta1
                         * @classdesc Represents a WordInfo.
                         * @implements IWordInfo
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p1beta1.IWordInfo=} [properties] Properties to set
                         */
                        function WordInfo(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * WordInfo startTime.
                         * @member {google.protobuf.IDuration|null|undefined} startTime
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.startTime = null;
    
                        /**
                         * WordInfo endTime.
                         * @member {google.protobuf.IDuration|null|undefined} endTime
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.endTime = null;
    
                        /**
                         * WordInfo word.
                         * @member {string} word
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.word = "";
    
                        /**
                         * Creates a new WordInfo instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IWordInfo=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p1beta1.WordInfo} WordInfo instance
                         */
                        WordInfo.create = function create(properties) {
                            return new WordInfo(properties);
                        };
    
                        /**
                         * Encodes the specified WordInfo message. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.WordInfo.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IWordInfo} message WordInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WordInfo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                $root.google.protobuf.Duration.encode(message.startTime, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                                $root.google.protobuf.Duration.encode(message.endTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.word != null && Object.hasOwnProperty.call(message, "word"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.word);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified WordInfo message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p1beta1.WordInfo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.IWordInfo} message WordInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WordInfo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a WordInfo message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p1beta1.WordInfo} WordInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WordInfo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p1beta1.WordInfo();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.startTime = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.endTime = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.word = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a WordInfo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p1beta1.WordInfo} WordInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WordInfo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a WordInfo message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        WordInfo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Duration.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                var error = $root.google.protobuf.Duration.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                            if (message.word != null && message.hasOwnProperty("word"))
                                if (!$util.isString(message.word))
                                    return "word: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a WordInfo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p1beta1.WordInfo} WordInfo
                         */
                        WordInfo.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p1beta1.WordInfo)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p1beta1.WordInfo();
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.WordInfo.startTime: object expected");
                                message.startTime = $root.google.protobuf.Duration.fromObject(object.startTime);
                            }
                            if (object.endTime != null) {
                                if (typeof object.endTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p1beta1.WordInfo.endTime: object expected");
                                message.endTime = $root.google.protobuf.Duration.fromObject(object.endTime);
                            }
                            if (object.word != null)
                                message.word = String(object.word);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a WordInfo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @static
                         * @param {google.cloud.videointelligence.v1p1beta1.WordInfo} message WordInfo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        WordInfo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.startTime = null;
                                object.endTime = null;
                                object.word = "";
                            }
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Duration.toObject(message.startTime, options);
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                object.endTime = $root.google.protobuf.Duration.toObject(message.endTime, options);
                            if (message.word != null && message.hasOwnProperty("word"))
                                object.word = message.word;
                            return object;
                        };
    
                        /**
                         * Converts this WordInfo to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        WordInfo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for WordInfo
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p1beta1.WordInfo
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        WordInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p1beta1.WordInfo";
                        };
    
                        return WordInfo;
                    })();
    
                    /**
                     * Feature enum.
                     * @name google.cloud.videointelligence.v1p1beta1.Feature
                     * @enum {number}
                     * @property {number} FEATURE_UNSPECIFIED=0 FEATURE_UNSPECIFIED value
                     * @property {number} LABEL_DETECTION=1 LABEL_DETECTION value
                     * @property {number} SHOT_CHANGE_DETECTION=2 SHOT_CHANGE_DETECTION value
                     * @property {number} EXPLICIT_CONTENT_DETECTION=3 EXPLICIT_CONTENT_DETECTION value
                     * @property {number} SPEECH_TRANSCRIPTION=6 SPEECH_TRANSCRIPTION value
                     */
                    v1p1beta1.Feature = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "FEATURE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "LABEL_DETECTION"] = 1;
                        values[valuesById[2] = "SHOT_CHANGE_DETECTION"] = 2;
                        values[valuesById[3] = "EXPLICIT_CONTENT_DETECTION"] = 3;
                        values[valuesById[6] = "SPEECH_TRANSCRIPTION"] = 6;
                        return values;
                    })();
    
                    /**
                     * LabelDetectionMode enum.
                     * @name google.cloud.videointelligence.v1p1beta1.LabelDetectionMode
                     * @enum {number}
                     * @property {number} LABEL_DETECTION_MODE_UNSPECIFIED=0 LABEL_DETECTION_MODE_UNSPECIFIED value
                     * @property {number} SHOT_MODE=1 SHOT_MODE value
                     * @property {number} FRAME_MODE=2 FRAME_MODE value
                     * @property {number} SHOT_AND_FRAME_MODE=3 SHOT_AND_FRAME_MODE value
                     */
                    v1p1beta1.LabelDetectionMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LABEL_DETECTION_MODE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "SHOT_MODE"] = 1;
                        values[valuesById[2] = "FRAME_MODE"] = 2;
                        values[valuesById[3] = "SHOT_AND_FRAME_MODE"] = 3;
                        return values;
                    })();
    
                    /**
                     * Likelihood enum.
                     * @name google.cloud.videointelligence.v1p1beta1.Likelihood
                     * @enum {number}
                     * @property {number} LIKELIHOOD_UNSPECIFIED=0 LIKELIHOOD_UNSPECIFIED value
                     * @property {number} VERY_UNLIKELY=1 VERY_UNLIKELY value
                     * @property {number} UNLIKELY=2 UNLIKELY value
                     * @property {number} POSSIBLE=3 POSSIBLE value
                     * @property {number} LIKELY=4 LIKELY value
                     * @property {number} VERY_LIKELY=5 VERY_LIKELY value
                     */
                    v1p1beta1.Likelihood = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LIKELIHOOD_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "VERY_UNLIKELY"] = 1;
                        values[valuesById[2] = "UNLIKELY"] = 2;
                        values[valuesById[3] = "POSSIBLE"] = 3;
                        values[valuesById[4] = "LIKELY"] = 4;
                        values[valuesById[5] = "VERY_LIKELY"] = 5;
                        return values;
                    })();
    
                    return v1p1beta1;
                })();
    
                videointelligence.v1p2beta1 = (function() {
    
                    /**
                     * Namespace v1p2beta1.
                     * @memberof google.cloud.videointelligence
                     * @namespace
                     */
                    var v1p2beta1 = {};
    
                    v1p2beta1.VideoIntelligenceService = (function() {
    
                        /**
                         * Constructs a new VideoIntelligenceService service.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a VideoIntelligenceService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function VideoIntelligenceService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (VideoIntelligenceService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = VideoIntelligenceService;
    
                        /**
                         * Creates new VideoIntelligenceService service using the specified rpc implementation.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoIntelligenceService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {VideoIntelligenceService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        VideoIntelligenceService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.cloud.videointelligence.v1p2beta1.VideoIntelligenceService|annotateVideo}.
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoIntelligenceService
                         * @typedef AnnotateVideoCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls AnnotateVideo.
                         * @function annotateVideo
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoIntelligenceService
                         * @instance
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoRequest} request AnnotateVideoRequest message or plain object
                         * @param {google.cloud.videointelligence.v1p2beta1.VideoIntelligenceService.AnnotateVideoCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(VideoIntelligenceService.prototype.annotateVideo = function annotateVideo(request, callback) {
                            return this.rpcCall(annotateVideo, $root.google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "AnnotateVideo" });
    
                        /**
                         * Calls AnnotateVideo.
                         * @function annotateVideo
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoIntelligenceService
                         * @instance
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoRequest} request AnnotateVideoRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        return VideoIntelligenceService;
                    })();
    
                    v1p2beta1.AnnotateVideoRequest = (function() {
    
                        /**
                         * Properties of an AnnotateVideoRequest.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IAnnotateVideoRequest
                         * @property {string|null} [inputUri] AnnotateVideoRequest inputUri
                         * @property {Uint8Array|null} [inputContent] AnnotateVideoRequest inputContent
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.Feature>|null} [features] AnnotateVideoRequest features
                         * @property {google.cloud.videointelligence.v1p2beta1.IVideoContext|null} [videoContext] AnnotateVideoRequest videoContext
                         * @property {string|null} [outputUri] AnnotateVideoRequest outputUri
                         * @property {string|null} [locationId] AnnotateVideoRequest locationId
                         */
    
                        /**
                         * Constructs a new AnnotateVideoRequest.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents an AnnotateVideoRequest.
                         * @implements IAnnotateVideoRequest
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoRequest=} [properties] Properties to set
                         */
                        function AnnotateVideoRequest(properties) {
                            this.features = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoRequest inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.inputUri = "";
    
                        /**
                         * AnnotateVideoRequest inputContent.
                         * @member {Uint8Array} inputContent
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.inputContent = $util.newBuffer([]);
    
                        /**
                         * AnnotateVideoRequest features.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.Feature>} features
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.features = $util.emptyArray;
    
                        /**
                         * AnnotateVideoRequest videoContext.
                         * @member {google.cloud.videointelligence.v1p2beta1.IVideoContext|null|undefined} videoContext
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.videoContext = null;
    
                        /**
                         * AnnotateVideoRequest outputUri.
                         * @member {string} outputUri
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.outputUri = "";
    
                        /**
                         * AnnotateVideoRequest locationId.
                         * @member {string} locationId
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new AnnotateVideoRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoRequest=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest} AnnotateVideoRequest instance
                         */
                        AnnotateVideoRequest.create = function create(properties) {
                            return new AnnotateVideoRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoRequest message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoRequest} message AnnotateVideoRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.features != null && message.features.length) {
                                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                                for (var i = 0; i < message.features.length; ++i)
                                    writer.int32(message.features[i]);
                                writer.ldelim();
                            }
                            if (message.videoContext != null && Object.hasOwnProperty.call(message, "videoContext"))
                                $root.google.cloud.videointelligence.v1p2beta1.VideoContext.encode(message.videoContext, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.outputUri != null && Object.hasOwnProperty.call(message, "outputUri"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.outputUri);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.locationId);
                            if (message.inputContent != null && Object.hasOwnProperty.call(message, "inputContent"))
                                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.inputContent);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoRequest message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoRequest} message AnnotateVideoRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest} AnnotateVideoRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.inputContent = reader.bytes();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.features && message.features.length))
                                            message.features = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.features.push(reader.int32());
                                        } else
                                            message.features.push(reader.int32());
                                        break;
                                    }
                                case 3: {
                                        message.videoContext = $root.google.cloud.videointelligence.v1p2beta1.VideoContext.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.outputUri = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.locationId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest} AnnotateVideoRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoRequest message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.inputContent != null && message.hasOwnProperty("inputContent"))
                                if (!(message.inputContent && typeof message.inputContent.length === "number" || $util.isString(message.inputContent)))
                                    return "inputContent: buffer expected";
                            if (message.features != null && message.hasOwnProperty("features")) {
                                if (!Array.isArray(message.features))
                                    return "features: array expected";
                                for (var i = 0; i < message.features.length; ++i)
                                    switch (message.features[i]) {
                                    default:
                                        return "features: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 7:
                                    case 9:
                                        break;
                                    }
                            }
                            if (message.videoContext != null && message.hasOwnProperty("videoContext")) {
                                var error = $root.google.cloud.videointelligence.v1p2beta1.VideoContext.verify(message.videoContext);
                                if (error)
                                    return "videoContext." + error;
                            }
                            if (message.outputUri != null && message.hasOwnProperty("outputUri"))
                                if (!$util.isString(message.outputUri))
                                    return "outputUri: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest} AnnotateVideoRequest
                         */
                        AnnotateVideoRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.inputContent != null)
                                if (typeof object.inputContent === "string")
                                    $util.base64.decode(object.inputContent, message.inputContent = $util.newBuffer($util.base64.length(object.inputContent)), 0);
                                else if (object.inputContent.length >= 0)
                                    message.inputContent = object.inputContent;
                            if (object.features) {
                                if (!Array.isArray(object.features))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest.features: array expected");
                                message.features = [];
                                for (var i = 0; i < object.features.length; ++i)
                                    switch (object.features[i]) {
                                    default:
                                        if (typeof object.features[i] === "number") {
                                            message.features[i] = object.features[i];
                                            break;
                                        }
                                    case "FEATURE_UNSPECIFIED":
                                    case 0:
                                        message.features[i] = 0;
                                        break;
                                    case "LABEL_DETECTION":
                                    case 1:
                                        message.features[i] = 1;
                                        break;
                                    case "SHOT_CHANGE_DETECTION":
                                    case 2:
                                        message.features[i] = 2;
                                        break;
                                    case "EXPLICIT_CONTENT_DETECTION":
                                    case 3:
                                        message.features[i] = 3;
                                        break;
                                    case "TEXT_DETECTION":
                                    case 7:
                                        message.features[i] = 7;
                                        break;
                                    case "OBJECT_TRACKING":
                                    case 9:
                                        message.features[i] = 9;
                                        break;
                                    }
                            }
                            if (object.videoContext != null) {
                                if (typeof object.videoContext !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest.videoContext: object expected");
                                message.videoContext = $root.google.cloud.videointelligence.v1p2beta1.VideoContext.fromObject(object.videoContext);
                            }
                            if (object.outputUri != null)
                                message.outputUri = String(object.outputUri);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest} message AnnotateVideoRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.features = [];
                            if (options.defaults) {
                                object.inputUri = "";
                                object.videoContext = null;
                                object.outputUri = "";
                                object.locationId = "";
                                if (options.bytes === String)
                                    object.inputContent = "";
                                else {
                                    object.inputContent = [];
                                    if (options.bytes !== Array)
                                        object.inputContent = $util.newBuffer(object.inputContent);
                                }
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.features && message.features.length) {
                                object.features = [];
                                for (var j = 0; j < message.features.length; ++j)
                                    object.features[j] = options.enums === String ? $root.google.cloud.videointelligence.v1p2beta1.Feature[message.features[j]] === undefined ? message.features[j] : $root.google.cloud.videointelligence.v1p2beta1.Feature[message.features[j]] : message.features[j];
                            }
                            if (message.videoContext != null && message.hasOwnProperty("videoContext"))
                                object.videoContext = $root.google.cloud.videointelligence.v1p2beta1.VideoContext.toObject(message.videoContext, options);
                            if (message.outputUri != null && message.hasOwnProperty("outputUri"))
                                object.outputUri = message.outputUri;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            if (message.inputContent != null && message.hasOwnProperty("inputContent"))
                                object.inputContent = options.bytes === String ? $util.base64.encode(message.inputContent, 0, message.inputContent.length) : options.bytes === Array ? Array.prototype.slice.call(message.inputContent) : message.inputContent;
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.AnnotateVideoRequest";
                        };
    
                        return AnnotateVideoRequest;
                    })();
    
                    v1p2beta1.VideoContext = (function() {
    
                        /**
                         * Properties of a VideoContext.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IVideoContext
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.IVideoSegment>|null} [segments] VideoContext segments
                         * @property {google.cloud.videointelligence.v1p2beta1.ILabelDetectionConfig|null} [labelDetectionConfig] VideoContext labelDetectionConfig
                         * @property {google.cloud.videointelligence.v1p2beta1.IShotChangeDetectionConfig|null} [shotChangeDetectionConfig] VideoContext shotChangeDetectionConfig
                         * @property {google.cloud.videointelligence.v1p2beta1.IExplicitContentDetectionConfig|null} [explicitContentDetectionConfig] VideoContext explicitContentDetectionConfig
                         * @property {google.cloud.videointelligence.v1p2beta1.ITextDetectionConfig|null} [textDetectionConfig] VideoContext textDetectionConfig
                         */
    
                        /**
                         * Constructs a new VideoContext.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a VideoContext.
                         * @implements IVideoContext
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoContext=} [properties] Properties to set
                         */
                        function VideoContext(properties) {
                            this.segments = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoContext segments.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.IVideoSegment>} segments
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.segments = $util.emptyArray;
    
                        /**
                         * VideoContext labelDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p2beta1.ILabelDetectionConfig|null|undefined} labelDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.labelDetectionConfig = null;
    
                        /**
                         * VideoContext shotChangeDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p2beta1.IShotChangeDetectionConfig|null|undefined} shotChangeDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.shotChangeDetectionConfig = null;
    
                        /**
                         * VideoContext explicitContentDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p2beta1.IExplicitContentDetectionConfig|null|undefined} explicitContentDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.explicitContentDetectionConfig = null;
    
                        /**
                         * VideoContext textDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p2beta1.ITextDetectionConfig|null|undefined} textDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.textDetectionConfig = null;
    
                        /**
                         * Creates a new VideoContext instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoContext=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoContext} VideoContext instance
                         */
                        VideoContext.create = function create(properties) {
                            return new VideoContext(properties);
                        };
    
                        /**
                         * Encodes the specified VideoContext message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.VideoContext.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoContext} message VideoContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoContext.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.encode(message.segments[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.labelDetectionConfig != null && Object.hasOwnProperty.call(message, "labelDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig.encode(message.labelDetectionConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.shotChangeDetectionConfig != null && Object.hasOwnProperty.call(message, "shotChangeDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig.encode(message.shotChangeDetectionConfig, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.explicitContentDetectionConfig != null && Object.hasOwnProperty.call(message, "explicitContentDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig.encode(message.explicitContentDetectionConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.textDetectionConfig != null && Object.hasOwnProperty.call(message, "textDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p2beta1.TextDetectionConfig.encode(message.textDetectionConfig, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoContext message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.VideoContext.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoContext} message VideoContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoContext.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoContext message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoContext} VideoContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoContext.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.VideoContext();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1p2beta1.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.labelDetectionConfig = $root.google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.textDetectionConfig = $root.google.cloud.videointelligence.v1p2beta1.TextDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoContext message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoContext} VideoContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoContext.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoContext message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoContext.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.labelDetectionConfig != null && message.hasOwnProperty("labelDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig.verify(message.labelDetectionConfig);
                                if (error)
                                    return "labelDetectionConfig." + error;
                            }
                            if (message.shotChangeDetectionConfig != null && message.hasOwnProperty("shotChangeDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig.verify(message.shotChangeDetectionConfig);
                                if (error)
                                    return "shotChangeDetectionConfig." + error;
                            }
                            if (message.explicitContentDetectionConfig != null && message.hasOwnProperty("explicitContentDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig.verify(message.explicitContentDetectionConfig);
                                if (error)
                                    return "explicitContentDetectionConfig." + error;
                            }
                            if (message.textDetectionConfig != null && message.hasOwnProperty("textDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p2beta1.TextDetectionConfig.verify(message.textDetectionConfig);
                                if (error)
                                    return "textDetectionConfig." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoContext message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoContext} VideoContext
                         */
                        VideoContext.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.VideoContext)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.VideoContext();
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoContext.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoContext.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.labelDetectionConfig != null) {
                                if (typeof object.labelDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoContext.labelDetectionConfig: object expected");
                                message.labelDetectionConfig = $root.google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig.fromObject(object.labelDetectionConfig);
                            }
                            if (object.shotChangeDetectionConfig != null) {
                                if (typeof object.shotChangeDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoContext.shotChangeDetectionConfig: object expected");
                                message.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig.fromObject(object.shotChangeDetectionConfig);
                            }
                            if (object.explicitContentDetectionConfig != null) {
                                if (typeof object.explicitContentDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoContext.explicitContentDetectionConfig: object expected");
                                message.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig.fromObject(object.explicitContentDetectionConfig);
                            }
                            if (object.textDetectionConfig != null) {
                                if (typeof object.textDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoContext.textDetectionConfig: object expected");
                                message.textDetectionConfig = $root.google.cloud.videointelligence.v1p2beta1.TextDetectionConfig.fromObject(object.textDetectionConfig);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoContext message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.VideoContext} message VideoContext
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoContext.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.segments = [];
                            if (options.defaults) {
                                object.labelDetectionConfig = null;
                                object.shotChangeDetectionConfig = null;
                                object.explicitContentDetectionConfig = null;
                                object.textDetectionConfig = null;
                            }
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.toObject(message.segments[j], options);
                            }
                            if (message.labelDetectionConfig != null && message.hasOwnProperty("labelDetectionConfig"))
                                object.labelDetectionConfig = $root.google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig.toObject(message.labelDetectionConfig, options);
                            if (message.shotChangeDetectionConfig != null && message.hasOwnProperty("shotChangeDetectionConfig"))
                                object.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig.toObject(message.shotChangeDetectionConfig, options);
                            if (message.explicitContentDetectionConfig != null && message.hasOwnProperty("explicitContentDetectionConfig"))
                                object.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig.toObject(message.explicitContentDetectionConfig, options);
                            if (message.textDetectionConfig != null && message.hasOwnProperty("textDetectionConfig"))
                                object.textDetectionConfig = $root.google.cloud.videointelligence.v1p2beta1.TextDetectionConfig.toObject(message.textDetectionConfig, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoContext to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoContext.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoContext
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoContext
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.VideoContext";
                        };
    
                        return VideoContext;
                    })();
    
                    v1p2beta1.LabelDetectionConfig = (function() {
    
                        /**
                         * Properties of a LabelDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface ILabelDetectionConfig
                         * @property {google.cloud.videointelligence.v1p2beta1.LabelDetectionMode|null} [labelDetectionMode] LabelDetectionConfig labelDetectionMode
                         * @property {boolean|null} [stationaryCamera] LabelDetectionConfig stationaryCamera
                         * @property {string|null} [model] LabelDetectionConfig model
                         */
    
                        /**
                         * Constructs a new LabelDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a LabelDetectionConfig.
                         * @implements ILabelDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelDetectionConfig=} [properties] Properties to set
                         */
                        function LabelDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelDetectionConfig labelDetectionMode.
                         * @member {google.cloud.videointelligence.v1p2beta1.LabelDetectionMode} labelDetectionMode
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.labelDetectionMode = 0;
    
                        /**
                         * LabelDetectionConfig stationaryCamera.
                         * @member {boolean} stationaryCamera
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.stationaryCamera = false;
    
                        /**
                         * LabelDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new LabelDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig} LabelDetectionConfig instance
                         */
                        LabelDetectionConfig.create = function create(properties) {
                            return new LabelDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified LabelDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelDetectionConfig} message LabelDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.labelDetectionMode != null && Object.hasOwnProperty.call(message, "labelDetectionMode"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.labelDetectionMode);
                            if (message.stationaryCamera != null && Object.hasOwnProperty.call(message, "stationaryCamera"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.stationaryCamera);
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelDetectionConfig} message LabelDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig} LabelDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.labelDetectionMode = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.stationaryCamera = reader.bool();
                                        break;
                                    }
                                case 3: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig} LabelDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.labelDetectionMode != null && message.hasOwnProperty("labelDetectionMode"))
                                switch (message.labelDetectionMode) {
                                default:
                                    return "labelDetectionMode: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.stationaryCamera != null && message.hasOwnProperty("stationaryCamera"))
                                if (typeof message.stationaryCamera !== "boolean")
                                    return "stationaryCamera: boolean expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig} LabelDetectionConfig
                         */
                        LabelDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig();
                            switch (object.labelDetectionMode) {
                            default:
                                if (typeof object.labelDetectionMode === "number") {
                                    message.labelDetectionMode = object.labelDetectionMode;
                                    break;
                                }
                                break;
                            case "LABEL_DETECTION_MODE_UNSPECIFIED":
                            case 0:
                                message.labelDetectionMode = 0;
                                break;
                            case "SHOT_MODE":
                            case 1:
                                message.labelDetectionMode = 1;
                                break;
                            case "FRAME_MODE":
                            case 2:
                                message.labelDetectionMode = 2;
                                break;
                            case "SHOT_AND_FRAME_MODE":
                            case 3:
                                message.labelDetectionMode = 3;
                                break;
                            }
                            if (object.stationaryCamera != null)
                                message.stationaryCamera = Boolean(object.stationaryCamera);
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig} message LabelDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.labelDetectionMode = options.enums === String ? "LABEL_DETECTION_MODE_UNSPECIFIED" : 0;
                                object.stationaryCamera = false;
                                object.model = "";
                            }
                            if (message.labelDetectionMode != null && message.hasOwnProperty("labelDetectionMode"))
                                object.labelDetectionMode = options.enums === String ? $root.google.cloud.videointelligence.v1p2beta1.LabelDetectionMode[message.labelDetectionMode] === undefined ? message.labelDetectionMode : $root.google.cloud.videointelligence.v1p2beta1.LabelDetectionMode[message.labelDetectionMode] : message.labelDetectionMode;
                            if (message.stationaryCamera != null && message.hasOwnProperty("stationaryCamera"))
                                object.stationaryCamera = message.stationaryCamera;
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this LabelDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.LabelDetectionConfig";
                        };
    
                        return LabelDetectionConfig;
                    })();
    
                    v1p2beta1.ShotChangeDetectionConfig = (function() {
    
                        /**
                         * Properties of a ShotChangeDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IShotChangeDetectionConfig
                         * @property {string|null} [model] ShotChangeDetectionConfig model
                         */
    
                        /**
                         * Constructs a new ShotChangeDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a ShotChangeDetectionConfig.
                         * @implements IShotChangeDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IShotChangeDetectionConfig=} [properties] Properties to set
                         */
                        function ShotChangeDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ShotChangeDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig
                         * @instance
                         */
                        ShotChangeDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new ShotChangeDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IShotChangeDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig} ShotChangeDetectionConfig instance
                         */
                        ShotChangeDetectionConfig.create = function create(properties) {
                            return new ShotChangeDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ShotChangeDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IShotChangeDetectionConfig} message ShotChangeDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ShotChangeDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ShotChangeDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IShotChangeDetectionConfig} message ShotChangeDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ShotChangeDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ShotChangeDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ShotChangeDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ShotChangeDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ShotChangeDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ShotChangeDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ShotChangeDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ShotChangeDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         */
                        ShotChangeDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ShotChangeDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig} message ShotChangeDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ShotChangeDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.model = "";
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this ShotChangeDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ShotChangeDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ShotChangeDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ShotChangeDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.ShotChangeDetectionConfig";
                        };
    
                        return ShotChangeDetectionConfig;
                    })();
    
                    v1p2beta1.ExplicitContentDetectionConfig = (function() {
    
                        /**
                         * Properties of an ExplicitContentDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IExplicitContentDetectionConfig
                         * @property {string|null} [model] ExplicitContentDetectionConfig model
                         */
    
                        /**
                         * Constructs a new ExplicitContentDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents an ExplicitContentDetectionConfig.
                         * @implements IExplicitContentDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IExplicitContentDetectionConfig=} [properties] Properties to set
                         */
                        function ExplicitContentDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig
                         * @instance
                         */
                        ExplicitContentDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new ExplicitContentDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IExplicitContentDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig instance
                         */
                        ExplicitContentDetectionConfig.create = function create(properties) {
                            return new ExplicitContentDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IExplicitContentDetectionConfig} message ExplicitContentDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IExplicitContentDetectionConfig} message ExplicitContentDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         */
                        ExplicitContentDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig} message ExplicitContentDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.model = "";
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.ExplicitContentDetectionConfig";
                        };
    
                        return ExplicitContentDetectionConfig;
                    })();
    
                    v1p2beta1.TextDetectionConfig = (function() {
    
                        /**
                         * Properties of a TextDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface ITextDetectionConfig
                         * @property {Array.<string>|null} [languageHints] TextDetectionConfig languageHints
                         */
    
                        /**
                         * Constructs a new TextDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a TextDetectionConfig.
                         * @implements ITextDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextDetectionConfig=} [properties] Properties to set
                         */
                        function TextDetectionConfig(properties) {
                            this.languageHints = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextDetectionConfig languageHints.
                         * @member {Array.<string>} languageHints
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextDetectionConfig
                         * @instance
                         */
                        TextDetectionConfig.prototype.languageHints = $util.emptyArray;
    
                        /**
                         * Creates a new TextDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextDetectionConfig} TextDetectionConfig instance
                         */
                        TextDetectionConfig.create = function create(properties) {
                            return new TextDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified TextDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.TextDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextDetectionConfig} message TextDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.languageHints != null && message.languageHints.length)
                                for (var i = 0; i < message.languageHints.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.languageHints[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.TextDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextDetectionConfig} message TextDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextDetectionConfig} TextDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.TextDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.languageHints && message.languageHints.length))
                                            message.languageHints = [];
                                        message.languageHints.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextDetectionConfig} TextDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.languageHints != null && message.hasOwnProperty("languageHints")) {
                                if (!Array.isArray(message.languageHints))
                                    return "languageHints: array expected";
                                for (var i = 0; i < message.languageHints.length; ++i)
                                    if (!$util.isString(message.languageHints[i]))
                                        return "languageHints: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TextDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextDetectionConfig} TextDetectionConfig
                         */
                        TextDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.TextDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.TextDetectionConfig();
                            if (object.languageHints) {
                                if (!Array.isArray(object.languageHints))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.TextDetectionConfig.languageHints: array expected");
                                message.languageHints = [];
                                for (var i = 0; i < object.languageHints.length; ++i)
                                    message.languageHints[i] = String(object.languageHints[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.TextDetectionConfig} message TextDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.languageHints = [];
                            if (message.languageHints && message.languageHints.length) {
                                object.languageHints = [];
                                for (var j = 0; j < message.languageHints.length; ++j)
                                    object.languageHints[j] = message.languageHints[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TextDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.TextDetectionConfig";
                        };
    
                        return TextDetectionConfig;
                    })();
    
                    v1p2beta1.VideoSegment = (function() {
    
                        /**
                         * Properties of a VideoSegment.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IVideoSegment
                         * @property {google.protobuf.IDuration|null} [startTimeOffset] VideoSegment startTimeOffset
                         * @property {google.protobuf.IDuration|null} [endTimeOffset] VideoSegment endTimeOffset
                         */
    
                        /**
                         * Constructs a new VideoSegment.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a VideoSegment.
                         * @implements IVideoSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoSegment=} [properties] Properties to set
                         */
                        function VideoSegment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoSegment startTimeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} startTimeOffset
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoSegment
                         * @instance
                         */
                        VideoSegment.prototype.startTimeOffset = null;
    
                        /**
                         * VideoSegment endTimeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} endTimeOffset
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoSegment
                         * @instance
                         */
                        VideoSegment.prototype.endTimeOffset = null;
    
                        /**
                         * Creates a new VideoSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoSegment} VideoSegment instance
                         */
                        VideoSegment.create = function create(properties) {
                            return new VideoSegment(properties);
                        };
    
                        /**
                         * Encodes the specified VideoSegment message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.VideoSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoSegment} message VideoSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.startTimeOffset != null && Object.hasOwnProperty.call(message, "startTimeOffset"))
                                $root.google.protobuf.Duration.encode(message.startTimeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.endTimeOffset != null && Object.hasOwnProperty.call(message, "endTimeOffset"))
                                $root.google.protobuf.Duration.encode(message.endTimeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.VideoSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoSegment} message VideoSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoSegment} VideoSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.VideoSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.startTimeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.endTimeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoSegment} VideoSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.startTimeOffset != null && message.hasOwnProperty("startTimeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.startTimeOffset);
                                if (error)
                                    return "startTimeOffset." + error;
                            }
                            if (message.endTimeOffset != null && message.hasOwnProperty("endTimeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.endTimeOffset);
                                if (error)
                                    return "endTimeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoSegment} VideoSegment
                         */
                        VideoSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.VideoSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.VideoSegment();
                            if (object.startTimeOffset != null) {
                                if (typeof object.startTimeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoSegment.startTimeOffset: object expected");
                                message.startTimeOffset = $root.google.protobuf.Duration.fromObject(object.startTimeOffset);
                            }
                            if (object.endTimeOffset != null) {
                                if (typeof object.endTimeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoSegment.endTimeOffset: object expected");
                                message.endTimeOffset = $root.google.protobuf.Duration.fromObject(object.endTimeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.VideoSegment} message VideoSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.startTimeOffset = null;
                                object.endTimeOffset = null;
                            }
                            if (message.startTimeOffset != null && message.hasOwnProperty("startTimeOffset"))
                                object.startTimeOffset = $root.google.protobuf.Duration.toObject(message.startTimeOffset, options);
                            if (message.endTimeOffset != null && message.hasOwnProperty("endTimeOffset"))
                                object.endTimeOffset = $root.google.protobuf.Duration.toObject(message.endTimeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.VideoSegment";
                        };
    
                        return VideoSegment;
                    })();
    
                    v1p2beta1.LabelSegment = (function() {
    
                        /**
                         * Properties of a LabelSegment.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface ILabelSegment
                         * @property {google.cloud.videointelligence.v1p2beta1.IVideoSegment|null} [segment] LabelSegment segment
                         * @property {number|null} [confidence] LabelSegment confidence
                         */
    
                        /**
                         * Constructs a new LabelSegment.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a LabelSegment.
                         * @implements ILabelSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelSegment=} [properties] Properties to set
                         */
                        function LabelSegment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelSegment segment.
                         * @member {google.cloud.videointelligence.v1p2beta1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelSegment
                         * @instance
                         */
                        LabelSegment.prototype.segment = null;
    
                        /**
                         * LabelSegment confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelSegment
                         * @instance
                         */
                        LabelSegment.prototype.confidence = 0;
    
                        /**
                         * Creates a new LabelSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelSegment} LabelSegment instance
                         */
                        LabelSegment.create = function create(properties) {
                            return new LabelSegment(properties);
                        };
    
                        /**
                         * Encodes the specified LabelSegment message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.LabelSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelSegment} message LabelSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.encode(message.segment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.LabelSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelSegment} message LabelSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelSegment} LabelSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.LabelSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.segment = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelSegment} LabelSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelSegment} LabelSegment
                         */
                        LabelSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.LabelSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.LabelSegment();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.LabelSegment.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.LabelSegment} message LabelSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.segment = null;
                                object.confidence = 0;
                            }
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.toObject(message.segment, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this LabelSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.LabelSegment";
                        };
    
                        return LabelSegment;
                    })();
    
                    v1p2beta1.LabelFrame = (function() {
    
                        /**
                         * Properties of a LabelFrame.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface ILabelFrame
                         * @property {google.protobuf.IDuration|null} [timeOffset] LabelFrame timeOffset
                         * @property {number|null} [confidence] LabelFrame confidence
                         */
    
                        /**
                         * Constructs a new LabelFrame.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a LabelFrame.
                         * @implements ILabelFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelFrame=} [properties] Properties to set
                         */
                        function LabelFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelFrame
                         * @instance
                         */
                        LabelFrame.prototype.timeOffset = null;
    
                        /**
                         * LabelFrame confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelFrame
                         * @instance
                         */
                        LabelFrame.prototype.confidence = 0;
    
                        /**
                         * Creates a new LabelFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelFrame} LabelFrame instance
                         */
                        LabelFrame.create = function create(properties) {
                            return new LabelFrame(properties);
                        };
    
                        /**
                         * Encodes the specified LabelFrame message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.LabelFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelFrame} message LabelFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.LabelFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelFrame} message LabelFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelFrame} LabelFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.LabelFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelFrame} LabelFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelFrame} LabelFrame
                         */
                        LabelFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.LabelFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.LabelFrame();
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.LabelFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.LabelFrame} message LabelFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.timeOffset = null;
                                object.confidence = 0;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this LabelFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.LabelFrame";
                        };
    
                        return LabelFrame;
                    })();
    
                    v1p2beta1.Entity = (function() {
    
                        /**
                         * Properties of an Entity.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IEntity
                         * @property {string|null} [entityId] Entity entityId
                         * @property {string|null} [description] Entity description
                         * @property {string|null} [languageCode] Entity languageCode
                         */
    
                        /**
                         * Constructs a new Entity.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents an Entity.
                         * @implements IEntity
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IEntity=} [properties] Properties to set
                         */
                        function Entity(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Entity entityId.
                         * @member {string} entityId
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @instance
                         */
                        Entity.prototype.entityId = "";
    
                        /**
                         * Entity description.
                         * @member {string} description
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @instance
                         */
                        Entity.prototype.description = "";
    
                        /**
                         * Entity languageCode.
                         * @member {string} languageCode
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @instance
                         */
                        Entity.prototype.languageCode = "";
    
                        /**
                         * Creates a new Entity instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IEntity=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.Entity} Entity instance
                         */
                        Entity.create = function create(properties) {
                            return new Entity(properties);
                        };
    
                        /**
                         * Encodes the specified Entity message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.Entity.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entityId != null && Object.hasOwnProperty.call(message, "entityId"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.entityId);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                            if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.languageCode);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Entity message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.Entity.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.Entity();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.entityId = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.description = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.languageCode = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Entity message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Entity.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entityId != null && message.hasOwnProperty("entityId"))
                                if (!$util.isString(message.entityId))
                                    return "entityId: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                if (!$util.isString(message.languageCode))
                                    return "languageCode: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an Entity message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.Entity} Entity
                         */
                        Entity.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.Entity)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.Entity();
                            if (object.entityId != null)
                                message.entityId = String(object.entityId);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.languageCode != null)
                                message.languageCode = String(object.languageCode);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Entity message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.Entity} message Entity
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Entity.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.entityId = "";
                                object.description = "";
                                object.languageCode = "";
                            }
                            if (message.entityId != null && message.hasOwnProperty("entityId"))
                                object.entityId = message.entityId;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                object.languageCode = message.languageCode;
                            return object;
                        };
    
                        /**
                         * Converts this Entity to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Entity.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Entity
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.Entity
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Entity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.Entity";
                        };
    
                        return Entity;
                    })();
    
                    v1p2beta1.LabelAnnotation = (function() {
    
                        /**
                         * Properties of a LabelAnnotation.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface ILabelAnnotation
                         * @property {google.cloud.videointelligence.v1p2beta1.IEntity|null} [entity] LabelAnnotation entity
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.IEntity>|null} [categoryEntities] LabelAnnotation categoryEntities
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.ILabelSegment>|null} [segments] LabelAnnotation segments
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.ILabelFrame>|null} [frames] LabelAnnotation frames
                         */
    
                        /**
                         * Constructs a new LabelAnnotation.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a LabelAnnotation.
                         * @implements ILabelAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelAnnotation=} [properties] Properties to set
                         */
                        function LabelAnnotation(properties) {
                            this.categoryEntities = [];
                            this.segments = [];
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelAnnotation entity.
                         * @member {google.cloud.videointelligence.v1p2beta1.IEntity|null|undefined} entity
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.entity = null;
    
                        /**
                         * LabelAnnotation categoryEntities.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.IEntity>} categoryEntities
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.categoryEntities = $util.emptyArray;
    
                        /**
                         * LabelAnnotation segments.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.ILabelSegment>} segments
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.segments = $util.emptyArray;
    
                        /**
                         * LabelAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.ILabelFrame>} frames
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new LabelAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelAnnotation} LabelAnnotation instance
                         */
                        LabelAnnotation.create = function create(properties) {
                            return new LabelAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified LabelAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.LabelAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelAnnotation} message LabelAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                                $root.google.cloud.videointelligence.v1p2beta1.Entity.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.categoryEntities != null && message.categoryEntities.length)
                                for (var i = 0; i < message.categoryEntities.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.Entity.encode(message.categoryEntities[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.LabelSegment.encode(message.segments[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.LabelFrame.encode(message.frames[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.LabelAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ILabelAnnotation} message LabelAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelAnnotation} LabelAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.entity = $root.google.cloud.videointelligence.v1p2beta1.Entity.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.categoryEntities && message.categoryEntities.length))
                                            message.categoryEntities = [];
                                        message.categoryEntities.push($root.google.cloud.videointelligence.v1p2beta1.Entity.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1p2beta1.LabelSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1p2beta1.LabelFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelAnnotation} LabelAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entity != null && message.hasOwnProperty("entity")) {
                                var error = $root.google.cloud.videointelligence.v1p2beta1.Entity.verify(message.entity);
                                if (error)
                                    return "entity." + error;
                            }
                            if (message.categoryEntities != null && message.hasOwnProperty("categoryEntities")) {
                                if (!Array.isArray(message.categoryEntities))
                                    return "categoryEntities: array expected";
                                for (var i = 0; i < message.categoryEntities.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.Entity.verify(message.categoryEntities[i]);
                                    if (error)
                                        return "categoryEntities." + error;
                                }
                            }
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.LabelSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.LabelFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a LabelAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.LabelAnnotation} LabelAnnotation
                         */
                        LabelAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation();
                            if (object.entity != null) {
                                if (typeof object.entity !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.LabelAnnotation.entity: object expected");
                                message.entity = $root.google.cloud.videointelligence.v1p2beta1.Entity.fromObject(object.entity);
                            }
                            if (object.categoryEntities) {
                                if (!Array.isArray(object.categoryEntities))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.LabelAnnotation.categoryEntities: array expected");
                                message.categoryEntities = [];
                                for (var i = 0; i < object.categoryEntities.length; ++i) {
                                    if (typeof object.categoryEntities[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.LabelAnnotation.categoryEntities: object expected");
                                    message.categoryEntities[i] = $root.google.cloud.videointelligence.v1p2beta1.Entity.fromObject(object.categoryEntities[i]);
                                }
                            }
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.LabelAnnotation.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.LabelAnnotation.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1p2beta1.LabelSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.LabelAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.LabelAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1p2beta1.LabelFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.LabelAnnotation} message LabelAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.categoryEntities = [];
                                object.segments = [];
                                object.frames = [];
                            }
                            if (options.defaults)
                                object.entity = null;
                            if (message.entity != null && message.hasOwnProperty("entity"))
                                object.entity = $root.google.cloud.videointelligence.v1p2beta1.Entity.toObject(message.entity, options);
                            if (message.categoryEntities && message.categoryEntities.length) {
                                object.categoryEntities = [];
                                for (var j = 0; j < message.categoryEntities.length; ++j)
                                    object.categoryEntities[j] = $root.google.cloud.videointelligence.v1p2beta1.Entity.toObject(message.categoryEntities[j], options);
                            }
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1p2beta1.LabelSegment.toObject(message.segments[j], options);
                            }
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1p2beta1.LabelFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this LabelAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.LabelAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.LabelAnnotation";
                        };
    
                        return LabelAnnotation;
                    })();
    
                    v1p2beta1.ExplicitContentFrame = (function() {
    
                        /**
                         * Properties of an ExplicitContentFrame.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IExplicitContentFrame
                         * @property {google.protobuf.IDuration|null} [timeOffset] ExplicitContentFrame timeOffset
                         * @property {google.cloud.videointelligence.v1p2beta1.Likelihood|null} [pornographyLikelihood] ExplicitContentFrame pornographyLikelihood
                         */
    
                        /**
                         * Constructs a new ExplicitContentFrame.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents an ExplicitContentFrame.
                         * @implements IExplicitContentFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IExplicitContentFrame=} [properties] Properties to set
                         */
                        function ExplicitContentFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame
                         * @instance
                         */
                        ExplicitContentFrame.prototype.timeOffset = null;
    
                        /**
                         * ExplicitContentFrame pornographyLikelihood.
                         * @member {google.cloud.videointelligence.v1p2beta1.Likelihood} pornographyLikelihood
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame
                         * @instance
                         */
                        ExplicitContentFrame.prototype.pornographyLikelihood = 0;
    
                        /**
                         * Creates a new ExplicitContentFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IExplicitContentFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame} ExplicitContentFrame instance
                         */
                        ExplicitContentFrame.create = function create(properties) {
                            return new ExplicitContentFrame(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentFrame message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IExplicitContentFrame} message ExplicitContentFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.pornographyLikelihood != null && Object.hasOwnProperty.call(message, "pornographyLikelihood"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pornographyLikelihood);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IExplicitContentFrame} message ExplicitContentFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame} ExplicitContentFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.pornographyLikelihood = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame} ExplicitContentFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            if (message.pornographyLikelihood != null && message.hasOwnProperty("pornographyLikelihood"))
                                switch (message.pornographyLikelihood) {
                                default:
                                    return "pornographyLikelihood: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame} ExplicitContentFrame
                         */
                        ExplicitContentFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame();
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            switch (object.pornographyLikelihood) {
                            default:
                                if (typeof object.pornographyLikelihood === "number") {
                                    message.pornographyLikelihood = object.pornographyLikelihood;
                                    break;
                                }
                                break;
                            case "LIKELIHOOD_UNSPECIFIED":
                            case 0:
                                message.pornographyLikelihood = 0;
                                break;
                            case "VERY_UNLIKELY":
                            case 1:
                                message.pornographyLikelihood = 1;
                                break;
                            case "UNLIKELY":
                            case 2:
                                message.pornographyLikelihood = 2;
                                break;
                            case "POSSIBLE":
                            case 3:
                                message.pornographyLikelihood = 3;
                                break;
                            case "LIKELY":
                            case 4:
                                message.pornographyLikelihood = 4;
                                break;
                            case "VERY_LIKELY":
                            case 5:
                                message.pornographyLikelihood = 5;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame} message ExplicitContentFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.timeOffset = null;
                                object.pornographyLikelihood = options.enums === String ? "LIKELIHOOD_UNSPECIFIED" : 0;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            if (message.pornographyLikelihood != null && message.hasOwnProperty("pornographyLikelihood"))
                                object.pornographyLikelihood = options.enums === String ? $root.google.cloud.videointelligence.v1p2beta1.Likelihood[message.pornographyLikelihood] === undefined ? message.pornographyLikelihood : $root.google.cloud.videointelligence.v1p2beta1.Likelihood[message.pornographyLikelihood] : message.pornographyLikelihood;
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame";
                        };
    
                        return ExplicitContentFrame;
                    })();
    
                    v1p2beta1.ExplicitContentAnnotation = (function() {
    
                        /**
                         * Properties of an ExplicitContentAnnotation.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IExplicitContentAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.IExplicitContentFrame>|null} [frames] ExplicitContentAnnotation frames
                         */
    
                        /**
                         * Constructs a new ExplicitContentAnnotation.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents an ExplicitContentAnnotation.
                         * @implements IExplicitContentAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IExplicitContentAnnotation=} [properties] Properties to set
                         */
                        function ExplicitContentAnnotation(properties) {
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.IExplicitContentFrame>} frames
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation
                         * @instance
                         */
                        ExplicitContentAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new ExplicitContentAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IExplicitContentAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation} ExplicitContentAnnotation instance
                         */
                        ExplicitContentAnnotation.create = function create(properties) {
                            return new ExplicitContentAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IExplicitContentAnnotation} message ExplicitContentAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame.encode(message.frames[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IExplicitContentAnnotation} message ExplicitContentAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation} ExplicitContentAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation} ExplicitContentAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation} ExplicitContentAnnotation
                         */
                        ExplicitContentAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation();
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation} message ExplicitContentAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.frames = [];
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation";
                        };
    
                        return ExplicitContentAnnotation;
                    })();
    
                    v1p2beta1.NormalizedBoundingBox = (function() {
    
                        /**
                         * Properties of a NormalizedBoundingBox.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface INormalizedBoundingBox
                         * @property {number|null} [left] NormalizedBoundingBox left
                         * @property {number|null} [top] NormalizedBoundingBox top
                         * @property {number|null} [right] NormalizedBoundingBox right
                         * @property {number|null} [bottom] NormalizedBoundingBox bottom
                         */
    
                        /**
                         * Constructs a new NormalizedBoundingBox.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a NormalizedBoundingBox.
                         * @implements INormalizedBoundingBox
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.INormalizedBoundingBox=} [properties] Properties to set
                         */
                        function NormalizedBoundingBox(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * NormalizedBoundingBox left.
                         * @member {number} left
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.left = 0;
    
                        /**
                         * NormalizedBoundingBox top.
                         * @member {number} top
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.top = 0;
    
                        /**
                         * NormalizedBoundingBox right.
                         * @member {number} right
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.right = 0;
    
                        /**
                         * NormalizedBoundingBox bottom.
                         * @member {number} bottom
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.bottom = 0;
    
                        /**
                         * Creates a new NormalizedBoundingBox instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.INormalizedBoundingBox=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox} NormalizedBoundingBox instance
                         */
                        NormalizedBoundingBox.create = function create(properties) {
                            return new NormalizedBoundingBox(properties);
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingBox message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.INormalizedBoundingBox} message NormalizedBoundingBox message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingBox.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.left != null && Object.hasOwnProperty.call(message, "left"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.left);
                            if (message.top != null && Object.hasOwnProperty.call(message, "top"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.top);
                            if (message.right != null && Object.hasOwnProperty.call(message, "right"))
                                writer.uint32(/* id 3, wireType 5 =*/29).float(message.right);
                            if (message.bottom != null && Object.hasOwnProperty.call(message, "bottom"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.bottom);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingBox message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.INormalizedBoundingBox} message NormalizedBoundingBox message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingBox.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a NormalizedBoundingBox message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox} NormalizedBoundingBox
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingBox.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.left = reader.float();
                                        break;
                                    }
                                case 2: {
                                        message.top = reader.float();
                                        break;
                                    }
                                case 3: {
                                        message.right = reader.float();
                                        break;
                                    }
                                case 4: {
                                        message.bottom = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a NormalizedBoundingBox message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox} NormalizedBoundingBox
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingBox.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a NormalizedBoundingBox message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NormalizedBoundingBox.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.left != null && message.hasOwnProperty("left"))
                                if (typeof message.left !== "number")
                                    return "left: number expected";
                            if (message.top != null && message.hasOwnProperty("top"))
                                if (typeof message.top !== "number")
                                    return "top: number expected";
                            if (message.right != null && message.hasOwnProperty("right"))
                                if (typeof message.right !== "number")
                                    return "right: number expected";
                            if (message.bottom != null && message.hasOwnProperty("bottom"))
                                if (typeof message.bottom !== "number")
                                    return "bottom: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a NormalizedBoundingBox message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox} NormalizedBoundingBox
                         */
                        NormalizedBoundingBox.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox();
                            if (object.left != null)
                                message.left = Number(object.left);
                            if (object.top != null)
                                message.top = Number(object.top);
                            if (object.right != null)
                                message.right = Number(object.right);
                            if (object.bottom != null)
                                message.bottom = Number(object.bottom);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a NormalizedBoundingBox message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox} message NormalizedBoundingBox
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NormalizedBoundingBox.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.left = 0;
                                object.top = 0;
                                object.right = 0;
                                object.bottom = 0;
                            }
                            if (message.left != null && message.hasOwnProperty("left"))
                                object.left = options.json && !isFinite(message.left) ? String(message.left) : message.left;
                            if (message.top != null && message.hasOwnProperty("top"))
                                object.top = options.json && !isFinite(message.top) ? String(message.top) : message.top;
                            if (message.right != null && message.hasOwnProperty("right"))
                                object.right = options.json && !isFinite(message.right) ? String(message.right) : message.right;
                            if (message.bottom != null && message.hasOwnProperty("bottom"))
                                object.bottom = options.json && !isFinite(message.bottom) ? String(message.bottom) : message.bottom;
                            return object;
                        };
    
                        /**
                         * Converts this NormalizedBoundingBox to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NormalizedBoundingBox.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for NormalizedBoundingBox
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        NormalizedBoundingBox.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox";
                        };
    
                        return NormalizedBoundingBox;
                    })();
    
                    v1p2beta1.VideoAnnotationResults = (function() {
    
                        /**
                         * Properties of a VideoAnnotationResults.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IVideoAnnotationResults
                         * @property {string|null} [inputUri] VideoAnnotationResults inputUri
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.ILabelAnnotation>|null} [segmentLabelAnnotations] VideoAnnotationResults segmentLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.ILabelAnnotation>|null} [shotLabelAnnotations] VideoAnnotationResults shotLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.ILabelAnnotation>|null} [frameLabelAnnotations] VideoAnnotationResults frameLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.IVideoSegment>|null} [shotAnnotations] VideoAnnotationResults shotAnnotations
                         * @property {google.cloud.videointelligence.v1p2beta1.IExplicitContentAnnotation|null} [explicitAnnotation] VideoAnnotationResults explicitAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.ITextAnnotation>|null} [textAnnotations] VideoAnnotationResults textAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.IObjectTrackingAnnotation>|null} [objectAnnotations] VideoAnnotationResults objectAnnotations
                         * @property {google.rpc.IStatus|null} [error] VideoAnnotationResults error
                         */
    
                        /**
                         * Constructs a new VideoAnnotationResults.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a VideoAnnotationResults.
                         * @implements IVideoAnnotationResults
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoAnnotationResults=} [properties] Properties to set
                         */
                        function VideoAnnotationResults(properties) {
                            this.segmentLabelAnnotations = [];
                            this.shotLabelAnnotations = [];
                            this.frameLabelAnnotations = [];
                            this.shotAnnotations = [];
                            this.textAnnotations = [];
                            this.objectAnnotations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoAnnotationResults inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.inputUri = "";
    
                        /**
                         * VideoAnnotationResults segmentLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.ILabelAnnotation>} segmentLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.segmentLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults shotLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.ILabelAnnotation>} shotLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.shotLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults frameLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.ILabelAnnotation>} frameLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.frameLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults shotAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.IVideoSegment>} shotAnnotations
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.shotAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults explicitAnnotation.
                         * @member {google.cloud.videointelligence.v1p2beta1.IExplicitContentAnnotation|null|undefined} explicitAnnotation
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.explicitAnnotation = null;
    
                        /**
                         * VideoAnnotationResults textAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.ITextAnnotation>} textAnnotations
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.textAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults objectAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.IObjectTrackingAnnotation>} objectAnnotations
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.objectAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults error.
                         * @member {google.rpc.IStatus|null|undefined} error
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.error = null;
    
                        /**
                         * Creates a new VideoAnnotationResults instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoAnnotationResults=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults} VideoAnnotationResults instance
                         */
                        VideoAnnotationResults.create = function create(properties) {
                            return new VideoAnnotationResults(properties);
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationResults message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoAnnotationResults} message VideoAnnotationResults message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationResults.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.segmentLabelAnnotations != null && message.segmentLabelAnnotations.length)
                                for (var i = 0; i < message.segmentLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.encode(message.segmentLabelAnnotations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.shotLabelAnnotations != null && message.shotLabelAnnotations.length)
                                for (var i = 0; i < message.shotLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.encode(message.shotLabelAnnotations[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.frameLabelAnnotations != null && message.frameLabelAnnotations.length)
                                for (var i = 0; i < message.frameLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.encode(message.frameLabelAnnotations[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.shotAnnotations != null && message.shotAnnotations.length)
                                for (var i = 0; i < message.shotAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.encode(message.shotAnnotations[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.explicitAnnotation != null && Object.hasOwnProperty.call(message, "explicitAnnotation"))
                                $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation.encode(message.explicitAnnotation, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                                $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.textAnnotations != null && message.textAnnotations.length)
                                for (var i = 0; i < message.textAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.TextAnnotation.encode(message.textAnnotations[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                            if (message.objectAnnotations != null && message.objectAnnotations.length)
                                for (var i = 0; i < message.objectAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation.encode(message.objectAnnotations[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationResults message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoAnnotationResults} message VideoAnnotationResults message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationResults.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoAnnotationResults message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults} VideoAnnotationResults
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationResults.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.segmentLabelAnnotations && message.segmentLabelAnnotations.length))
                                            message.segmentLabelAnnotations = [];
                                        message.segmentLabelAnnotations.push($root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.shotLabelAnnotations && message.shotLabelAnnotations.length))
                                            message.shotLabelAnnotations = [];
                                        message.shotLabelAnnotations.push($root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (!(message.frameLabelAnnotations && message.frameLabelAnnotations.length))
                                            message.frameLabelAnnotations = [];
                                        message.frameLabelAnnotations.push($root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 6: {
                                        if (!(message.shotAnnotations && message.shotAnnotations.length))
                                            message.shotAnnotations = [];
                                        message.shotAnnotations.push($root.google.cloud.videointelligence.v1p2beta1.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 7: {
                                        message.explicitAnnotation = $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 12: {
                                        if (!(message.textAnnotations && message.textAnnotations.length))
                                            message.textAnnotations = [];
                                        message.textAnnotations.push($root.google.cloud.videointelligence.v1p2beta1.TextAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 14: {
                                        if (!(message.objectAnnotations && message.objectAnnotations.length))
                                            message.objectAnnotations = [];
                                        message.objectAnnotations.push($root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 9: {
                                        message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoAnnotationResults message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults} VideoAnnotationResults
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationResults.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoAnnotationResults message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoAnnotationResults.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.segmentLabelAnnotations != null && message.hasOwnProperty("segmentLabelAnnotations")) {
                                if (!Array.isArray(message.segmentLabelAnnotations))
                                    return "segmentLabelAnnotations: array expected";
                                for (var i = 0; i < message.segmentLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.verify(message.segmentLabelAnnotations[i]);
                                    if (error)
                                        return "segmentLabelAnnotations." + error;
                                }
                            }
                            if (message.shotLabelAnnotations != null && message.hasOwnProperty("shotLabelAnnotations")) {
                                if (!Array.isArray(message.shotLabelAnnotations))
                                    return "shotLabelAnnotations: array expected";
                                for (var i = 0; i < message.shotLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.verify(message.shotLabelAnnotations[i]);
                                    if (error)
                                        return "shotLabelAnnotations." + error;
                                }
                            }
                            if (message.frameLabelAnnotations != null && message.hasOwnProperty("frameLabelAnnotations")) {
                                if (!Array.isArray(message.frameLabelAnnotations))
                                    return "frameLabelAnnotations: array expected";
                                for (var i = 0; i < message.frameLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.verify(message.frameLabelAnnotations[i]);
                                    if (error)
                                        return "frameLabelAnnotations." + error;
                                }
                            }
                            if (message.shotAnnotations != null && message.hasOwnProperty("shotAnnotations")) {
                                if (!Array.isArray(message.shotAnnotations))
                                    return "shotAnnotations: array expected";
                                for (var i = 0; i < message.shotAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.verify(message.shotAnnotations[i]);
                                    if (error)
                                        return "shotAnnotations." + error;
                                }
                            }
                            if (message.explicitAnnotation != null && message.hasOwnProperty("explicitAnnotation")) {
                                var error = $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation.verify(message.explicitAnnotation);
                                if (error)
                                    return "explicitAnnotation." + error;
                            }
                            if (message.textAnnotations != null && message.hasOwnProperty("textAnnotations")) {
                                if (!Array.isArray(message.textAnnotations))
                                    return "textAnnotations: array expected";
                                for (var i = 0; i < message.textAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.TextAnnotation.verify(message.textAnnotations[i]);
                                    if (error)
                                        return "textAnnotations." + error;
                                }
                            }
                            if (message.objectAnnotations != null && message.hasOwnProperty("objectAnnotations")) {
                                if (!Array.isArray(message.objectAnnotations))
                                    return "objectAnnotations: array expected";
                                for (var i = 0; i < message.objectAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation.verify(message.objectAnnotations[i]);
                                    if (error)
                                        return "objectAnnotations." + error;
                                }
                            }
                            if (message.error != null && message.hasOwnProperty("error")) {
                                var error = $root.google.rpc.Status.verify(message.error);
                                if (error)
                                    return "error." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoAnnotationResults message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults} VideoAnnotationResults
                         */
                        VideoAnnotationResults.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.segmentLabelAnnotations) {
                                if (!Array.isArray(object.segmentLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.segmentLabelAnnotations: array expected");
                                message.segmentLabelAnnotations = [];
                                for (var i = 0; i < object.segmentLabelAnnotations.length; ++i) {
                                    if (typeof object.segmentLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.segmentLabelAnnotations: object expected");
                                    message.segmentLabelAnnotations[i] = $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.fromObject(object.segmentLabelAnnotations[i]);
                                }
                            }
                            if (object.shotLabelAnnotations) {
                                if (!Array.isArray(object.shotLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.shotLabelAnnotations: array expected");
                                message.shotLabelAnnotations = [];
                                for (var i = 0; i < object.shotLabelAnnotations.length; ++i) {
                                    if (typeof object.shotLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.shotLabelAnnotations: object expected");
                                    message.shotLabelAnnotations[i] = $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.fromObject(object.shotLabelAnnotations[i]);
                                }
                            }
                            if (object.frameLabelAnnotations) {
                                if (!Array.isArray(object.frameLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.frameLabelAnnotations: array expected");
                                message.frameLabelAnnotations = [];
                                for (var i = 0; i < object.frameLabelAnnotations.length; ++i) {
                                    if (typeof object.frameLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.frameLabelAnnotations: object expected");
                                    message.frameLabelAnnotations[i] = $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.fromObject(object.frameLabelAnnotations[i]);
                                }
                            }
                            if (object.shotAnnotations) {
                                if (!Array.isArray(object.shotAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.shotAnnotations: array expected");
                                message.shotAnnotations = [];
                                for (var i = 0; i < object.shotAnnotations.length; ++i) {
                                    if (typeof object.shotAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.shotAnnotations: object expected");
                                    message.shotAnnotations[i] = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.fromObject(object.shotAnnotations[i]);
                                }
                            }
                            if (object.explicitAnnotation != null) {
                                if (typeof object.explicitAnnotation !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.explicitAnnotation: object expected");
                                message.explicitAnnotation = $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation.fromObject(object.explicitAnnotation);
                            }
                            if (object.textAnnotations) {
                                if (!Array.isArray(object.textAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.textAnnotations: array expected");
                                message.textAnnotations = [];
                                for (var i = 0; i < object.textAnnotations.length; ++i) {
                                    if (typeof object.textAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.textAnnotations: object expected");
                                    message.textAnnotations[i] = $root.google.cloud.videointelligence.v1p2beta1.TextAnnotation.fromObject(object.textAnnotations[i]);
                                }
                            }
                            if (object.objectAnnotations) {
                                if (!Array.isArray(object.objectAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.objectAnnotations: array expected");
                                message.objectAnnotations = [];
                                for (var i = 0; i < object.objectAnnotations.length; ++i) {
                                    if (typeof object.objectAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.objectAnnotations: object expected");
                                    message.objectAnnotations[i] = $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation.fromObject(object.objectAnnotations[i]);
                                }
                            }
                            if (object.error != null) {
                                if (typeof object.error !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.error: object expected");
                                message.error = $root.google.rpc.Status.fromObject(object.error);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoAnnotationResults message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults} message VideoAnnotationResults
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoAnnotationResults.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.segmentLabelAnnotations = [];
                                object.shotLabelAnnotations = [];
                                object.frameLabelAnnotations = [];
                                object.shotAnnotations = [];
                                object.textAnnotations = [];
                                object.objectAnnotations = [];
                            }
                            if (options.defaults) {
                                object.inputUri = "";
                                object.explicitAnnotation = null;
                                object.error = null;
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.segmentLabelAnnotations && message.segmentLabelAnnotations.length) {
                                object.segmentLabelAnnotations = [];
                                for (var j = 0; j < message.segmentLabelAnnotations.length; ++j)
                                    object.segmentLabelAnnotations[j] = $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.toObject(message.segmentLabelAnnotations[j], options);
                            }
                            if (message.shotLabelAnnotations && message.shotLabelAnnotations.length) {
                                object.shotLabelAnnotations = [];
                                for (var j = 0; j < message.shotLabelAnnotations.length; ++j)
                                    object.shotLabelAnnotations[j] = $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.toObject(message.shotLabelAnnotations[j], options);
                            }
                            if (message.frameLabelAnnotations && message.frameLabelAnnotations.length) {
                                object.frameLabelAnnotations = [];
                                for (var j = 0; j < message.frameLabelAnnotations.length; ++j)
                                    object.frameLabelAnnotations[j] = $root.google.cloud.videointelligence.v1p2beta1.LabelAnnotation.toObject(message.frameLabelAnnotations[j], options);
                            }
                            if (message.shotAnnotations && message.shotAnnotations.length) {
                                object.shotAnnotations = [];
                                for (var j = 0; j < message.shotAnnotations.length; ++j)
                                    object.shotAnnotations[j] = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.toObject(message.shotAnnotations[j], options);
                            }
                            if (message.explicitAnnotation != null && message.hasOwnProperty("explicitAnnotation"))
                                object.explicitAnnotation = $root.google.cloud.videointelligence.v1p2beta1.ExplicitContentAnnotation.toObject(message.explicitAnnotation, options);
                            if (message.error != null && message.hasOwnProperty("error"))
                                object.error = $root.google.rpc.Status.toObject(message.error, options);
                            if (message.textAnnotations && message.textAnnotations.length) {
                                object.textAnnotations = [];
                                for (var j = 0; j < message.textAnnotations.length; ++j)
                                    object.textAnnotations[j] = $root.google.cloud.videointelligence.v1p2beta1.TextAnnotation.toObject(message.textAnnotations[j], options);
                            }
                            if (message.objectAnnotations && message.objectAnnotations.length) {
                                object.objectAnnotations = [];
                                for (var j = 0; j < message.objectAnnotations.length; ++j)
                                    object.objectAnnotations[j] = $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation.toObject(message.objectAnnotations[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this VideoAnnotationResults to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoAnnotationResults.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoAnnotationResults
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoAnnotationResults.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults";
                        };
    
                        return VideoAnnotationResults;
                    })();
    
                    v1p2beta1.AnnotateVideoResponse = (function() {
    
                        /**
                         * Properties of an AnnotateVideoResponse.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IAnnotateVideoResponse
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.IVideoAnnotationResults>|null} [annotationResults] AnnotateVideoResponse annotationResults
                         */
    
                        /**
                         * Constructs a new AnnotateVideoResponse.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents an AnnotateVideoResponse.
                         * @implements IAnnotateVideoResponse
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoResponse=} [properties] Properties to set
                         */
                        function AnnotateVideoResponse(properties) {
                            this.annotationResults = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoResponse annotationResults.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.IVideoAnnotationResults>} annotationResults
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse
                         * @instance
                         */
                        AnnotateVideoResponse.prototype.annotationResults = $util.emptyArray;
    
                        /**
                         * Creates a new AnnotateVideoResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoResponse=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse} AnnotateVideoResponse instance
                         */
                        AnnotateVideoResponse.create = function create(properties) {
                            return new AnnotateVideoResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoResponse message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoResponse} message AnnotateVideoResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.annotationResults != null && message.annotationResults.length)
                                for (var i = 0; i < message.annotationResults.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.encode(message.annotationResults[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoResponse message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoResponse} message AnnotateVideoResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse} AnnotateVideoResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.annotationResults && message.annotationResults.length))
                                            message.annotationResults = [];
                                        message.annotationResults.push($root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse} AnnotateVideoResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoResponse message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.annotationResults != null && message.hasOwnProperty("annotationResults")) {
                                if (!Array.isArray(message.annotationResults))
                                    return "annotationResults: array expected";
                                for (var i = 0; i < message.annotationResults.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.verify(message.annotationResults[i]);
                                    if (error)
                                        return "annotationResults." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse} AnnotateVideoResponse
                         */
                        AnnotateVideoResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse();
                            if (object.annotationResults) {
                                if (!Array.isArray(object.annotationResults))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse.annotationResults: array expected");
                                message.annotationResults = [];
                                for (var i = 0; i < object.annotationResults.length; ++i) {
                                    if (typeof object.annotationResults[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse.annotationResults: object expected");
                                    message.annotationResults[i] = $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.fromObject(object.annotationResults[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse} message AnnotateVideoResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.annotationResults = [];
                            if (message.annotationResults && message.annotationResults.length) {
                                object.annotationResults = [];
                                for (var j = 0; j < message.annotationResults.length; ++j)
                                    object.annotationResults[j] = $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationResults.toObject(message.annotationResults[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.AnnotateVideoResponse";
                        };
    
                        return AnnotateVideoResponse;
                    })();
    
                    v1p2beta1.VideoAnnotationProgress = (function() {
    
                        /**
                         * Properties of a VideoAnnotationProgress.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IVideoAnnotationProgress
                         * @property {string|null} [inputUri] VideoAnnotationProgress inputUri
                         * @property {number|null} [progressPercent] VideoAnnotationProgress progressPercent
                         * @property {google.protobuf.ITimestamp|null} [startTime] VideoAnnotationProgress startTime
                         * @property {google.protobuf.ITimestamp|null} [updateTime] VideoAnnotationProgress updateTime
                         */
    
                        /**
                         * Constructs a new VideoAnnotationProgress.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a VideoAnnotationProgress.
                         * @implements IVideoAnnotationProgress
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoAnnotationProgress=} [properties] Properties to set
                         */
                        function VideoAnnotationProgress(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoAnnotationProgress inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.inputUri = "";
    
                        /**
                         * VideoAnnotationProgress progressPercent.
                         * @member {number} progressPercent
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.progressPercent = 0;
    
                        /**
                         * VideoAnnotationProgress startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.startTime = null;
    
                        /**
                         * VideoAnnotationProgress updateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.updateTime = null;
    
                        /**
                         * Creates a new VideoAnnotationProgress instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoAnnotationProgress=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress} VideoAnnotationProgress instance
                         */
                        VideoAnnotationProgress.create = function create(properties) {
                            return new VideoAnnotationProgress(properties);
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationProgress message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoAnnotationProgress} message VideoAnnotationProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationProgress.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.progressPercent != null && Object.hasOwnProperty.call(message, "progressPercent"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.progressPercent);
                            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                                $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationProgress message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IVideoAnnotationProgress} message VideoAnnotationProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationProgress.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoAnnotationProgress message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress} VideoAnnotationProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationProgress.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.progressPercent = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoAnnotationProgress message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress} VideoAnnotationProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationProgress.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoAnnotationProgress message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoAnnotationProgress.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                if (!$util.isInteger(message.progressPercent))
                                    return "progressPercent: integer expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                                if (error)
                                    return "updateTime." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoAnnotationProgress message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress} VideoAnnotationProgress
                         */
                        VideoAnnotationProgress.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.progressPercent != null)
                                message.progressPercent = object.progressPercent | 0;
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.updateTime != null) {
                                if (typeof object.updateTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress.updateTime: object expected");
                                message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoAnnotationProgress message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress} message VideoAnnotationProgress
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoAnnotationProgress.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.inputUri = "";
                                object.progressPercent = 0;
                                object.startTime = null;
                                object.updateTime = null;
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                object.progressPercent = message.progressPercent;
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                                object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoAnnotationProgress to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoAnnotationProgress.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoAnnotationProgress
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoAnnotationProgress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress";
                        };
    
                        return VideoAnnotationProgress;
                    })();
    
                    v1p2beta1.AnnotateVideoProgress = (function() {
    
                        /**
                         * Properties of an AnnotateVideoProgress.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IAnnotateVideoProgress
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.IVideoAnnotationProgress>|null} [annotationProgress] AnnotateVideoProgress annotationProgress
                         */
    
                        /**
                         * Constructs a new AnnotateVideoProgress.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents an AnnotateVideoProgress.
                         * @implements IAnnotateVideoProgress
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoProgress=} [properties] Properties to set
                         */
                        function AnnotateVideoProgress(properties) {
                            this.annotationProgress = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoProgress annotationProgress.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.IVideoAnnotationProgress>} annotationProgress
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress
                         * @instance
                         */
                        AnnotateVideoProgress.prototype.annotationProgress = $util.emptyArray;
    
                        /**
                         * Creates a new AnnotateVideoProgress instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoProgress=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress} AnnotateVideoProgress instance
                         */
                        AnnotateVideoProgress.create = function create(properties) {
                            return new AnnotateVideoProgress(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoProgress message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoProgress} message AnnotateVideoProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoProgress.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.annotationProgress != null && message.annotationProgress.length)
                                for (var i = 0; i < message.annotationProgress.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress.encode(message.annotationProgress[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoProgress message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IAnnotateVideoProgress} message AnnotateVideoProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoProgress.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoProgress message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress} AnnotateVideoProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoProgress.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.annotationProgress && message.annotationProgress.length))
                                            message.annotationProgress = [];
                                        message.annotationProgress.push($root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoProgress message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress} AnnotateVideoProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoProgress.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoProgress message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoProgress.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.annotationProgress != null && message.hasOwnProperty("annotationProgress")) {
                                if (!Array.isArray(message.annotationProgress))
                                    return "annotationProgress: array expected";
                                for (var i = 0; i < message.annotationProgress.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress.verify(message.annotationProgress[i]);
                                    if (error)
                                        return "annotationProgress." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoProgress message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress} AnnotateVideoProgress
                         */
                        AnnotateVideoProgress.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress();
                            if (object.annotationProgress) {
                                if (!Array.isArray(object.annotationProgress))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress.annotationProgress: array expected");
                                message.annotationProgress = [];
                                for (var i = 0; i < object.annotationProgress.length; ++i) {
                                    if (typeof object.annotationProgress[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress.annotationProgress: object expected");
                                    message.annotationProgress[i] = $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress.fromObject(object.annotationProgress[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoProgress message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress} message AnnotateVideoProgress
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoProgress.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.annotationProgress = [];
                            if (message.annotationProgress && message.annotationProgress.length) {
                                object.annotationProgress = [];
                                for (var j = 0; j < message.annotationProgress.length; ++j)
                                    object.annotationProgress[j] = $root.google.cloud.videointelligence.v1p2beta1.VideoAnnotationProgress.toObject(message.annotationProgress[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoProgress to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoProgress.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoProgress
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoProgress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.AnnotateVideoProgress";
                        };
    
                        return AnnotateVideoProgress;
                    })();
    
                    v1p2beta1.NormalizedVertex = (function() {
    
                        /**
                         * Properties of a NormalizedVertex.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface INormalizedVertex
                         * @property {number|null} [x] NormalizedVertex x
                         * @property {number|null} [y] NormalizedVertex y
                         */
    
                        /**
                         * Constructs a new NormalizedVertex.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a NormalizedVertex.
                         * @implements INormalizedVertex
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.INormalizedVertex=} [properties] Properties to set
                         */
                        function NormalizedVertex(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * NormalizedVertex x.
                         * @member {number} x
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedVertex
                         * @instance
                         */
                        NormalizedVertex.prototype.x = 0;
    
                        /**
                         * NormalizedVertex y.
                         * @member {number} y
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedVertex
                         * @instance
                         */
                        NormalizedVertex.prototype.y = 0;
    
                        /**
                         * Creates a new NormalizedVertex instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedVertex
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.INormalizedVertex=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.NormalizedVertex} NormalizedVertex instance
                         */
                        NormalizedVertex.create = function create(properties) {
                            return new NormalizedVertex(properties);
                        };
    
                        /**
                         * Encodes the specified NormalizedVertex message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.NormalizedVertex.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedVertex
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.INormalizedVertex} message NormalizedVertex message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedVertex.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);
                            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.y);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified NormalizedVertex message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.NormalizedVertex.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedVertex
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.INormalizedVertex} message NormalizedVertex message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedVertex.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a NormalizedVertex message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedVertex
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.NormalizedVertex} NormalizedVertex
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedVertex.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.NormalizedVertex();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.x = reader.float();
                                        break;
                                    }
                                case 2: {
                                        message.y = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a NormalizedVertex message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedVertex
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.NormalizedVertex} NormalizedVertex
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedVertex.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a NormalizedVertex message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedVertex
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NormalizedVertex.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.x != null && message.hasOwnProperty("x"))
                                if (typeof message.x !== "number")
                                    return "x: number expected";
                            if (message.y != null && message.hasOwnProperty("y"))
                                if (typeof message.y !== "number")
                                    return "y: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a NormalizedVertex message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedVertex
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.NormalizedVertex} NormalizedVertex
                         */
                        NormalizedVertex.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.NormalizedVertex)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.NormalizedVertex();
                            if (object.x != null)
                                message.x = Number(object.x);
                            if (object.y != null)
                                message.y = Number(object.y);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a NormalizedVertex message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedVertex
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.NormalizedVertex} message NormalizedVertex
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NormalizedVertex.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.x = 0;
                                object.y = 0;
                            }
                            if (message.x != null && message.hasOwnProperty("x"))
                                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;
                            if (message.y != null && message.hasOwnProperty("y"))
                                object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
                            return object;
                        };
    
                        /**
                         * Converts this NormalizedVertex to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedVertex
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NormalizedVertex.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for NormalizedVertex
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedVertex
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        NormalizedVertex.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.NormalizedVertex";
                        };
    
                        return NormalizedVertex;
                    })();
    
                    v1p2beta1.NormalizedBoundingPoly = (function() {
    
                        /**
                         * Properties of a NormalizedBoundingPoly.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface INormalizedBoundingPoly
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.INormalizedVertex>|null} [vertices] NormalizedBoundingPoly vertices
                         */
    
                        /**
                         * Constructs a new NormalizedBoundingPoly.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a NormalizedBoundingPoly.
                         * @implements INormalizedBoundingPoly
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.INormalizedBoundingPoly=} [properties] Properties to set
                         */
                        function NormalizedBoundingPoly(properties) {
                            this.vertices = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * NormalizedBoundingPoly vertices.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.INormalizedVertex>} vertices
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly
                         * @instance
                         */
                        NormalizedBoundingPoly.prototype.vertices = $util.emptyArray;
    
                        /**
                         * Creates a new NormalizedBoundingPoly instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.INormalizedBoundingPoly=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly} NormalizedBoundingPoly instance
                         */
                        NormalizedBoundingPoly.create = function create(properties) {
                            return new NormalizedBoundingPoly(properties);
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingPoly message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.INormalizedBoundingPoly} message NormalizedBoundingPoly message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingPoly.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.vertices != null && message.vertices.length)
                                for (var i = 0; i < message.vertices.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.NormalizedVertex.encode(message.vertices[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingPoly message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.INormalizedBoundingPoly} message NormalizedBoundingPoly message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingPoly.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a NormalizedBoundingPoly message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly} NormalizedBoundingPoly
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingPoly.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.vertices && message.vertices.length))
                                            message.vertices = [];
                                        message.vertices.push($root.google.cloud.videointelligence.v1p2beta1.NormalizedVertex.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a NormalizedBoundingPoly message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly} NormalizedBoundingPoly
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingPoly.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a NormalizedBoundingPoly message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NormalizedBoundingPoly.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.vertices != null && message.hasOwnProperty("vertices")) {
                                if (!Array.isArray(message.vertices))
                                    return "vertices: array expected";
                                for (var i = 0; i < message.vertices.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.NormalizedVertex.verify(message.vertices[i]);
                                    if (error)
                                        return "vertices." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a NormalizedBoundingPoly message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly} NormalizedBoundingPoly
                         */
                        NormalizedBoundingPoly.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly();
                            if (object.vertices) {
                                if (!Array.isArray(object.vertices))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly.vertices: array expected");
                                message.vertices = [];
                                for (var i = 0; i < object.vertices.length; ++i) {
                                    if (typeof object.vertices[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly.vertices: object expected");
                                    message.vertices[i] = $root.google.cloud.videointelligence.v1p2beta1.NormalizedVertex.fromObject(object.vertices[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a NormalizedBoundingPoly message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly} message NormalizedBoundingPoly
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NormalizedBoundingPoly.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.vertices = [];
                            if (message.vertices && message.vertices.length) {
                                object.vertices = [];
                                for (var j = 0; j < message.vertices.length; ++j)
                                    object.vertices[j] = $root.google.cloud.videointelligence.v1p2beta1.NormalizedVertex.toObject(message.vertices[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this NormalizedBoundingPoly to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NormalizedBoundingPoly.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for NormalizedBoundingPoly
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        NormalizedBoundingPoly.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly";
                        };
    
                        return NormalizedBoundingPoly;
                    })();
    
                    v1p2beta1.TextSegment = (function() {
    
                        /**
                         * Properties of a TextSegment.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface ITextSegment
                         * @property {google.cloud.videointelligence.v1p2beta1.IVideoSegment|null} [segment] TextSegment segment
                         * @property {number|null} [confidence] TextSegment confidence
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.ITextFrame>|null} [frames] TextSegment frames
                         */
    
                        /**
                         * Constructs a new TextSegment.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a TextSegment.
                         * @implements ITextSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextSegment=} [properties] Properties to set
                         */
                        function TextSegment(properties) {
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextSegment segment.
                         * @member {google.cloud.videointelligence.v1p2beta1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @instance
                         */
                        TextSegment.prototype.segment = null;
    
                        /**
                         * TextSegment confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @instance
                         */
                        TextSegment.prototype.confidence = 0;
    
                        /**
                         * TextSegment frames.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.ITextFrame>} frames
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @instance
                         */
                        TextSegment.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new TextSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextSegment} TextSegment instance
                         */
                        TextSegment.create = function create(properties) {
                            return new TextSegment(properties);
                        };
    
                        /**
                         * Encodes the specified TextSegment message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.TextSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextSegment} message TextSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.encode(message.segment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.TextFrame.encode(message.frames[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.TextSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextSegment} message TextSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextSegment} TextSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.TextSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.segment = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1p2beta1.TextFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextSegment} TextSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.TextFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TextSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextSegment} TextSegment
                         */
                        TextSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.TextSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.TextSegment();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.TextSegment.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.TextSegment.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.TextSegment.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1p2beta1.TextFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.TextSegment} message TextSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.frames = [];
                            if (options.defaults) {
                                object.segment = null;
                                object.confidence = 0;
                            }
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.toObject(message.segment, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1p2beta1.TextFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TextSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.TextSegment";
                        };
    
                        return TextSegment;
                    })();
    
                    v1p2beta1.TextFrame = (function() {
    
                        /**
                         * Properties of a TextFrame.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface ITextFrame
                         * @property {google.cloud.videointelligence.v1p2beta1.INormalizedBoundingPoly|null} [rotatedBoundingBox] TextFrame rotatedBoundingBox
                         * @property {google.protobuf.IDuration|null} [timeOffset] TextFrame timeOffset
                         */
    
                        /**
                         * Constructs a new TextFrame.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a TextFrame.
                         * @implements ITextFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextFrame=} [properties] Properties to set
                         */
                        function TextFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextFrame rotatedBoundingBox.
                         * @member {google.cloud.videointelligence.v1p2beta1.INormalizedBoundingPoly|null|undefined} rotatedBoundingBox
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextFrame
                         * @instance
                         */
                        TextFrame.prototype.rotatedBoundingBox = null;
    
                        /**
                         * TextFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextFrame
                         * @instance
                         */
                        TextFrame.prototype.timeOffset = null;
    
                        /**
                         * Creates a new TextFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextFrame} TextFrame instance
                         */
                        TextFrame.create = function create(properties) {
                            return new TextFrame(properties);
                        };
    
                        /**
                         * Encodes the specified TextFrame message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.TextFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextFrame} message TextFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.rotatedBoundingBox != null && Object.hasOwnProperty.call(message, "rotatedBoundingBox"))
                                $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly.encode(message.rotatedBoundingBox, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.TextFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextFrame} message TextFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextFrame} TextFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.TextFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.rotatedBoundingBox = $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextFrame} TextFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.rotatedBoundingBox != null && message.hasOwnProperty("rotatedBoundingBox")) {
                                var error = $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly.verify(message.rotatedBoundingBox);
                                if (error)
                                    return "rotatedBoundingBox." + error;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TextFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextFrame} TextFrame
                         */
                        TextFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.TextFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.TextFrame();
                            if (object.rotatedBoundingBox != null) {
                                if (typeof object.rotatedBoundingBox !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.TextFrame.rotatedBoundingBox: object expected");
                                message.rotatedBoundingBox = $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly.fromObject(object.rotatedBoundingBox);
                            }
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.TextFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.TextFrame} message TextFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.rotatedBoundingBox = null;
                                object.timeOffset = null;
                            }
                            if (message.rotatedBoundingBox != null && message.hasOwnProperty("rotatedBoundingBox"))
                                object.rotatedBoundingBox = $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingPoly.toObject(message.rotatedBoundingBox, options);
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this TextFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.TextFrame";
                        };
    
                        return TextFrame;
                    })();
    
                    v1p2beta1.TextAnnotation = (function() {
    
                        /**
                         * Properties of a TextAnnotation.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface ITextAnnotation
                         * @property {string|null} [text] TextAnnotation text
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.ITextSegment>|null} [segments] TextAnnotation segments
                         */
    
                        /**
                         * Constructs a new TextAnnotation.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents a TextAnnotation.
                         * @implements ITextAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextAnnotation=} [properties] Properties to set
                         */
                        function TextAnnotation(properties) {
                            this.segments = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextAnnotation text.
                         * @member {string} text
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextAnnotation
                         * @instance
                         */
                        TextAnnotation.prototype.text = "";
    
                        /**
                         * TextAnnotation segments.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.ITextSegment>} segments
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextAnnotation
                         * @instance
                         */
                        TextAnnotation.prototype.segments = $util.emptyArray;
    
                        /**
                         * Creates a new TextAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextAnnotation} TextAnnotation instance
                         */
                        TextAnnotation.create = function create(properties) {
                            return new TextAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified TextAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.TextAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextAnnotation} message TextAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.TextSegment.encode(message.segments[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.TextAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ITextAnnotation} message TextAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextAnnotation} TextAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.TextAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1p2beta1.TextSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextAnnotation} TextAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.TextSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TextAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.TextAnnotation} TextAnnotation
                         */
                        TextAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.TextAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.TextAnnotation();
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.TextAnnotation.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.TextAnnotation.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1p2beta1.TextSegment.fromObject(object.segments[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.TextAnnotation} message TextAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.segments = [];
                            if (options.defaults)
                                object.text = "";
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1p2beta1.TextSegment.toObject(message.segments[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TextAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.TextAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.TextAnnotation";
                        };
    
                        return TextAnnotation;
                    })();
    
                    v1p2beta1.ObjectTrackingFrame = (function() {
    
                        /**
                         * Properties of an ObjectTrackingFrame.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IObjectTrackingFrame
                         * @property {google.cloud.videointelligence.v1p2beta1.INormalizedBoundingBox|null} [normalizedBoundingBox] ObjectTrackingFrame normalizedBoundingBox
                         * @property {google.protobuf.IDuration|null} [timeOffset] ObjectTrackingFrame timeOffset
                         */
    
                        /**
                         * Constructs a new ObjectTrackingFrame.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents an ObjectTrackingFrame.
                         * @implements IObjectTrackingFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IObjectTrackingFrame=} [properties] Properties to set
                         */
                        function ObjectTrackingFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ObjectTrackingFrame normalizedBoundingBox.
                         * @member {google.cloud.videointelligence.v1p2beta1.INormalizedBoundingBox|null|undefined} normalizedBoundingBox
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame
                         * @instance
                         */
                        ObjectTrackingFrame.prototype.normalizedBoundingBox = null;
    
                        /**
                         * ObjectTrackingFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame
                         * @instance
                         */
                        ObjectTrackingFrame.prototype.timeOffset = null;
    
                        /**
                         * Creates a new ObjectTrackingFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IObjectTrackingFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame} ObjectTrackingFrame instance
                         */
                        ObjectTrackingFrame.create = function create(properties) {
                            return new ObjectTrackingFrame(properties);
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingFrame message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IObjectTrackingFrame} message ObjectTrackingFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.normalizedBoundingBox != null && Object.hasOwnProperty.call(message, "normalizedBoundingBox"))
                                $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox.encode(message.normalizedBoundingBox, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IObjectTrackingFrame} message ObjectTrackingFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ObjectTrackingFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame} ObjectTrackingFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.normalizedBoundingBox = $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ObjectTrackingFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame} ObjectTrackingFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ObjectTrackingFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ObjectTrackingFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.normalizedBoundingBox != null && message.hasOwnProperty("normalizedBoundingBox")) {
                                var error = $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox.verify(message.normalizedBoundingBox);
                                if (error)
                                    return "normalizedBoundingBox." + error;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ObjectTrackingFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame} ObjectTrackingFrame
                         */
                        ObjectTrackingFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame();
                            if (object.normalizedBoundingBox != null) {
                                if (typeof object.normalizedBoundingBox !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame.normalizedBoundingBox: object expected");
                                message.normalizedBoundingBox = $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox.fromObject(object.normalizedBoundingBox);
                            }
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ObjectTrackingFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame} message ObjectTrackingFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ObjectTrackingFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.normalizedBoundingBox = null;
                                object.timeOffset = null;
                            }
                            if (message.normalizedBoundingBox != null && message.hasOwnProperty("normalizedBoundingBox"))
                                object.normalizedBoundingBox = $root.google.cloud.videointelligence.v1p2beta1.NormalizedBoundingBox.toObject(message.normalizedBoundingBox, options);
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this ObjectTrackingFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ObjectTrackingFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ObjectTrackingFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ObjectTrackingFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame";
                        };
    
                        return ObjectTrackingFrame;
                    })();
    
                    v1p2beta1.ObjectTrackingAnnotation = (function() {
    
                        /**
                         * Properties of an ObjectTrackingAnnotation.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @interface IObjectTrackingAnnotation
                         * @property {google.cloud.videointelligence.v1p2beta1.IVideoSegment|null} [segment] ObjectTrackingAnnotation segment
                         * @property {number|Long|null} [trackId] ObjectTrackingAnnotation trackId
                         * @property {google.cloud.videointelligence.v1p2beta1.IEntity|null} [entity] ObjectTrackingAnnotation entity
                         * @property {number|null} [confidence] ObjectTrackingAnnotation confidence
                         * @property {Array.<google.cloud.videointelligence.v1p2beta1.IObjectTrackingFrame>|null} [frames] ObjectTrackingAnnotation frames
                         */
    
                        /**
                         * Constructs a new ObjectTrackingAnnotation.
                         * @memberof google.cloud.videointelligence.v1p2beta1
                         * @classdesc Represents an ObjectTrackingAnnotation.
                         * @implements IObjectTrackingAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p2beta1.IObjectTrackingAnnotation=} [properties] Properties to set
                         */
                        function ObjectTrackingAnnotation(properties) {
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ObjectTrackingAnnotation segment.
                         * @member {google.cloud.videointelligence.v1p2beta1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.segment = null;
    
                        /**
                         * ObjectTrackingAnnotation trackId.
                         * @member {number|Long|null|undefined} trackId
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.trackId = null;
    
                        /**
                         * ObjectTrackingAnnotation entity.
                         * @member {google.cloud.videointelligence.v1p2beta1.IEntity|null|undefined} entity
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.entity = null;
    
                        /**
                         * ObjectTrackingAnnotation confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.confidence = 0;
    
                        /**
                         * ObjectTrackingAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1p2beta1.IObjectTrackingFrame>} frames
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.frames = $util.emptyArray;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * ObjectTrackingAnnotation trackInfo.
                         * @member {"segment"|"trackId"|undefined} trackInfo
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @instance
                         */
                        Object.defineProperty(ObjectTrackingAnnotation.prototype, "trackInfo", {
                            get: $util.oneOfGetter($oneOfFields = ["segment", "trackId"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new ObjectTrackingAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IObjectTrackingAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation} ObjectTrackingAnnotation instance
                         */
                        ObjectTrackingAnnotation.create = function create(properties) {
                            return new ObjectTrackingAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IObjectTrackingAnnotation} message ObjectTrackingAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                                $root.google.cloud.videointelligence.v1p2beta1.Entity.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame.encode(message.frames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.confidence);
                            if (message.trackId != null && Object.hasOwnProperty.call(message, "trackId"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.trackId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.IObjectTrackingAnnotation} message ObjectTrackingAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ObjectTrackingAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation} ObjectTrackingAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 3: {
                                        message.segment = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.trackId = reader.int64();
                                        break;
                                    }
                                case 1: {
                                        message.entity = $root.google.cloud.videointelligence.v1p2beta1.Entity.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ObjectTrackingAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation} ObjectTrackingAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ObjectTrackingAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ObjectTrackingAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                properties.trackInfo = 1;
                                {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.verify(message.segment);
                                    if (error)
                                        return "segment." + error;
                                }
                            }
                            if (message.trackId != null && message.hasOwnProperty("trackId")) {
                                if (properties.trackInfo === 1)
                                    return "trackInfo: multiple values";
                                properties.trackInfo = 1;
                                if (!$util.isInteger(message.trackId) && !(message.trackId && $util.isInteger(message.trackId.low) && $util.isInteger(message.trackId.high)))
                                    return "trackId: integer|Long expected";
                            }
                            if (message.entity != null && message.hasOwnProperty("entity")) {
                                var error = $root.google.cloud.videointelligence.v1p2beta1.Entity.verify(message.entity);
                                if (error)
                                    return "entity." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ObjectTrackingAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation} ObjectTrackingAnnotation
                         */
                        ObjectTrackingAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.trackId != null)
                                if ($util.Long)
                                    (message.trackId = $util.Long.fromValue(object.trackId)).unsigned = false;
                                else if (typeof object.trackId === "string")
                                    message.trackId = parseInt(object.trackId, 10);
                                else if (typeof object.trackId === "number")
                                    message.trackId = object.trackId;
                                else if (typeof object.trackId === "object")
                                    message.trackId = new $util.LongBits(object.trackId.low >>> 0, object.trackId.high >>> 0).toNumber();
                            if (object.entity != null) {
                                if (typeof object.entity !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation.entity: object expected");
                                message.entity = $root.google.cloud.videointelligence.v1p2beta1.Entity.fromObject(object.entity);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ObjectTrackingAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation} message ObjectTrackingAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ObjectTrackingAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.frames = [];
                            if (options.defaults) {
                                object.entity = null;
                                object.confidence = 0;
                            }
                            if (message.entity != null && message.hasOwnProperty("entity"))
                                object.entity = $root.google.cloud.videointelligence.v1p2beta1.Entity.toObject(message.entity, options);
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1p2beta1.ObjectTrackingFrame.toObject(message.frames[j], options);
                            }
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                object.segment = $root.google.cloud.videointelligence.v1p2beta1.VideoSegment.toObject(message.segment, options);
                                if (options.oneofs)
                                    object.trackInfo = "segment";
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.trackId != null && message.hasOwnProperty("trackId")) {
                                if (typeof message.trackId === "number")
                                    object.trackId = options.longs === String ? String(message.trackId) : message.trackId;
                                else
                                    object.trackId = options.longs === String ? $util.Long.prototype.toString.call(message.trackId) : options.longs === Number ? new $util.LongBits(message.trackId.low >>> 0, message.trackId.high >>> 0).toNumber() : message.trackId;
                                if (options.oneofs)
                                    object.trackInfo = "trackId";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ObjectTrackingAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ObjectTrackingAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ObjectTrackingAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ObjectTrackingAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p2beta1.ObjectTrackingAnnotation";
                        };
    
                        return ObjectTrackingAnnotation;
                    })();
    
                    /**
                     * Feature enum.
                     * @name google.cloud.videointelligence.v1p2beta1.Feature
                     * @enum {number}
                     * @property {number} FEATURE_UNSPECIFIED=0 FEATURE_UNSPECIFIED value
                     * @property {number} LABEL_DETECTION=1 LABEL_DETECTION value
                     * @property {number} SHOT_CHANGE_DETECTION=2 SHOT_CHANGE_DETECTION value
                     * @property {number} EXPLICIT_CONTENT_DETECTION=3 EXPLICIT_CONTENT_DETECTION value
                     * @property {number} TEXT_DETECTION=7 TEXT_DETECTION value
                     * @property {number} OBJECT_TRACKING=9 OBJECT_TRACKING value
                     */
                    v1p2beta1.Feature = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "FEATURE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "LABEL_DETECTION"] = 1;
                        values[valuesById[2] = "SHOT_CHANGE_DETECTION"] = 2;
                        values[valuesById[3] = "EXPLICIT_CONTENT_DETECTION"] = 3;
                        values[valuesById[7] = "TEXT_DETECTION"] = 7;
                        values[valuesById[9] = "OBJECT_TRACKING"] = 9;
                        return values;
                    })();
    
                    /**
                     * LabelDetectionMode enum.
                     * @name google.cloud.videointelligence.v1p2beta1.LabelDetectionMode
                     * @enum {number}
                     * @property {number} LABEL_DETECTION_MODE_UNSPECIFIED=0 LABEL_DETECTION_MODE_UNSPECIFIED value
                     * @property {number} SHOT_MODE=1 SHOT_MODE value
                     * @property {number} FRAME_MODE=2 FRAME_MODE value
                     * @property {number} SHOT_AND_FRAME_MODE=3 SHOT_AND_FRAME_MODE value
                     */
                    v1p2beta1.LabelDetectionMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LABEL_DETECTION_MODE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "SHOT_MODE"] = 1;
                        values[valuesById[2] = "FRAME_MODE"] = 2;
                        values[valuesById[3] = "SHOT_AND_FRAME_MODE"] = 3;
                        return values;
                    })();
    
                    /**
                     * Likelihood enum.
                     * @name google.cloud.videointelligence.v1p2beta1.Likelihood
                     * @enum {number}
                     * @property {number} LIKELIHOOD_UNSPECIFIED=0 LIKELIHOOD_UNSPECIFIED value
                     * @property {number} VERY_UNLIKELY=1 VERY_UNLIKELY value
                     * @property {number} UNLIKELY=2 UNLIKELY value
                     * @property {number} POSSIBLE=3 POSSIBLE value
                     * @property {number} LIKELY=4 LIKELY value
                     * @property {number} VERY_LIKELY=5 VERY_LIKELY value
                     */
                    v1p2beta1.Likelihood = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LIKELIHOOD_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "VERY_UNLIKELY"] = 1;
                        values[valuesById[2] = "UNLIKELY"] = 2;
                        values[valuesById[3] = "POSSIBLE"] = 3;
                        values[valuesById[4] = "LIKELY"] = 4;
                        values[valuesById[5] = "VERY_LIKELY"] = 5;
                        return values;
                    })();
    
                    return v1p2beta1;
                })();
    
                videointelligence.v1p3beta1 = (function() {
    
                    /**
                     * Namespace v1p3beta1.
                     * @memberof google.cloud.videointelligence
                     * @namespace
                     */
                    var v1p3beta1 = {};
    
                    v1p3beta1.VideoIntelligenceService = (function() {
    
                        /**
                         * Constructs a new VideoIntelligenceService service.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a VideoIntelligenceService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function VideoIntelligenceService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (VideoIntelligenceService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = VideoIntelligenceService;
    
                        /**
                         * Creates new VideoIntelligenceService service using the specified rpc implementation.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoIntelligenceService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {VideoIntelligenceService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        VideoIntelligenceService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.cloud.videointelligence.v1p3beta1.VideoIntelligenceService|annotateVideo}.
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoIntelligenceService
                         * @typedef AnnotateVideoCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls AnnotateVideo.
                         * @function annotateVideo
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoIntelligenceService
                         * @instance
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoRequest} request AnnotateVideoRequest message or plain object
                         * @param {google.cloud.videointelligence.v1p3beta1.VideoIntelligenceService.AnnotateVideoCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(VideoIntelligenceService.prototype.annotateVideo = function annotateVideo(request, callback) {
                            return this.rpcCall(annotateVideo, $root.google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "AnnotateVideo" });
    
                        /**
                         * Calls AnnotateVideo.
                         * @function annotateVideo
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoIntelligenceService
                         * @instance
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoRequest} request AnnotateVideoRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        return VideoIntelligenceService;
                    })();
    
                    v1p3beta1.StreamingVideoIntelligenceService = (function() {
    
                        /**
                         * Constructs a new StreamingVideoIntelligenceService service.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingVideoIntelligenceService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function StreamingVideoIntelligenceService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (StreamingVideoIntelligenceService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = StreamingVideoIntelligenceService;
    
                        /**
                         * Creates new StreamingVideoIntelligenceService service using the specified rpc implementation.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoIntelligenceService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {StreamingVideoIntelligenceService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        StreamingVideoIntelligenceService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.cloud.videointelligence.v1p3beta1.StreamingVideoIntelligenceService|streamingAnnotateVideo}.
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoIntelligenceService
                         * @typedef StreamingAnnotateVideoCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse} [response] StreamingAnnotateVideoResponse
                         */
    
                        /**
                         * Calls StreamingAnnotateVideo.
                         * @function streamingAnnotateVideo
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoIntelligenceService
                         * @instance
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAnnotateVideoRequest} request StreamingAnnotateVideoRequest message or plain object
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingVideoIntelligenceService.StreamingAnnotateVideoCallback} callback Node-style callback called with the error, if any, and StreamingAnnotateVideoResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(StreamingVideoIntelligenceService.prototype.streamingAnnotateVideo = function streamingAnnotateVideo(request, callback) {
                            return this.rpcCall(streamingAnnotateVideo, $root.google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest, $root.google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse, request, callback);
                        }, "name", { value: "StreamingAnnotateVideo" });
    
                        /**
                         * Calls StreamingAnnotateVideo.
                         * @function streamingAnnotateVideo
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoIntelligenceService
                         * @instance
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAnnotateVideoRequest} request StreamingAnnotateVideoRequest message or plain object
                         * @returns {Promise<google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse>} Promise
                         * @variation 2
                         */
    
                        return StreamingVideoIntelligenceService;
                    })();
    
                    v1p3beta1.AnnotateVideoRequest = (function() {
    
                        /**
                         * Properties of an AnnotateVideoRequest.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IAnnotateVideoRequest
                         * @property {string|null} [inputUri] AnnotateVideoRequest inputUri
                         * @property {Uint8Array|null} [inputContent] AnnotateVideoRequest inputContent
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.Feature>|null} [features] AnnotateVideoRequest features
                         * @property {google.cloud.videointelligence.v1p3beta1.IVideoContext|null} [videoContext] AnnotateVideoRequest videoContext
                         * @property {string|null} [outputUri] AnnotateVideoRequest outputUri
                         * @property {string|null} [locationId] AnnotateVideoRequest locationId
                         */
    
                        /**
                         * Constructs a new AnnotateVideoRequest.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents an AnnotateVideoRequest.
                         * @implements IAnnotateVideoRequest
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoRequest=} [properties] Properties to set
                         */
                        function AnnotateVideoRequest(properties) {
                            this.features = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoRequest inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.inputUri = "";
    
                        /**
                         * AnnotateVideoRequest inputContent.
                         * @member {Uint8Array} inputContent
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.inputContent = $util.newBuffer([]);
    
                        /**
                         * AnnotateVideoRequest features.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.Feature>} features
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.features = $util.emptyArray;
    
                        /**
                         * AnnotateVideoRequest videoContext.
                         * @member {google.cloud.videointelligence.v1p3beta1.IVideoContext|null|undefined} videoContext
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.videoContext = null;
    
                        /**
                         * AnnotateVideoRequest outputUri.
                         * @member {string} outputUri
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.outputUri = "";
    
                        /**
                         * AnnotateVideoRequest locationId.
                         * @member {string} locationId
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @instance
                         */
                        AnnotateVideoRequest.prototype.locationId = "";
    
                        /**
                         * Creates a new AnnotateVideoRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoRequest=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest} AnnotateVideoRequest instance
                         */
                        AnnotateVideoRequest.create = function create(properties) {
                            return new AnnotateVideoRequest(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoRequest message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoRequest} message AnnotateVideoRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.features != null && message.features.length) {
                                writer.uint32(/* id 2, wireType 2 =*/18).fork();
                                for (var i = 0; i < message.features.length; ++i)
                                    writer.int32(message.features[i]);
                                writer.ldelim();
                            }
                            if (message.videoContext != null && Object.hasOwnProperty.call(message, "videoContext"))
                                $root.google.cloud.videointelligence.v1p3beta1.VideoContext.encode(message.videoContext, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.outputUri != null && Object.hasOwnProperty.call(message, "outputUri"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.outputUri);
                            if (message.locationId != null && Object.hasOwnProperty.call(message, "locationId"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.locationId);
                            if (message.inputContent != null && Object.hasOwnProperty.call(message, "inputContent"))
                                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.inputContent);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoRequest message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoRequest} message AnnotateVideoRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest} AnnotateVideoRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.inputContent = reader.bytes();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.features && message.features.length))
                                            message.features = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.features.push(reader.int32());
                                        } else
                                            message.features.push(reader.int32());
                                        break;
                                    }
                                case 3: {
                                        message.videoContext = $root.google.cloud.videointelligence.v1p3beta1.VideoContext.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.outputUri = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.locationId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest} AnnotateVideoRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoRequest message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.inputContent != null && message.hasOwnProperty("inputContent"))
                                if (!(message.inputContent && typeof message.inputContent.length === "number" || $util.isString(message.inputContent)))
                                    return "inputContent: buffer expected";
                            if (message.features != null && message.hasOwnProperty("features")) {
                                if (!Array.isArray(message.features))
                                    return "features: array expected";
                                for (var i = 0; i < message.features.length; ++i)
                                    switch (message.features[i]) {
                                    default:
                                        return "features: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 6:
                                    case 7:
                                    case 9:
                                    case 12:
                                    case 13:
                                    case 14:
                                        break;
                                    }
                            }
                            if (message.videoContext != null && message.hasOwnProperty("videoContext")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.VideoContext.verify(message.videoContext);
                                if (error)
                                    return "videoContext." + error;
                            }
                            if (message.outputUri != null && message.hasOwnProperty("outputUri"))
                                if (!$util.isString(message.outputUri))
                                    return "outputUri: string expected";
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                if (!$util.isString(message.locationId))
                                    return "locationId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest} AnnotateVideoRequest
                         */
                        AnnotateVideoRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.inputContent != null)
                                if (typeof object.inputContent === "string")
                                    $util.base64.decode(object.inputContent, message.inputContent = $util.newBuffer($util.base64.length(object.inputContent)), 0);
                                else if (object.inputContent.length >= 0)
                                    message.inputContent = object.inputContent;
                            if (object.features) {
                                if (!Array.isArray(object.features))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest.features: array expected");
                                message.features = [];
                                for (var i = 0; i < object.features.length; ++i)
                                    switch (object.features[i]) {
                                    default:
                                        if (typeof object.features[i] === "number") {
                                            message.features[i] = object.features[i];
                                            break;
                                        }
                                    case "FEATURE_UNSPECIFIED":
                                    case 0:
                                        message.features[i] = 0;
                                        break;
                                    case "LABEL_DETECTION":
                                    case 1:
                                        message.features[i] = 1;
                                        break;
                                    case "SHOT_CHANGE_DETECTION":
                                    case 2:
                                        message.features[i] = 2;
                                        break;
                                    case "EXPLICIT_CONTENT_DETECTION":
                                    case 3:
                                        message.features[i] = 3;
                                        break;
                                    case "FACE_DETECTION":
                                    case 4:
                                        message.features[i] = 4;
                                        break;
                                    case "SPEECH_TRANSCRIPTION":
                                    case 6:
                                        message.features[i] = 6;
                                        break;
                                    case "TEXT_DETECTION":
                                    case 7:
                                        message.features[i] = 7;
                                        break;
                                    case "OBJECT_TRACKING":
                                    case 9:
                                        message.features[i] = 9;
                                        break;
                                    case "LOGO_RECOGNITION":
                                    case 12:
                                        message.features[i] = 12;
                                        break;
                                    case "CELEBRITY_RECOGNITION":
                                    case 13:
                                        message.features[i] = 13;
                                        break;
                                    case "PERSON_DETECTION":
                                    case 14:
                                        message.features[i] = 14;
                                        break;
                                    }
                            }
                            if (object.videoContext != null) {
                                if (typeof object.videoContext !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest.videoContext: object expected");
                                message.videoContext = $root.google.cloud.videointelligence.v1p3beta1.VideoContext.fromObject(object.videoContext);
                            }
                            if (object.outputUri != null)
                                message.outputUri = String(object.outputUri);
                            if (object.locationId != null)
                                message.locationId = String(object.locationId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest} message AnnotateVideoRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.features = [];
                            if (options.defaults) {
                                object.inputUri = "";
                                object.videoContext = null;
                                object.outputUri = "";
                                object.locationId = "";
                                if (options.bytes === String)
                                    object.inputContent = "";
                                else {
                                    object.inputContent = [];
                                    if (options.bytes !== Array)
                                        object.inputContent = $util.newBuffer(object.inputContent);
                                }
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.features && message.features.length) {
                                object.features = [];
                                for (var j = 0; j < message.features.length; ++j)
                                    object.features[j] = options.enums === String ? $root.google.cloud.videointelligence.v1p3beta1.Feature[message.features[j]] === undefined ? message.features[j] : $root.google.cloud.videointelligence.v1p3beta1.Feature[message.features[j]] : message.features[j];
                            }
                            if (message.videoContext != null && message.hasOwnProperty("videoContext"))
                                object.videoContext = $root.google.cloud.videointelligence.v1p3beta1.VideoContext.toObject(message.videoContext, options);
                            if (message.outputUri != null && message.hasOwnProperty("outputUri"))
                                object.outputUri = message.outputUri;
                            if (message.locationId != null && message.hasOwnProperty("locationId"))
                                object.locationId = message.locationId;
                            if (message.inputContent != null && message.hasOwnProperty("inputContent"))
                                object.inputContent = options.bytes === String ? $util.base64.encode(message.inputContent, 0, message.inputContent.length) : options.bytes === Array ? Array.prototype.slice.call(message.inputContent) : message.inputContent;
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.AnnotateVideoRequest";
                        };
    
                        return AnnotateVideoRequest;
                    })();
    
                    v1p3beta1.VideoContext = (function() {
    
                        /**
                         * Properties of a VideoContext.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IVideoContext
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IVideoSegment>|null} [segments] VideoContext segments
                         * @property {google.cloud.videointelligence.v1p3beta1.ILabelDetectionConfig|null} [labelDetectionConfig] VideoContext labelDetectionConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.IShotChangeDetectionConfig|null} [shotChangeDetectionConfig] VideoContext shotChangeDetectionConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.IExplicitContentDetectionConfig|null} [explicitContentDetectionConfig] VideoContext explicitContentDetectionConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.IFaceDetectionConfig|null} [faceDetectionConfig] VideoContext faceDetectionConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.ISpeechTranscriptionConfig|null} [speechTranscriptionConfig] VideoContext speechTranscriptionConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.ITextDetectionConfig|null} [textDetectionConfig] VideoContext textDetectionConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.IPersonDetectionConfig|null} [personDetectionConfig] VideoContext personDetectionConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.IObjectTrackingConfig|null} [objectTrackingConfig] VideoContext objectTrackingConfig
                         */
    
                        /**
                         * Constructs a new VideoContext.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a VideoContext.
                         * @implements IVideoContext
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoContext=} [properties] Properties to set
                         */
                        function VideoContext(properties) {
                            this.segments = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoContext segments.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IVideoSegment>} segments
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.segments = $util.emptyArray;
    
                        /**
                         * VideoContext labelDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.ILabelDetectionConfig|null|undefined} labelDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.labelDetectionConfig = null;
    
                        /**
                         * VideoContext shotChangeDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IShotChangeDetectionConfig|null|undefined} shotChangeDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.shotChangeDetectionConfig = null;
    
                        /**
                         * VideoContext explicitContentDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IExplicitContentDetectionConfig|null|undefined} explicitContentDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.explicitContentDetectionConfig = null;
    
                        /**
                         * VideoContext faceDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IFaceDetectionConfig|null|undefined} faceDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.faceDetectionConfig = null;
    
                        /**
                         * VideoContext speechTranscriptionConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.ISpeechTranscriptionConfig|null|undefined} speechTranscriptionConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.speechTranscriptionConfig = null;
    
                        /**
                         * VideoContext textDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.ITextDetectionConfig|null|undefined} textDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.textDetectionConfig = null;
    
                        /**
                         * VideoContext personDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IPersonDetectionConfig|null|undefined} personDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.personDetectionConfig = null;
    
                        /**
                         * VideoContext objectTrackingConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IObjectTrackingConfig|null|undefined} objectTrackingConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @instance
                         */
                        VideoContext.prototype.objectTrackingConfig = null;
    
                        /**
                         * Creates a new VideoContext instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoContext=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoContext} VideoContext instance
                         */
                        VideoContext.create = function create(properties) {
                            return new VideoContext(properties);
                        };
    
                        /**
                         * Encodes the specified VideoContext message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.VideoContext.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoContext} message VideoContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoContext.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.encode(message.segments[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.labelDetectionConfig != null && Object.hasOwnProperty.call(message, "labelDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig.encode(message.labelDetectionConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.shotChangeDetectionConfig != null && Object.hasOwnProperty.call(message, "shotChangeDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig.encode(message.shotChangeDetectionConfig, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.explicitContentDetectionConfig != null && Object.hasOwnProperty.call(message, "explicitContentDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig.encode(message.explicitContentDetectionConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.faceDetectionConfig != null && Object.hasOwnProperty.call(message, "faceDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig.encode(message.faceDetectionConfig, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.speechTranscriptionConfig != null && Object.hasOwnProperty.call(message, "speechTranscriptionConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig.encode(message.speechTranscriptionConfig, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.textDetectionConfig != null && Object.hasOwnProperty.call(message, "textDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.TextDetectionConfig.encode(message.textDetectionConfig, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.personDetectionConfig != null && Object.hasOwnProperty.call(message, "personDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig.encode(message.personDetectionConfig, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            if (message.objectTrackingConfig != null && Object.hasOwnProperty.call(message, "objectTrackingConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig.encode(message.objectTrackingConfig, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoContext message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.VideoContext.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoContext} message VideoContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoContext.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoContext message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoContext} VideoContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoContext.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.VideoContext();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1p3beta1.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.labelDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.faceDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.speechTranscriptionConfig = $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.textDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.TextDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        message.personDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 13: {
                                        message.objectTrackingConfig = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoContext message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoContext} VideoContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoContext.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoContext message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoContext.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.labelDetectionConfig != null && message.hasOwnProperty("labelDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig.verify(message.labelDetectionConfig);
                                if (error)
                                    return "labelDetectionConfig." + error;
                            }
                            if (message.shotChangeDetectionConfig != null && message.hasOwnProperty("shotChangeDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig.verify(message.shotChangeDetectionConfig);
                                if (error)
                                    return "shotChangeDetectionConfig." + error;
                            }
                            if (message.explicitContentDetectionConfig != null && message.hasOwnProperty("explicitContentDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig.verify(message.explicitContentDetectionConfig);
                                if (error)
                                    return "explicitContentDetectionConfig." + error;
                            }
                            if (message.faceDetectionConfig != null && message.hasOwnProperty("faceDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig.verify(message.faceDetectionConfig);
                                if (error)
                                    return "faceDetectionConfig." + error;
                            }
                            if (message.speechTranscriptionConfig != null && message.hasOwnProperty("speechTranscriptionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig.verify(message.speechTranscriptionConfig);
                                if (error)
                                    return "speechTranscriptionConfig." + error;
                            }
                            if (message.textDetectionConfig != null && message.hasOwnProperty("textDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.TextDetectionConfig.verify(message.textDetectionConfig);
                                if (error)
                                    return "textDetectionConfig." + error;
                            }
                            if (message.personDetectionConfig != null && message.hasOwnProperty("personDetectionConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig.verify(message.personDetectionConfig);
                                if (error)
                                    return "personDetectionConfig." + error;
                            }
                            if (message.objectTrackingConfig != null && message.hasOwnProperty("objectTrackingConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig.verify(message.objectTrackingConfig);
                                if (error)
                                    return "objectTrackingConfig." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoContext message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoContext} VideoContext
                         */
                        VideoContext.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.VideoContext)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.VideoContext();
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoContext.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoContext.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.labelDetectionConfig != null) {
                                if (typeof object.labelDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoContext.labelDetectionConfig: object expected");
                                message.labelDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig.fromObject(object.labelDetectionConfig);
                            }
                            if (object.shotChangeDetectionConfig != null) {
                                if (typeof object.shotChangeDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoContext.shotChangeDetectionConfig: object expected");
                                message.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig.fromObject(object.shotChangeDetectionConfig);
                            }
                            if (object.explicitContentDetectionConfig != null) {
                                if (typeof object.explicitContentDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoContext.explicitContentDetectionConfig: object expected");
                                message.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig.fromObject(object.explicitContentDetectionConfig);
                            }
                            if (object.faceDetectionConfig != null) {
                                if (typeof object.faceDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoContext.faceDetectionConfig: object expected");
                                message.faceDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig.fromObject(object.faceDetectionConfig);
                            }
                            if (object.speechTranscriptionConfig != null) {
                                if (typeof object.speechTranscriptionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoContext.speechTranscriptionConfig: object expected");
                                message.speechTranscriptionConfig = $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig.fromObject(object.speechTranscriptionConfig);
                            }
                            if (object.textDetectionConfig != null) {
                                if (typeof object.textDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoContext.textDetectionConfig: object expected");
                                message.textDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.TextDetectionConfig.fromObject(object.textDetectionConfig);
                            }
                            if (object.personDetectionConfig != null) {
                                if (typeof object.personDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoContext.personDetectionConfig: object expected");
                                message.personDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig.fromObject(object.personDetectionConfig);
                            }
                            if (object.objectTrackingConfig != null) {
                                if (typeof object.objectTrackingConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoContext.objectTrackingConfig: object expected");
                                message.objectTrackingConfig = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig.fromObject(object.objectTrackingConfig);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoContext message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.VideoContext} message VideoContext
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoContext.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.segments = [];
                            if (options.defaults) {
                                object.labelDetectionConfig = null;
                                object.shotChangeDetectionConfig = null;
                                object.explicitContentDetectionConfig = null;
                                object.faceDetectionConfig = null;
                                object.speechTranscriptionConfig = null;
                                object.textDetectionConfig = null;
                                object.personDetectionConfig = null;
                                object.objectTrackingConfig = null;
                            }
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.toObject(message.segments[j], options);
                            }
                            if (message.labelDetectionConfig != null && message.hasOwnProperty("labelDetectionConfig"))
                                object.labelDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig.toObject(message.labelDetectionConfig, options);
                            if (message.shotChangeDetectionConfig != null && message.hasOwnProperty("shotChangeDetectionConfig"))
                                object.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig.toObject(message.shotChangeDetectionConfig, options);
                            if (message.explicitContentDetectionConfig != null && message.hasOwnProperty("explicitContentDetectionConfig"))
                                object.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig.toObject(message.explicitContentDetectionConfig, options);
                            if (message.faceDetectionConfig != null && message.hasOwnProperty("faceDetectionConfig"))
                                object.faceDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig.toObject(message.faceDetectionConfig, options);
                            if (message.speechTranscriptionConfig != null && message.hasOwnProperty("speechTranscriptionConfig"))
                                object.speechTranscriptionConfig = $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig.toObject(message.speechTranscriptionConfig, options);
                            if (message.textDetectionConfig != null && message.hasOwnProperty("textDetectionConfig"))
                                object.textDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.TextDetectionConfig.toObject(message.textDetectionConfig, options);
                            if (message.personDetectionConfig != null && message.hasOwnProperty("personDetectionConfig"))
                                object.personDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig.toObject(message.personDetectionConfig, options);
                            if (message.objectTrackingConfig != null && message.hasOwnProperty("objectTrackingConfig"))
                                object.objectTrackingConfig = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig.toObject(message.objectTrackingConfig, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoContext to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoContext.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoContext
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoContext
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.VideoContext";
                        };
    
                        return VideoContext;
                    })();
    
                    /**
                     * LabelDetectionMode enum.
                     * @name google.cloud.videointelligence.v1p3beta1.LabelDetectionMode
                     * @enum {number}
                     * @property {number} LABEL_DETECTION_MODE_UNSPECIFIED=0 LABEL_DETECTION_MODE_UNSPECIFIED value
                     * @property {number} SHOT_MODE=1 SHOT_MODE value
                     * @property {number} FRAME_MODE=2 FRAME_MODE value
                     * @property {number} SHOT_AND_FRAME_MODE=3 SHOT_AND_FRAME_MODE value
                     */
                    v1p3beta1.LabelDetectionMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LABEL_DETECTION_MODE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "SHOT_MODE"] = 1;
                        values[valuesById[2] = "FRAME_MODE"] = 2;
                        values[valuesById[3] = "SHOT_AND_FRAME_MODE"] = 3;
                        return values;
                    })();
    
                    /**
                     * Likelihood enum.
                     * @name google.cloud.videointelligence.v1p3beta1.Likelihood
                     * @enum {number}
                     * @property {number} LIKELIHOOD_UNSPECIFIED=0 LIKELIHOOD_UNSPECIFIED value
                     * @property {number} VERY_UNLIKELY=1 VERY_UNLIKELY value
                     * @property {number} UNLIKELY=2 UNLIKELY value
                     * @property {number} POSSIBLE=3 POSSIBLE value
                     * @property {number} LIKELY=4 LIKELY value
                     * @property {number} VERY_LIKELY=5 VERY_LIKELY value
                     */
                    v1p3beta1.Likelihood = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LIKELIHOOD_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "VERY_UNLIKELY"] = 1;
                        values[valuesById[2] = "UNLIKELY"] = 2;
                        values[valuesById[3] = "POSSIBLE"] = 3;
                        values[valuesById[4] = "LIKELY"] = 4;
                        values[valuesById[5] = "VERY_LIKELY"] = 5;
                        return values;
                    })();
    
                    v1p3beta1.LabelDetectionConfig = (function() {
    
                        /**
                         * Properties of a LabelDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ILabelDetectionConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.LabelDetectionMode|null} [labelDetectionMode] LabelDetectionConfig labelDetectionMode
                         * @property {boolean|null} [stationaryCamera] LabelDetectionConfig stationaryCamera
                         * @property {string|null} [model] LabelDetectionConfig model
                         * @property {number|null} [frameConfidenceThreshold] LabelDetectionConfig frameConfidenceThreshold
                         * @property {number|null} [videoConfidenceThreshold] LabelDetectionConfig videoConfidenceThreshold
                         */
    
                        /**
                         * Constructs a new LabelDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a LabelDetectionConfig.
                         * @implements ILabelDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelDetectionConfig=} [properties] Properties to set
                         */
                        function LabelDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelDetectionConfig labelDetectionMode.
                         * @member {google.cloud.videointelligence.v1p3beta1.LabelDetectionMode} labelDetectionMode
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.labelDetectionMode = 0;
    
                        /**
                         * LabelDetectionConfig stationaryCamera.
                         * @member {boolean} stationaryCamera
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.stationaryCamera = false;
    
                        /**
                         * LabelDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.model = "";
    
                        /**
                         * LabelDetectionConfig frameConfidenceThreshold.
                         * @member {number} frameConfidenceThreshold
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.frameConfidenceThreshold = 0;
    
                        /**
                         * LabelDetectionConfig videoConfidenceThreshold.
                         * @member {number} videoConfidenceThreshold
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @instance
                         */
                        LabelDetectionConfig.prototype.videoConfidenceThreshold = 0;
    
                        /**
                         * Creates a new LabelDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig} LabelDetectionConfig instance
                         */
                        LabelDetectionConfig.create = function create(properties) {
                            return new LabelDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified LabelDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelDetectionConfig} message LabelDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.labelDetectionMode != null && Object.hasOwnProperty.call(message, "labelDetectionMode"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.labelDetectionMode);
                            if (message.stationaryCamera != null && Object.hasOwnProperty.call(message, "stationaryCamera"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.stationaryCamera);
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.model);
                            if (message.frameConfidenceThreshold != null && Object.hasOwnProperty.call(message, "frameConfidenceThreshold"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.frameConfidenceThreshold);
                            if (message.videoConfidenceThreshold != null && Object.hasOwnProperty.call(message, "videoConfidenceThreshold"))
                                writer.uint32(/* id 5, wireType 5 =*/45).float(message.videoConfidenceThreshold);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelDetectionConfig} message LabelDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig} LabelDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.labelDetectionMode = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.stationaryCamera = reader.bool();
                                        break;
                                    }
                                case 3: {
                                        message.model = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.frameConfidenceThreshold = reader.float();
                                        break;
                                    }
                                case 5: {
                                        message.videoConfidenceThreshold = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig} LabelDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.labelDetectionMode != null && message.hasOwnProperty("labelDetectionMode"))
                                switch (message.labelDetectionMode) {
                                default:
                                    return "labelDetectionMode: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                    break;
                                }
                            if (message.stationaryCamera != null && message.hasOwnProperty("stationaryCamera"))
                                if (typeof message.stationaryCamera !== "boolean")
                                    return "stationaryCamera: boolean expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            if (message.frameConfidenceThreshold != null && message.hasOwnProperty("frameConfidenceThreshold"))
                                if (typeof message.frameConfidenceThreshold !== "number")
                                    return "frameConfidenceThreshold: number expected";
                            if (message.videoConfidenceThreshold != null && message.hasOwnProperty("videoConfidenceThreshold"))
                                if (typeof message.videoConfidenceThreshold !== "number")
                                    return "videoConfidenceThreshold: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig} LabelDetectionConfig
                         */
                        LabelDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig();
                            switch (object.labelDetectionMode) {
                            default:
                                if (typeof object.labelDetectionMode === "number") {
                                    message.labelDetectionMode = object.labelDetectionMode;
                                    break;
                                }
                                break;
                            case "LABEL_DETECTION_MODE_UNSPECIFIED":
                            case 0:
                                message.labelDetectionMode = 0;
                                break;
                            case "SHOT_MODE":
                            case 1:
                                message.labelDetectionMode = 1;
                                break;
                            case "FRAME_MODE":
                            case 2:
                                message.labelDetectionMode = 2;
                                break;
                            case "SHOT_AND_FRAME_MODE":
                            case 3:
                                message.labelDetectionMode = 3;
                                break;
                            }
                            if (object.stationaryCamera != null)
                                message.stationaryCamera = Boolean(object.stationaryCamera);
                            if (object.model != null)
                                message.model = String(object.model);
                            if (object.frameConfidenceThreshold != null)
                                message.frameConfidenceThreshold = Number(object.frameConfidenceThreshold);
                            if (object.videoConfidenceThreshold != null)
                                message.videoConfidenceThreshold = Number(object.videoConfidenceThreshold);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig} message LabelDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.labelDetectionMode = options.enums === String ? "LABEL_DETECTION_MODE_UNSPECIFIED" : 0;
                                object.stationaryCamera = false;
                                object.model = "";
                                object.frameConfidenceThreshold = 0;
                                object.videoConfidenceThreshold = 0;
                            }
                            if (message.labelDetectionMode != null && message.hasOwnProperty("labelDetectionMode"))
                                object.labelDetectionMode = options.enums === String ? $root.google.cloud.videointelligence.v1p3beta1.LabelDetectionMode[message.labelDetectionMode] === undefined ? message.labelDetectionMode : $root.google.cloud.videointelligence.v1p3beta1.LabelDetectionMode[message.labelDetectionMode] : message.labelDetectionMode;
                            if (message.stationaryCamera != null && message.hasOwnProperty("stationaryCamera"))
                                object.stationaryCamera = message.stationaryCamera;
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            if (message.frameConfidenceThreshold != null && message.hasOwnProperty("frameConfidenceThreshold"))
                                object.frameConfidenceThreshold = options.json && !isFinite(message.frameConfidenceThreshold) ? String(message.frameConfidenceThreshold) : message.frameConfidenceThreshold;
                            if (message.videoConfidenceThreshold != null && message.hasOwnProperty("videoConfidenceThreshold"))
                                object.videoConfidenceThreshold = options.json && !isFinite(message.videoConfidenceThreshold) ? String(message.videoConfidenceThreshold) : message.videoConfidenceThreshold;
                            return object;
                        };
    
                        /**
                         * Converts this LabelDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.LabelDetectionConfig";
                        };
    
                        return LabelDetectionConfig;
                    })();
    
                    /**
                     * StreamingFeature enum.
                     * @name google.cloud.videointelligence.v1p3beta1.StreamingFeature
                     * @enum {number}
                     * @property {number} STREAMING_FEATURE_UNSPECIFIED=0 STREAMING_FEATURE_UNSPECIFIED value
                     * @property {number} STREAMING_LABEL_DETECTION=1 STREAMING_LABEL_DETECTION value
                     * @property {number} STREAMING_SHOT_CHANGE_DETECTION=2 STREAMING_SHOT_CHANGE_DETECTION value
                     * @property {number} STREAMING_EXPLICIT_CONTENT_DETECTION=3 STREAMING_EXPLICIT_CONTENT_DETECTION value
                     * @property {number} STREAMING_OBJECT_TRACKING=4 STREAMING_OBJECT_TRACKING value
                     * @property {number} STREAMING_AUTOML_ACTION_RECOGNITION=23 STREAMING_AUTOML_ACTION_RECOGNITION value
                     * @property {number} STREAMING_AUTOML_CLASSIFICATION=21 STREAMING_AUTOML_CLASSIFICATION value
                     * @property {number} STREAMING_AUTOML_OBJECT_TRACKING=22 STREAMING_AUTOML_OBJECT_TRACKING value
                     */
                    v1p3beta1.StreamingFeature = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "STREAMING_FEATURE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "STREAMING_LABEL_DETECTION"] = 1;
                        values[valuesById[2] = "STREAMING_SHOT_CHANGE_DETECTION"] = 2;
                        values[valuesById[3] = "STREAMING_EXPLICIT_CONTENT_DETECTION"] = 3;
                        values[valuesById[4] = "STREAMING_OBJECT_TRACKING"] = 4;
                        values[valuesById[23] = "STREAMING_AUTOML_ACTION_RECOGNITION"] = 23;
                        values[valuesById[21] = "STREAMING_AUTOML_CLASSIFICATION"] = 21;
                        values[valuesById[22] = "STREAMING_AUTOML_OBJECT_TRACKING"] = 22;
                        return values;
                    })();
    
                    /**
                     * Feature enum.
                     * @name google.cloud.videointelligence.v1p3beta1.Feature
                     * @enum {number}
                     * @property {number} FEATURE_UNSPECIFIED=0 FEATURE_UNSPECIFIED value
                     * @property {number} LABEL_DETECTION=1 LABEL_DETECTION value
                     * @property {number} SHOT_CHANGE_DETECTION=2 SHOT_CHANGE_DETECTION value
                     * @property {number} EXPLICIT_CONTENT_DETECTION=3 EXPLICIT_CONTENT_DETECTION value
                     * @property {number} FACE_DETECTION=4 FACE_DETECTION value
                     * @property {number} SPEECH_TRANSCRIPTION=6 SPEECH_TRANSCRIPTION value
                     * @property {number} TEXT_DETECTION=7 TEXT_DETECTION value
                     * @property {number} OBJECT_TRACKING=9 OBJECT_TRACKING value
                     * @property {number} LOGO_RECOGNITION=12 LOGO_RECOGNITION value
                     * @property {number} CELEBRITY_RECOGNITION=13 CELEBRITY_RECOGNITION value
                     * @property {number} PERSON_DETECTION=14 PERSON_DETECTION value
                     */
                    v1p3beta1.Feature = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "FEATURE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "LABEL_DETECTION"] = 1;
                        values[valuesById[2] = "SHOT_CHANGE_DETECTION"] = 2;
                        values[valuesById[3] = "EXPLICIT_CONTENT_DETECTION"] = 3;
                        values[valuesById[4] = "FACE_DETECTION"] = 4;
                        values[valuesById[6] = "SPEECH_TRANSCRIPTION"] = 6;
                        values[valuesById[7] = "TEXT_DETECTION"] = 7;
                        values[valuesById[9] = "OBJECT_TRACKING"] = 9;
                        values[valuesById[12] = "LOGO_RECOGNITION"] = 12;
                        values[valuesById[13] = "CELEBRITY_RECOGNITION"] = 13;
                        values[valuesById[14] = "PERSON_DETECTION"] = 14;
                        return values;
                    })();
    
                    v1p3beta1.ShotChangeDetectionConfig = (function() {
    
                        /**
                         * Properties of a ShotChangeDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IShotChangeDetectionConfig
                         * @property {string|null} [model] ShotChangeDetectionConfig model
                         */
    
                        /**
                         * Constructs a new ShotChangeDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a ShotChangeDetectionConfig.
                         * @implements IShotChangeDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IShotChangeDetectionConfig=} [properties] Properties to set
                         */
                        function ShotChangeDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ShotChangeDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig
                         * @instance
                         */
                        ShotChangeDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new ShotChangeDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IShotChangeDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig} ShotChangeDetectionConfig instance
                         */
                        ShotChangeDetectionConfig.create = function create(properties) {
                            return new ShotChangeDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ShotChangeDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IShotChangeDetectionConfig} message ShotChangeDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ShotChangeDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ShotChangeDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IShotChangeDetectionConfig} message ShotChangeDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ShotChangeDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ShotChangeDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ShotChangeDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ShotChangeDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ShotChangeDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ShotChangeDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ShotChangeDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ShotChangeDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig} ShotChangeDetectionConfig
                         */
                        ShotChangeDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ShotChangeDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig} message ShotChangeDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ShotChangeDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.model = "";
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this ShotChangeDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ShotChangeDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ShotChangeDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ShotChangeDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.ShotChangeDetectionConfig";
                        };
    
                        return ShotChangeDetectionConfig;
                    })();
    
                    v1p3beta1.ObjectTrackingConfig = (function() {
    
                        /**
                         * Properties of an ObjectTrackingConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IObjectTrackingConfig
                         * @property {string|null} [model] ObjectTrackingConfig model
                         */
    
                        /**
                         * Constructs a new ObjectTrackingConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents an ObjectTrackingConfig.
                         * @implements IObjectTrackingConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IObjectTrackingConfig=} [properties] Properties to set
                         */
                        function ObjectTrackingConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ObjectTrackingConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig
                         * @instance
                         */
                        ObjectTrackingConfig.prototype.model = "";
    
                        /**
                         * Creates a new ObjectTrackingConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IObjectTrackingConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig} ObjectTrackingConfig instance
                         */
                        ObjectTrackingConfig.create = function create(properties) {
                            return new ObjectTrackingConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IObjectTrackingConfig} message ObjectTrackingConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IObjectTrackingConfig} message ObjectTrackingConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ObjectTrackingConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig} ObjectTrackingConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ObjectTrackingConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig} ObjectTrackingConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ObjectTrackingConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ObjectTrackingConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ObjectTrackingConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig} ObjectTrackingConfig
                         */
                        ObjectTrackingConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ObjectTrackingConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig} message ObjectTrackingConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ObjectTrackingConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.model = "";
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this ObjectTrackingConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ObjectTrackingConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ObjectTrackingConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ObjectTrackingConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.ObjectTrackingConfig";
                        };
    
                        return ObjectTrackingConfig;
                    })();
    
                    v1p3beta1.ExplicitContentDetectionConfig = (function() {
    
                        /**
                         * Properties of an ExplicitContentDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IExplicitContentDetectionConfig
                         * @property {string|null} [model] ExplicitContentDetectionConfig model
                         */
    
                        /**
                         * Constructs a new ExplicitContentDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents an ExplicitContentDetectionConfig.
                         * @implements IExplicitContentDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IExplicitContentDetectionConfig=} [properties] Properties to set
                         */
                        function ExplicitContentDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig
                         * @instance
                         */
                        ExplicitContentDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new ExplicitContentDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IExplicitContentDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig instance
                         */
                        ExplicitContentDetectionConfig.create = function create(properties) {
                            return new ExplicitContentDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IExplicitContentDetectionConfig} message ExplicitContentDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IExplicitContentDetectionConfig} message ExplicitContentDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig} ExplicitContentDetectionConfig
                         */
                        ExplicitContentDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig} message ExplicitContentDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.model = "";
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.ExplicitContentDetectionConfig";
                        };
    
                        return ExplicitContentDetectionConfig;
                    })();
    
                    v1p3beta1.FaceDetectionConfig = (function() {
    
                        /**
                         * Properties of a FaceDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IFaceDetectionConfig
                         * @property {string|null} [model] FaceDetectionConfig model
                         * @property {boolean|null} [includeBoundingBoxes] FaceDetectionConfig includeBoundingBoxes
                         * @property {boolean|null} [includeAttributes] FaceDetectionConfig includeAttributes
                         */
    
                        /**
                         * Constructs a new FaceDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a FaceDetectionConfig.
                         * @implements IFaceDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IFaceDetectionConfig=} [properties] Properties to set
                         */
                        function FaceDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FaceDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @instance
                         */
                        FaceDetectionConfig.prototype.model = "";
    
                        /**
                         * FaceDetectionConfig includeBoundingBoxes.
                         * @member {boolean} includeBoundingBoxes
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @instance
                         */
                        FaceDetectionConfig.prototype.includeBoundingBoxes = false;
    
                        /**
                         * FaceDetectionConfig includeAttributes.
                         * @member {boolean} includeAttributes
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @instance
                         */
                        FaceDetectionConfig.prototype.includeAttributes = false;
    
                        /**
                         * Creates a new FaceDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IFaceDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig} FaceDetectionConfig instance
                         */
                        FaceDetectionConfig.create = function create(properties) {
                            return new FaceDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified FaceDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IFaceDetectionConfig} message FaceDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.model);
                            if (message.includeBoundingBoxes != null && Object.hasOwnProperty.call(message, "includeBoundingBoxes"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.includeBoundingBoxes);
                            if (message.includeAttributes != null && Object.hasOwnProperty.call(message, "includeAttributes"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.includeAttributes);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FaceDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IFaceDetectionConfig} message FaceDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FaceDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig} FaceDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.model = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.includeBoundingBoxes = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        message.includeAttributes = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FaceDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig} FaceDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FaceDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FaceDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            if (message.includeBoundingBoxes != null && message.hasOwnProperty("includeBoundingBoxes"))
                                if (typeof message.includeBoundingBoxes !== "boolean")
                                    return "includeBoundingBoxes: boolean expected";
                            if (message.includeAttributes != null && message.hasOwnProperty("includeAttributes"))
                                if (typeof message.includeAttributes !== "boolean")
                                    return "includeAttributes: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a FaceDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig} FaceDetectionConfig
                         */
                        FaceDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig();
                            if (object.model != null)
                                message.model = String(object.model);
                            if (object.includeBoundingBoxes != null)
                                message.includeBoundingBoxes = Boolean(object.includeBoundingBoxes);
                            if (object.includeAttributes != null)
                                message.includeAttributes = Boolean(object.includeAttributes);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FaceDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig} message FaceDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FaceDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.model = "";
                                object.includeBoundingBoxes = false;
                                object.includeAttributes = false;
                            }
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            if (message.includeBoundingBoxes != null && message.hasOwnProperty("includeBoundingBoxes"))
                                object.includeBoundingBoxes = message.includeBoundingBoxes;
                            if (message.includeAttributes != null && message.hasOwnProperty("includeAttributes"))
                                object.includeAttributes = message.includeAttributes;
                            return object;
                        };
    
                        /**
                         * Converts this FaceDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FaceDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FaceDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FaceDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.FaceDetectionConfig";
                        };
    
                        return FaceDetectionConfig;
                    })();
    
                    v1p3beta1.PersonDetectionConfig = (function() {
    
                        /**
                         * Properties of a PersonDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IPersonDetectionConfig
                         * @property {boolean|null} [includeBoundingBoxes] PersonDetectionConfig includeBoundingBoxes
                         * @property {boolean|null} [includePoseLandmarks] PersonDetectionConfig includePoseLandmarks
                         * @property {boolean|null} [includeAttributes] PersonDetectionConfig includeAttributes
                         */
    
                        /**
                         * Constructs a new PersonDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a PersonDetectionConfig.
                         * @implements IPersonDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IPersonDetectionConfig=} [properties] Properties to set
                         */
                        function PersonDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PersonDetectionConfig includeBoundingBoxes.
                         * @member {boolean} includeBoundingBoxes
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @instance
                         */
                        PersonDetectionConfig.prototype.includeBoundingBoxes = false;
    
                        /**
                         * PersonDetectionConfig includePoseLandmarks.
                         * @member {boolean} includePoseLandmarks
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @instance
                         */
                        PersonDetectionConfig.prototype.includePoseLandmarks = false;
    
                        /**
                         * PersonDetectionConfig includeAttributes.
                         * @member {boolean} includeAttributes
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @instance
                         */
                        PersonDetectionConfig.prototype.includeAttributes = false;
    
                        /**
                         * Creates a new PersonDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IPersonDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig} PersonDetectionConfig instance
                         */
                        PersonDetectionConfig.create = function create(properties) {
                            return new PersonDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified PersonDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IPersonDetectionConfig} message PersonDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PersonDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.includeBoundingBoxes != null && Object.hasOwnProperty.call(message, "includeBoundingBoxes"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.includeBoundingBoxes);
                            if (message.includePoseLandmarks != null && Object.hasOwnProperty.call(message, "includePoseLandmarks"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.includePoseLandmarks);
                            if (message.includeAttributes != null && Object.hasOwnProperty.call(message, "includeAttributes"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.includeAttributes);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PersonDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IPersonDetectionConfig} message PersonDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PersonDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PersonDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig} PersonDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PersonDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.includeBoundingBoxes = reader.bool();
                                        break;
                                    }
                                case 2: {
                                        message.includePoseLandmarks = reader.bool();
                                        break;
                                    }
                                case 3: {
                                        message.includeAttributes = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PersonDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig} PersonDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PersonDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PersonDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PersonDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.includeBoundingBoxes != null && message.hasOwnProperty("includeBoundingBoxes"))
                                if (typeof message.includeBoundingBoxes !== "boolean")
                                    return "includeBoundingBoxes: boolean expected";
                            if (message.includePoseLandmarks != null && message.hasOwnProperty("includePoseLandmarks"))
                                if (typeof message.includePoseLandmarks !== "boolean")
                                    return "includePoseLandmarks: boolean expected";
                            if (message.includeAttributes != null && message.hasOwnProperty("includeAttributes"))
                                if (typeof message.includeAttributes !== "boolean")
                                    return "includeAttributes: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a PersonDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig} PersonDetectionConfig
                         */
                        PersonDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig();
                            if (object.includeBoundingBoxes != null)
                                message.includeBoundingBoxes = Boolean(object.includeBoundingBoxes);
                            if (object.includePoseLandmarks != null)
                                message.includePoseLandmarks = Boolean(object.includePoseLandmarks);
                            if (object.includeAttributes != null)
                                message.includeAttributes = Boolean(object.includeAttributes);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PersonDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig} message PersonDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PersonDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.includeBoundingBoxes = false;
                                object.includePoseLandmarks = false;
                                object.includeAttributes = false;
                            }
                            if (message.includeBoundingBoxes != null && message.hasOwnProperty("includeBoundingBoxes"))
                                object.includeBoundingBoxes = message.includeBoundingBoxes;
                            if (message.includePoseLandmarks != null && message.hasOwnProperty("includePoseLandmarks"))
                                object.includePoseLandmarks = message.includePoseLandmarks;
                            if (message.includeAttributes != null && message.hasOwnProperty("includeAttributes"))
                                object.includeAttributes = message.includeAttributes;
                            return object;
                        };
    
                        /**
                         * Converts this PersonDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PersonDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for PersonDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PersonDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.PersonDetectionConfig";
                        };
    
                        return PersonDetectionConfig;
                    })();
    
                    v1p3beta1.TextDetectionConfig = (function() {
    
                        /**
                         * Properties of a TextDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ITextDetectionConfig
                         * @property {Array.<string>|null} [languageHints] TextDetectionConfig languageHints
                         * @property {string|null} [model] TextDetectionConfig model
                         */
    
                        /**
                         * Constructs a new TextDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a TextDetectionConfig.
                         * @implements ITextDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextDetectionConfig=} [properties] Properties to set
                         */
                        function TextDetectionConfig(properties) {
                            this.languageHints = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextDetectionConfig languageHints.
                         * @member {Array.<string>} languageHints
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextDetectionConfig
                         * @instance
                         */
                        TextDetectionConfig.prototype.languageHints = $util.emptyArray;
    
                        /**
                         * TextDetectionConfig model.
                         * @member {string} model
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextDetectionConfig
                         * @instance
                         */
                        TextDetectionConfig.prototype.model = "";
    
                        /**
                         * Creates a new TextDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextDetectionConfig} TextDetectionConfig instance
                         */
                        TextDetectionConfig.create = function create(properties) {
                            return new TextDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified TextDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.TextDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextDetectionConfig} message TextDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.languageHints != null && message.languageHints.length)
                                for (var i = 0; i < message.languageHints.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.languageHints[i]);
                            if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.model);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.TextDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextDetectionConfig} message TextDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextDetectionConfig} TextDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.TextDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.languageHints && message.languageHints.length))
                                            message.languageHints = [];
                                        message.languageHints.push(reader.string());
                                        break;
                                    }
                                case 2: {
                                        message.model = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextDetectionConfig} TextDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.languageHints != null && message.hasOwnProperty("languageHints")) {
                                if (!Array.isArray(message.languageHints))
                                    return "languageHints: array expected";
                                for (var i = 0; i < message.languageHints.length; ++i)
                                    if (!$util.isString(message.languageHints[i]))
                                        return "languageHints: string[] expected";
                            }
                            if (message.model != null && message.hasOwnProperty("model"))
                                if (!$util.isString(message.model))
                                    return "model: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a TextDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextDetectionConfig} TextDetectionConfig
                         */
                        TextDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.TextDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.TextDetectionConfig();
                            if (object.languageHints) {
                                if (!Array.isArray(object.languageHints))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.TextDetectionConfig.languageHints: array expected");
                                message.languageHints = [];
                                for (var i = 0; i < object.languageHints.length; ++i)
                                    message.languageHints[i] = String(object.languageHints[i]);
                            }
                            if (object.model != null)
                                message.model = String(object.model);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.TextDetectionConfig} message TextDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.languageHints = [];
                            if (options.defaults)
                                object.model = "";
                            if (message.languageHints && message.languageHints.length) {
                                object.languageHints = [];
                                for (var j = 0; j < message.languageHints.length; ++j)
                                    object.languageHints[j] = message.languageHints[j];
                            }
                            if (message.model != null && message.hasOwnProperty("model"))
                                object.model = message.model;
                            return object;
                        };
    
                        /**
                         * Converts this TextDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.TextDetectionConfig";
                        };
    
                        return TextDetectionConfig;
                    })();
    
                    v1p3beta1.VideoSegment = (function() {
    
                        /**
                         * Properties of a VideoSegment.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IVideoSegment
                         * @property {google.protobuf.IDuration|null} [startTimeOffset] VideoSegment startTimeOffset
                         * @property {google.protobuf.IDuration|null} [endTimeOffset] VideoSegment endTimeOffset
                         */
    
                        /**
                         * Constructs a new VideoSegment.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a VideoSegment.
                         * @implements IVideoSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoSegment=} [properties] Properties to set
                         */
                        function VideoSegment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoSegment startTimeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} startTimeOffset
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoSegment
                         * @instance
                         */
                        VideoSegment.prototype.startTimeOffset = null;
    
                        /**
                         * VideoSegment endTimeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} endTimeOffset
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoSegment
                         * @instance
                         */
                        VideoSegment.prototype.endTimeOffset = null;
    
                        /**
                         * Creates a new VideoSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoSegment} VideoSegment instance
                         */
                        VideoSegment.create = function create(properties) {
                            return new VideoSegment(properties);
                        };
    
                        /**
                         * Encodes the specified VideoSegment message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.VideoSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoSegment} message VideoSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.startTimeOffset != null && Object.hasOwnProperty.call(message, "startTimeOffset"))
                                $root.google.protobuf.Duration.encode(message.startTimeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.endTimeOffset != null && Object.hasOwnProperty.call(message, "endTimeOffset"))
                                $root.google.protobuf.Duration.encode(message.endTimeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.VideoSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoSegment} message VideoSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoSegment} VideoSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.VideoSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.startTimeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.endTimeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoSegment} VideoSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.startTimeOffset != null && message.hasOwnProperty("startTimeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.startTimeOffset);
                                if (error)
                                    return "startTimeOffset." + error;
                            }
                            if (message.endTimeOffset != null && message.hasOwnProperty("endTimeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.endTimeOffset);
                                if (error)
                                    return "endTimeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoSegment} VideoSegment
                         */
                        VideoSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.VideoSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.VideoSegment();
                            if (object.startTimeOffset != null) {
                                if (typeof object.startTimeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoSegment.startTimeOffset: object expected");
                                message.startTimeOffset = $root.google.protobuf.Duration.fromObject(object.startTimeOffset);
                            }
                            if (object.endTimeOffset != null) {
                                if (typeof object.endTimeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoSegment.endTimeOffset: object expected");
                                message.endTimeOffset = $root.google.protobuf.Duration.fromObject(object.endTimeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.VideoSegment} message VideoSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.startTimeOffset = null;
                                object.endTimeOffset = null;
                            }
                            if (message.startTimeOffset != null && message.hasOwnProperty("startTimeOffset"))
                                object.startTimeOffset = $root.google.protobuf.Duration.toObject(message.startTimeOffset, options);
                            if (message.endTimeOffset != null && message.hasOwnProperty("endTimeOffset"))
                                object.endTimeOffset = $root.google.protobuf.Duration.toObject(message.endTimeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.VideoSegment";
                        };
    
                        return VideoSegment;
                    })();
    
                    v1p3beta1.LabelSegment = (function() {
    
                        /**
                         * Properties of a LabelSegment.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ILabelSegment
                         * @property {google.cloud.videointelligence.v1p3beta1.IVideoSegment|null} [segment] LabelSegment segment
                         * @property {number|null} [confidence] LabelSegment confidence
                         */
    
                        /**
                         * Constructs a new LabelSegment.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a LabelSegment.
                         * @implements ILabelSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelSegment=} [properties] Properties to set
                         */
                        function LabelSegment(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelSegment segment.
                         * @member {google.cloud.videointelligence.v1p3beta1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelSegment
                         * @instance
                         */
                        LabelSegment.prototype.segment = null;
    
                        /**
                         * LabelSegment confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelSegment
                         * @instance
                         */
                        LabelSegment.prototype.confidence = 0;
    
                        /**
                         * Creates a new LabelSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelSegment} LabelSegment instance
                         */
                        LabelSegment.create = function create(properties) {
                            return new LabelSegment(properties);
                        };
    
                        /**
                         * Encodes the specified LabelSegment message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.LabelSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelSegment} message LabelSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.encode(message.segment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.LabelSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelSegment} message LabelSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelSegment} LabelSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.LabelSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelSegment} LabelSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelSegment} LabelSegment
                         */
                        LabelSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.LabelSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.LabelSegment();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.LabelSegment.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.LabelSegment} message LabelSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.segment = null;
                                object.confidence = 0;
                            }
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.toObject(message.segment, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this LabelSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.LabelSegment";
                        };
    
                        return LabelSegment;
                    })();
    
                    v1p3beta1.LabelFrame = (function() {
    
                        /**
                         * Properties of a LabelFrame.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ILabelFrame
                         * @property {google.protobuf.IDuration|null} [timeOffset] LabelFrame timeOffset
                         * @property {number|null} [confidence] LabelFrame confidence
                         */
    
                        /**
                         * Constructs a new LabelFrame.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a LabelFrame.
                         * @implements ILabelFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelFrame=} [properties] Properties to set
                         */
                        function LabelFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelFrame
                         * @instance
                         */
                        LabelFrame.prototype.timeOffset = null;
    
                        /**
                         * LabelFrame confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelFrame
                         * @instance
                         */
                        LabelFrame.prototype.confidence = 0;
    
                        /**
                         * Creates a new LabelFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelFrame} LabelFrame instance
                         */
                        LabelFrame.create = function create(properties) {
                            return new LabelFrame(properties);
                        };
    
                        /**
                         * Encodes the specified LabelFrame message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.LabelFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelFrame} message LabelFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.LabelFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelFrame} message LabelFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelFrame} LabelFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.LabelFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelFrame} LabelFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a LabelFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelFrame} LabelFrame
                         */
                        LabelFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.LabelFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.LabelFrame();
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.LabelFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.LabelFrame} message LabelFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.timeOffset = null;
                                object.confidence = 0;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this LabelFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.LabelFrame";
                        };
    
                        return LabelFrame;
                    })();
    
                    v1p3beta1.Entity = (function() {
    
                        /**
                         * Properties of an Entity.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IEntity
                         * @property {string|null} [entityId] Entity entityId
                         * @property {string|null} [description] Entity description
                         * @property {string|null} [languageCode] Entity languageCode
                         */
    
                        /**
                         * Constructs a new Entity.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents an Entity.
                         * @implements IEntity
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IEntity=} [properties] Properties to set
                         */
                        function Entity(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Entity entityId.
                         * @member {string} entityId
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @instance
                         */
                        Entity.prototype.entityId = "";
    
                        /**
                         * Entity description.
                         * @member {string} description
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @instance
                         */
                        Entity.prototype.description = "";
    
                        /**
                         * Entity languageCode.
                         * @member {string} languageCode
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @instance
                         */
                        Entity.prototype.languageCode = "";
    
                        /**
                         * Creates a new Entity instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IEntity=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.Entity} Entity instance
                         */
                        Entity.create = function create(properties) {
                            return new Entity(properties);
                        };
    
                        /**
                         * Encodes the specified Entity message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.Entity.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entityId != null && Object.hasOwnProperty.call(message, "entityId"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.entityId);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                            if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.languageCode);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Entity message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.Entity.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IEntity} message Entity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Entity.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.Entity();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.entityId = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.description = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.languageCode = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Entity message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.Entity} Entity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Entity.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Entity message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Entity.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entityId != null && message.hasOwnProperty("entityId"))
                                if (!$util.isString(message.entityId))
                                    return "entityId: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                if (!$util.isString(message.languageCode))
                                    return "languageCode: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an Entity message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.Entity} Entity
                         */
                        Entity.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.Entity)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.Entity();
                            if (object.entityId != null)
                                message.entityId = String(object.entityId);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.languageCode != null)
                                message.languageCode = String(object.languageCode);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Entity message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.Entity} message Entity
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Entity.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.entityId = "";
                                object.description = "";
                                object.languageCode = "";
                            }
                            if (message.entityId != null && message.hasOwnProperty("entityId"))
                                object.entityId = message.entityId;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                object.languageCode = message.languageCode;
                            return object;
                        };
    
                        /**
                         * Converts this Entity to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Entity.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Entity
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.Entity
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Entity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.Entity";
                        };
    
                        return Entity;
                    })();
    
                    v1p3beta1.LabelAnnotation = (function() {
    
                        /**
                         * Properties of a LabelAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ILabelAnnotation
                         * @property {google.cloud.videointelligence.v1p3beta1.IEntity|null} [entity] LabelAnnotation entity
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IEntity>|null} [categoryEntities] LabelAnnotation categoryEntities
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ILabelSegment>|null} [segments] LabelAnnotation segments
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ILabelFrame>|null} [frames] LabelAnnotation frames
                         */
    
                        /**
                         * Constructs a new LabelAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a LabelAnnotation.
                         * @implements ILabelAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelAnnotation=} [properties] Properties to set
                         */
                        function LabelAnnotation(properties) {
                            this.categoryEntities = [];
                            this.segments = [];
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LabelAnnotation entity.
                         * @member {google.cloud.videointelligence.v1p3beta1.IEntity|null|undefined} entity
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.entity = null;
    
                        /**
                         * LabelAnnotation categoryEntities.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IEntity>} categoryEntities
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.categoryEntities = $util.emptyArray;
    
                        /**
                         * LabelAnnotation segments.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ILabelSegment>} segments
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.segments = $util.emptyArray;
    
                        /**
                         * LabelAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ILabelFrame>} frames
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @instance
                         */
                        LabelAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new LabelAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelAnnotation} LabelAnnotation instance
                         */
                        LabelAnnotation.create = function create(properties) {
                            return new LabelAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified LabelAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.LabelAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelAnnotation} message LabelAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                                $root.google.cloud.videointelligence.v1p3beta1.Entity.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.categoryEntities != null && message.categoryEntities.length)
                                for (var i = 0; i < message.categoryEntities.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.Entity.encode(message.categoryEntities[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.LabelSegment.encode(message.segments[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.LabelFrame.encode(message.frames[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LabelAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.LabelAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILabelAnnotation} message LabelAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LabelAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelAnnotation} LabelAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.entity = $root.google.cloud.videointelligence.v1p3beta1.Entity.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.categoryEntities && message.categoryEntities.length))
                                            message.categoryEntities = [];
                                        message.categoryEntities.push($root.google.cloud.videointelligence.v1p3beta1.Entity.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1p3beta1.LabelSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1p3beta1.LabelFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LabelAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelAnnotation} LabelAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LabelAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entity != null && message.hasOwnProperty("entity")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.Entity.verify(message.entity);
                                if (error)
                                    return "entity." + error;
                            }
                            if (message.categoryEntities != null && message.hasOwnProperty("categoryEntities")) {
                                if (!Array.isArray(message.categoryEntities))
                                    return "categoryEntities: array expected";
                                for (var i = 0; i < message.categoryEntities.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.Entity.verify(message.categoryEntities[i]);
                                    if (error)
                                        return "categoryEntities." + error;
                                }
                            }
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.LabelSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.LabelFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a LabelAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.LabelAnnotation} LabelAnnotation
                         */
                        LabelAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation();
                            if (object.entity != null) {
                                if (typeof object.entity !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.LabelAnnotation.entity: object expected");
                                message.entity = $root.google.cloud.videointelligence.v1p3beta1.Entity.fromObject(object.entity);
                            }
                            if (object.categoryEntities) {
                                if (!Array.isArray(object.categoryEntities))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.LabelAnnotation.categoryEntities: array expected");
                                message.categoryEntities = [];
                                for (var i = 0; i < object.categoryEntities.length; ++i) {
                                    if (typeof object.categoryEntities[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.LabelAnnotation.categoryEntities: object expected");
                                    message.categoryEntities[i] = $root.google.cloud.videointelligence.v1p3beta1.Entity.fromObject(object.categoryEntities[i]);
                                }
                            }
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.LabelAnnotation.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.LabelAnnotation.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1p3beta1.LabelSegment.fromObject(object.segments[i]);
                                }
                            }
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.LabelAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.LabelAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1p3beta1.LabelFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LabelAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.LabelAnnotation} message LabelAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.categoryEntities = [];
                                object.segments = [];
                                object.frames = [];
                            }
                            if (options.defaults)
                                object.entity = null;
                            if (message.entity != null && message.hasOwnProperty("entity"))
                                object.entity = $root.google.cloud.videointelligence.v1p3beta1.Entity.toObject(message.entity, options);
                            if (message.categoryEntities && message.categoryEntities.length) {
                                object.categoryEntities = [];
                                for (var j = 0; j < message.categoryEntities.length; ++j)
                                    object.categoryEntities[j] = $root.google.cloud.videointelligence.v1p3beta1.Entity.toObject(message.categoryEntities[j], options);
                            }
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1p3beta1.LabelSegment.toObject(message.segments[j], options);
                            }
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1p3beta1.LabelFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this LabelAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LabelAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.LabelAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.LabelAnnotation";
                        };
    
                        return LabelAnnotation;
                    })();
    
                    v1p3beta1.ExplicitContentFrame = (function() {
    
                        /**
                         * Properties of an ExplicitContentFrame.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IExplicitContentFrame
                         * @property {google.protobuf.IDuration|null} [timeOffset] ExplicitContentFrame timeOffset
                         * @property {google.cloud.videointelligence.v1p3beta1.Likelihood|null} [pornographyLikelihood] ExplicitContentFrame pornographyLikelihood
                         */
    
                        /**
                         * Constructs a new ExplicitContentFrame.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents an ExplicitContentFrame.
                         * @implements IExplicitContentFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IExplicitContentFrame=} [properties] Properties to set
                         */
                        function ExplicitContentFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame
                         * @instance
                         */
                        ExplicitContentFrame.prototype.timeOffset = null;
    
                        /**
                         * ExplicitContentFrame pornographyLikelihood.
                         * @member {google.cloud.videointelligence.v1p3beta1.Likelihood} pornographyLikelihood
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame
                         * @instance
                         */
                        ExplicitContentFrame.prototype.pornographyLikelihood = 0;
    
                        /**
                         * Creates a new ExplicitContentFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IExplicitContentFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame} ExplicitContentFrame instance
                         */
                        ExplicitContentFrame.create = function create(properties) {
                            return new ExplicitContentFrame(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentFrame message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IExplicitContentFrame} message ExplicitContentFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.pornographyLikelihood != null && Object.hasOwnProperty.call(message, "pornographyLikelihood"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pornographyLikelihood);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IExplicitContentFrame} message ExplicitContentFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame} ExplicitContentFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.pornographyLikelihood = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame} ExplicitContentFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            if (message.pornographyLikelihood != null && message.hasOwnProperty("pornographyLikelihood"))
                                switch (message.pornographyLikelihood) {
                                default:
                                    return "pornographyLikelihood: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame} ExplicitContentFrame
                         */
                        ExplicitContentFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame();
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            switch (object.pornographyLikelihood) {
                            default:
                                if (typeof object.pornographyLikelihood === "number") {
                                    message.pornographyLikelihood = object.pornographyLikelihood;
                                    break;
                                }
                                break;
                            case "LIKELIHOOD_UNSPECIFIED":
                            case 0:
                                message.pornographyLikelihood = 0;
                                break;
                            case "VERY_UNLIKELY":
                            case 1:
                                message.pornographyLikelihood = 1;
                                break;
                            case "UNLIKELY":
                            case 2:
                                message.pornographyLikelihood = 2;
                                break;
                            case "POSSIBLE":
                            case 3:
                                message.pornographyLikelihood = 3;
                                break;
                            case "LIKELY":
                            case 4:
                                message.pornographyLikelihood = 4;
                                break;
                            case "VERY_LIKELY":
                            case 5:
                                message.pornographyLikelihood = 5;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame} message ExplicitContentFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.timeOffset = null;
                                object.pornographyLikelihood = options.enums === String ? "LIKELIHOOD_UNSPECIFIED" : 0;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            if (message.pornographyLikelihood != null && message.hasOwnProperty("pornographyLikelihood"))
                                object.pornographyLikelihood = options.enums === String ? $root.google.cloud.videointelligence.v1p3beta1.Likelihood[message.pornographyLikelihood] === undefined ? message.pornographyLikelihood : $root.google.cloud.videointelligence.v1p3beta1.Likelihood[message.pornographyLikelihood] : message.pornographyLikelihood;
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame";
                        };
    
                        return ExplicitContentFrame;
                    })();
    
                    v1p3beta1.ExplicitContentAnnotation = (function() {
    
                        /**
                         * Properties of an ExplicitContentAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IExplicitContentAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IExplicitContentFrame>|null} [frames] ExplicitContentAnnotation frames
                         */
    
                        /**
                         * Constructs a new ExplicitContentAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents an ExplicitContentAnnotation.
                         * @implements IExplicitContentAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IExplicitContentAnnotation=} [properties] Properties to set
                         */
                        function ExplicitContentAnnotation(properties) {
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ExplicitContentAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IExplicitContentFrame>} frames
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation
                         * @instance
                         */
                        ExplicitContentAnnotation.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new ExplicitContentAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IExplicitContentAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation} ExplicitContentAnnotation instance
                         */
                        ExplicitContentAnnotation.create = function create(properties) {
                            return new ExplicitContentAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified ExplicitContentAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IExplicitContentAnnotation} message ExplicitContentAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame.encode(message.frames[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ExplicitContentAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IExplicitContentAnnotation} message ExplicitContentAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExplicitContentAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ExplicitContentAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation} ExplicitContentAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ExplicitContentAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation} ExplicitContentAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExplicitContentAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ExplicitContentAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExplicitContentAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ExplicitContentAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation} ExplicitContentAnnotation
                         */
                        ExplicitContentAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation();
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ExplicitContentAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation} message ExplicitContentAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExplicitContentAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.frames = [];
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ExplicitContentAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExplicitContentAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ExplicitContentAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExplicitContentAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation";
                        };
    
                        return ExplicitContentAnnotation;
                    })();
    
                    v1p3beta1.NormalizedBoundingBox = (function() {
    
                        /**
                         * Properties of a NormalizedBoundingBox.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface INormalizedBoundingBox
                         * @property {number|null} [left] NormalizedBoundingBox left
                         * @property {number|null} [top] NormalizedBoundingBox top
                         * @property {number|null} [right] NormalizedBoundingBox right
                         * @property {number|null} [bottom] NormalizedBoundingBox bottom
                         */
    
                        /**
                         * Constructs a new NormalizedBoundingBox.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a NormalizedBoundingBox.
                         * @implements INormalizedBoundingBox
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingBox=} [properties] Properties to set
                         */
                        function NormalizedBoundingBox(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * NormalizedBoundingBox left.
                         * @member {number} left
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.left = 0;
    
                        /**
                         * NormalizedBoundingBox top.
                         * @member {number} top
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.top = 0;
    
                        /**
                         * NormalizedBoundingBox right.
                         * @member {number} right
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.right = 0;
    
                        /**
                         * NormalizedBoundingBox bottom.
                         * @member {number} bottom
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @instance
                         */
                        NormalizedBoundingBox.prototype.bottom = 0;
    
                        /**
                         * Creates a new NormalizedBoundingBox instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingBox=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox} NormalizedBoundingBox instance
                         */
                        NormalizedBoundingBox.create = function create(properties) {
                            return new NormalizedBoundingBox(properties);
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingBox message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingBox} message NormalizedBoundingBox message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingBox.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.left != null && Object.hasOwnProperty.call(message, "left"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.left);
                            if (message.top != null && Object.hasOwnProperty.call(message, "top"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.top);
                            if (message.right != null && Object.hasOwnProperty.call(message, "right"))
                                writer.uint32(/* id 3, wireType 5 =*/29).float(message.right);
                            if (message.bottom != null && Object.hasOwnProperty.call(message, "bottom"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.bottom);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingBox message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingBox} message NormalizedBoundingBox message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingBox.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a NormalizedBoundingBox message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox} NormalizedBoundingBox
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingBox.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.left = reader.float();
                                        break;
                                    }
                                case 2: {
                                        message.top = reader.float();
                                        break;
                                    }
                                case 3: {
                                        message.right = reader.float();
                                        break;
                                    }
                                case 4: {
                                        message.bottom = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a NormalizedBoundingBox message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox} NormalizedBoundingBox
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingBox.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a NormalizedBoundingBox message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NormalizedBoundingBox.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.left != null && message.hasOwnProperty("left"))
                                if (typeof message.left !== "number")
                                    return "left: number expected";
                            if (message.top != null && message.hasOwnProperty("top"))
                                if (typeof message.top !== "number")
                                    return "top: number expected";
                            if (message.right != null && message.hasOwnProperty("right"))
                                if (typeof message.right !== "number")
                                    return "right: number expected";
                            if (message.bottom != null && message.hasOwnProperty("bottom"))
                                if (typeof message.bottom !== "number")
                                    return "bottom: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a NormalizedBoundingBox message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox} NormalizedBoundingBox
                         */
                        NormalizedBoundingBox.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox();
                            if (object.left != null)
                                message.left = Number(object.left);
                            if (object.top != null)
                                message.top = Number(object.top);
                            if (object.right != null)
                                message.right = Number(object.right);
                            if (object.bottom != null)
                                message.bottom = Number(object.bottom);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a NormalizedBoundingBox message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox} message NormalizedBoundingBox
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NormalizedBoundingBox.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.left = 0;
                                object.top = 0;
                                object.right = 0;
                                object.bottom = 0;
                            }
                            if (message.left != null && message.hasOwnProperty("left"))
                                object.left = options.json && !isFinite(message.left) ? String(message.left) : message.left;
                            if (message.top != null && message.hasOwnProperty("top"))
                                object.top = options.json && !isFinite(message.top) ? String(message.top) : message.top;
                            if (message.right != null && message.hasOwnProperty("right"))
                                object.right = options.json && !isFinite(message.right) ? String(message.right) : message.right;
                            if (message.bottom != null && message.hasOwnProperty("bottom"))
                                object.bottom = options.json && !isFinite(message.bottom) ? String(message.bottom) : message.bottom;
                            return object;
                        };
    
                        /**
                         * Converts this NormalizedBoundingBox to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NormalizedBoundingBox.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for NormalizedBoundingBox
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        NormalizedBoundingBox.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox";
                        };
    
                        return NormalizedBoundingBox;
                    })();
    
                    v1p3beta1.TimestampedObject = (function() {
    
                        /**
                         * Properties of a TimestampedObject.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ITimestampedObject
                         * @property {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingBox|null} [normalizedBoundingBox] TimestampedObject normalizedBoundingBox
                         * @property {google.protobuf.IDuration|null} [timeOffset] TimestampedObject timeOffset
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IDetectedAttribute>|null} [attributes] TimestampedObject attributes
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IDetectedLandmark>|null} [landmarks] TimestampedObject landmarks
                         */
    
                        /**
                         * Constructs a new TimestampedObject.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a TimestampedObject.
                         * @implements ITimestampedObject
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ITimestampedObject=} [properties] Properties to set
                         */
                        function TimestampedObject(properties) {
                            this.attributes = [];
                            this.landmarks = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TimestampedObject normalizedBoundingBox.
                         * @member {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingBox|null|undefined} normalizedBoundingBox
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @instance
                         */
                        TimestampedObject.prototype.normalizedBoundingBox = null;
    
                        /**
                         * TimestampedObject timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @instance
                         */
                        TimestampedObject.prototype.timeOffset = null;
    
                        /**
                         * TimestampedObject attributes.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IDetectedAttribute>} attributes
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @instance
                         */
                        TimestampedObject.prototype.attributes = $util.emptyArray;
    
                        /**
                         * TimestampedObject landmarks.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IDetectedLandmark>} landmarks
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @instance
                         */
                        TimestampedObject.prototype.landmarks = $util.emptyArray;
    
                        /**
                         * Creates a new TimestampedObject instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITimestampedObject=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.TimestampedObject} TimestampedObject instance
                         */
                        TimestampedObject.create = function create(properties) {
                            return new TimestampedObject(properties);
                        };
    
                        /**
                         * Encodes the specified TimestampedObject message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.TimestampedObject.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITimestampedObject} message TimestampedObject message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TimestampedObject.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.normalizedBoundingBox != null && Object.hasOwnProperty.call(message, "normalizedBoundingBox"))
                                $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox.encode(message.normalizedBoundingBox, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.attributes != null && message.attributes.length)
                                for (var i = 0; i < message.attributes.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.landmarks != null && message.landmarks.length)
                                for (var i = 0; i < message.landmarks.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.DetectedLandmark.encode(message.landmarks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TimestampedObject message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.TimestampedObject.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITimestampedObject} message TimestampedObject message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TimestampedObject.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TimestampedObject message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.TimestampedObject} TimestampedObject
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TimestampedObject.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.TimestampedObject();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.normalizedBoundingBox = $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        if (!(message.attributes && message.attributes.length))
                                            message.attributes = [];
                                        message.attributes.push($root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (!(message.landmarks && message.landmarks.length))
                                            message.landmarks = [];
                                        message.landmarks.push($root.google.cloud.videointelligence.v1p3beta1.DetectedLandmark.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TimestampedObject message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.TimestampedObject} TimestampedObject
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TimestampedObject.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TimestampedObject message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TimestampedObject.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.normalizedBoundingBox != null && message.hasOwnProperty("normalizedBoundingBox")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox.verify(message.normalizedBoundingBox);
                                if (error)
                                    return "normalizedBoundingBox." + error;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            if (message.attributes != null && message.hasOwnProperty("attributes")) {
                                if (!Array.isArray(message.attributes))
                                    return "attributes: array expected";
                                for (var i = 0; i < message.attributes.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute.verify(message.attributes[i]);
                                    if (error)
                                        return "attributes." + error;
                                }
                            }
                            if (message.landmarks != null && message.hasOwnProperty("landmarks")) {
                                if (!Array.isArray(message.landmarks))
                                    return "landmarks: array expected";
                                for (var i = 0; i < message.landmarks.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.DetectedLandmark.verify(message.landmarks[i]);
                                    if (error)
                                        return "landmarks." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TimestampedObject message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.TimestampedObject} TimestampedObject
                         */
                        TimestampedObject.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.TimestampedObject)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.TimestampedObject();
                            if (object.normalizedBoundingBox != null) {
                                if (typeof object.normalizedBoundingBox !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.TimestampedObject.normalizedBoundingBox: object expected");
                                message.normalizedBoundingBox = $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox.fromObject(object.normalizedBoundingBox);
                            }
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.TimestampedObject.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            if (object.attributes) {
                                if (!Array.isArray(object.attributes))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.TimestampedObject.attributes: array expected");
                                message.attributes = [];
                                for (var i = 0; i < object.attributes.length; ++i) {
                                    if (typeof object.attributes[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.TimestampedObject.attributes: object expected");
                                    message.attributes[i] = $root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute.fromObject(object.attributes[i]);
                                }
                            }
                            if (object.landmarks) {
                                if (!Array.isArray(object.landmarks))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.TimestampedObject.landmarks: array expected");
                                message.landmarks = [];
                                for (var i = 0; i < object.landmarks.length; ++i) {
                                    if (typeof object.landmarks[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.TimestampedObject.landmarks: object expected");
                                    message.landmarks[i] = $root.google.cloud.videointelligence.v1p3beta1.DetectedLandmark.fromObject(object.landmarks[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TimestampedObject message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.TimestampedObject} message TimestampedObject
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TimestampedObject.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.attributes = [];
                                object.landmarks = [];
                            }
                            if (options.defaults) {
                                object.normalizedBoundingBox = null;
                                object.timeOffset = null;
                            }
                            if (message.normalizedBoundingBox != null && message.hasOwnProperty("normalizedBoundingBox"))
                                object.normalizedBoundingBox = $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox.toObject(message.normalizedBoundingBox, options);
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            if (message.attributes && message.attributes.length) {
                                object.attributes = [];
                                for (var j = 0; j < message.attributes.length; ++j)
                                    object.attributes[j] = $root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute.toObject(message.attributes[j], options);
                            }
                            if (message.landmarks && message.landmarks.length) {
                                object.landmarks = [];
                                for (var j = 0; j < message.landmarks.length; ++j)
                                    object.landmarks[j] = $root.google.cloud.videointelligence.v1p3beta1.DetectedLandmark.toObject(message.landmarks[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TimestampedObject to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TimestampedObject.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TimestampedObject
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.TimestampedObject
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TimestampedObject.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.TimestampedObject";
                        };
    
                        return TimestampedObject;
                    })();
    
                    v1p3beta1.Track = (function() {
    
                        /**
                         * Properties of a Track.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ITrack
                         * @property {google.cloud.videointelligence.v1p3beta1.IVideoSegment|null} [segment] Track segment
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ITimestampedObject>|null} [timestampedObjects] Track timestampedObjects
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IDetectedAttribute>|null} [attributes] Track attributes
                         * @property {number|null} [confidence] Track confidence
                         */
    
                        /**
                         * Constructs a new Track.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a Track.
                         * @implements ITrack
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ITrack=} [properties] Properties to set
                         */
                        function Track(properties) {
                            this.timestampedObjects = [];
                            this.attributes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Track segment.
                         * @member {google.cloud.videointelligence.v1p3beta1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @instance
                         */
                        Track.prototype.segment = null;
    
                        /**
                         * Track timestampedObjects.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ITimestampedObject>} timestampedObjects
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @instance
                         */
                        Track.prototype.timestampedObjects = $util.emptyArray;
    
                        /**
                         * Track attributes.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IDetectedAttribute>} attributes
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @instance
                         */
                        Track.prototype.attributes = $util.emptyArray;
    
                        /**
                         * Track confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @instance
                         */
                        Track.prototype.confidence = 0;
    
                        /**
                         * Creates a new Track instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITrack=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.Track} Track instance
                         */
                        Track.create = function create(properties) {
                            return new Track(properties);
                        };
    
                        /**
                         * Encodes the specified Track message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.Track.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITrack} message Track message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Track.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.encode(message.segment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timestampedObjects != null && message.timestampedObjects.length)
                                for (var i = 0; i < message.timestampedObjects.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.TimestampedObject.encode(message.timestampedObjects[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.attributes != null && message.attributes.length)
                                for (var i = 0; i < message.attributes.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Track message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.Track.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITrack} message Track message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Track.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Track message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.Track} Track
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Track.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.Track();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.timestampedObjects && message.timestampedObjects.length))
                                            message.timestampedObjects = [];
                                        message.timestampedObjects.push($root.google.cloud.videointelligence.v1p3beta1.TimestampedObject.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.attributes && message.attributes.length))
                                            message.attributes = [];
                                        message.attributes.push($root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Track message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.Track} Track
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Track.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Track message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Track.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            if (message.timestampedObjects != null && message.hasOwnProperty("timestampedObjects")) {
                                if (!Array.isArray(message.timestampedObjects))
                                    return "timestampedObjects: array expected";
                                for (var i = 0; i < message.timestampedObjects.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.TimestampedObject.verify(message.timestampedObjects[i]);
                                    if (error)
                                        return "timestampedObjects." + error;
                                }
                            }
                            if (message.attributes != null && message.hasOwnProperty("attributes")) {
                                if (!Array.isArray(message.attributes))
                                    return "attributes: array expected";
                                for (var i = 0; i < message.attributes.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute.verify(message.attributes[i]);
                                    if (error)
                                        return "attributes." + error;
                                }
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a Track message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.Track} Track
                         */
                        Track.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.Track)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.Track();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.Track.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.timestampedObjects) {
                                if (!Array.isArray(object.timestampedObjects))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.Track.timestampedObjects: array expected");
                                message.timestampedObjects = [];
                                for (var i = 0; i < object.timestampedObjects.length; ++i) {
                                    if (typeof object.timestampedObjects[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.Track.timestampedObjects: object expected");
                                    message.timestampedObjects[i] = $root.google.cloud.videointelligence.v1p3beta1.TimestampedObject.fromObject(object.timestampedObjects[i]);
                                }
                            }
                            if (object.attributes) {
                                if (!Array.isArray(object.attributes))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.Track.attributes: array expected");
                                message.attributes = [];
                                for (var i = 0; i < object.attributes.length; ++i) {
                                    if (typeof object.attributes[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.Track.attributes: object expected");
                                    message.attributes[i] = $root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute.fromObject(object.attributes[i]);
                                }
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Track message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.Track} message Track
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Track.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.timestampedObjects = [];
                                object.attributes = [];
                            }
                            if (options.defaults) {
                                object.segment = null;
                                object.confidence = 0;
                            }
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.toObject(message.segment, options);
                            if (message.timestampedObjects && message.timestampedObjects.length) {
                                object.timestampedObjects = [];
                                for (var j = 0; j < message.timestampedObjects.length; ++j)
                                    object.timestampedObjects[j] = $root.google.cloud.videointelligence.v1p3beta1.TimestampedObject.toObject(message.timestampedObjects[j], options);
                            }
                            if (message.attributes && message.attributes.length) {
                                object.attributes = [];
                                for (var j = 0; j < message.attributes.length; ++j)
                                    object.attributes[j] = $root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute.toObject(message.attributes[j], options);
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this Track to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Track.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Track
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.Track
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Track.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.Track";
                        };
    
                        return Track;
                    })();
    
                    v1p3beta1.DetectedAttribute = (function() {
    
                        /**
                         * Properties of a DetectedAttribute.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IDetectedAttribute
                         * @property {string|null} [name] DetectedAttribute name
                         * @property {number|null} [confidence] DetectedAttribute confidence
                         * @property {string|null} [value] DetectedAttribute value
                         */
    
                        /**
                         * Constructs a new DetectedAttribute.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a DetectedAttribute.
                         * @implements IDetectedAttribute
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IDetectedAttribute=} [properties] Properties to set
                         */
                        function DetectedAttribute(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DetectedAttribute name.
                         * @member {string} name
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @instance
                         */
                        DetectedAttribute.prototype.name = "";
    
                        /**
                         * DetectedAttribute confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @instance
                         */
                        DetectedAttribute.prototype.confidence = 0;
    
                        /**
                         * DetectedAttribute value.
                         * @member {string} value
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @instance
                         */
                        DetectedAttribute.prototype.value = "";
    
                        /**
                         * Creates a new DetectedAttribute instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IDetectedAttribute=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.DetectedAttribute} DetectedAttribute instance
                         */
                        DetectedAttribute.create = function create(properties) {
                            return new DetectedAttribute(properties);
                        };
    
                        /**
                         * Encodes the specified DetectedAttribute message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.DetectedAttribute.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IDetectedAttribute} message DetectedAttribute message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DetectedAttribute.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.value);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DetectedAttribute message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.DetectedAttribute.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IDetectedAttribute} message DetectedAttribute message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DetectedAttribute.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DetectedAttribute message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.DetectedAttribute} DetectedAttribute
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DetectedAttribute.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 3: {
                                        message.value = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DetectedAttribute message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.DetectedAttribute} DetectedAttribute
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DetectedAttribute.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DetectedAttribute message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DetectedAttribute.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isString(message.value))
                                    return "value: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DetectedAttribute message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.DetectedAttribute} DetectedAttribute
                         */
                        DetectedAttribute.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.DetectedAttribute();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.value != null)
                                message.value = String(object.value);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DetectedAttribute message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.DetectedAttribute} message DetectedAttribute
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DetectedAttribute.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.confidence = 0;
                                object.value = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };
    
                        /**
                         * Converts this DetectedAttribute to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DetectedAttribute.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for DetectedAttribute
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedAttribute
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DetectedAttribute.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.DetectedAttribute";
                        };
    
                        return DetectedAttribute;
                    })();
    
                    v1p3beta1.Celebrity = (function() {
    
                        /**
                         * Properties of a Celebrity.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ICelebrity
                         * @property {string|null} [name] Celebrity name
                         * @property {string|null} [displayName] Celebrity displayName
                         * @property {string|null} [description] Celebrity description
                         */
    
                        /**
                         * Constructs a new Celebrity.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a Celebrity.
                         * @implements ICelebrity
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ICelebrity=} [properties] Properties to set
                         */
                        function Celebrity(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Celebrity name.
                         * @member {string} name
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @instance
                         */
                        Celebrity.prototype.name = "";
    
                        /**
                         * Celebrity displayName.
                         * @member {string} displayName
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @instance
                         */
                        Celebrity.prototype.displayName = "";
    
                        /**
                         * Celebrity description.
                         * @member {string} description
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @instance
                         */
                        Celebrity.prototype.description = "";
    
                        /**
                         * Creates a new Celebrity instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ICelebrity=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.Celebrity} Celebrity instance
                         */
                        Celebrity.create = function create(properties) {
                            return new Celebrity(properties);
                        };
    
                        /**
                         * Encodes the specified Celebrity message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.Celebrity.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ICelebrity} message Celebrity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Celebrity.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.displayName);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.description);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Celebrity message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.Celebrity.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ICelebrity} message Celebrity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Celebrity.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Celebrity message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.Celebrity} Celebrity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Celebrity.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.Celebrity();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.displayName = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.description = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Celebrity message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.Celebrity} Celebrity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Celebrity.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Celebrity message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Celebrity.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                if (!$util.isString(message.displayName))
                                    return "displayName: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Celebrity message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.Celebrity} Celebrity
                         */
                        Celebrity.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.Celebrity)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.Celebrity();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.displayName != null)
                                message.displayName = String(object.displayName);
                            if (object.description != null)
                                message.description = String(object.description);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Celebrity message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.Celebrity} message Celebrity
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Celebrity.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.displayName = "";
                                object.description = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                object.displayName = message.displayName;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            return object;
                        };
    
                        /**
                         * Converts this Celebrity to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Celebrity.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Celebrity
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.Celebrity
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Celebrity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.Celebrity";
                        };
    
                        return Celebrity;
                    })();
    
                    v1p3beta1.CelebrityTrack = (function() {
    
                        /**
                         * Properties of a CelebrityTrack.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ICelebrityTrack
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.CelebrityTrack.IRecognizedCelebrity>|null} [celebrities] CelebrityTrack celebrities
                         * @property {google.cloud.videointelligence.v1p3beta1.ITrack|null} [faceTrack] CelebrityTrack faceTrack
                         */
    
                        /**
                         * Constructs a new CelebrityTrack.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a CelebrityTrack.
                         * @implements ICelebrityTrack
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ICelebrityTrack=} [properties] Properties to set
                         */
                        function CelebrityTrack(properties) {
                            this.celebrities = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CelebrityTrack celebrities.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.CelebrityTrack.IRecognizedCelebrity>} celebrities
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                         * @instance
                         */
                        CelebrityTrack.prototype.celebrities = $util.emptyArray;
    
                        /**
                         * CelebrityTrack faceTrack.
                         * @member {google.cloud.videointelligence.v1p3beta1.ITrack|null|undefined} faceTrack
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                         * @instance
                         */
                        CelebrityTrack.prototype.faceTrack = null;
    
                        /**
                         * Creates a new CelebrityTrack instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ICelebrityTrack=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.CelebrityTrack} CelebrityTrack instance
                         */
                        CelebrityTrack.create = function create(properties) {
                            return new CelebrityTrack(properties);
                        };
    
                        /**
                         * Encodes the specified CelebrityTrack message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.CelebrityTrack.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ICelebrityTrack} message CelebrityTrack message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CelebrityTrack.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.celebrities != null && message.celebrities.length)
                                for (var i = 0; i < message.celebrities.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity.encode(message.celebrities[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.faceTrack != null && Object.hasOwnProperty.call(message, "faceTrack"))
                                $root.google.cloud.videointelligence.v1p3beta1.Track.encode(message.faceTrack, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CelebrityTrack message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.CelebrityTrack.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ICelebrityTrack} message CelebrityTrack message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CelebrityTrack.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CelebrityTrack message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.CelebrityTrack} CelebrityTrack
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CelebrityTrack.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.celebrities && message.celebrities.length))
                                            message.celebrities = [];
                                        message.celebrities.push($root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        message.faceTrack = $root.google.cloud.videointelligence.v1p3beta1.Track.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CelebrityTrack message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.CelebrityTrack} CelebrityTrack
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CelebrityTrack.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CelebrityTrack message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CelebrityTrack.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.celebrities != null && message.hasOwnProperty("celebrities")) {
                                if (!Array.isArray(message.celebrities))
                                    return "celebrities: array expected";
                                for (var i = 0; i < message.celebrities.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity.verify(message.celebrities[i]);
                                    if (error)
                                        return "celebrities." + error;
                                }
                            }
                            if (message.faceTrack != null && message.hasOwnProperty("faceTrack")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.Track.verify(message.faceTrack);
                                if (error)
                                    return "faceTrack." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CelebrityTrack message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.CelebrityTrack} CelebrityTrack
                         */
                        CelebrityTrack.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack();
                            if (object.celebrities) {
                                if (!Array.isArray(object.celebrities))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.CelebrityTrack.celebrities: array expected");
                                message.celebrities = [];
                                for (var i = 0; i < object.celebrities.length; ++i) {
                                    if (typeof object.celebrities[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.CelebrityTrack.celebrities: object expected");
                                    message.celebrities[i] = $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity.fromObject(object.celebrities[i]);
                                }
                            }
                            if (object.faceTrack != null) {
                                if (typeof object.faceTrack !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.CelebrityTrack.faceTrack: object expected");
                                message.faceTrack = $root.google.cloud.videointelligence.v1p3beta1.Track.fromObject(object.faceTrack);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CelebrityTrack message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.CelebrityTrack} message CelebrityTrack
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CelebrityTrack.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.celebrities = [];
                            if (options.defaults)
                                object.faceTrack = null;
                            if (message.celebrities && message.celebrities.length) {
                                object.celebrities = [];
                                for (var j = 0; j < message.celebrities.length; ++j)
                                    object.celebrities[j] = $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity.toObject(message.celebrities[j], options);
                            }
                            if (message.faceTrack != null && message.hasOwnProperty("faceTrack"))
                                object.faceTrack = $root.google.cloud.videointelligence.v1p3beta1.Track.toObject(message.faceTrack, options);
                            return object;
                        };
    
                        /**
                         * Converts this CelebrityTrack to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CelebrityTrack.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for CelebrityTrack
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CelebrityTrack.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.CelebrityTrack";
                        };
    
                        CelebrityTrack.RecognizedCelebrity = (function() {
    
                            /**
                             * Properties of a RecognizedCelebrity.
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                             * @interface IRecognizedCelebrity
                             * @property {google.cloud.videointelligence.v1p3beta1.ICelebrity|null} [celebrity] RecognizedCelebrity celebrity
                             * @property {number|null} [confidence] RecognizedCelebrity confidence
                             */
    
                            /**
                             * Constructs a new RecognizedCelebrity.
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack
                             * @classdesc Represents a RecognizedCelebrity.
                             * @implements IRecognizedCelebrity
                             * @constructor
                             * @param {google.cloud.videointelligence.v1p3beta1.CelebrityTrack.IRecognizedCelebrity=} [properties] Properties to set
                             */
                            function RecognizedCelebrity(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * RecognizedCelebrity celebrity.
                             * @member {google.cloud.videointelligence.v1p3beta1.ICelebrity|null|undefined} celebrity
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity
                             * @instance
                             */
                            RecognizedCelebrity.prototype.celebrity = null;
    
                            /**
                             * RecognizedCelebrity confidence.
                             * @member {number} confidence
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity
                             * @instance
                             */
                            RecognizedCelebrity.prototype.confidence = 0;
    
                            /**
                             * Creates a new RecognizedCelebrity instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity
                             * @static
                             * @param {google.cloud.videointelligence.v1p3beta1.CelebrityTrack.IRecognizedCelebrity=} [properties] Properties to set
                             * @returns {google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity} RecognizedCelebrity instance
                             */
                            RecognizedCelebrity.create = function create(properties) {
                                return new RecognizedCelebrity(properties);
                            };
    
                            /**
                             * Encodes the specified RecognizedCelebrity message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity
                             * @static
                             * @param {google.cloud.videointelligence.v1p3beta1.CelebrityTrack.IRecognizedCelebrity} message RecognizedCelebrity message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RecognizedCelebrity.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.celebrity != null && Object.hasOwnProperty.call(message, "celebrity"))
                                    $root.google.cloud.videointelligence.v1p3beta1.Celebrity.encode(message.celebrity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                    writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified RecognizedCelebrity message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity
                             * @static
                             * @param {google.cloud.videointelligence.v1p3beta1.CelebrityTrack.IRecognizedCelebrity} message RecognizedCelebrity message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            RecognizedCelebrity.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a RecognizedCelebrity message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity} RecognizedCelebrity
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RecognizedCelebrity.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.celebrity = $root.google.cloud.videointelligence.v1p3beta1.Celebrity.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 2: {
                                            message.confidence = reader.float();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a RecognizedCelebrity message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity} RecognizedCelebrity
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            RecognizedCelebrity.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a RecognizedCelebrity message.
                             * @function verify
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            RecognizedCelebrity.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.celebrity != null && message.hasOwnProperty("celebrity")) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.Celebrity.verify(message.celebrity);
                                    if (error)
                                        return "celebrity." + error;
                                }
                                if (message.confidence != null && message.hasOwnProperty("confidence"))
                                    if (typeof message.confidence !== "number")
                                        return "confidence: number expected";
                                return null;
                            };
    
                            /**
                             * Creates a RecognizedCelebrity message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity} RecognizedCelebrity
                             */
                            RecognizedCelebrity.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity)
                                    return object;
                                var message = new $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity();
                                if (object.celebrity != null) {
                                    if (typeof object.celebrity !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity.celebrity: object expected");
                                    message.celebrity = $root.google.cloud.videointelligence.v1p3beta1.Celebrity.fromObject(object.celebrity);
                                }
                                if (object.confidence != null)
                                    message.confidence = Number(object.confidence);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a RecognizedCelebrity message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity
                             * @static
                             * @param {google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity} message RecognizedCelebrity
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            RecognizedCelebrity.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.celebrity = null;
                                    object.confidence = 0;
                                }
                                if (message.celebrity != null && message.hasOwnProperty("celebrity"))
                                    object.celebrity = $root.google.cloud.videointelligence.v1p3beta1.Celebrity.toObject(message.celebrity, options);
                                if (message.confidence != null && message.hasOwnProperty("confidence"))
                                    object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                                return object;
                            };
    
                            /**
                             * Converts this RecognizedCelebrity to JSON.
                             * @function toJSON
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            RecognizedCelebrity.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for RecognizedCelebrity
                             * @function getTypeUrl
                             * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            RecognizedCelebrity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.CelebrityTrack.RecognizedCelebrity";
                            };
    
                            return RecognizedCelebrity;
                        })();
    
                        return CelebrityTrack;
                    })();
    
                    v1p3beta1.CelebrityRecognitionAnnotation = (function() {
    
                        /**
                         * Properties of a CelebrityRecognitionAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ICelebrityRecognitionAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ICelebrityTrack>|null} [celebrityTracks] CelebrityRecognitionAnnotation celebrityTracks
                         */
    
                        /**
                         * Constructs a new CelebrityRecognitionAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a CelebrityRecognitionAnnotation.
                         * @implements ICelebrityRecognitionAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ICelebrityRecognitionAnnotation=} [properties] Properties to set
                         */
                        function CelebrityRecognitionAnnotation(properties) {
                            this.celebrityTracks = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CelebrityRecognitionAnnotation celebrityTracks.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ICelebrityTrack>} celebrityTracks
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation
                         * @instance
                         */
                        CelebrityRecognitionAnnotation.prototype.celebrityTracks = $util.emptyArray;
    
                        /**
                         * Creates a new CelebrityRecognitionAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ICelebrityRecognitionAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation} CelebrityRecognitionAnnotation instance
                         */
                        CelebrityRecognitionAnnotation.create = function create(properties) {
                            return new CelebrityRecognitionAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified CelebrityRecognitionAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ICelebrityRecognitionAnnotation} message CelebrityRecognitionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CelebrityRecognitionAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.celebrityTracks != null && message.celebrityTracks.length)
                                for (var i = 0; i < message.celebrityTracks.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.encode(message.celebrityTracks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CelebrityRecognitionAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ICelebrityRecognitionAnnotation} message CelebrityRecognitionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CelebrityRecognitionAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CelebrityRecognitionAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation} CelebrityRecognitionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CelebrityRecognitionAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.celebrityTracks && message.celebrityTracks.length))
                                            message.celebrityTracks = [];
                                        message.celebrityTracks.push($root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CelebrityRecognitionAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation} CelebrityRecognitionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CelebrityRecognitionAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CelebrityRecognitionAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CelebrityRecognitionAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.celebrityTracks != null && message.hasOwnProperty("celebrityTracks")) {
                                if (!Array.isArray(message.celebrityTracks))
                                    return "celebrityTracks: array expected";
                                for (var i = 0; i < message.celebrityTracks.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.verify(message.celebrityTracks[i]);
                                    if (error)
                                        return "celebrityTracks." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a CelebrityRecognitionAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation} CelebrityRecognitionAnnotation
                         */
                        CelebrityRecognitionAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation();
                            if (object.celebrityTracks) {
                                if (!Array.isArray(object.celebrityTracks))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation.celebrityTracks: array expected");
                                message.celebrityTracks = [];
                                for (var i = 0; i < object.celebrityTracks.length; ++i) {
                                    if (typeof object.celebrityTracks[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation.celebrityTracks: object expected");
                                    message.celebrityTracks[i] = $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.fromObject(object.celebrityTracks[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CelebrityRecognitionAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation} message CelebrityRecognitionAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CelebrityRecognitionAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.celebrityTracks = [];
                            if (message.celebrityTracks && message.celebrityTracks.length) {
                                object.celebrityTracks = [];
                                for (var j = 0; j < message.celebrityTracks.length; ++j)
                                    object.celebrityTracks[j] = $root.google.cloud.videointelligence.v1p3beta1.CelebrityTrack.toObject(message.celebrityTracks[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this CelebrityRecognitionAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CelebrityRecognitionAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for CelebrityRecognitionAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CelebrityRecognitionAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation";
                        };
    
                        return CelebrityRecognitionAnnotation;
                    })();
    
                    v1p3beta1.DetectedLandmark = (function() {
    
                        /**
                         * Properties of a DetectedLandmark.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IDetectedLandmark
                         * @property {string|null} [name] DetectedLandmark name
                         * @property {google.cloud.videointelligence.v1p3beta1.INormalizedVertex|null} [point] DetectedLandmark point
                         * @property {number|null} [confidence] DetectedLandmark confidence
                         */
    
                        /**
                         * Constructs a new DetectedLandmark.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a DetectedLandmark.
                         * @implements IDetectedLandmark
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IDetectedLandmark=} [properties] Properties to set
                         */
                        function DetectedLandmark(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DetectedLandmark name.
                         * @member {string} name
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @instance
                         */
                        DetectedLandmark.prototype.name = "";
    
                        /**
                         * DetectedLandmark point.
                         * @member {google.cloud.videointelligence.v1p3beta1.INormalizedVertex|null|undefined} point
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @instance
                         */
                        DetectedLandmark.prototype.point = null;
    
                        /**
                         * DetectedLandmark confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @instance
                         */
                        DetectedLandmark.prototype.confidence = 0;
    
                        /**
                         * Creates a new DetectedLandmark instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IDetectedLandmark=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.DetectedLandmark} DetectedLandmark instance
                         */
                        DetectedLandmark.create = function create(properties) {
                            return new DetectedLandmark(properties);
                        };
    
                        /**
                         * Encodes the specified DetectedLandmark message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.DetectedLandmark.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IDetectedLandmark} message DetectedLandmark message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DetectedLandmark.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.point != null && Object.hasOwnProperty.call(message, "point"))
                                $root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex.encode(message.point, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 3, wireType 5 =*/29).float(message.confidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DetectedLandmark message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.DetectedLandmark.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IDetectedLandmark} message DetectedLandmark message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DetectedLandmark.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DetectedLandmark message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.DetectedLandmark} DetectedLandmark
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DetectedLandmark.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.DetectedLandmark();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.point = $root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DetectedLandmark message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.DetectedLandmark} DetectedLandmark
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DetectedLandmark.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DetectedLandmark message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DetectedLandmark.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.point != null && message.hasOwnProperty("point")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex.verify(message.point);
                                if (error)
                                    return "point." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a DetectedLandmark message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.DetectedLandmark} DetectedLandmark
                         */
                        DetectedLandmark.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.DetectedLandmark)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.DetectedLandmark();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.point != null) {
                                if (typeof object.point !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.DetectedLandmark.point: object expected");
                                message.point = $root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex.fromObject(object.point);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DetectedLandmark message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.DetectedLandmark} message DetectedLandmark
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DetectedLandmark.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.point = null;
                                object.confidence = 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.point != null && message.hasOwnProperty("point"))
                                object.point = $root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex.toObject(message.point, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            return object;
                        };
    
                        /**
                         * Converts this DetectedLandmark to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DetectedLandmark.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for DetectedLandmark
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.DetectedLandmark
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DetectedLandmark.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.DetectedLandmark";
                        };
    
                        return DetectedLandmark;
                    })();
    
                    v1p3beta1.FaceDetectionAnnotation = (function() {
    
                        /**
                         * Properties of a FaceDetectionAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IFaceDetectionAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ITrack>|null} [tracks] FaceDetectionAnnotation tracks
                         * @property {Uint8Array|null} [thumbnail] FaceDetectionAnnotation thumbnail
                         */
    
                        /**
                         * Constructs a new FaceDetectionAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a FaceDetectionAnnotation.
                         * @implements IFaceDetectionAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IFaceDetectionAnnotation=} [properties] Properties to set
                         */
                        function FaceDetectionAnnotation(properties) {
                            this.tracks = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * FaceDetectionAnnotation tracks.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ITrack>} tracks
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation
                         * @instance
                         */
                        FaceDetectionAnnotation.prototype.tracks = $util.emptyArray;
    
                        /**
                         * FaceDetectionAnnotation thumbnail.
                         * @member {Uint8Array} thumbnail
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation
                         * @instance
                         */
                        FaceDetectionAnnotation.prototype.thumbnail = $util.newBuffer([]);
    
                        /**
                         * Creates a new FaceDetectionAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IFaceDetectionAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation} FaceDetectionAnnotation instance
                         */
                        FaceDetectionAnnotation.create = function create(properties) {
                            return new FaceDetectionAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified FaceDetectionAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IFaceDetectionAnnotation} message FaceDetectionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceDetectionAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tracks != null && message.tracks.length)
                                for (var i = 0; i < message.tracks.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.Track.encode(message.tracks[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.thumbnail != null && Object.hasOwnProperty.call(message, "thumbnail"))
                                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.thumbnail);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified FaceDetectionAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IFaceDetectionAnnotation} message FaceDetectionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        FaceDetectionAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a FaceDetectionAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation} FaceDetectionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceDetectionAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 3: {
                                        if (!(message.tracks && message.tracks.length))
                                            message.tracks = [];
                                        message.tracks.push($root.google.cloud.videointelligence.v1p3beta1.Track.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        message.thumbnail = reader.bytes();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a FaceDetectionAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation} FaceDetectionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        FaceDetectionAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a FaceDetectionAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        FaceDetectionAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tracks != null && message.hasOwnProperty("tracks")) {
                                if (!Array.isArray(message.tracks))
                                    return "tracks: array expected";
                                for (var i = 0; i < message.tracks.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.Track.verify(message.tracks[i]);
                                    if (error)
                                        return "tracks." + error;
                                }
                            }
                            if (message.thumbnail != null && message.hasOwnProperty("thumbnail"))
                                if (!(message.thumbnail && typeof message.thumbnail.length === "number" || $util.isString(message.thumbnail)))
                                    return "thumbnail: buffer expected";
                            return null;
                        };
    
                        /**
                         * Creates a FaceDetectionAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation} FaceDetectionAnnotation
                         */
                        FaceDetectionAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation();
                            if (object.tracks) {
                                if (!Array.isArray(object.tracks))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation.tracks: array expected");
                                message.tracks = [];
                                for (var i = 0; i < object.tracks.length; ++i) {
                                    if (typeof object.tracks[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation.tracks: object expected");
                                    message.tracks[i] = $root.google.cloud.videointelligence.v1p3beta1.Track.fromObject(object.tracks[i]);
                                }
                            }
                            if (object.thumbnail != null)
                                if (typeof object.thumbnail === "string")
                                    $util.base64.decode(object.thumbnail, message.thumbnail = $util.newBuffer($util.base64.length(object.thumbnail)), 0);
                                else if (object.thumbnail.length >= 0)
                                    message.thumbnail = object.thumbnail;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a FaceDetectionAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation} message FaceDetectionAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        FaceDetectionAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.tracks = [];
                            if (options.defaults)
                                if (options.bytes === String)
                                    object.thumbnail = "";
                                else {
                                    object.thumbnail = [];
                                    if (options.bytes !== Array)
                                        object.thumbnail = $util.newBuffer(object.thumbnail);
                                }
                            if (message.tracks && message.tracks.length) {
                                object.tracks = [];
                                for (var j = 0; j < message.tracks.length; ++j)
                                    object.tracks[j] = $root.google.cloud.videointelligence.v1p3beta1.Track.toObject(message.tracks[j], options);
                            }
                            if (message.thumbnail != null && message.hasOwnProperty("thumbnail"))
                                object.thumbnail = options.bytes === String ? $util.base64.encode(message.thumbnail, 0, message.thumbnail.length) : options.bytes === Array ? Array.prototype.slice.call(message.thumbnail) : message.thumbnail;
                            return object;
                        };
    
                        /**
                         * Converts this FaceDetectionAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        FaceDetectionAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for FaceDetectionAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        FaceDetectionAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation";
                        };
    
                        return FaceDetectionAnnotation;
                    })();
    
                    v1p3beta1.PersonDetectionAnnotation = (function() {
    
                        /**
                         * Properties of a PersonDetectionAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IPersonDetectionAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ITrack>|null} [tracks] PersonDetectionAnnotation tracks
                         */
    
                        /**
                         * Constructs a new PersonDetectionAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a PersonDetectionAnnotation.
                         * @implements IPersonDetectionAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IPersonDetectionAnnotation=} [properties] Properties to set
                         */
                        function PersonDetectionAnnotation(properties) {
                            this.tracks = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PersonDetectionAnnotation tracks.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ITrack>} tracks
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation
                         * @instance
                         */
                        PersonDetectionAnnotation.prototype.tracks = $util.emptyArray;
    
                        /**
                         * Creates a new PersonDetectionAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IPersonDetectionAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation} PersonDetectionAnnotation instance
                         */
                        PersonDetectionAnnotation.create = function create(properties) {
                            return new PersonDetectionAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified PersonDetectionAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IPersonDetectionAnnotation} message PersonDetectionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PersonDetectionAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tracks != null && message.tracks.length)
                                for (var i = 0; i < message.tracks.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.Track.encode(message.tracks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PersonDetectionAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IPersonDetectionAnnotation} message PersonDetectionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PersonDetectionAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PersonDetectionAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation} PersonDetectionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PersonDetectionAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.tracks && message.tracks.length))
                                            message.tracks = [];
                                        message.tracks.push($root.google.cloud.videointelligence.v1p3beta1.Track.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PersonDetectionAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation} PersonDetectionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PersonDetectionAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PersonDetectionAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PersonDetectionAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tracks != null && message.hasOwnProperty("tracks")) {
                                if (!Array.isArray(message.tracks))
                                    return "tracks: array expected";
                                for (var i = 0; i < message.tracks.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.Track.verify(message.tracks[i]);
                                    if (error)
                                        return "tracks." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a PersonDetectionAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation} PersonDetectionAnnotation
                         */
                        PersonDetectionAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation();
                            if (object.tracks) {
                                if (!Array.isArray(object.tracks))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation.tracks: array expected");
                                message.tracks = [];
                                for (var i = 0; i < object.tracks.length; ++i) {
                                    if (typeof object.tracks[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation.tracks: object expected");
                                    message.tracks[i] = $root.google.cloud.videointelligence.v1p3beta1.Track.fromObject(object.tracks[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PersonDetectionAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation} message PersonDetectionAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PersonDetectionAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.tracks = [];
                            if (message.tracks && message.tracks.length) {
                                object.tracks = [];
                                for (var j = 0; j < message.tracks.length; ++j)
                                    object.tracks[j] = $root.google.cloud.videointelligence.v1p3beta1.Track.toObject(message.tracks[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this PersonDetectionAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PersonDetectionAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for PersonDetectionAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PersonDetectionAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation";
                        };
    
                        return PersonDetectionAnnotation;
                    })();
    
                    v1p3beta1.VideoAnnotationResults = (function() {
    
                        /**
                         * Properties of a VideoAnnotationResults.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IVideoAnnotationResults
                         * @property {string|null} [inputUri] VideoAnnotationResults inputUri
                         * @property {google.cloud.videointelligence.v1p3beta1.IVideoSegment|null} [segment] VideoAnnotationResults segment
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ILabelAnnotation>|null} [segmentLabelAnnotations] VideoAnnotationResults segmentLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ILabelAnnotation>|null} [segmentPresenceLabelAnnotations] VideoAnnotationResults segmentPresenceLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ILabelAnnotation>|null} [shotLabelAnnotations] VideoAnnotationResults shotLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ILabelAnnotation>|null} [shotPresenceLabelAnnotations] VideoAnnotationResults shotPresenceLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ILabelAnnotation>|null} [frameLabelAnnotations] VideoAnnotationResults frameLabelAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IFaceDetectionAnnotation>|null} [faceDetectionAnnotations] VideoAnnotationResults faceDetectionAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IVideoSegment>|null} [shotAnnotations] VideoAnnotationResults shotAnnotations
                         * @property {google.cloud.videointelligence.v1p3beta1.IExplicitContentAnnotation|null} [explicitAnnotation] VideoAnnotationResults explicitAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ISpeechTranscription>|null} [speechTranscriptions] VideoAnnotationResults speechTranscriptions
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ITextAnnotation>|null} [textAnnotations] VideoAnnotationResults textAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IObjectTrackingAnnotation>|null} [objectAnnotations] VideoAnnotationResults objectAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ILogoRecognitionAnnotation>|null} [logoRecognitionAnnotations] VideoAnnotationResults logoRecognitionAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IPersonDetectionAnnotation>|null} [personDetectionAnnotations] VideoAnnotationResults personDetectionAnnotations
                         * @property {google.cloud.videointelligence.v1p3beta1.ICelebrityRecognitionAnnotation|null} [celebrityRecognitionAnnotations] VideoAnnotationResults celebrityRecognitionAnnotations
                         * @property {google.rpc.IStatus|null} [error] VideoAnnotationResults error
                         */
    
                        /**
                         * Constructs a new VideoAnnotationResults.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a VideoAnnotationResults.
                         * @implements IVideoAnnotationResults
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoAnnotationResults=} [properties] Properties to set
                         */
                        function VideoAnnotationResults(properties) {
                            this.segmentLabelAnnotations = [];
                            this.segmentPresenceLabelAnnotations = [];
                            this.shotLabelAnnotations = [];
                            this.shotPresenceLabelAnnotations = [];
                            this.frameLabelAnnotations = [];
                            this.faceDetectionAnnotations = [];
                            this.shotAnnotations = [];
                            this.speechTranscriptions = [];
                            this.textAnnotations = [];
                            this.objectAnnotations = [];
                            this.logoRecognitionAnnotations = [];
                            this.personDetectionAnnotations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoAnnotationResults inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.inputUri = "";
    
                        /**
                         * VideoAnnotationResults segment.
                         * @member {google.cloud.videointelligence.v1p3beta1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.segment = null;
    
                        /**
                         * VideoAnnotationResults segmentLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ILabelAnnotation>} segmentLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.segmentLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults segmentPresenceLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ILabelAnnotation>} segmentPresenceLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.segmentPresenceLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults shotLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ILabelAnnotation>} shotLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.shotLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults shotPresenceLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ILabelAnnotation>} shotPresenceLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.shotPresenceLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults frameLabelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ILabelAnnotation>} frameLabelAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.frameLabelAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults faceDetectionAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IFaceDetectionAnnotation>} faceDetectionAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.faceDetectionAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults shotAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IVideoSegment>} shotAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.shotAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults explicitAnnotation.
                         * @member {google.cloud.videointelligence.v1p3beta1.IExplicitContentAnnotation|null|undefined} explicitAnnotation
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.explicitAnnotation = null;
    
                        /**
                         * VideoAnnotationResults speechTranscriptions.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ISpeechTranscription>} speechTranscriptions
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.speechTranscriptions = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults textAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ITextAnnotation>} textAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.textAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults objectAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IObjectTrackingAnnotation>} objectAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.objectAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults logoRecognitionAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ILogoRecognitionAnnotation>} logoRecognitionAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.logoRecognitionAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults personDetectionAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IPersonDetectionAnnotation>} personDetectionAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.personDetectionAnnotations = $util.emptyArray;
    
                        /**
                         * VideoAnnotationResults celebrityRecognitionAnnotations.
                         * @member {google.cloud.videointelligence.v1p3beta1.ICelebrityRecognitionAnnotation|null|undefined} celebrityRecognitionAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.celebrityRecognitionAnnotations = null;
    
                        /**
                         * VideoAnnotationResults error.
                         * @member {google.rpc.IStatus|null|undefined} error
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         */
                        VideoAnnotationResults.prototype.error = null;
    
                        /**
                         * Creates a new VideoAnnotationResults instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoAnnotationResults=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults} VideoAnnotationResults instance
                         */
                        VideoAnnotationResults.create = function create(properties) {
                            return new VideoAnnotationResults(properties);
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationResults message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoAnnotationResults} message VideoAnnotationResults message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationResults.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.segmentLabelAnnotations != null && message.segmentLabelAnnotations.length)
                                for (var i = 0; i < message.segmentLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.encode(message.segmentLabelAnnotations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.shotLabelAnnotations != null && message.shotLabelAnnotations.length)
                                for (var i = 0; i < message.shotLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.encode(message.shotLabelAnnotations[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.frameLabelAnnotations != null && message.frameLabelAnnotations.length)
                                for (var i = 0; i < message.frameLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.encode(message.frameLabelAnnotations[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.shotAnnotations != null && message.shotAnnotations.length)
                                for (var i = 0; i < message.shotAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.encode(message.shotAnnotations[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.explicitAnnotation != null && Object.hasOwnProperty.call(message, "explicitAnnotation"))
                                $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.encode(message.explicitAnnotation, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                                $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.encode(message.segment, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            if (message.speechTranscriptions != null && message.speechTranscriptions.length)
                                for (var i = 0; i < message.speechTranscriptions.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscription.encode(message.speechTranscriptions[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            if (message.textAnnotations != null && message.textAnnotations.length)
                                for (var i = 0; i < message.textAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.TextAnnotation.encode(message.textAnnotations[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                            if (message.faceDetectionAnnotations != null && message.faceDetectionAnnotations.length)
                                for (var i = 0; i < message.faceDetectionAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation.encode(message.faceDetectionAnnotations[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            if (message.objectAnnotations != null && message.objectAnnotations.length)
                                for (var i = 0; i < message.objectAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.encode(message.objectAnnotations[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                            if (message.logoRecognitionAnnotations != null && message.logoRecognitionAnnotations.length)
                                for (var i = 0; i < message.logoRecognitionAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation.encode(message.logoRecognitionAnnotations[i], writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                            if (message.personDetectionAnnotations != null && message.personDetectionAnnotations.length)
                                for (var i = 0; i < message.personDetectionAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation.encode(message.personDetectionAnnotations[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                            if (message.celebrityRecognitionAnnotations != null && Object.hasOwnProperty.call(message, "celebrityRecognitionAnnotations"))
                                $root.google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation.encode(message.celebrityRecognitionAnnotations, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                            if (message.segmentPresenceLabelAnnotations != null && message.segmentPresenceLabelAnnotations.length)
                                for (var i = 0; i < message.segmentPresenceLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.encode(message.segmentPresenceLabelAnnotations[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                            if (message.shotPresenceLabelAnnotations != null && message.shotPresenceLabelAnnotations.length)
                                for (var i = 0; i < message.shotPresenceLabelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.encode(message.shotPresenceLabelAnnotations[i], writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationResults message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoAnnotationResults} message VideoAnnotationResults message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationResults.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoAnnotationResults message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults} VideoAnnotationResults
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationResults.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 10: {
                                        message.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.segmentLabelAnnotations && message.segmentLabelAnnotations.length))
                                            message.segmentLabelAnnotations = [];
                                        message.segmentLabelAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 23: {
                                        if (!(message.segmentPresenceLabelAnnotations && message.segmentPresenceLabelAnnotations.length))
                                            message.segmentPresenceLabelAnnotations = [];
                                        message.segmentPresenceLabelAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.shotLabelAnnotations && message.shotLabelAnnotations.length))
                                            message.shotLabelAnnotations = [];
                                        message.shotLabelAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 24: {
                                        if (!(message.shotPresenceLabelAnnotations && message.shotPresenceLabelAnnotations.length))
                                            message.shotPresenceLabelAnnotations = [];
                                        message.shotPresenceLabelAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (!(message.frameLabelAnnotations && message.frameLabelAnnotations.length))
                                            message.frameLabelAnnotations = [];
                                        message.frameLabelAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 13: {
                                        if (!(message.faceDetectionAnnotations && message.faceDetectionAnnotations.length))
                                            message.faceDetectionAnnotations = [];
                                        message.faceDetectionAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 6: {
                                        if (!(message.shotAnnotations && message.shotAnnotations.length))
                                            message.shotAnnotations = [];
                                        message.shotAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 7: {
                                        message.explicitAnnotation = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        if (!(message.speechTranscriptions && message.speechTranscriptions.length))
                                            message.speechTranscriptions = [];
                                        message.speechTranscriptions.push($root.google.cloud.videointelligence.v1p3beta1.SpeechTranscription.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 12: {
                                        if (!(message.textAnnotations && message.textAnnotations.length))
                                            message.textAnnotations = [];
                                        message.textAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.TextAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 14: {
                                        if (!(message.objectAnnotations && message.objectAnnotations.length))
                                            message.objectAnnotations = [];
                                        message.objectAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 19: {
                                        if (!(message.logoRecognitionAnnotations && message.logoRecognitionAnnotations.length))
                                            message.logoRecognitionAnnotations = [];
                                        message.logoRecognitionAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 20: {
                                        if (!(message.personDetectionAnnotations && message.personDetectionAnnotations.length))
                                            message.personDetectionAnnotations = [];
                                        message.personDetectionAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 21: {
                                        message.celebrityRecognitionAnnotations = $root.google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoAnnotationResults message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults} VideoAnnotationResults
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationResults.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoAnnotationResults message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoAnnotationResults.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            if (message.segmentLabelAnnotations != null && message.hasOwnProperty("segmentLabelAnnotations")) {
                                if (!Array.isArray(message.segmentLabelAnnotations))
                                    return "segmentLabelAnnotations: array expected";
                                for (var i = 0; i < message.segmentLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.verify(message.segmentLabelAnnotations[i]);
                                    if (error)
                                        return "segmentLabelAnnotations." + error;
                                }
                            }
                            if (message.segmentPresenceLabelAnnotations != null && message.hasOwnProperty("segmentPresenceLabelAnnotations")) {
                                if (!Array.isArray(message.segmentPresenceLabelAnnotations))
                                    return "segmentPresenceLabelAnnotations: array expected";
                                for (var i = 0; i < message.segmentPresenceLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.verify(message.segmentPresenceLabelAnnotations[i]);
                                    if (error)
                                        return "segmentPresenceLabelAnnotations." + error;
                                }
                            }
                            if (message.shotLabelAnnotations != null && message.hasOwnProperty("shotLabelAnnotations")) {
                                if (!Array.isArray(message.shotLabelAnnotations))
                                    return "shotLabelAnnotations: array expected";
                                for (var i = 0; i < message.shotLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.verify(message.shotLabelAnnotations[i]);
                                    if (error)
                                        return "shotLabelAnnotations." + error;
                                }
                            }
                            if (message.shotPresenceLabelAnnotations != null && message.hasOwnProperty("shotPresenceLabelAnnotations")) {
                                if (!Array.isArray(message.shotPresenceLabelAnnotations))
                                    return "shotPresenceLabelAnnotations: array expected";
                                for (var i = 0; i < message.shotPresenceLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.verify(message.shotPresenceLabelAnnotations[i]);
                                    if (error)
                                        return "shotPresenceLabelAnnotations." + error;
                                }
                            }
                            if (message.frameLabelAnnotations != null && message.hasOwnProperty("frameLabelAnnotations")) {
                                if (!Array.isArray(message.frameLabelAnnotations))
                                    return "frameLabelAnnotations: array expected";
                                for (var i = 0; i < message.frameLabelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.verify(message.frameLabelAnnotations[i]);
                                    if (error)
                                        return "frameLabelAnnotations." + error;
                                }
                            }
                            if (message.faceDetectionAnnotations != null && message.hasOwnProperty("faceDetectionAnnotations")) {
                                if (!Array.isArray(message.faceDetectionAnnotations))
                                    return "faceDetectionAnnotations: array expected";
                                for (var i = 0; i < message.faceDetectionAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation.verify(message.faceDetectionAnnotations[i]);
                                    if (error)
                                        return "faceDetectionAnnotations." + error;
                                }
                            }
                            if (message.shotAnnotations != null && message.hasOwnProperty("shotAnnotations")) {
                                if (!Array.isArray(message.shotAnnotations))
                                    return "shotAnnotations: array expected";
                                for (var i = 0; i < message.shotAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.verify(message.shotAnnotations[i]);
                                    if (error)
                                        return "shotAnnotations." + error;
                                }
                            }
                            if (message.explicitAnnotation != null && message.hasOwnProperty("explicitAnnotation")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.verify(message.explicitAnnotation);
                                if (error)
                                    return "explicitAnnotation." + error;
                            }
                            if (message.speechTranscriptions != null && message.hasOwnProperty("speechTranscriptions")) {
                                if (!Array.isArray(message.speechTranscriptions))
                                    return "speechTranscriptions: array expected";
                                for (var i = 0; i < message.speechTranscriptions.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscription.verify(message.speechTranscriptions[i]);
                                    if (error)
                                        return "speechTranscriptions." + error;
                                }
                            }
                            if (message.textAnnotations != null && message.hasOwnProperty("textAnnotations")) {
                                if (!Array.isArray(message.textAnnotations))
                                    return "textAnnotations: array expected";
                                for (var i = 0; i < message.textAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.TextAnnotation.verify(message.textAnnotations[i]);
                                    if (error)
                                        return "textAnnotations." + error;
                                }
                            }
                            if (message.objectAnnotations != null && message.hasOwnProperty("objectAnnotations")) {
                                if (!Array.isArray(message.objectAnnotations))
                                    return "objectAnnotations: array expected";
                                for (var i = 0; i < message.objectAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.verify(message.objectAnnotations[i]);
                                    if (error)
                                        return "objectAnnotations." + error;
                                }
                            }
                            if (message.logoRecognitionAnnotations != null && message.hasOwnProperty("logoRecognitionAnnotations")) {
                                if (!Array.isArray(message.logoRecognitionAnnotations))
                                    return "logoRecognitionAnnotations: array expected";
                                for (var i = 0; i < message.logoRecognitionAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation.verify(message.logoRecognitionAnnotations[i]);
                                    if (error)
                                        return "logoRecognitionAnnotations." + error;
                                }
                            }
                            if (message.personDetectionAnnotations != null && message.hasOwnProperty("personDetectionAnnotations")) {
                                if (!Array.isArray(message.personDetectionAnnotations))
                                    return "personDetectionAnnotations: array expected";
                                for (var i = 0; i < message.personDetectionAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation.verify(message.personDetectionAnnotations[i]);
                                    if (error)
                                        return "personDetectionAnnotations." + error;
                                }
                            }
                            if (message.celebrityRecognitionAnnotations != null && message.hasOwnProperty("celebrityRecognitionAnnotations")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation.verify(message.celebrityRecognitionAnnotations);
                                if (error)
                                    return "celebrityRecognitionAnnotations." + error;
                            }
                            if (message.error != null && message.hasOwnProperty("error")) {
                                var error = $root.google.rpc.Status.verify(message.error);
                                if (error)
                                    return "error." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoAnnotationResults message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults} VideoAnnotationResults
                         */
                        VideoAnnotationResults.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.segmentLabelAnnotations) {
                                if (!Array.isArray(object.segmentLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.segmentLabelAnnotations: array expected");
                                message.segmentLabelAnnotations = [];
                                for (var i = 0; i < object.segmentLabelAnnotations.length; ++i) {
                                    if (typeof object.segmentLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.segmentLabelAnnotations: object expected");
                                    message.segmentLabelAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.fromObject(object.segmentLabelAnnotations[i]);
                                }
                            }
                            if (object.segmentPresenceLabelAnnotations) {
                                if (!Array.isArray(object.segmentPresenceLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.segmentPresenceLabelAnnotations: array expected");
                                message.segmentPresenceLabelAnnotations = [];
                                for (var i = 0; i < object.segmentPresenceLabelAnnotations.length; ++i) {
                                    if (typeof object.segmentPresenceLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.segmentPresenceLabelAnnotations: object expected");
                                    message.segmentPresenceLabelAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.fromObject(object.segmentPresenceLabelAnnotations[i]);
                                }
                            }
                            if (object.shotLabelAnnotations) {
                                if (!Array.isArray(object.shotLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.shotLabelAnnotations: array expected");
                                message.shotLabelAnnotations = [];
                                for (var i = 0; i < object.shotLabelAnnotations.length; ++i) {
                                    if (typeof object.shotLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.shotLabelAnnotations: object expected");
                                    message.shotLabelAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.fromObject(object.shotLabelAnnotations[i]);
                                }
                            }
                            if (object.shotPresenceLabelAnnotations) {
                                if (!Array.isArray(object.shotPresenceLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.shotPresenceLabelAnnotations: array expected");
                                message.shotPresenceLabelAnnotations = [];
                                for (var i = 0; i < object.shotPresenceLabelAnnotations.length; ++i) {
                                    if (typeof object.shotPresenceLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.shotPresenceLabelAnnotations: object expected");
                                    message.shotPresenceLabelAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.fromObject(object.shotPresenceLabelAnnotations[i]);
                                }
                            }
                            if (object.frameLabelAnnotations) {
                                if (!Array.isArray(object.frameLabelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.frameLabelAnnotations: array expected");
                                message.frameLabelAnnotations = [];
                                for (var i = 0; i < object.frameLabelAnnotations.length; ++i) {
                                    if (typeof object.frameLabelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.frameLabelAnnotations: object expected");
                                    message.frameLabelAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.fromObject(object.frameLabelAnnotations[i]);
                                }
                            }
                            if (object.faceDetectionAnnotations) {
                                if (!Array.isArray(object.faceDetectionAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.faceDetectionAnnotations: array expected");
                                message.faceDetectionAnnotations = [];
                                for (var i = 0; i < object.faceDetectionAnnotations.length; ++i) {
                                    if (typeof object.faceDetectionAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.faceDetectionAnnotations: object expected");
                                    message.faceDetectionAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation.fromObject(object.faceDetectionAnnotations[i]);
                                }
                            }
                            if (object.shotAnnotations) {
                                if (!Array.isArray(object.shotAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.shotAnnotations: array expected");
                                message.shotAnnotations = [];
                                for (var i = 0; i < object.shotAnnotations.length; ++i) {
                                    if (typeof object.shotAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.shotAnnotations: object expected");
                                    message.shotAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.fromObject(object.shotAnnotations[i]);
                                }
                            }
                            if (object.explicitAnnotation != null) {
                                if (typeof object.explicitAnnotation !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.explicitAnnotation: object expected");
                                message.explicitAnnotation = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.fromObject(object.explicitAnnotation);
                            }
                            if (object.speechTranscriptions) {
                                if (!Array.isArray(object.speechTranscriptions))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.speechTranscriptions: array expected");
                                message.speechTranscriptions = [];
                                for (var i = 0; i < object.speechTranscriptions.length; ++i) {
                                    if (typeof object.speechTranscriptions[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.speechTranscriptions: object expected");
                                    message.speechTranscriptions[i] = $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscription.fromObject(object.speechTranscriptions[i]);
                                }
                            }
                            if (object.textAnnotations) {
                                if (!Array.isArray(object.textAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.textAnnotations: array expected");
                                message.textAnnotations = [];
                                for (var i = 0; i < object.textAnnotations.length; ++i) {
                                    if (typeof object.textAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.textAnnotations: object expected");
                                    message.textAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.TextAnnotation.fromObject(object.textAnnotations[i]);
                                }
                            }
                            if (object.objectAnnotations) {
                                if (!Array.isArray(object.objectAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.objectAnnotations: array expected");
                                message.objectAnnotations = [];
                                for (var i = 0; i < object.objectAnnotations.length; ++i) {
                                    if (typeof object.objectAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.objectAnnotations: object expected");
                                    message.objectAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.fromObject(object.objectAnnotations[i]);
                                }
                            }
                            if (object.logoRecognitionAnnotations) {
                                if (!Array.isArray(object.logoRecognitionAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.logoRecognitionAnnotations: array expected");
                                message.logoRecognitionAnnotations = [];
                                for (var i = 0; i < object.logoRecognitionAnnotations.length; ++i) {
                                    if (typeof object.logoRecognitionAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.logoRecognitionAnnotations: object expected");
                                    message.logoRecognitionAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation.fromObject(object.logoRecognitionAnnotations[i]);
                                }
                            }
                            if (object.personDetectionAnnotations) {
                                if (!Array.isArray(object.personDetectionAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.personDetectionAnnotations: array expected");
                                message.personDetectionAnnotations = [];
                                for (var i = 0; i < object.personDetectionAnnotations.length; ++i) {
                                    if (typeof object.personDetectionAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.personDetectionAnnotations: object expected");
                                    message.personDetectionAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation.fromObject(object.personDetectionAnnotations[i]);
                                }
                            }
                            if (object.celebrityRecognitionAnnotations != null) {
                                if (typeof object.celebrityRecognitionAnnotations !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.celebrityRecognitionAnnotations: object expected");
                                message.celebrityRecognitionAnnotations = $root.google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation.fromObject(object.celebrityRecognitionAnnotations);
                            }
                            if (object.error != null) {
                                if (typeof object.error !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.error: object expected");
                                message.error = $root.google.rpc.Status.fromObject(object.error);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoAnnotationResults message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults} message VideoAnnotationResults
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoAnnotationResults.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.segmentLabelAnnotations = [];
                                object.shotLabelAnnotations = [];
                                object.frameLabelAnnotations = [];
                                object.shotAnnotations = [];
                                object.speechTranscriptions = [];
                                object.textAnnotations = [];
                                object.faceDetectionAnnotations = [];
                                object.objectAnnotations = [];
                                object.logoRecognitionAnnotations = [];
                                object.personDetectionAnnotations = [];
                                object.segmentPresenceLabelAnnotations = [];
                                object.shotPresenceLabelAnnotations = [];
                            }
                            if (options.defaults) {
                                object.inputUri = "";
                                object.explicitAnnotation = null;
                                object.error = null;
                                object.segment = null;
                                object.celebrityRecognitionAnnotations = null;
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.segmentLabelAnnotations && message.segmentLabelAnnotations.length) {
                                object.segmentLabelAnnotations = [];
                                for (var j = 0; j < message.segmentLabelAnnotations.length; ++j)
                                    object.segmentLabelAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.toObject(message.segmentLabelAnnotations[j], options);
                            }
                            if (message.shotLabelAnnotations && message.shotLabelAnnotations.length) {
                                object.shotLabelAnnotations = [];
                                for (var j = 0; j < message.shotLabelAnnotations.length; ++j)
                                    object.shotLabelAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.toObject(message.shotLabelAnnotations[j], options);
                            }
                            if (message.frameLabelAnnotations && message.frameLabelAnnotations.length) {
                                object.frameLabelAnnotations = [];
                                for (var j = 0; j < message.frameLabelAnnotations.length; ++j)
                                    object.frameLabelAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.toObject(message.frameLabelAnnotations[j], options);
                            }
                            if (message.shotAnnotations && message.shotAnnotations.length) {
                                object.shotAnnotations = [];
                                for (var j = 0; j < message.shotAnnotations.length; ++j)
                                    object.shotAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.toObject(message.shotAnnotations[j], options);
                            }
                            if (message.explicitAnnotation != null && message.hasOwnProperty("explicitAnnotation"))
                                object.explicitAnnotation = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.toObject(message.explicitAnnotation, options);
                            if (message.error != null && message.hasOwnProperty("error"))
                                object.error = $root.google.rpc.Status.toObject(message.error, options);
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.toObject(message.segment, options);
                            if (message.speechTranscriptions && message.speechTranscriptions.length) {
                                object.speechTranscriptions = [];
                                for (var j = 0; j < message.speechTranscriptions.length; ++j)
                                    object.speechTranscriptions[j] = $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscription.toObject(message.speechTranscriptions[j], options);
                            }
                            if (message.textAnnotations && message.textAnnotations.length) {
                                object.textAnnotations = [];
                                for (var j = 0; j < message.textAnnotations.length; ++j)
                                    object.textAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.TextAnnotation.toObject(message.textAnnotations[j], options);
                            }
                            if (message.faceDetectionAnnotations && message.faceDetectionAnnotations.length) {
                                object.faceDetectionAnnotations = [];
                                for (var j = 0; j < message.faceDetectionAnnotations.length; ++j)
                                    object.faceDetectionAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.FaceDetectionAnnotation.toObject(message.faceDetectionAnnotations[j], options);
                            }
                            if (message.objectAnnotations && message.objectAnnotations.length) {
                                object.objectAnnotations = [];
                                for (var j = 0; j < message.objectAnnotations.length; ++j)
                                    object.objectAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.toObject(message.objectAnnotations[j], options);
                            }
                            if (message.logoRecognitionAnnotations && message.logoRecognitionAnnotations.length) {
                                object.logoRecognitionAnnotations = [];
                                for (var j = 0; j < message.logoRecognitionAnnotations.length; ++j)
                                    object.logoRecognitionAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation.toObject(message.logoRecognitionAnnotations[j], options);
                            }
                            if (message.personDetectionAnnotations && message.personDetectionAnnotations.length) {
                                object.personDetectionAnnotations = [];
                                for (var j = 0; j < message.personDetectionAnnotations.length; ++j)
                                    object.personDetectionAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.PersonDetectionAnnotation.toObject(message.personDetectionAnnotations[j], options);
                            }
                            if (message.celebrityRecognitionAnnotations != null && message.hasOwnProperty("celebrityRecognitionAnnotations"))
                                object.celebrityRecognitionAnnotations = $root.google.cloud.videointelligence.v1p3beta1.CelebrityRecognitionAnnotation.toObject(message.celebrityRecognitionAnnotations, options);
                            if (message.segmentPresenceLabelAnnotations && message.segmentPresenceLabelAnnotations.length) {
                                object.segmentPresenceLabelAnnotations = [];
                                for (var j = 0; j < message.segmentPresenceLabelAnnotations.length; ++j)
                                    object.segmentPresenceLabelAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.toObject(message.segmentPresenceLabelAnnotations[j], options);
                            }
                            if (message.shotPresenceLabelAnnotations && message.shotPresenceLabelAnnotations.length) {
                                object.shotPresenceLabelAnnotations = [];
                                for (var j = 0; j < message.shotPresenceLabelAnnotations.length; ++j)
                                    object.shotPresenceLabelAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.toObject(message.shotPresenceLabelAnnotations[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this VideoAnnotationResults to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoAnnotationResults.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoAnnotationResults
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoAnnotationResults.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults";
                        };
    
                        return VideoAnnotationResults;
                    })();
    
                    v1p3beta1.AnnotateVideoResponse = (function() {
    
                        /**
                         * Properties of an AnnotateVideoResponse.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IAnnotateVideoResponse
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IVideoAnnotationResults>|null} [annotationResults] AnnotateVideoResponse annotationResults
                         */
    
                        /**
                         * Constructs a new AnnotateVideoResponse.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents an AnnotateVideoResponse.
                         * @implements IAnnotateVideoResponse
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoResponse=} [properties] Properties to set
                         */
                        function AnnotateVideoResponse(properties) {
                            this.annotationResults = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoResponse annotationResults.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IVideoAnnotationResults>} annotationResults
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse
                         * @instance
                         */
                        AnnotateVideoResponse.prototype.annotationResults = $util.emptyArray;
    
                        /**
                         * Creates a new AnnotateVideoResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoResponse=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse} AnnotateVideoResponse instance
                         */
                        AnnotateVideoResponse.create = function create(properties) {
                            return new AnnotateVideoResponse(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoResponse message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoResponse} message AnnotateVideoResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.annotationResults != null && message.annotationResults.length)
                                for (var i = 0; i < message.annotationResults.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.encode(message.annotationResults[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoResponse message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoResponse} message AnnotateVideoResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse} AnnotateVideoResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.annotationResults && message.annotationResults.length))
                                            message.annotationResults = [];
                                        message.annotationResults.push($root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse} AnnotateVideoResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoResponse message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.annotationResults != null && message.hasOwnProperty("annotationResults")) {
                                if (!Array.isArray(message.annotationResults))
                                    return "annotationResults: array expected";
                                for (var i = 0; i < message.annotationResults.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.verify(message.annotationResults[i]);
                                    if (error)
                                        return "annotationResults." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse} AnnotateVideoResponse
                         */
                        AnnotateVideoResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse();
                            if (object.annotationResults) {
                                if (!Array.isArray(object.annotationResults))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse.annotationResults: array expected");
                                message.annotationResults = [];
                                for (var i = 0; i < object.annotationResults.length; ++i) {
                                    if (typeof object.annotationResults[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse.annotationResults: object expected");
                                    message.annotationResults[i] = $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.fromObject(object.annotationResults[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse} message AnnotateVideoResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.annotationResults = [];
                            if (message.annotationResults && message.annotationResults.length) {
                                object.annotationResults = [];
                                for (var j = 0; j < message.annotationResults.length; ++j)
                                    object.annotationResults[j] = $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationResults.toObject(message.annotationResults[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.AnnotateVideoResponse";
                        };
    
                        return AnnotateVideoResponse;
                    })();
    
                    v1p3beta1.VideoAnnotationProgress = (function() {
    
                        /**
                         * Properties of a VideoAnnotationProgress.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IVideoAnnotationProgress
                         * @property {string|null} [inputUri] VideoAnnotationProgress inputUri
                         * @property {number|null} [progressPercent] VideoAnnotationProgress progressPercent
                         * @property {google.protobuf.ITimestamp|null} [startTime] VideoAnnotationProgress startTime
                         * @property {google.protobuf.ITimestamp|null} [updateTime] VideoAnnotationProgress updateTime
                         * @property {google.cloud.videointelligence.v1p3beta1.Feature|null} [feature] VideoAnnotationProgress feature
                         * @property {google.cloud.videointelligence.v1p3beta1.IVideoSegment|null} [segment] VideoAnnotationProgress segment
                         */
    
                        /**
                         * Constructs a new VideoAnnotationProgress.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a VideoAnnotationProgress.
                         * @implements IVideoAnnotationProgress
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoAnnotationProgress=} [properties] Properties to set
                         */
                        function VideoAnnotationProgress(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * VideoAnnotationProgress inputUri.
                         * @member {string} inputUri
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.inputUri = "";
    
                        /**
                         * VideoAnnotationProgress progressPercent.
                         * @member {number} progressPercent
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.progressPercent = 0;
    
                        /**
                         * VideoAnnotationProgress startTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} startTime
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.startTime = null;
    
                        /**
                         * VideoAnnotationProgress updateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.updateTime = null;
    
                        /**
                         * VideoAnnotationProgress feature.
                         * @member {google.cloud.videointelligence.v1p3beta1.Feature} feature
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.feature = 0;
    
                        /**
                         * VideoAnnotationProgress segment.
                         * @member {google.cloud.videointelligence.v1p3beta1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @instance
                         */
                        VideoAnnotationProgress.prototype.segment = null;
    
                        /**
                         * Creates a new VideoAnnotationProgress instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoAnnotationProgress=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress} VideoAnnotationProgress instance
                         */
                        VideoAnnotationProgress.create = function create(properties) {
                            return new VideoAnnotationProgress(properties);
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationProgress message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoAnnotationProgress} message VideoAnnotationProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationProgress.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.inputUri != null && Object.hasOwnProperty.call(message, "inputUri"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.inputUri);
                            if (message.progressPercent != null && Object.hasOwnProperty.call(message, "progressPercent"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.progressPercent);
                            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                                $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.feature != null && Object.hasOwnProperty.call(message, "feature"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.feature);
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.encode(message.segment, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified VideoAnnotationProgress message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IVideoAnnotationProgress} message VideoAnnotationProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoAnnotationProgress.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a VideoAnnotationProgress message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress} VideoAnnotationProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationProgress.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.inputUri = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.progressPercent = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.feature = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        message.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a VideoAnnotationProgress message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress} VideoAnnotationProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoAnnotationProgress.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a VideoAnnotationProgress message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoAnnotationProgress.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                if (!$util.isString(message.inputUri))
                                    return "inputUri: string expected";
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                if (!$util.isInteger(message.progressPercent))
                                    return "progressPercent: integer expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                                if (error)
                                    return "updateTime." + error;
                            }
                            if (message.feature != null && message.hasOwnProperty("feature"))
                                switch (message.feature) {
                                default:
                                    return "feature: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 6:
                                case 7:
                                case 9:
                                case 12:
                                case 13:
                                case 14:
                                    break;
                                }
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a VideoAnnotationProgress message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress} VideoAnnotationProgress
                         */
                        VideoAnnotationProgress.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress();
                            if (object.inputUri != null)
                                message.inputUri = String(object.inputUri);
                            if (object.progressPercent != null)
                                message.progressPercent = object.progressPercent | 0;
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress.startTime: object expected");
                                message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                            }
                            if (object.updateTime != null) {
                                if (typeof object.updateTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress.updateTime: object expected");
                                message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                            }
                            switch (object.feature) {
                            default:
                                if (typeof object.feature === "number") {
                                    message.feature = object.feature;
                                    break;
                                }
                                break;
                            case "FEATURE_UNSPECIFIED":
                            case 0:
                                message.feature = 0;
                                break;
                            case "LABEL_DETECTION":
                            case 1:
                                message.feature = 1;
                                break;
                            case "SHOT_CHANGE_DETECTION":
                            case 2:
                                message.feature = 2;
                                break;
                            case "EXPLICIT_CONTENT_DETECTION":
                            case 3:
                                message.feature = 3;
                                break;
                            case "FACE_DETECTION":
                            case 4:
                                message.feature = 4;
                                break;
                            case "SPEECH_TRANSCRIPTION":
                            case 6:
                                message.feature = 6;
                                break;
                            case "TEXT_DETECTION":
                            case 7:
                                message.feature = 7;
                                break;
                            case "OBJECT_TRACKING":
                            case 9:
                                message.feature = 9;
                                break;
                            case "LOGO_RECOGNITION":
                            case 12:
                                message.feature = 12;
                                break;
                            case "CELEBRITY_RECOGNITION":
                            case 13:
                                message.feature = 13;
                                break;
                            case "PERSON_DETECTION":
                            case 14:
                                message.feature = 14;
                                break;
                            }
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.fromObject(object.segment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a VideoAnnotationProgress message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress} message VideoAnnotationProgress
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoAnnotationProgress.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.inputUri = "";
                                object.progressPercent = 0;
                                object.startTime = null;
                                object.updateTime = null;
                                object.feature = options.enums === String ? "FEATURE_UNSPECIFIED" : 0;
                                object.segment = null;
                            }
                            if (message.inputUri != null && message.hasOwnProperty("inputUri"))
                                object.inputUri = message.inputUri;
                            if (message.progressPercent != null && message.hasOwnProperty("progressPercent"))
                                object.progressPercent = message.progressPercent;
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                            if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                                object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                            if (message.feature != null && message.hasOwnProperty("feature"))
                                object.feature = options.enums === String ? $root.google.cloud.videointelligence.v1p3beta1.Feature[message.feature] === undefined ? message.feature : $root.google.cloud.videointelligence.v1p3beta1.Feature[message.feature] : message.feature;
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.toObject(message.segment, options);
                            return object;
                        };
    
                        /**
                         * Converts this VideoAnnotationProgress to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoAnnotationProgress.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for VideoAnnotationProgress
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoAnnotationProgress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress";
                        };
    
                        return VideoAnnotationProgress;
                    })();
    
                    v1p3beta1.AnnotateVideoProgress = (function() {
    
                        /**
                         * Properties of an AnnotateVideoProgress.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IAnnotateVideoProgress
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IVideoAnnotationProgress>|null} [annotationProgress] AnnotateVideoProgress annotationProgress
                         */
    
                        /**
                         * Constructs a new AnnotateVideoProgress.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents an AnnotateVideoProgress.
                         * @implements IAnnotateVideoProgress
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoProgress=} [properties] Properties to set
                         */
                        function AnnotateVideoProgress(properties) {
                            this.annotationProgress = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AnnotateVideoProgress annotationProgress.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IVideoAnnotationProgress>} annotationProgress
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress
                         * @instance
                         */
                        AnnotateVideoProgress.prototype.annotationProgress = $util.emptyArray;
    
                        /**
                         * Creates a new AnnotateVideoProgress instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoProgress=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress} AnnotateVideoProgress instance
                         */
                        AnnotateVideoProgress.create = function create(properties) {
                            return new AnnotateVideoProgress(properties);
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoProgress message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoProgress} message AnnotateVideoProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoProgress.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.annotationProgress != null && message.annotationProgress.length)
                                for (var i = 0; i < message.annotationProgress.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress.encode(message.annotationProgress[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AnnotateVideoProgress message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IAnnotateVideoProgress} message AnnotateVideoProgress message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AnnotateVideoProgress.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AnnotateVideoProgress message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress} AnnotateVideoProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoProgress.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.annotationProgress && message.annotationProgress.length))
                                            message.annotationProgress = [];
                                        message.annotationProgress.push($root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AnnotateVideoProgress message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress} AnnotateVideoProgress
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AnnotateVideoProgress.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AnnotateVideoProgress message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AnnotateVideoProgress.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.annotationProgress != null && message.hasOwnProperty("annotationProgress")) {
                                if (!Array.isArray(message.annotationProgress))
                                    return "annotationProgress: array expected";
                                for (var i = 0; i < message.annotationProgress.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress.verify(message.annotationProgress[i]);
                                    if (error)
                                        return "annotationProgress." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AnnotateVideoProgress message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress} AnnotateVideoProgress
                         */
                        AnnotateVideoProgress.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress();
                            if (object.annotationProgress) {
                                if (!Array.isArray(object.annotationProgress))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress.annotationProgress: array expected");
                                message.annotationProgress = [];
                                for (var i = 0; i < object.annotationProgress.length; ++i) {
                                    if (typeof object.annotationProgress[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress.annotationProgress: object expected");
                                    message.annotationProgress[i] = $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress.fromObject(object.annotationProgress[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AnnotateVideoProgress message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress} message AnnotateVideoProgress
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AnnotateVideoProgress.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.annotationProgress = [];
                            if (message.annotationProgress && message.annotationProgress.length) {
                                object.annotationProgress = [];
                                for (var j = 0; j < message.annotationProgress.length; ++j)
                                    object.annotationProgress[j] = $root.google.cloud.videointelligence.v1p3beta1.VideoAnnotationProgress.toObject(message.annotationProgress[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this AnnotateVideoProgress to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AnnotateVideoProgress.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AnnotateVideoProgress
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AnnotateVideoProgress.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.AnnotateVideoProgress";
                        };
    
                        return AnnotateVideoProgress;
                    })();
    
                    v1p3beta1.SpeechTranscriptionConfig = (function() {
    
                        /**
                         * Properties of a SpeechTranscriptionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ISpeechTranscriptionConfig
                         * @property {string|null} [languageCode] SpeechTranscriptionConfig languageCode
                         * @property {number|null} [maxAlternatives] SpeechTranscriptionConfig maxAlternatives
                         * @property {boolean|null} [filterProfanity] SpeechTranscriptionConfig filterProfanity
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ISpeechContext>|null} [speechContexts] SpeechTranscriptionConfig speechContexts
                         * @property {boolean|null} [enableAutomaticPunctuation] SpeechTranscriptionConfig enableAutomaticPunctuation
                         * @property {Array.<number>|null} [audioTracks] SpeechTranscriptionConfig audioTracks
                         * @property {boolean|null} [enableSpeakerDiarization] SpeechTranscriptionConfig enableSpeakerDiarization
                         * @property {number|null} [diarizationSpeakerCount] SpeechTranscriptionConfig diarizationSpeakerCount
                         * @property {boolean|null} [enableWordConfidence] SpeechTranscriptionConfig enableWordConfidence
                         */
    
                        /**
                         * Constructs a new SpeechTranscriptionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a SpeechTranscriptionConfig.
                         * @implements ISpeechTranscriptionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechTranscriptionConfig=} [properties] Properties to set
                         */
                        function SpeechTranscriptionConfig(properties) {
                            this.speechContexts = [];
                            this.audioTracks = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpeechTranscriptionConfig languageCode.
                         * @member {string} languageCode
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.languageCode = "";
    
                        /**
                         * SpeechTranscriptionConfig maxAlternatives.
                         * @member {number} maxAlternatives
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.maxAlternatives = 0;
    
                        /**
                         * SpeechTranscriptionConfig filterProfanity.
                         * @member {boolean} filterProfanity
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.filterProfanity = false;
    
                        /**
                         * SpeechTranscriptionConfig speechContexts.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ISpeechContext>} speechContexts
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.speechContexts = $util.emptyArray;
    
                        /**
                         * SpeechTranscriptionConfig enableAutomaticPunctuation.
                         * @member {boolean} enableAutomaticPunctuation
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.enableAutomaticPunctuation = false;
    
                        /**
                         * SpeechTranscriptionConfig audioTracks.
                         * @member {Array.<number>} audioTracks
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.audioTracks = $util.emptyArray;
    
                        /**
                         * SpeechTranscriptionConfig enableSpeakerDiarization.
                         * @member {boolean} enableSpeakerDiarization
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.enableSpeakerDiarization = false;
    
                        /**
                         * SpeechTranscriptionConfig diarizationSpeakerCount.
                         * @member {number} diarizationSpeakerCount
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.diarizationSpeakerCount = 0;
    
                        /**
                         * SpeechTranscriptionConfig enableWordConfidence.
                         * @member {boolean} enableWordConfidence
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @instance
                         */
                        SpeechTranscriptionConfig.prototype.enableWordConfidence = false;
    
                        /**
                         * Creates a new SpeechTranscriptionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechTranscriptionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig} SpeechTranscriptionConfig instance
                         */
                        SpeechTranscriptionConfig.create = function create(properties) {
                            return new SpeechTranscriptionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified SpeechTranscriptionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechTranscriptionConfig} message SpeechTranscriptionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechTranscriptionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.languageCode);
                            if (message.maxAlternatives != null && Object.hasOwnProperty.call(message, "maxAlternatives"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.maxAlternatives);
                            if (message.filterProfanity != null && Object.hasOwnProperty.call(message, "filterProfanity"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.filterProfanity);
                            if (message.speechContexts != null && message.speechContexts.length)
                                for (var i = 0; i < message.speechContexts.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.SpeechContext.encode(message.speechContexts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.enableAutomaticPunctuation != null && Object.hasOwnProperty.call(message, "enableAutomaticPunctuation"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.enableAutomaticPunctuation);
                            if (message.audioTracks != null && message.audioTracks.length) {
                                writer.uint32(/* id 6, wireType 2 =*/50).fork();
                                for (var i = 0; i < message.audioTracks.length; ++i)
                                    writer.int32(message.audioTracks[i]);
                                writer.ldelim();
                            }
                            if (message.enableSpeakerDiarization != null && Object.hasOwnProperty.call(message, "enableSpeakerDiarization"))
                                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.enableSpeakerDiarization);
                            if (message.diarizationSpeakerCount != null && Object.hasOwnProperty.call(message, "diarizationSpeakerCount"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.diarizationSpeakerCount);
                            if (message.enableWordConfidence != null && Object.hasOwnProperty.call(message, "enableWordConfidence"))
                                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.enableWordConfidence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpeechTranscriptionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechTranscriptionConfig} message SpeechTranscriptionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechTranscriptionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpeechTranscriptionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig} SpeechTranscriptionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechTranscriptionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.languageCode = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.maxAlternatives = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.filterProfanity = reader.bool();
                                        break;
                                    }
                                case 4: {
                                        if (!(message.speechContexts && message.speechContexts.length))
                                            message.speechContexts = [];
                                        message.speechContexts.push($root.google.cloud.videointelligence.v1p3beta1.SpeechContext.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 5: {
                                        message.enableAutomaticPunctuation = reader.bool();
                                        break;
                                    }
                                case 6: {
                                        if (!(message.audioTracks && message.audioTracks.length))
                                            message.audioTracks = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.audioTracks.push(reader.int32());
                                        } else
                                            message.audioTracks.push(reader.int32());
                                        break;
                                    }
                                case 7: {
                                        message.enableSpeakerDiarization = reader.bool();
                                        break;
                                    }
                                case 8: {
                                        message.diarizationSpeakerCount = reader.int32();
                                        break;
                                    }
                                case 9: {
                                        message.enableWordConfidence = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpeechTranscriptionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig} SpeechTranscriptionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechTranscriptionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpeechTranscriptionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpeechTranscriptionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                if (!$util.isString(message.languageCode))
                                    return "languageCode: string expected";
                            if (message.maxAlternatives != null && message.hasOwnProperty("maxAlternatives"))
                                if (!$util.isInteger(message.maxAlternatives))
                                    return "maxAlternatives: integer expected";
                            if (message.filterProfanity != null && message.hasOwnProperty("filterProfanity"))
                                if (typeof message.filterProfanity !== "boolean")
                                    return "filterProfanity: boolean expected";
                            if (message.speechContexts != null && message.hasOwnProperty("speechContexts")) {
                                if (!Array.isArray(message.speechContexts))
                                    return "speechContexts: array expected";
                                for (var i = 0; i < message.speechContexts.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.SpeechContext.verify(message.speechContexts[i]);
                                    if (error)
                                        return "speechContexts." + error;
                                }
                            }
                            if (message.enableAutomaticPunctuation != null && message.hasOwnProperty("enableAutomaticPunctuation"))
                                if (typeof message.enableAutomaticPunctuation !== "boolean")
                                    return "enableAutomaticPunctuation: boolean expected";
                            if (message.audioTracks != null && message.hasOwnProperty("audioTracks")) {
                                if (!Array.isArray(message.audioTracks))
                                    return "audioTracks: array expected";
                                for (var i = 0; i < message.audioTracks.length; ++i)
                                    if (!$util.isInteger(message.audioTracks[i]))
                                        return "audioTracks: integer[] expected";
                            }
                            if (message.enableSpeakerDiarization != null && message.hasOwnProperty("enableSpeakerDiarization"))
                                if (typeof message.enableSpeakerDiarization !== "boolean")
                                    return "enableSpeakerDiarization: boolean expected";
                            if (message.diarizationSpeakerCount != null && message.hasOwnProperty("diarizationSpeakerCount"))
                                if (!$util.isInteger(message.diarizationSpeakerCount))
                                    return "diarizationSpeakerCount: integer expected";
                            if (message.enableWordConfidence != null && message.hasOwnProperty("enableWordConfidence"))
                                if (typeof message.enableWordConfidence !== "boolean")
                                    return "enableWordConfidence: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a SpeechTranscriptionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig} SpeechTranscriptionConfig
                         */
                        SpeechTranscriptionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig();
                            if (object.languageCode != null)
                                message.languageCode = String(object.languageCode);
                            if (object.maxAlternatives != null)
                                message.maxAlternatives = object.maxAlternatives | 0;
                            if (object.filterProfanity != null)
                                message.filterProfanity = Boolean(object.filterProfanity);
                            if (object.speechContexts) {
                                if (!Array.isArray(object.speechContexts))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig.speechContexts: array expected");
                                message.speechContexts = [];
                                for (var i = 0; i < object.speechContexts.length; ++i) {
                                    if (typeof object.speechContexts[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig.speechContexts: object expected");
                                    message.speechContexts[i] = $root.google.cloud.videointelligence.v1p3beta1.SpeechContext.fromObject(object.speechContexts[i]);
                                }
                            }
                            if (object.enableAutomaticPunctuation != null)
                                message.enableAutomaticPunctuation = Boolean(object.enableAutomaticPunctuation);
                            if (object.audioTracks) {
                                if (!Array.isArray(object.audioTracks))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig.audioTracks: array expected");
                                message.audioTracks = [];
                                for (var i = 0; i < object.audioTracks.length; ++i)
                                    message.audioTracks[i] = object.audioTracks[i] | 0;
                            }
                            if (object.enableSpeakerDiarization != null)
                                message.enableSpeakerDiarization = Boolean(object.enableSpeakerDiarization);
                            if (object.diarizationSpeakerCount != null)
                                message.diarizationSpeakerCount = object.diarizationSpeakerCount | 0;
                            if (object.enableWordConfidence != null)
                                message.enableWordConfidence = Boolean(object.enableWordConfidence);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpeechTranscriptionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig} message SpeechTranscriptionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpeechTranscriptionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.speechContexts = [];
                                object.audioTracks = [];
                            }
                            if (options.defaults) {
                                object.languageCode = "";
                                object.maxAlternatives = 0;
                                object.filterProfanity = false;
                                object.enableAutomaticPunctuation = false;
                                object.enableSpeakerDiarization = false;
                                object.diarizationSpeakerCount = 0;
                                object.enableWordConfidence = false;
                            }
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                object.languageCode = message.languageCode;
                            if (message.maxAlternatives != null && message.hasOwnProperty("maxAlternatives"))
                                object.maxAlternatives = message.maxAlternatives;
                            if (message.filterProfanity != null && message.hasOwnProperty("filterProfanity"))
                                object.filterProfanity = message.filterProfanity;
                            if (message.speechContexts && message.speechContexts.length) {
                                object.speechContexts = [];
                                for (var j = 0; j < message.speechContexts.length; ++j)
                                    object.speechContexts[j] = $root.google.cloud.videointelligence.v1p3beta1.SpeechContext.toObject(message.speechContexts[j], options);
                            }
                            if (message.enableAutomaticPunctuation != null && message.hasOwnProperty("enableAutomaticPunctuation"))
                                object.enableAutomaticPunctuation = message.enableAutomaticPunctuation;
                            if (message.audioTracks && message.audioTracks.length) {
                                object.audioTracks = [];
                                for (var j = 0; j < message.audioTracks.length; ++j)
                                    object.audioTracks[j] = message.audioTracks[j];
                            }
                            if (message.enableSpeakerDiarization != null && message.hasOwnProperty("enableSpeakerDiarization"))
                                object.enableSpeakerDiarization = message.enableSpeakerDiarization;
                            if (message.diarizationSpeakerCount != null && message.hasOwnProperty("diarizationSpeakerCount"))
                                object.diarizationSpeakerCount = message.diarizationSpeakerCount;
                            if (message.enableWordConfidence != null && message.hasOwnProperty("enableWordConfidence"))
                                object.enableWordConfidence = message.enableWordConfidence;
                            return object;
                        };
    
                        /**
                         * Converts this SpeechTranscriptionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpeechTranscriptionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpeechTranscriptionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpeechTranscriptionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.SpeechTranscriptionConfig";
                        };
    
                        return SpeechTranscriptionConfig;
                    })();
    
                    v1p3beta1.SpeechContext = (function() {
    
                        /**
                         * Properties of a SpeechContext.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ISpeechContext
                         * @property {Array.<string>|null} [phrases] SpeechContext phrases
                         */
    
                        /**
                         * Constructs a new SpeechContext.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a SpeechContext.
                         * @implements ISpeechContext
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechContext=} [properties] Properties to set
                         */
                        function SpeechContext(properties) {
                            this.phrases = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpeechContext phrases.
                         * @member {Array.<string>} phrases
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechContext
                         * @instance
                         */
                        SpeechContext.prototype.phrases = $util.emptyArray;
    
                        /**
                         * Creates a new SpeechContext instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechContext=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechContext} SpeechContext instance
                         */
                        SpeechContext.create = function create(properties) {
                            return new SpeechContext(properties);
                        };
    
                        /**
                         * Encodes the specified SpeechContext message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.SpeechContext.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechContext} message SpeechContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechContext.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.phrases != null && message.phrases.length)
                                for (var i = 0; i < message.phrases.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.phrases[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpeechContext message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.SpeechContext.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechContext} message SpeechContext message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechContext.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpeechContext message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechContext} SpeechContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechContext.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.SpeechContext();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.phrases && message.phrases.length))
                                            message.phrases = [];
                                        message.phrases.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpeechContext message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechContext
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechContext} SpeechContext
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechContext.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpeechContext message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechContext
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpeechContext.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.phrases != null && message.hasOwnProperty("phrases")) {
                                if (!Array.isArray(message.phrases))
                                    return "phrases: array expected";
                                for (var i = 0; i < message.phrases.length; ++i)
                                    if (!$util.isString(message.phrases[i]))
                                        return "phrases: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a SpeechContext message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechContext
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechContext} SpeechContext
                         */
                        SpeechContext.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.SpeechContext)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.SpeechContext();
                            if (object.phrases) {
                                if (!Array.isArray(object.phrases))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.SpeechContext.phrases: array expected");
                                message.phrases = [];
                                for (var i = 0; i < object.phrases.length; ++i)
                                    message.phrases[i] = String(object.phrases[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpeechContext message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechContext
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.SpeechContext} message SpeechContext
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpeechContext.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.phrases = [];
                            if (message.phrases && message.phrases.length) {
                                object.phrases = [];
                                for (var j = 0; j < message.phrases.length; ++j)
                                    object.phrases[j] = message.phrases[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this SpeechContext to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechContext
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpeechContext.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpeechContext
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechContext
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpeechContext.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.SpeechContext";
                        };
    
                        return SpeechContext;
                    })();
    
                    v1p3beta1.SpeechTranscription = (function() {
    
                        /**
                         * Properties of a SpeechTranscription.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ISpeechTranscription
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ISpeechRecognitionAlternative>|null} [alternatives] SpeechTranscription alternatives
                         * @property {string|null} [languageCode] SpeechTranscription languageCode
                         */
    
                        /**
                         * Constructs a new SpeechTranscription.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a SpeechTranscription.
                         * @implements ISpeechTranscription
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechTranscription=} [properties] Properties to set
                         */
                        function SpeechTranscription(properties) {
                            this.alternatives = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpeechTranscription alternatives.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ISpeechRecognitionAlternative>} alternatives
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscription
                         * @instance
                         */
                        SpeechTranscription.prototype.alternatives = $util.emptyArray;
    
                        /**
                         * SpeechTranscription languageCode.
                         * @member {string} languageCode
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscription
                         * @instance
                         */
                        SpeechTranscription.prototype.languageCode = "";
    
                        /**
                         * Creates a new SpeechTranscription instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscription
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechTranscription=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechTranscription} SpeechTranscription instance
                         */
                        SpeechTranscription.create = function create(properties) {
                            return new SpeechTranscription(properties);
                        };
    
                        /**
                         * Encodes the specified SpeechTranscription message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.SpeechTranscription.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscription
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechTranscription} message SpeechTranscription message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechTranscription.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.alternatives != null && message.alternatives.length)
                                for (var i = 0; i < message.alternatives.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative.encode(message.alternatives[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.languageCode);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpeechTranscription message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.SpeechTranscription.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscription
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechTranscription} message SpeechTranscription message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechTranscription.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpeechTranscription message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscription
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechTranscription} SpeechTranscription
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechTranscription.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscription();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.alternatives && message.alternatives.length))
                                            message.alternatives = [];
                                        message.alternatives.push($root.google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.languageCode = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpeechTranscription message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscription
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechTranscription} SpeechTranscription
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechTranscription.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpeechTranscription message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscription
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpeechTranscription.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.alternatives != null && message.hasOwnProperty("alternatives")) {
                                if (!Array.isArray(message.alternatives))
                                    return "alternatives: array expected";
                                for (var i = 0; i < message.alternatives.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative.verify(message.alternatives[i]);
                                    if (error)
                                        return "alternatives." + error;
                                }
                            }
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                if (!$util.isString(message.languageCode))
                                    return "languageCode: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a SpeechTranscription message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscription
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechTranscription} SpeechTranscription
                         */
                        SpeechTranscription.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscription)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.SpeechTranscription();
                            if (object.alternatives) {
                                if (!Array.isArray(object.alternatives))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.SpeechTranscription.alternatives: array expected");
                                message.alternatives = [];
                                for (var i = 0; i < object.alternatives.length; ++i) {
                                    if (typeof object.alternatives[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.SpeechTranscription.alternatives: object expected");
                                    message.alternatives[i] = $root.google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative.fromObject(object.alternatives[i]);
                                }
                            }
                            if (object.languageCode != null)
                                message.languageCode = String(object.languageCode);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpeechTranscription message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscription
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.SpeechTranscription} message SpeechTranscription
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpeechTranscription.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.alternatives = [];
                            if (options.defaults)
                                object.languageCode = "";
                            if (message.alternatives && message.alternatives.length) {
                                object.alternatives = [];
                                for (var j = 0; j < message.alternatives.length; ++j)
                                    object.alternatives[j] = $root.google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative.toObject(message.alternatives[j], options);
                            }
                            if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                                object.languageCode = message.languageCode;
                            return object;
                        };
    
                        /**
                         * Converts this SpeechTranscription to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscription
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpeechTranscription.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpeechTranscription
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechTranscription
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpeechTranscription.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.SpeechTranscription";
                        };
    
                        return SpeechTranscription;
                    })();
    
                    v1p3beta1.SpeechRecognitionAlternative = (function() {
    
                        /**
                         * Properties of a SpeechRecognitionAlternative.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ISpeechRecognitionAlternative
                         * @property {string|null} [transcript] SpeechRecognitionAlternative transcript
                         * @property {number|null} [confidence] SpeechRecognitionAlternative confidence
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IWordInfo>|null} [words] SpeechRecognitionAlternative words
                         */
    
                        /**
                         * Constructs a new SpeechRecognitionAlternative.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a SpeechRecognitionAlternative.
                         * @implements ISpeechRecognitionAlternative
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechRecognitionAlternative=} [properties] Properties to set
                         */
                        function SpeechRecognitionAlternative(properties) {
                            this.words = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * SpeechRecognitionAlternative transcript.
                         * @member {string} transcript
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @instance
                         */
                        SpeechRecognitionAlternative.prototype.transcript = "";
    
                        /**
                         * SpeechRecognitionAlternative confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @instance
                         */
                        SpeechRecognitionAlternative.prototype.confidence = 0;
    
                        /**
                         * SpeechRecognitionAlternative words.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IWordInfo>} words
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @instance
                         */
                        SpeechRecognitionAlternative.prototype.words = $util.emptyArray;
    
                        /**
                         * Creates a new SpeechRecognitionAlternative instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechRecognitionAlternative=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative} SpeechRecognitionAlternative instance
                         */
                        SpeechRecognitionAlternative.create = function create(properties) {
                            return new SpeechRecognitionAlternative(properties);
                        };
    
                        /**
                         * Encodes the specified SpeechRecognitionAlternative message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechRecognitionAlternative} message SpeechRecognitionAlternative message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechRecognitionAlternative.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.transcript != null && Object.hasOwnProperty.call(message, "transcript"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.transcript);
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            if (message.words != null && message.words.length)
                                for (var i = 0; i < message.words.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.WordInfo.encode(message.words[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified SpeechRecognitionAlternative message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ISpeechRecognitionAlternative} message SpeechRecognitionAlternative message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SpeechRecognitionAlternative.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a SpeechRecognitionAlternative message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative} SpeechRecognitionAlternative
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechRecognitionAlternative.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.transcript = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.words && message.words.length))
                                            message.words = [];
                                        message.words.push($root.google.cloud.videointelligence.v1p3beta1.WordInfo.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a SpeechRecognitionAlternative message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative} SpeechRecognitionAlternative
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SpeechRecognitionAlternative.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a SpeechRecognitionAlternative message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SpeechRecognitionAlternative.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.transcript != null && message.hasOwnProperty("transcript"))
                                if (!$util.isString(message.transcript))
                                    return "transcript: string expected";
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.words != null && message.hasOwnProperty("words")) {
                                if (!Array.isArray(message.words))
                                    return "words: array expected";
                                for (var i = 0; i < message.words.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.WordInfo.verify(message.words[i]);
                                    if (error)
                                        return "words." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a SpeechRecognitionAlternative message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative} SpeechRecognitionAlternative
                         */
                        SpeechRecognitionAlternative.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative();
                            if (object.transcript != null)
                                message.transcript = String(object.transcript);
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.words) {
                                if (!Array.isArray(object.words))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative.words: array expected");
                                message.words = [];
                                for (var i = 0; i < object.words.length; ++i) {
                                    if (typeof object.words[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative.words: object expected");
                                    message.words[i] = $root.google.cloud.videointelligence.v1p3beta1.WordInfo.fromObject(object.words[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a SpeechRecognitionAlternative message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative} message SpeechRecognitionAlternative
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SpeechRecognitionAlternative.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.words = [];
                            if (options.defaults) {
                                object.transcript = "";
                                object.confidence = 0;
                            }
                            if (message.transcript != null && message.hasOwnProperty("transcript"))
                                object.transcript = message.transcript;
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.words && message.words.length) {
                                object.words = [];
                                for (var j = 0; j < message.words.length; ++j)
                                    object.words[j] = $root.google.cloud.videointelligence.v1p3beta1.WordInfo.toObject(message.words[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this SpeechRecognitionAlternative to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SpeechRecognitionAlternative.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for SpeechRecognitionAlternative
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SpeechRecognitionAlternative.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.SpeechRecognitionAlternative";
                        };
    
                        return SpeechRecognitionAlternative;
                    })();
    
                    v1p3beta1.WordInfo = (function() {
    
                        /**
                         * Properties of a WordInfo.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IWordInfo
                         * @property {google.protobuf.IDuration|null} [startTime] WordInfo startTime
                         * @property {google.protobuf.IDuration|null} [endTime] WordInfo endTime
                         * @property {string|null} [word] WordInfo word
                         * @property {number|null} [confidence] WordInfo confidence
                         * @property {number|null} [speakerTag] WordInfo speakerTag
                         */
    
                        /**
                         * Constructs a new WordInfo.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a WordInfo.
                         * @implements IWordInfo
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IWordInfo=} [properties] Properties to set
                         */
                        function WordInfo(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * WordInfo startTime.
                         * @member {google.protobuf.IDuration|null|undefined} startTime
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.startTime = null;
    
                        /**
                         * WordInfo endTime.
                         * @member {google.protobuf.IDuration|null|undefined} endTime
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.endTime = null;
    
                        /**
                         * WordInfo word.
                         * @member {string} word
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.word = "";
    
                        /**
                         * WordInfo confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.confidence = 0;
    
                        /**
                         * WordInfo speakerTag.
                         * @member {number} speakerTag
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @instance
                         */
                        WordInfo.prototype.speakerTag = 0;
    
                        /**
                         * Creates a new WordInfo instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IWordInfo=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.WordInfo} WordInfo instance
                         */
                        WordInfo.create = function create(properties) {
                            return new WordInfo(properties);
                        };
    
                        /**
                         * Encodes the specified WordInfo message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.WordInfo.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IWordInfo} message WordInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WordInfo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                                $root.google.protobuf.Duration.encode(message.startTime, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                                $root.google.protobuf.Duration.encode(message.endTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.word != null && Object.hasOwnProperty.call(message, "word"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.word);
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.confidence);
                            if (message.speakerTag != null && Object.hasOwnProperty.call(message, "speakerTag"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.speakerTag);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified WordInfo message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.WordInfo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IWordInfo} message WordInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        WordInfo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a WordInfo message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.WordInfo} WordInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WordInfo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.WordInfo();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.startTime = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.endTime = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.word = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 5: {
                                        message.speakerTag = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a WordInfo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.WordInfo} WordInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        WordInfo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a WordInfo message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        WordInfo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                                var error = $root.google.protobuf.Duration.verify(message.startTime);
                                if (error)
                                    return "startTime." + error;
                            }
                            if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                var error = $root.google.protobuf.Duration.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                            if (message.word != null && message.hasOwnProperty("word"))
                                if (!$util.isString(message.word))
                                    return "word: string expected";
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.speakerTag != null && message.hasOwnProperty("speakerTag"))
                                if (!$util.isInteger(message.speakerTag))
                                    return "speakerTag: integer expected";
                            return null;
                        };
    
                        /**
                         * Creates a WordInfo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.WordInfo} WordInfo
                         */
                        WordInfo.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.WordInfo)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.WordInfo();
                            if (object.startTime != null) {
                                if (typeof object.startTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.WordInfo.startTime: object expected");
                                message.startTime = $root.google.protobuf.Duration.fromObject(object.startTime);
                            }
                            if (object.endTime != null) {
                                if (typeof object.endTime !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.WordInfo.endTime: object expected");
                                message.endTime = $root.google.protobuf.Duration.fromObject(object.endTime);
                            }
                            if (object.word != null)
                                message.word = String(object.word);
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.speakerTag != null)
                                message.speakerTag = object.speakerTag | 0;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a WordInfo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.WordInfo} message WordInfo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        WordInfo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.startTime = null;
                                object.endTime = null;
                                object.word = "";
                                object.confidence = 0;
                                object.speakerTag = 0;
                            }
                            if (message.startTime != null && message.hasOwnProperty("startTime"))
                                object.startTime = $root.google.protobuf.Duration.toObject(message.startTime, options);
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                object.endTime = $root.google.protobuf.Duration.toObject(message.endTime, options);
                            if (message.word != null && message.hasOwnProperty("word"))
                                object.word = message.word;
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.speakerTag != null && message.hasOwnProperty("speakerTag"))
                                object.speakerTag = message.speakerTag;
                            return object;
                        };
    
                        /**
                         * Converts this WordInfo to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        WordInfo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for WordInfo
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.WordInfo
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        WordInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.WordInfo";
                        };
    
                        return WordInfo;
                    })();
    
                    v1p3beta1.NormalizedVertex = (function() {
    
                        /**
                         * Properties of a NormalizedVertex.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface INormalizedVertex
                         * @property {number|null} [x] NormalizedVertex x
                         * @property {number|null} [y] NormalizedVertex y
                         */
    
                        /**
                         * Constructs a new NormalizedVertex.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a NormalizedVertex.
                         * @implements INormalizedVertex
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.INormalizedVertex=} [properties] Properties to set
                         */
                        function NormalizedVertex(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * NormalizedVertex x.
                         * @member {number} x
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedVertex
                         * @instance
                         */
                        NormalizedVertex.prototype.x = 0;
    
                        /**
                         * NormalizedVertex y.
                         * @member {number} y
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedVertex
                         * @instance
                         */
                        NormalizedVertex.prototype.y = 0;
    
                        /**
                         * Creates a new NormalizedVertex instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedVertex
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.INormalizedVertex=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.NormalizedVertex} NormalizedVertex instance
                         */
                        NormalizedVertex.create = function create(properties) {
                            return new NormalizedVertex(properties);
                        };
    
                        /**
                         * Encodes the specified NormalizedVertex message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.NormalizedVertex.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedVertex
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.INormalizedVertex} message NormalizedVertex message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedVertex.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.x != null && Object.hasOwnProperty.call(message, "x"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);
                            if (message.y != null && Object.hasOwnProperty.call(message, "y"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.y);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified NormalizedVertex message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.NormalizedVertex.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedVertex
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.INormalizedVertex} message NormalizedVertex message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedVertex.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a NormalizedVertex message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedVertex
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.NormalizedVertex} NormalizedVertex
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedVertex.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.x = reader.float();
                                        break;
                                    }
                                case 2: {
                                        message.y = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a NormalizedVertex message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedVertex
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.NormalizedVertex} NormalizedVertex
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedVertex.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a NormalizedVertex message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedVertex
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NormalizedVertex.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.x != null && message.hasOwnProperty("x"))
                                if (typeof message.x !== "number")
                                    return "x: number expected";
                            if (message.y != null && message.hasOwnProperty("y"))
                                if (typeof message.y !== "number")
                                    return "y: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a NormalizedVertex message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedVertex
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.NormalizedVertex} NormalizedVertex
                         */
                        NormalizedVertex.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex();
                            if (object.x != null)
                                message.x = Number(object.x);
                            if (object.y != null)
                                message.y = Number(object.y);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a NormalizedVertex message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedVertex
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.NormalizedVertex} message NormalizedVertex
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NormalizedVertex.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.x = 0;
                                object.y = 0;
                            }
                            if (message.x != null && message.hasOwnProperty("x"))
                                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;
                            if (message.y != null && message.hasOwnProperty("y"))
                                object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;
                            return object;
                        };
    
                        /**
                         * Converts this NormalizedVertex to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedVertex
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NormalizedVertex.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for NormalizedVertex
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedVertex
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        NormalizedVertex.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.NormalizedVertex";
                        };
    
                        return NormalizedVertex;
                    })();
    
                    v1p3beta1.NormalizedBoundingPoly = (function() {
    
                        /**
                         * Properties of a NormalizedBoundingPoly.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface INormalizedBoundingPoly
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.INormalizedVertex>|null} [vertices] NormalizedBoundingPoly vertices
                         */
    
                        /**
                         * Constructs a new NormalizedBoundingPoly.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a NormalizedBoundingPoly.
                         * @implements INormalizedBoundingPoly
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingPoly=} [properties] Properties to set
                         */
                        function NormalizedBoundingPoly(properties) {
                            this.vertices = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * NormalizedBoundingPoly vertices.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.INormalizedVertex>} vertices
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly
                         * @instance
                         */
                        NormalizedBoundingPoly.prototype.vertices = $util.emptyArray;
    
                        /**
                         * Creates a new NormalizedBoundingPoly instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingPoly=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly} NormalizedBoundingPoly instance
                         */
                        NormalizedBoundingPoly.create = function create(properties) {
                            return new NormalizedBoundingPoly(properties);
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingPoly message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingPoly} message NormalizedBoundingPoly message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingPoly.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.vertices != null && message.vertices.length)
                                for (var i = 0; i < message.vertices.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex.encode(message.vertices[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified NormalizedBoundingPoly message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingPoly} message NormalizedBoundingPoly message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NormalizedBoundingPoly.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a NormalizedBoundingPoly message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly} NormalizedBoundingPoly
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingPoly.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.vertices && message.vertices.length))
                                            message.vertices = [];
                                        message.vertices.push($root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a NormalizedBoundingPoly message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly} NormalizedBoundingPoly
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NormalizedBoundingPoly.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a NormalizedBoundingPoly message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NormalizedBoundingPoly.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.vertices != null && message.hasOwnProperty("vertices")) {
                                if (!Array.isArray(message.vertices))
                                    return "vertices: array expected";
                                for (var i = 0; i < message.vertices.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex.verify(message.vertices[i]);
                                    if (error)
                                        return "vertices." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a NormalizedBoundingPoly message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly} NormalizedBoundingPoly
                         */
                        NormalizedBoundingPoly.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly();
                            if (object.vertices) {
                                if (!Array.isArray(object.vertices))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly.vertices: array expected");
                                message.vertices = [];
                                for (var i = 0; i < object.vertices.length; ++i) {
                                    if (typeof object.vertices[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly.vertices: object expected");
                                    message.vertices[i] = $root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex.fromObject(object.vertices[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a NormalizedBoundingPoly message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly} message NormalizedBoundingPoly
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NormalizedBoundingPoly.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.vertices = [];
                            if (message.vertices && message.vertices.length) {
                                object.vertices = [];
                                for (var j = 0; j < message.vertices.length; ++j)
                                    object.vertices[j] = $root.google.cloud.videointelligence.v1p3beta1.NormalizedVertex.toObject(message.vertices[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this NormalizedBoundingPoly to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NormalizedBoundingPoly.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for NormalizedBoundingPoly
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        NormalizedBoundingPoly.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly";
                        };
    
                        return NormalizedBoundingPoly;
                    })();
    
                    v1p3beta1.TextSegment = (function() {
    
                        /**
                         * Properties of a TextSegment.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ITextSegment
                         * @property {google.cloud.videointelligence.v1p3beta1.IVideoSegment|null} [segment] TextSegment segment
                         * @property {number|null} [confidence] TextSegment confidence
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ITextFrame>|null} [frames] TextSegment frames
                         */
    
                        /**
                         * Constructs a new TextSegment.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a TextSegment.
                         * @implements ITextSegment
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextSegment=} [properties] Properties to set
                         */
                        function TextSegment(properties) {
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextSegment segment.
                         * @member {google.cloud.videointelligence.v1p3beta1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @instance
                         */
                        TextSegment.prototype.segment = null;
    
                        /**
                         * TextSegment confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @instance
                         */
                        TextSegment.prototype.confidence = 0;
    
                        /**
                         * TextSegment frames.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ITextFrame>} frames
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @instance
                         */
                        TextSegment.prototype.frames = $util.emptyArray;
    
                        /**
                         * Creates a new TextSegment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextSegment=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextSegment} TextSegment instance
                         */
                        TextSegment.create = function create(properties) {
                            return new TextSegment(properties);
                        };
    
                        /**
                         * Encodes the specified TextSegment message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.TextSegment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextSegment} message TextSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextSegment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.encode(message.segment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 2, wireType 5 =*/21).float(message.confidence);
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.TextFrame.encode(message.frames[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextSegment message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.TextSegment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextSegment} message TextSegment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextSegment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextSegment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextSegment} TextSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextSegment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.TextSegment();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1p3beta1.TextFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextSegment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextSegment} TextSegment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextSegment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextSegment message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextSegment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.verify(message.segment);
                                if (error)
                                    return "segment." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.TextFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TextSegment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextSegment} TextSegment
                         */
                        TextSegment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.TextSegment)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.TextSegment();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.TextSegment.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.TextSegment.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.TextSegment.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1p3beta1.TextFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextSegment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.TextSegment} message TextSegment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextSegment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.frames = [];
                            if (options.defaults) {
                                object.segment = null;
                                object.confidence = 0;
                            }
                            if (message.segment != null && message.hasOwnProperty("segment"))
                                object.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.toObject(message.segment, options);
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1p3beta1.TextFrame.toObject(message.frames[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TextSegment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextSegment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextSegment
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextSegment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextSegment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.TextSegment";
                        };
    
                        return TextSegment;
                    })();
    
                    v1p3beta1.TextFrame = (function() {
    
                        /**
                         * Properties of a TextFrame.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ITextFrame
                         * @property {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingPoly|null} [rotatedBoundingBox] TextFrame rotatedBoundingBox
                         * @property {google.protobuf.IDuration|null} [timeOffset] TextFrame timeOffset
                         */
    
                        /**
                         * Constructs a new TextFrame.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a TextFrame.
                         * @implements ITextFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextFrame=} [properties] Properties to set
                         */
                        function TextFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextFrame rotatedBoundingBox.
                         * @member {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingPoly|null|undefined} rotatedBoundingBox
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextFrame
                         * @instance
                         */
                        TextFrame.prototype.rotatedBoundingBox = null;
    
                        /**
                         * TextFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextFrame
                         * @instance
                         */
                        TextFrame.prototype.timeOffset = null;
    
                        /**
                         * Creates a new TextFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextFrame} TextFrame instance
                         */
                        TextFrame.create = function create(properties) {
                            return new TextFrame(properties);
                        };
    
                        /**
                         * Encodes the specified TextFrame message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.TextFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextFrame} message TextFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.rotatedBoundingBox != null && Object.hasOwnProperty.call(message, "rotatedBoundingBox"))
                                $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly.encode(message.rotatedBoundingBox, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.TextFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextFrame} message TextFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextFrame} TextFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.TextFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.rotatedBoundingBox = $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextFrame} TextFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.rotatedBoundingBox != null && message.hasOwnProperty("rotatedBoundingBox")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly.verify(message.rotatedBoundingBox);
                                if (error)
                                    return "rotatedBoundingBox." + error;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TextFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextFrame} TextFrame
                         */
                        TextFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.TextFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.TextFrame();
                            if (object.rotatedBoundingBox != null) {
                                if (typeof object.rotatedBoundingBox !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.TextFrame.rotatedBoundingBox: object expected");
                                message.rotatedBoundingBox = $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly.fromObject(object.rotatedBoundingBox);
                            }
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.TextFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.TextFrame} message TextFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.rotatedBoundingBox = null;
                                object.timeOffset = null;
                            }
                            if (message.rotatedBoundingBox != null && message.hasOwnProperty("rotatedBoundingBox"))
                                object.rotatedBoundingBox = $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingPoly.toObject(message.rotatedBoundingBox, options);
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this TextFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.TextFrame";
                        };
    
                        return TextFrame;
                    })();
    
                    v1p3beta1.TextAnnotation = (function() {
    
                        /**
                         * Properties of a TextAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ITextAnnotation
                         * @property {string|null} [text] TextAnnotation text
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ITextSegment>|null} [segments] TextAnnotation segments
                         */
    
                        /**
                         * Constructs a new TextAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a TextAnnotation.
                         * @implements ITextAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextAnnotation=} [properties] Properties to set
                         */
                        function TextAnnotation(properties) {
                            this.segments = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TextAnnotation text.
                         * @member {string} text
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextAnnotation
                         * @instance
                         */
                        TextAnnotation.prototype.text = "";
    
                        /**
                         * TextAnnotation segments.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ITextSegment>} segments
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextAnnotation
                         * @instance
                         */
                        TextAnnotation.prototype.segments = $util.emptyArray;
    
                        /**
                         * Creates a new TextAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextAnnotation} TextAnnotation instance
                         */
                        TextAnnotation.create = function create(properties) {
                            return new TextAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified TextAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.TextAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextAnnotation} message TextAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.TextSegment.encode(message.segments[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TextAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.TextAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ITextAnnotation} message TextAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TextAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextAnnotation} TextAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.TextAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1p3beta1.TextSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TextAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextAnnotation} TextAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TextAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.TextSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TextAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.TextAnnotation} TextAnnotation
                         */
                        TextAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.TextAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.TextAnnotation();
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.TextAnnotation.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.TextAnnotation.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1p3beta1.TextSegment.fromObject(object.segments[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TextAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.TextAnnotation} message TextAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.segments = [];
                            if (options.defaults)
                                object.text = "";
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1p3beta1.TextSegment.toObject(message.segments[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TextAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TextAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.TextAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.TextAnnotation";
                        };
    
                        return TextAnnotation;
                    })();
    
                    v1p3beta1.ObjectTrackingFrame = (function() {
    
                        /**
                         * Properties of an ObjectTrackingFrame.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IObjectTrackingFrame
                         * @property {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingBox|null} [normalizedBoundingBox] ObjectTrackingFrame normalizedBoundingBox
                         * @property {google.protobuf.IDuration|null} [timeOffset] ObjectTrackingFrame timeOffset
                         */
    
                        /**
                         * Constructs a new ObjectTrackingFrame.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents an ObjectTrackingFrame.
                         * @implements IObjectTrackingFrame
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IObjectTrackingFrame=} [properties] Properties to set
                         */
                        function ObjectTrackingFrame(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ObjectTrackingFrame normalizedBoundingBox.
                         * @member {google.cloud.videointelligence.v1p3beta1.INormalizedBoundingBox|null|undefined} normalizedBoundingBox
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame
                         * @instance
                         */
                        ObjectTrackingFrame.prototype.normalizedBoundingBox = null;
    
                        /**
                         * ObjectTrackingFrame timeOffset.
                         * @member {google.protobuf.IDuration|null|undefined} timeOffset
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame
                         * @instance
                         */
                        ObjectTrackingFrame.prototype.timeOffset = null;
    
                        /**
                         * Creates a new ObjectTrackingFrame instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IObjectTrackingFrame=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame} ObjectTrackingFrame instance
                         */
                        ObjectTrackingFrame.create = function create(properties) {
                            return new ObjectTrackingFrame(properties);
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingFrame message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IObjectTrackingFrame} message ObjectTrackingFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingFrame.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.normalizedBoundingBox != null && Object.hasOwnProperty.call(message, "normalizedBoundingBox"))
                                $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox.encode(message.normalizedBoundingBox, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.timeOffset != null && Object.hasOwnProperty.call(message, "timeOffset"))
                                $root.google.protobuf.Duration.encode(message.timeOffset, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingFrame message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IObjectTrackingFrame} message ObjectTrackingFrame message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingFrame.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ObjectTrackingFrame message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame} ObjectTrackingFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingFrame.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.normalizedBoundingBox = $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.timeOffset = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ObjectTrackingFrame message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame} ObjectTrackingFrame
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingFrame.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ObjectTrackingFrame message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ObjectTrackingFrame.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.normalizedBoundingBox != null && message.hasOwnProperty("normalizedBoundingBox")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox.verify(message.normalizedBoundingBox);
                                if (error)
                                    return "normalizedBoundingBox." + error;
                            }
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeOffset);
                                if (error)
                                    return "timeOffset." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ObjectTrackingFrame message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame} ObjectTrackingFrame
                         */
                        ObjectTrackingFrame.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame();
                            if (object.normalizedBoundingBox != null) {
                                if (typeof object.normalizedBoundingBox !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame.normalizedBoundingBox: object expected");
                                message.normalizedBoundingBox = $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox.fromObject(object.normalizedBoundingBox);
                            }
                            if (object.timeOffset != null) {
                                if (typeof object.timeOffset !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame.timeOffset: object expected");
                                message.timeOffset = $root.google.protobuf.Duration.fromObject(object.timeOffset);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ObjectTrackingFrame message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame} message ObjectTrackingFrame
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ObjectTrackingFrame.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.normalizedBoundingBox = null;
                                object.timeOffset = null;
                            }
                            if (message.normalizedBoundingBox != null && message.hasOwnProperty("normalizedBoundingBox"))
                                object.normalizedBoundingBox = $root.google.cloud.videointelligence.v1p3beta1.NormalizedBoundingBox.toObject(message.normalizedBoundingBox, options);
                            if (message.timeOffset != null && message.hasOwnProperty("timeOffset"))
                                object.timeOffset = $root.google.protobuf.Duration.toObject(message.timeOffset, options);
                            return object;
                        };
    
                        /**
                         * Converts this ObjectTrackingFrame to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ObjectTrackingFrame.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ObjectTrackingFrame
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ObjectTrackingFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame";
                        };
    
                        return ObjectTrackingFrame;
                    })();
    
                    v1p3beta1.ObjectTrackingAnnotation = (function() {
    
                        /**
                         * Properties of an ObjectTrackingAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IObjectTrackingAnnotation
                         * @property {google.cloud.videointelligence.v1p3beta1.IVideoSegment|null} [segment] ObjectTrackingAnnotation segment
                         * @property {number|Long|null} [trackId] ObjectTrackingAnnotation trackId
                         * @property {google.cloud.videointelligence.v1p3beta1.IEntity|null} [entity] ObjectTrackingAnnotation entity
                         * @property {number|null} [confidence] ObjectTrackingAnnotation confidence
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IObjectTrackingFrame>|null} [frames] ObjectTrackingAnnotation frames
                         */
    
                        /**
                         * Constructs a new ObjectTrackingAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents an ObjectTrackingAnnotation.
                         * @implements IObjectTrackingAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IObjectTrackingAnnotation=} [properties] Properties to set
                         */
                        function ObjectTrackingAnnotation(properties) {
                            this.frames = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ObjectTrackingAnnotation segment.
                         * @member {google.cloud.videointelligence.v1p3beta1.IVideoSegment|null|undefined} segment
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.segment = null;
    
                        /**
                         * ObjectTrackingAnnotation trackId.
                         * @member {number|Long|null|undefined} trackId
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.trackId = null;
    
                        /**
                         * ObjectTrackingAnnotation entity.
                         * @member {google.cloud.videointelligence.v1p3beta1.IEntity|null|undefined} entity
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.entity = null;
    
                        /**
                         * ObjectTrackingAnnotation confidence.
                         * @member {number} confidence
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.confidence = 0;
    
                        /**
                         * ObjectTrackingAnnotation frames.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IObjectTrackingFrame>} frames
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @instance
                         */
                        ObjectTrackingAnnotation.prototype.frames = $util.emptyArray;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * ObjectTrackingAnnotation trackInfo.
                         * @member {"segment"|"trackId"|undefined} trackInfo
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @instance
                         */
                        Object.defineProperty(ObjectTrackingAnnotation.prototype, "trackInfo", {
                            get: $util.oneOfGetter($oneOfFields = ["segment", "trackId"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new ObjectTrackingAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IObjectTrackingAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation} ObjectTrackingAnnotation instance
                         */
                        ObjectTrackingAnnotation.create = function create(properties) {
                            return new ObjectTrackingAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IObjectTrackingAnnotation} message ObjectTrackingAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                                $root.google.cloud.videointelligence.v1p3beta1.Entity.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.frames != null && message.frames.length)
                                for (var i = 0; i < message.frames.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame.encode(message.frames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.segment != null && Object.hasOwnProperty.call(message, "segment"))
                                $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.confidence != null && Object.hasOwnProperty.call(message, "confidence"))
                                writer.uint32(/* id 4, wireType 5 =*/37).float(message.confidence);
                            if (message.trackId != null && Object.hasOwnProperty.call(message, "trackId"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.trackId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ObjectTrackingAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IObjectTrackingAnnotation} message ObjectTrackingAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ObjectTrackingAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an ObjectTrackingAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation} ObjectTrackingAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 3: {
                                        message.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.trackId = reader.int64();
                                        break;
                                    }
                                case 1: {
                                        message.entity = $root.google.cloud.videointelligence.v1p3beta1.Entity.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.confidence = reader.float();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.frames && message.frames.length))
                                            message.frames = [];
                                        message.frames.push($root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an ObjectTrackingAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation} ObjectTrackingAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ObjectTrackingAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an ObjectTrackingAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ObjectTrackingAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                properties.trackInfo = 1;
                                {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.verify(message.segment);
                                    if (error)
                                        return "segment." + error;
                                }
                            }
                            if (message.trackId != null && message.hasOwnProperty("trackId")) {
                                if (properties.trackInfo === 1)
                                    return "trackInfo: multiple values";
                                properties.trackInfo = 1;
                                if (!$util.isInteger(message.trackId) && !(message.trackId && $util.isInteger(message.trackId.low) && $util.isInteger(message.trackId.high)))
                                    return "trackId: integer|Long expected";
                            }
                            if (message.entity != null && message.hasOwnProperty("entity")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.Entity.verify(message.entity);
                                if (error)
                                    return "entity." + error;
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                if (typeof message.confidence !== "number")
                                    return "confidence: number expected";
                            if (message.frames != null && message.hasOwnProperty("frames")) {
                                if (!Array.isArray(message.frames))
                                    return "frames: array expected";
                                for (var i = 0; i < message.frames.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame.verify(message.frames[i]);
                                    if (error)
                                        return "frames." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates an ObjectTrackingAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation} ObjectTrackingAnnotation
                         */
                        ObjectTrackingAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation();
                            if (object.segment != null) {
                                if (typeof object.segment !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.segment: object expected");
                                message.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.fromObject(object.segment);
                            }
                            if (object.trackId != null)
                                if ($util.Long)
                                    (message.trackId = $util.Long.fromValue(object.trackId)).unsigned = false;
                                else if (typeof object.trackId === "string")
                                    message.trackId = parseInt(object.trackId, 10);
                                else if (typeof object.trackId === "number")
                                    message.trackId = object.trackId;
                                else if (typeof object.trackId === "object")
                                    message.trackId = new $util.LongBits(object.trackId.low >>> 0, object.trackId.high >>> 0).toNumber();
                            if (object.entity != null) {
                                if (typeof object.entity !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.entity: object expected");
                                message.entity = $root.google.cloud.videointelligence.v1p3beta1.Entity.fromObject(object.entity);
                            }
                            if (object.confidence != null)
                                message.confidence = Number(object.confidence);
                            if (object.frames) {
                                if (!Array.isArray(object.frames))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.frames: array expected");
                                message.frames = [];
                                for (var i = 0; i < object.frames.length; ++i) {
                                    if (typeof object.frames[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.frames: object expected");
                                    message.frames[i] = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame.fromObject(object.frames[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an ObjectTrackingAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation} message ObjectTrackingAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ObjectTrackingAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.frames = [];
                            if (options.defaults) {
                                object.entity = null;
                                object.confidence = 0;
                            }
                            if (message.entity != null && message.hasOwnProperty("entity"))
                                object.entity = $root.google.cloud.videointelligence.v1p3beta1.Entity.toObject(message.entity, options);
                            if (message.frames && message.frames.length) {
                                object.frames = [];
                                for (var j = 0; j < message.frames.length; ++j)
                                    object.frames[j] = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingFrame.toObject(message.frames[j], options);
                            }
                            if (message.segment != null && message.hasOwnProperty("segment")) {
                                object.segment = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.toObject(message.segment, options);
                                if (options.oneofs)
                                    object.trackInfo = "segment";
                            }
                            if (message.confidence != null && message.hasOwnProperty("confidence"))
                                object.confidence = options.json && !isFinite(message.confidence) ? String(message.confidence) : message.confidence;
                            if (message.trackId != null && message.hasOwnProperty("trackId")) {
                                if (typeof message.trackId === "number")
                                    object.trackId = options.longs === String ? String(message.trackId) : message.trackId;
                                else
                                    object.trackId = options.longs === String ? $util.Long.prototype.toString.call(message.trackId) : options.longs === Number ? new $util.LongBits(message.trackId.low >>> 0, message.trackId.high >>> 0).toNumber() : message.trackId;
                                if (options.oneofs)
                                    object.trackInfo = "trackId";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ObjectTrackingAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ObjectTrackingAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ObjectTrackingAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ObjectTrackingAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation";
                        };
    
                        return ObjectTrackingAnnotation;
                    })();
    
                    v1p3beta1.LogoRecognitionAnnotation = (function() {
    
                        /**
                         * Properties of a LogoRecognitionAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface ILogoRecognitionAnnotation
                         * @property {google.cloud.videointelligence.v1p3beta1.IEntity|null} [entity] LogoRecognitionAnnotation entity
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ITrack>|null} [tracks] LogoRecognitionAnnotation tracks
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IVideoSegment>|null} [segments] LogoRecognitionAnnotation segments
                         */
    
                        /**
                         * Constructs a new LogoRecognitionAnnotation.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a LogoRecognitionAnnotation.
                         * @implements ILogoRecognitionAnnotation
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.ILogoRecognitionAnnotation=} [properties] Properties to set
                         */
                        function LogoRecognitionAnnotation(properties) {
                            this.tracks = [];
                            this.segments = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LogoRecognitionAnnotation entity.
                         * @member {google.cloud.videointelligence.v1p3beta1.IEntity|null|undefined} entity
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @instance
                         */
                        LogoRecognitionAnnotation.prototype.entity = null;
    
                        /**
                         * LogoRecognitionAnnotation tracks.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ITrack>} tracks
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @instance
                         */
                        LogoRecognitionAnnotation.prototype.tracks = $util.emptyArray;
    
                        /**
                         * LogoRecognitionAnnotation segments.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IVideoSegment>} segments
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @instance
                         */
                        LogoRecognitionAnnotation.prototype.segments = $util.emptyArray;
    
                        /**
                         * Creates a new LogoRecognitionAnnotation instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILogoRecognitionAnnotation=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation} LogoRecognitionAnnotation instance
                         */
                        LogoRecognitionAnnotation.create = function create(properties) {
                            return new LogoRecognitionAnnotation(properties);
                        };
    
                        /**
                         * Encodes the specified LogoRecognitionAnnotation message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILogoRecognitionAnnotation} message LogoRecognitionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogoRecognitionAnnotation.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.entity != null && Object.hasOwnProperty.call(message, "entity"))
                                $root.google.cloud.videointelligence.v1p3beta1.Entity.encode(message.entity, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.tracks != null && message.tracks.length)
                                for (var i = 0; i < message.tracks.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.Track.encode(message.tracks[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.segments != null && message.segments.length)
                                for (var i = 0; i < message.segments.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.encode(message.segments[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LogoRecognitionAnnotation message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.ILogoRecognitionAnnotation} message LogoRecognitionAnnotation message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogoRecognitionAnnotation.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LogoRecognitionAnnotation message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation} LogoRecognitionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogoRecognitionAnnotation.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.entity = $root.google.cloud.videointelligence.v1p3beta1.Entity.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.tracks && message.tracks.length))
                                            message.tracks = [];
                                        message.tracks.push($root.google.cloud.videointelligence.v1p3beta1.Track.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.segments && message.segments.length))
                                            message.segments = [];
                                        message.segments.push($root.google.cloud.videointelligence.v1p3beta1.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LogoRecognitionAnnotation message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation} LogoRecognitionAnnotation
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogoRecognitionAnnotation.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LogoRecognitionAnnotation message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LogoRecognitionAnnotation.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.entity != null && message.hasOwnProperty("entity")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.Entity.verify(message.entity);
                                if (error)
                                    return "entity." + error;
                            }
                            if (message.tracks != null && message.hasOwnProperty("tracks")) {
                                if (!Array.isArray(message.tracks))
                                    return "tracks: array expected";
                                for (var i = 0; i < message.tracks.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.Track.verify(message.tracks[i]);
                                    if (error)
                                        return "tracks." + error;
                                }
                            }
                            if (message.segments != null && message.hasOwnProperty("segments")) {
                                if (!Array.isArray(message.segments))
                                    return "segments: array expected";
                                for (var i = 0; i < message.segments.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.verify(message.segments[i]);
                                    if (error)
                                        return "segments." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a LogoRecognitionAnnotation message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation} LogoRecognitionAnnotation
                         */
                        LogoRecognitionAnnotation.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation();
                            if (object.entity != null) {
                                if (typeof object.entity !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation.entity: object expected");
                                message.entity = $root.google.cloud.videointelligence.v1p3beta1.Entity.fromObject(object.entity);
                            }
                            if (object.tracks) {
                                if (!Array.isArray(object.tracks))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation.tracks: array expected");
                                message.tracks = [];
                                for (var i = 0; i < object.tracks.length; ++i) {
                                    if (typeof object.tracks[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation.tracks: object expected");
                                    message.tracks[i] = $root.google.cloud.videointelligence.v1p3beta1.Track.fromObject(object.tracks[i]);
                                }
                            }
                            if (object.segments) {
                                if (!Array.isArray(object.segments))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation.segments: array expected");
                                message.segments = [];
                                for (var i = 0; i < object.segments.length; ++i) {
                                    if (typeof object.segments[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation.segments: object expected");
                                    message.segments[i] = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.fromObject(object.segments[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LogoRecognitionAnnotation message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation} message LogoRecognitionAnnotation
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LogoRecognitionAnnotation.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.tracks = [];
                                object.segments = [];
                            }
                            if (options.defaults)
                                object.entity = null;
                            if (message.entity != null && message.hasOwnProperty("entity"))
                                object.entity = $root.google.cloud.videointelligence.v1p3beta1.Entity.toObject(message.entity, options);
                            if (message.tracks && message.tracks.length) {
                                object.tracks = [];
                                for (var j = 0; j < message.tracks.length; ++j)
                                    object.tracks[j] = $root.google.cloud.videointelligence.v1p3beta1.Track.toObject(message.tracks[j], options);
                            }
                            if (message.segments && message.segments.length) {
                                object.segments = [];
                                for (var j = 0; j < message.segments.length; ++j)
                                    object.segments[j] = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.toObject(message.segments[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this LogoRecognitionAnnotation to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LogoRecognitionAnnotation.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LogoRecognitionAnnotation
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LogoRecognitionAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.LogoRecognitionAnnotation";
                        };
    
                        return LogoRecognitionAnnotation;
                    })();
    
                    v1p3beta1.StreamingAnnotateVideoRequest = (function() {
    
                        /**
                         * Properties of a StreamingAnnotateVideoRequest.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IStreamingAnnotateVideoRequest
                         * @property {google.cloud.videointelligence.v1p3beta1.IStreamingVideoConfig|null} [videoConfig] StreamingAnnotateVideoRequest videoConfig
                         * @property {Uint8Array|null} [inputContent] StreamingAnnotateVideoRequest inputContent
                         */
    
                        /**
                         * Constructs a new StreamingAnnotateVideoRequest.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingAnnotateVideoRequest.
                         * @implements IStreamingAnnotateVideoRequest
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAnnotateVideoRequest=} [properties] Properties to set
                         */
                        function StreamingAnnotateVideoRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StreamingAnnotateVideoRequest videoConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IStreamingVideoConfig|null|undefined} videoConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @instance
                         */
                        StreamingAnnotateVideoRequest.prototype.videoConfig = null;
    
                        /**
                         * StreamingAnnotateVideoRequest inputContent.
                         * @member {Uint8Array|null|undefined} inputContent
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @instance
                         */
                        StreamingAnnotateVideoRequest.prototype.inputContent = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * StreamingAnnotateVideoRequest streamingRequest.
                         * @member {"videoConfig"|"inputContent"|undefined} streamingRequest
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @instance
                         */
                        Object.defineProperty(StreamingAnnotateVideoRequest.prototype, "streamingRequest", {
                            get: $util.oneOfGetter($oneOfFields = ["videoConfig", "inputContent"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new StreamingAnnotateVideoRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAnnotateVideoRequest=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest} StreamingAnnotateVideoRequest instance
                         */
                        StreamingAnnotateVideoRequest.create = function create(properties) {
                            return new StreamingAnnotateVideoRequest(properties);
                        };
    
                        /**
                         * Encodes the specified StreamingAnnotateVideoRequest message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAnnotateVideoRequest} message StreamingAnnotateVideoRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingAnnotateVideoRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.videoConfig != null && Object.hasOwnProperty.call(message, "videoConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.encode(message.videoConfig, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.inputContent != null && Object.hasOwnProperty.call(message, "inputContent"))
                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.inputContent);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StreamingAnnotateVideoRequest message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAnnotateVideoRequest} message StreamingAnnotateVideoRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingAnnotateVideoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StreamingAnnotateVideoRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest} StreamingAnnotateVideoRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingAnnotateVideoRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.videoConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.inputContent = reader.bytes();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StreamingAnnotateVideoRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest} StreamingAnnotateVideoRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingAnnotateVideoRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StreamingAnnotateVideoRequest message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StreamingAnnotateVideoRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.videoConfig != null && message.hasOwnProperty("videoConfig")) {
                                properties.streamingRequest = 1;
                                {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.verify(message.videoConfig);
                                    if (error)
                                        return "videoConfig." + error;
                                }
                            }
                            if (message.inputContent != null && message.hasOwnProperty("inputContent")) {
                                if (properties.streamingRequest === 1)
                                    return "streamingRequest: multiple values";
                                properties.streamingRequest = 1;
                                if (!(message.inputContent && typeof message.inputContent.length === "number" || $util.isString(message.inputContent)))
                                    return "inputContent: buffer expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a StreamingAnnotateVideoRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest} StreamingAnnotateVideoRequest
                         */
                        StreamingAnnotateVideoRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest();
                            if (object.videoConfig != null) {
                                if (typeof object.videoConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest.videoConfig: object expected");
                                message.videoConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.fromObject(object.videoConfig);
                            }
                            if (object.inputContent != null)
                                if (typeof object.inputContent === "string")
                                    $util.base64.decode(object.inputContent, message.inputContent = $util.newBuffer($util.base64.length(object.inputContent)), 0);
                                else if (object.inputContent.length >= 0)
                                    message.inputContent = object.inputContent;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StreamingAnnotateVideoRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest} message StreamingAnnotateVideoRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StreamingAnnotateVideoRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.videoConfig != null && message.hasOwnProperty("videoConfig")) {
                                object.videoConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.toObject(message.videoConfig, options);
                                if (options.oneofs)
                                    object.streamingRequest = "videoConfig";
                            }
                            if (message.inputContent != null && message.hasOwnProperty("inputContent")) {
                                object.inputContent = options.bytes === String ? $util.base64.encode(message.inputContent, 0, message.inputContent.length) : options.bytes === Array ? Array.prototype.slice.call(message.inputContent) : message.inputContent;
                                if (options.oneofs)
                                    object.streamingRequest = "inputContent";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this StreamingAnnotateVideoRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StreamingAnnotateVideoRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StreamingAnnotateVideoRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StreamingAnnotateVideoRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoRequest";
                        };
    
                        return StreamingAnnotateVideoRequest;
                    })();
    
                    v1p3beta1.StreamingVideoConfig = (function() {
    
                        /**
                         * Properties of a StreamingVideoConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IStreamingVideoConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.IStreamingShotChangeDetectionConfig|null} [shotChangeDetectionConfig] StreamingVideoConfig shotChangeDetectionConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.IStreamingLabelDetectionConfig|null} [labelDetectionConfig] StreamingVideoConfig labelDetectionConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.IStreamingExplicitContentDetectionConfig|null} [explicitContentDetectionConfig] StreamingVideoConfig explicitContentDetectionConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.IStreamingObjectTrackingConfig|null} [objectTrackingConfig] StreamingVideoConfig objectTrackingConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlActionRecognitionConfig|null} [automlActionRecognitionConfig] StreamingVideoConfig automlActionRecognitionConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlClassificationConfig|null} [automlClassificationConfig] StreamingVideoConfig automlClassificationConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlObjectTrackingConfig|null} [automlObjectTrackingConfig] StreamingVideoConfig automlObjectTrackingConfig
                         * @property {google.cloud.videointelligence.v1p3beta1.StreamingFeature|null} [feature] StreamingVideoConfig feature
                         * @property {google.cloud.videointelligence.v1p3beta1.IStreamingStorageConfig|null} [storageConfig] StreamingVideoConfig storageConfig
                         */
    
                        /**
                         * Constructs a new StreamingVideoConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingVideoConfig.
                         * @implements IStreamingVideoConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingVideoConfig=} [properties] Properties to set
                         */
                        function StreamingVideoConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StreamingVideoConfig shotChangeDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IStreamingShotChangeDetectionConfig|null|undefined} shotChangeDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @instance
                         */
                        StreamingVideoConfig.prototype.shotChangeDetectionConfig = null;
    
                        /**
                         * StreamingVideoConfig labelDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IStreamingLabelDetectionConfig|null|undefined} labelDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @instance
                         */
                        StreamingVideoConfig.prototype.labelDetectionConfig = null;
    
                        /**
                         * StreamingVideoConfig explicitContentDetectionConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IStreamingExplicitContentDetectionConfig|null|undefined} explicitContentDetectionConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @instance
                         */
                        StreamingVideoConfig.prototype.explicitContentDetectionConfig = null;
    
                        /**
                         * StreamingVideoConfig objectTrackingConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IStreamingObjectTrackingConfig|null|undefined} objectTrackingConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @instance
                         */
                        StreamingVideoConfig.prototype.objectTrackingConfig = null;
    
                        /**
                         * StreamingVideoConfig automlActionRecognitionConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlActionRecognitionConfig|null|undefined} automlActionRecognitionConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @instance
                         */
                        StreamingVideoConfig.prototype.automlActionRecognitionConfig = null;
    
                        /**
                         * StreamingVideoConfig automlClassificationConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlClassificationConfig|null|undefined} automlClassificationConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @instance
                         */
                        StreamingVideoConfig.prototype.automlClassificationConfig = null;
    
                        /**
                         * StreamingVideoConfig automlObjectTrackingConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlObjectTrackingConfig|null|undefined} automlObjectTrackingConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @instance
                         */
                        StreamingVideoConfig.prototype.automlObjectTrackingConfig = null;
    
                        /**
                         * StreamingVideoConfig feature.
                         * @member {google.cloud.videointelligence.v1p3beta1.StreamingFeature} feature
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @instance
                         */
                        StreamingVideoConfig.prototype.feature = 0;
    
                        /**
                         * StreamingVideoConfig storageConfig.
                         * @member {google.cloud.videointelligence.v1p3beta1.IStreamingStorageConfig|null|undefined} storageConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @instance
                         */
                        StreamingVideoConfig.prototype.storageConfig = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * StreamingVideoConfig streamingConfig.
                         * @member {"shotChangeDetectionConfig"|"labelDetectionConfig"|"explicitContentDetectionConfig"|"objectTrackingConfig"|"automlActionRecognitionConfig"|"automlClassificationConfig"|"automlObjectTrackingConfig"|undefined} streamingConfig
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @instance
                         */
                        Object.defineProperty(StreamingVideoConfig.prototype, "streamingConfig", {
                            get: $util.oneOfGetter($oneOfFields = ["shotChangeDetectionConfig", "labelDetectionConfig", "explicitContentDetectionConfig", "objectTrackingConfig", "automlActionRecognitionConfig", "automlClassificationConfig", "automlObjectTrackingConfig"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new StreamingVideoConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingVideoConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig} StreamingVideoConfig instance
                         */
                        StreamingVideoConfig.create = function create(properties) {
                            return new StreamingVideoConfig(properties);
                        };
    
                        /**
                         * Encodes the specified StreamingVideoConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingVideoConfig} message StreamingVideoConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingVideoConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.feature != null && Object.hasOwnProperty.call(message, "feature"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.feature);
                            if (message.shotChangeDetectionConfig != null && Object.hasOwnProperty.call(message, "shotChangeDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig.encode(message.shotChangeDetectionConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.labelDetectionConfig != null && Object.hasOwnProperty.call(message, "labelDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig.encode(message.labelDetectionConfig, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.explicitContentDetectionConfig != null && Object.hasOwnProperty.call(message, "explicitContentDetectionConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig.encode(message.explicitContentDetectionConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.objectTrackingConfig != null && Object.hasOwnProperty.call(message, "objectTrackingConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig.encode(message.objectTrackingConfig, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.automlClassificationConfig != null && Object.hasOwnProperty.call(message, "automlClassificationConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig.encode(message.automlClassificationConfig, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                            if (message.automlObjectTrackingConfig != null && Object.hasOwnProperty.call(message, "automlObjectTrackingConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig.encode(message.automlObjectTrackingConfig, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                            if (message.automlActionRecognitionConfig != null && Object.hasOwnProperty.call(message, "automlActionRecognitionConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig.encode(message.automlActionRecognitionConfig, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                            if (message.storageConfig != null && Object.hasOwnProperty.call(message, "storageConfig"))
                                $root.google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig.encode(message.storageConfig, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StreamingVideoConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingVideoConfig} message StreamingVideoConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingVideoConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StreamingVideoConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig} StreamingVideoConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingVideoConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 2: {
                                        message.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.labelDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.objectTrackingConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 23: {
                                        message.automlActionRecognitionConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 21: {
                                        message.automlClassificationConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 22: {
                                        message.automlObjectTrackingConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 1: {
                                        message.feature = reader.int32();
                                        break;
                                    }
                                case 30: {
                                        message.storageConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StreamingVideoConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig} StreamingVideoConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingVideoConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StreamingVideoConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StreamingVideoConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.shotChangeDetectionConfig != null && message.hasOwnProperty("shotChangeDetectionConfig")) {
                                properties.streamingConfig = 1;
                                {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig.verify(message.shotChangeDetectionConfig);
                                    if (error)
                                        return "shotChangeDetectionConfig." + error;
                                }
                            }
                            if (message.labelDetectionConfig != null && message.hasOwnProperty("labelDetectionConfig")) {
                                if (properties.streamingConfig === 1)
                                    return "streamingConfig: multiple values";
                                properties.streamingConfig = 1;
                                {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig.verify(message.labelDetectionConfig);
                                    if (error)
                                        return "labelDetectionConfig." + error;
                                }
                            }
                            if (message.explicitContentDetectionConfig != null && message.hasOwnProperty("explicitContentDetectionConfig")) {
                                if (properties.streamingConfig === 1)
                                    return "streamingConfig: multiple values";
                                properties.streamingConfig = 1;
                                {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig.verify(message.explicitContentDetectionConfig);
                                    if (error)
                                        return "explicitContentDetectionConfig." + error;
                                }
                            }
                            if (message.objectTrackingConfig != null && message.hasOwnProperty("objectTrackingConfig")) {
                                if (properties.streamingConfig === 1)
                                    return "streamingConfig: multiple values";
                                properties.streamingConfig = 1;
                                {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig.verify(message.objectTrackingConfig);
                                    if (error)
                                        return "objectTrackingConfig." + error;
                                }
                            }
                            if (message.automlActionRecognitionConfig != null && message.hasOwnProperty("automlActionRecognitionConfig")) {
                                if (properties.streamingConfig === 1)
                                    return "streamingConfig: multiple values";
                                properties.streamingConfig = 1;
                                {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig.verify(message.automlActionRecognitionConfig);
                                    if (error)
                                        return "automlActionRecognitionConfig." + error;
                                }
                            }
                            if (message.automlClassificationConfig != null && message.hasOwnProperty("automlClassificationConfig")) {
                                if (properties.streamingConfig === 1)
                                    return "streamingConfig: multiple values";
                                properties.streamingConfig = 1;
                                {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig.verify(message.automlClassificationConfig);
                                    if (error)
                                        return "automlClassificationConfig." + error;
                                }
                            }
                            if (message.automlObjectTrackingConfig != null && message.hasOwnProperty("automlObjectTrackingConfig")) {
                                if (properties.streamingConfig === 1)
                                    return "streamingConfig: multiple values";
                                properties.streamingConfig = 1;
                                {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig.verify(message.automlObjectTrackingConfig);
                                    if (error)
                                        return "automlObjectTrackingConfig." + error;
                                }
                            }
                            if (message.feature != null && message.hasOwnProperty("feature"))
                                switch (message.feature) {
                                default:
                                    return "feature: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 23:
                                case 21:
                                case 22:
                                    break;
                                }
                            if (message.storageConfig != null && message.hasOwnProperty("storageConfig")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig.verify(message.storageConfig);
                                if (error)
                                    return "storageConfig." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a StreamingVideoConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig} StreamingVideoConfig
                         */
                        StreamingVideoConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig();
                            if (object.shotChangeDetectionConfig != null) {
                                if (typeof object.shotChangeDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.shotChangeDetectionConfig: object expected");
                                message.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig.fromObject(object.shotChangeDetectionConfig);
                            }
                            if (object.labelDetectionConfig != null) {
                                if (typeof object.labelDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.labelDetectionConfig: object expected");
                                message.labelDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig.fromObject(object.labelDetectionConfig);
                            }
                            if (object.explicitContentDetectionConfig != null) {
                                if (typeof object.explicitContentDetectionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.explicitContentDetectionConfig: object expected");
                                message.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig.fromObject(object.explicitContentDetectionConfig);
                            }
                            if (object.objectTrackingConfig != null) {
                                if (typeof object.objectTrackingConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.objectTrackingConfig: object expected");
                                message.objectTrackingConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig.fromObject(object.objectTrackingConfig);
                            }
                            if (object.automlActionRecognitionConfig != null) {
                                if (typeof object.automlActionRecognitionConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.automlActionRecognitionConfig: object expected");
                                message.automlActionRecognitionConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig.fromObject(object.automlActionRecognitionConfig);
                            }
                            if (object.automlClassificationConfig != null) {
                                if (typeof object.automlClassificationConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.automlClassificationConfig: object expected");
                                message.automlClassificationConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig.fromObject(object.automlClassificationConfig);
                            }
                            if (object.automlObjectTrackingConfig != null) {
                                if (typeof object.automlObjectTrackingConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.automlObjectTrackingConfig: object expected");
                                message.automlObjectTrackingConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig.fromObject(object.automlObjectTrackingConfig);
                            }
                            switch (object.feature) {
                            default:
                                if (typeof object.feature === "number") {
                                    message.feature = object.feature;
                                    break;
                                }
                                break;
                            case "STREAMING_FEATURE_UNSPECIFIED":
                            case 0:
                                message.feature = 0;
                                break;
                            case "STREAMING_LABEL_DETECTION":
                            case 1:
                                message.feature = 1;
                                break;
                            case "STREAMING_SHOT_CHANGE_DETECTION":
                            case 2:
                                message.feature = 2;
                                break;
                            case "STREAMING_EXPLICIT_CONTENT_DETECTION":
                            case 3:
                                message.feature = 3;
                                break;
                            case "STREAMING_OBJECT_TRACKING":
                            case 4:
                                message.feature = 4;
                                break;
                            case "STREAMING_AUTOML_ACTION_RECOGNITION":
                            case 23:
                                message.feature = 23;
                                break;
                            case "STREAMING_AUTOML_CLASSIFICATION":
                            case 21:
                                message.feature = 21;
                                break;
                            case "STREAMING_AUTOML_OBJECT_TRACKING":
                            case 22:
                                message.feature = 22;
                                break;
                            }
                            if (object.storageConfig != null) {
                                if (typeof object.storageConfig !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig.storageConfig: object expected");
                                message.storageConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig.fromObject(object.storageConfig);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StreamingVideoConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig} message StreamingVideoConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StreamingVideoConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.feature = options.enums === String ? "STREAMING_FEATURE_UNSPECIFIED" : 0;
                                object.storageConfig = null;
                            }
                            if (message.feature != null && message.hasOwnProperty("feature"))
                                object.feature = options.enums === String ? $root.google.cloud.videointelligence.v1p3beta1.StreamingFeature[message.feature] === undefined ? message.feature : $root.google.cloud.videointelligence.v1p3beta1.StreamingFeature[message.feature] : message.feature;
                            if (message.shotChangeDetectionConfig != null && message.hasOwnProperty("shotChangeDetectionConfig")) {
                                object.shotChangeDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig.toObject(message.shotChangeDetectionConfig, options);
                                if (options.oneofs)
                                    object.streamingConfig = "shotChangeDetectionConfig";
                            }
                            if (message.labelDetectionConfig != null && message.hasOwnProperty("labelDetectionConfig")) {
                                object.labelDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig.toObject(message.labelDetectionConfig, options);
                                if (options.oneofs)
                                    object.streamingConfig = "labelDetectionConfig";
                            }
                            if (message.explicitContentDetectionConfig != null && message.hasOwnProperty("explicitContentDetectionConfig")) {
                                object.explicitContentDetectionConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig.toObject(message.explicitContentDetectionConfig, options);
                                if (options.oneofs)
                                    object.streamingConfig = "explicitContentDetectionConfig";
                            }
                            if (message.objectTrackingConfig != null && message.hasOwnProperty("objectTrackingConfig")) {
                                object.objectTrackingConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig.toObject(message.objectTrackingConfig, options);
                                if (options.oneofs)
                                    object.streamingConfig = "objectTrackingConfig";
                            }
                            if (message.automlClassificationConfig != null && message.hasOwnProperty("automlClassificationConfig")) {
                                object.automlClassificationConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig.toObject(message.automlClassificationConfig, options);
                                if (options.oneofs)
                                    object.streamingConfig = "automlClassificationConfig";
                            }
                            if (message.automlObjectTrackingConfig != null && message.hasOwnProperty("automlObjectTrackingConfig")) {
                                object.automlObjectTrackingConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig.toObject(message.automlObjectTrackingConfig, options);
                                if (options.oneofs)
                                    object.streamingConfig = "automlObjectTrackingConfig";
                            }
                            if (message.automlActionRecognitionConfig != null && message.hasOwnProperty("automlActionRecognitionConfig")) {
                                object.automlActionRecognitionConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig.toObject(message.automlActionRecognitionConfig, options);
                                if (options.oneofs)
                                    object.streamingConfig = "automlActionRecognitionConfig";
                            }
                            if (message.storageConfig != null && message.hasOwnProperty("storageConfig"))
                                object.storageConfig = $root.google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig.toObject(message.storageConfig, options);
                            return object;
                        };
    
                        /**
                         * Converts this StreamingVideoConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StreamingVideoConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StreamingVideoConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StreamingVideoConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.StreamingVideoConfig";
                        };
    
                        return StreamingVideoConfig;
                    })();
    
                    v1p3beta1.StreamingAnnotateVideoResponse = (function() {
    
                        /**
                         * Properties of a StreamingAnnotateVideoResponse.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IStreamingAnnotateVideoResponse
                         * @property {google.rpc.IStatus|null} [error] StreamingAnnotateVideoResponse error
                         * @property {google.cloud.videointelligence.v1p3beta1.IStreamingVideoAnnotationResults|null} [annotationResults] StreamingAnnotateVideoResponse annotationResults
                         * @property {string|null} [annotationResultsUri] StreamingAnnotateVideoResponse annotationResultsUri
                         */
    
                        /**
                         * Constructs a new StreamingAnnotateVideoResponse.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingAnnotateVideoResponse.
                         * @implements IStreamingAnnotateVideoResponse
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAnnotateVideoResponse=} [properties] Properties to set
                         */
                        function StreamingAnnotateVideoResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StreamingAnnotateVideoResponse error.
                         * @member {google.rpc.IStatus|null|undefined} error
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @instance
                         */
                        StreamingAnnotateVideoResponse.prototype.error = null;
    
                        /**
                         * StreamingAnnotateVideoResponse annotationResults.
                         * @member {google.cloud.videointelligence.v1p3beta1.IStreamingVideoAnnotationResults|null|undefined} annotationResults
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @instance
                         */
                        StreamingAnnotateVideoResponse.prototype.annotationResults = null;
    
                        /**
                         * StreamingAnnotateVideoResponse annotationResultsUri.
                         * @member {string} annotationResultsUri
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @instance
                         */
                        StreamingAnnotateVideoResponse.prototype.annotationResultsUri = "";
    
                        /**
                         * Creates a new StreamingAnnotateVideoResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAnnotateVideoResponse=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse} StreamingAnnotateVideoResponse instance
                         */
                        StreamingAnnotateVideoResponse.create = function create(properties) {
                            return new StreamingAnnotateVideoResponse(properties);
                        };
    
                        /**
                         * Encodes the specified StreamingAnnotateVideoResponse message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAnnotateVideoResponse} message StreamingAnnotateVideoResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingAnnotateVideoResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                                $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.annotationResults != null && Object.hasOwnProperty.call(message, "annotationResults"))
                                $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.encode(message.annotationResults, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.annotationResultsUri != null && Object.hasOwnProperty.call(message, "annotationResultsUri"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.annotationResultsUri);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StreamingAnnotateVideoResponse message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAnnotateVideoResponse} message StreamingAnnotateVideoResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingAnnotateVideoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StreamingAnnotateVideoResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse} StreamingAnnotateVideoResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingAnnotateVideoResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.annotationResults = $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.annotationResultsUri = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StreamingAnnotateVideoResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse} StreamingAnnotateVideoResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingAnnotateVideoResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StreamingAnnotateVideoResponse message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StreamingAnnotateVideoResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.error != null && message.hasOwnProperty("error")) {
                                var error = $root.google.rpc.Status.verify(message.error);
                                if (error)
                                    return "error." + error;
                            }
                            if (message.annotationResults != null && message.hasOwnProperty("annotationResults")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.verify(message.annotationResults);
                                if (error)
                                    return "annotationResults." + error;
                            }
                            if (message.annotationResultsUri != null && message.hasOwnProperty("annotationResultsUri"))
                                if (!$util.isString(message.annotationResultsUri))
                                    return "annotationResultsUri: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a StreamingAnnotateVideoResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse} StreamingAnnotateVideoResponse
                         */
                        StreamingAnnotateVideoResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse();
                            if (object.error != null) {
                                if (typeof object.error !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse.error: object expected");
                                message.error = $root.google.rpc.Status.fromObject(object.error);
                            }
                            if (object.annotationResults != null) {
                                if (typeof object.annotationResults !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse.annotationResults: object expected");
                                message.annotationResults = $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.fromObject(object.annotationResults);
                            }
                            if (object.annotationResultsUri != null)
                                message.annotationResultsUri = String(object.annotationResultsUri);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StreamingAnnotateVideoResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse} message StreamingAnnotateVideoResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StreamingAnnotateVideoResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.error = null;
                                object.annotationResults = null;
                                object.annotationResultsUri = "";
                            }
                            if (message.error != null && message.hasOwnProperty("error"))
                                object.error = $root.google.rpc.Status.toObject(message.error, options);
                            if (message.annotationResults != null && message.hasOwnProperty("annotationResults"))
                                object.annotationResults = $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.toObject(message.annotationResults, options);
                            if (message.annotationResultsUri != null && message.hasOwnProperty("annotationResultsUri"))
                                object.annotationResultsUri = message.annotationResultsUri;
                            return object;
                        };
    
                        /**
                         * Converts this StreamingAnnotateVideoResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StreamingAnnotateVideoResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StreamingAnnotateVideoResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StreamingAnnotateVideoResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.StreamingAnnotateVideoResponse";
                        };
    
                        return StreamingAnnotateVideoResponse;
                    })();
    
                    v1p3beta1.StreamingVideoAnnotationResults = (function() {
    
                        /**
                         * Properties of a StreamingVideoAnnotationResults.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IStreamingVideoAnnotationResults
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IVideoSegment>|null} [shotAnnotations] StreamingVideoAnnotationResults shotAnnotations
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.ILabelAnnotation>|null} [labelAnnotations] StreamingVideoAnnotationResults labelAnnotations
                         * @property {google.cloud.videointelligence.v1p3beta1.IExplicitContentAnnotation|null} [explicitAnnotation] StreamingVideoAnnotationResults explicitAnnotation
                         * @property {Array.<google.cloud.videointelligence.v1p3beta1.IObjectTrackingAnnotation>|null} [objectAnnotations] StreamingVideoAnnotationResults objectAnnotations
                         */
    
                        /**
                         * Constructs a new StreamingVideoAnnotationResults.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingVideoAnnotationResults.
                         * @implements IStreamingVideoAnnotationResults
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingVideoAnnotationResults=} [properties] Properties to set
                         */
                        function StreamingVideoAnnotationResults(properties) {
                            this.shotAnnotations = [];
                            this.labelAnnotations = [];
                            this.objectAnnotations = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StreamingVideoAnnotationResults shotAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IVideoSegment>} shotAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @instance
                         */
                        StreamingVideoAnnotationResults.prototype.shotAnnotations = $util.emptyArray;
    
                        /**
                         * StreamingVideoAnnotationResults labelAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.ILabelAnnotation>} labelAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @instance
                         */
                        StreamingVideoAnnotationResults.prototype.labelAnnotations = $util.emptyArray;
    
                        /**
                         * StreamingVideoAnnotationResults explicitAnnotation.
                         * @member {google.cloud.videointelligence.v1p3beta1.IExplicitContentAnnotation|null|undefined} explicitAnnotation
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @instance
                         */
                        StreamingVideoAnnotationResults.prototype.explicitAnnotation = null;
    
                        /**
                         * StreamingVideoAnnotationResults objectAnnotations.
                         * @member {Array.<google.cloud.videointelligence.v1p3beta1.IObjectTrackingAnnotation>} objectAnnotations
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @instance
                         */
                        StreamingVideoAnnotationResults.prototype.objectAnnotations = $util.emptyArray;
    
                        /**
                         * Creates a new StreamingVideoAnnotationResults instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingVideoAnnotationResults=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults} StreamingVideoAnnotationResults instance
                         */
                        StreamingVideoAnnotationResults.create = function create(properties) {
                            return new StreamingVideoAnnotationResults(properties);
                        };
    
                        /**
                         * Encodes the specified StreamingVideoAnnotationResults message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingVideoAnnotationResults} message StreamingVideoAnnotationResults message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingVideoAnnotationResults.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.shotAnnotations != null && message.shotAnnotations.length)
                                for (var i = 0; i < message.shotAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.encode(message.shotAnnotations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.labelAnnotations != null && message.labelAnnotations.length)
                                for (var i = 0; i < message.labelAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.encode(message.labelAnnotations[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.explicitAnnotation != null && Object.hasOwnProperty.call(message, "explicitAnnotation"))
                                $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.encode(message.explicitAnnotation, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.objectAnnotations != null && message.objectAnnotations.length)
                                for (var i = 0; i < message.objectAnnotations.length; ++i)
                                    $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.encode(message.objectAnnotations[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StreamingVideoAnnotationResults message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingVideoAnnotationResults} message StreamingVideoAnnotationResults message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingVideoAnnotationResults.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StreamingVideoAnnotationResults message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults} StreamingVideoAnnotationResults
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingVideoAnnotationResults.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.shotAnnotations && message.shotAnnotations.length))
                                            message.shotAnnotations = [];
                                        message.shotAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.VideoSegment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        if (!(message.labelAnnotations && message.labelAnnotations.length))
                                            message.labelAnnotations = [];
                                        message.labelAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        message.explicitAnnotation = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        if (!(message.objectAnnotations && message.objectAnnotations.length))
                                            message.objectAnnotations = [];
                                        message.objectAnnotations.push($root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StreamingVideoAnnotationResults message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults} StreamingVideoAnnotationResults
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingVideoAnnotationResults.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StreamingVideoAnnotationResults message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StreamingVideoAnnotationResults.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.shotAnnotations != null && message.hasOwnProperty("shotAnnotations")) {
                                if (!Array.isArray(message.shotAnnotations))
                                    return "shotAnnotations: array expected";
                                for (var i = 0; i < message.shotAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.verify(message.shotAnnotations[i]);
                                    if (error)
                                        return "shotAnnotations." + error;
                                }
                            }
                            if (message.labelAnnotations != null && message.hasOwnProperty("labelAnnotations")) {
                                if (!Array.isArray(message.labelAnnotations))
                                    return "labelAnnotations: array expected";
                                for (var i = 0; i < message.labelAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.verify(message.labelAnnotations[i]);
                                    if (error)
                                        return "labelAnnotations." + error;
                                }
                            }
                            if (message.explicitAnnotation != null && message.hasOwnProperty("explicitAnnotation")) {
                                var error = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.verify(message.explicitAnnotation);
                                if (error)
                                    return "explicitAnnotation." + error;
                            }
                            if (message.objectAnnotations != null && message.hasOwnProperty("objectAnnotations")) {
                                if (!Array.isArray(message.objectAnnotations))
                                    return "objectAnnotations: array expected";
                                for (var i = 0; i < message.objectAnnotations.length; ++i) {
                                    var error = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.verify(message.objectAnnotations[i]);
                                    if (error)
                                        return "objectAnnotations." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a StreamingVideoAnnotationResults message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults} StreamingVideoAnnotationResults
                         */
                        StreamingVideoAnnotationResults.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults();
                            if (object.shotAnnotations) {
                                if (!Array.isArray(object.shotAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.shotAnnotations: array expected");
                                message.shotAnnotations = [];
                                for (var i = 0; i < object.shotAnnotations.length; ++i) {
                                    if (typeof object.shotAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.shotAnnotations: object expected");
                                    message.shotAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.fromObject(object.shotAnnotations[i]);
                                }
                            }
                            if (object.labelAnnotations) {
                                if (!Array.isArray(object.labelAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.labelAnnotations: array expected");
                                message.labelAnnotations = [];
                                for (var i = 0; i < object.labelAnnotations.length; ++i) {
                                    if (typeof object.labelAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.labelAnnotations: object expected");
                                    message.labelAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.fromObject(object.labelAnnotations[i]);
                                }
                            }
                            if (object.explicitAnnotation != null) {
                                if (typeof object.explicitAnnotation !== "object")
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.explicitAnnotation: object expected");
                                message.explicitAnnotation = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.fromObject(object.explicitAnnotation);
                            }
                            if (object.objectAnnotations) {
                                if (!Array.isArray(object.objectAnnotations))
                                    throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.objectAnnotations: array expected");
                                message.objectAnnotations = [];
                                for (var i = 0; i < object.objectAnnotations.length; ++i) {
                                    if (typeof object.objectAnnotations[i] !== "object")
                                        throw TypeError(".google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults.objectAnnotations: object expected");
                                    message.objectAnnotations[i] = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.fromObject(object.objectAnnotations[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StreamingVideoAnnotationResults message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults} message StreamingVideoAnnotationResults
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StreamingVideoAnnotationResults.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.shotAnnotations = [];
                                object.labelAnnotations = [];
                                object.objectAnnotations = [];
                            }
                            if (options.defaults)
                                object.explicitAnnotation = null;
                            if (message.shotAnnotations && message.shotAnnotations.length) {
                                object.shotAnnotations = [];
                                for (var j = 0; j < message.shotAnnotations.length; ++j)
                                    object.shotAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.VideoSegment.toObject(message.shotAnnotations[j], options);
                            }
                            if (message.labelAnnotations && message.labelAnnotations.length) {
                                object.labelAnnotations = [];
                                for (var j = 0; j < message.labelAnnotations.length; ++j)
                                    object.labelAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.LabelAnnotation.toObject(message.labelAnnotations[j], options);
                            }
                            if (message.explicitAnnotation != null && message.hasOwnProperty("explicitAnnotation"))
                                object.explicitAnnotation = $root.google.cloud.videointelligence.v1p3beta1.ExplicitContentAnnotation.toObject(message.explicitAnnotation, options);
                            if (message.objectAnnotations && message.objectAnnotations.length) {
                                object.objectAnnotations = [];
                                for (var j = 0; j < message.objectAnnotations.length; ++j)
                                    object.objectAnnotations[j] = $root.google.cloud.videointelligence.v1p3beta1.ObjectTrackingAnnotation.toObject(message.objectAnnotations[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this StreamingVideoAnnotationResults to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StreamingVideoAnnotationResults.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StreamingVideoAnnotationResults
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StreamingVideoAnnotationResults.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.StreamingVideoAnnotationResults";
                        };
    
                        return StreamingVideoAnnotationResults;
                    })();
    
                    v1p3beta1.StreamingShotChangeDetectionConfig = (function() {
    
                        /**
                         * Properties of a StreamingShotChangeDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IStreamingShotChangeDetectionConfig
                         */
    
                        /**
                         * Constructs a new StreamingShotChangeDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingShotChangeDetectionConfig.
                         * @implements IStreamingShotChangeDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingShotChangeDetectionConfig=} [properties] Properties to set
                         */
                        function StreamingShotChangeDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new StreamingShotChangeDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingShotChangeDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig} StreamingShotChangeDetectionConfig instance
                         */
                        StreamingShotChangeDetectionConfig.create = function create(properties) {
                            return new StreamingShotChangeDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified StreamingShotChangeDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingShotChangeDetectionConfig} message StreamingShotChangeDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingShotChangeDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StreamingShotChangeDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingShotChangeDetectionConfig} message StreamingShotChangeDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingShotChangeDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StreamingShotChangeDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig} StreamingShotChangeDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingShotChangeDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StreamingShotChangeDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig} StreamingShotChangeDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingShotChangeDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StreamingShotChangeDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StreamingShotChangeDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a StreamingShotChangeDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig} StreamingShotChangeDetectionConfig
                         */
                        StreamingShotChangeDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig)
                                return object;
                            return new $root.google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig();
                        };
    
                        /**
                         * Creates a plain object from a StreamingShotChangeDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig} message StreamingShotChangeDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StreamingShotChangeDetectionConfig.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this StreamingShotChangeDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StreamingShotChangeDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StreamingShotChangeDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StreamingShotChangeDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.StreamingShotChangeDetectionConfig";
                        };
    
                        return StreamingShotChangeDetectionConfig;
                    })();
    
                    v1p3beta1.StreamingLabelDetectionConfig = (function() {
    
                        /**
                         * Properties of a StreamingLabelDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IStreamingLabelDetectionConfig
                         * @property {boolean|null} [stationaryCamera] StreamingLabelDetectionConfig stationaryCamera
                         */
    
                        /**
                         * Constructs a new StreamingLabelDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingLabelDetectionConfig.
                         * @implements IStreamingLabelDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingLabelDetectionConfig=} [properties] Properties to set
                         */
                        function StreamingLabelDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StreamingLabelDetectionConfig stationaryCamera.
                         * @member {boolean} stationaryCamera
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig
                         * @instance
                         */
                        StreamingLabelDetectionConfig.prototype.stationaryCamera = false;
    
                        /**
                         * Creates a new StreamingLabelDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingLabelDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig} StreamingLabelDetectionConfig instance
                         */
                        StreamingLabelDetectionConfig.create = function create(properties) {
                            return new StreamingLabelDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified StreamingLabelDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingLabelDetectionConfig} message StreamingLabelDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingLabelDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.stationaryCamera != null && Object.hasOwnProperty.call(message, "stationaryCamera"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.stationaryCamera);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StreamingLabelDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingLabelDetectionConfig} message StreamingLabelDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingLabelDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StreamingLabelDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig} StreamingLabelDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingLabelDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.stationaryCamera = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StreamingLabelDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig} StreamingLabelDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingLabelDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StreamingLabelDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StreamingLabelDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.stationaryCamera != null && message.hasOwnProperty("stationaryCamera"))
                                if (typeof message.stationaryCamera !== "boolean")
                                    return "stationaryCamera: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a StreamingLabelDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig} StreamingLabelDetectionConfig
                         */
                        StreamingLabelDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig();
                            if (object.stationaryCamera != null)
                                message.stationaryCamera = Boolean(object.stationaryCamera);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StreamingLabelDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig} message StreamingLabelDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StreamingLabelDetectionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.stationaryCamera = false;
                            if (message.stationaryCamera != null && message.hasOwnProperty("stationaryCamera"))
                                object.stationaryCamera = message.stationaryCamera;
                            return object;
                        };
    
                        /**
                         * Converts this StreamingLabelDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StreamingLabelDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StreamingLabelDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StreamingLabelDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.StreamingLabelDetectionConfig";
                        };
    
                        return StreamingLabelDetectionConfig;
                    })();
    
                    v1p3beta1.StreamingExplicitContentDetectionConfig = (function() {
    
                        /**
                         * Properties of a StreamingExplicitContentDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IStreamingExplicitContentDetectionConfig
                         */
    
                        /**
                         * Constructs a new StreamingExplicitContentDetectionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingExplicitContentDetectionConfig.
                         * @implements IStreamingExplicitContentDetectionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingExplicitContentDetectionConfig=} [properties] Properties to set
                         */
                        function StreamingExplicitContentDetectionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new StreamingExplicitContentDetectionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingExplicitContentDetectionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig} StreamingExplicitContentDetectionConfig instance
                         */
                        StreamingExplicitContentDetectionConfig.create = function create(properties) {
                            return new StreamingExplicitContentDetectionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified StreamingExplicitContentDetectionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingExplicitContentDetectionConfig} message StreamingExplicitContentDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingExplicitContentDetectionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StreamingExplicitContentDetectionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingExplicitContentDetectionConfig} message StreamingExplicitContentDetectionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingExplicitContentDetectionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StreamingExplicitContentDetectionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig} StreamingExplicitContentDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingExplicitContentDetectionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StreamingExplicitContentDetectionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig} StreamingExplicitContentDetectionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingExplicitContentDetectionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StreamingExplicitContentDetectionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StreamingExplicitContentDetectionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a StreamingExplicitContentDetectionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig} StreamingExplicitContentDetectionConfig
                         */
                        StreamingExplicitContentDetectionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig)
                                return object;
                            return new $root.google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig();
                        };
    
                        /**
                         * Creates a plain object from a StreamingExplicitContentDetectionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig} message StreamingExplicitContentDetectionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StreamingExplicitContentDetectionConfig.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this StreamingExplicitContentDetectionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StreamingExplicitContentDetectionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StreamingExplicitContentDetectionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StreamingExplicitContentDetectionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.StreamingExplicitContentDetectionConfig";
                        };
    
                        return StreamingExplicitContentDetectionConfig;
                    })();
    
                    v1p3beta1.StreamingObjectTrackingConfig = (function() {
    
                        /**
                         * Properties of a StreamingObjectTrackingConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IStreamingObjectTrackingConfig
                         */
    
                        /**
                         * Constructs a new StreamingObjectTrackingConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingObjectTrackingConfig.
                         * @implements IStreamingObjectTrackingConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingObjectTrackingConfig=} [properties] Properties to set
                         */
                        function StreamingObjectTrackingConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Creates a new StreamingObjectTrackingConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingObjectTrackingConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig} StreamingObjectTrackingConfig instance
                         */
                        StreamingObjectTrackingConfig.create = function create(properties) {
                            return new StreamingObjectTrackingConfig(properties);
                        };
    
                        /**
                         * Encodes the specified StreamingObjectTrackingConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingObjectTrackingConfig} message StreamingObjectTrackingConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingObjectTrackingConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StreamingObjectTrackingConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingObjectTrackingConfig} message StreamingObjectTrackingConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingObjectTrackingConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StreamingObjectTrackingConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig} StreamingObjectTrackingConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingObjectTrackingConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StreamingObjectTrackingConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig} StreamingObjectTrackingConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingObjectTrackingConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StreamingObjectTrackingConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StreamingObjectTrackingConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a StreamingObjectTrackingConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig} StreamingObjectTrackingConfig
                         */
                        StreamingObjectTrackingConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig)
                                return object;
                            return new $root.google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig();
                        };
    
                        /**
                         * Creates a plain object from a StreamingObjectTrackingConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig} message StreamingObjectTrackingConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StreamingObjectTrackingConfig.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this StreamingObjectTrackingConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StreamingObjectTrackingConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StreamingObjectTrackingConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StreamingObjectTrackingConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.StreamingObjectTrackingConfig";
                        };
    
                        return StreamingObjectTrackingConfig;
                    })();
    
                    v1p3beta1.StreamingAutomlActionRecognitionConfig = (function() {
    
                        /**
                         * Properties of a StreamingAutomlActionRecognitionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IStreamingAutomlActionRecognitionConfig
                         * @property {string|null} [modelName] StreamingAutomlActionRecognitionConfig modelName
                         */
    
                        /**
                         * Constructs a new StreamingAutomlActionRecognitionConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingAutomlActionRecognitionConfig.
                         * @implements IStreamingAutomlActionRecognitionConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlActionRecognitionConfig=} [properties] Properties to set
                         */
                        function StreamingAutomlActionRecognitionConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StreamingAutomlActionRecognitionConfig modelName.
                         * @member {string} modelName
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig
                         * @instance
                         */
                        StreamingAutomlActionRecognitionConfig.prototype.modelName = "";
    
                        /**
                         * Creates a new StreamingAutomlActionRecognitionConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlActionRecognitionConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig} StreamingAutomlActionRecognitionConfig instance
                         */
                        StreamingAutomlActionRecognitionConfig.create = function create(properties) {
                            return new StreamingAutomlActionRecognitionConfig(properties);
                        };
    
                        /**
                         * Encodes the specified StreamingAutomlActionRecognitionConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlActionRecognitionConfig} message StreamingAutomlActionRecognitionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingAutomlActionRecognitionConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.modelName != null && Object.hasOwnProperty.call(message, "modelName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.modelName);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StreamingAutomlActionRecognitionConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlActionRecognitionConfig} message StreamingAutomlActionRecognitionConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingAutomlActionRecognitionConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StreamingAutomlActionRecognitionConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig} StreamingAutomlActionRecognitionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingAutomlActionRecognitionConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.modelName = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StreamingAutomlActionRecognitionConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig} StreamingAutomlActionRecognitionConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingAutomlActionRecognitionConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StreamingAutomlActionRecognitionConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StreamingAutomlActionRecognitionConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.modelName != null && message.hasOwnProperty("modelName"))
                                if (!$util.isString(message.modelName))
                                    return "modelName: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a StreamingAutomlActionRecognitionConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig} StreamingAutomlActionRecognitionConfig
                         */
                        StreamingAutomlActionRecognitionConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig();
                            if (object.modelName != null)
                                message.modelName = String(object.modelName);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StreamingAutomlActionRecognitionConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig} message StreamingAutomlActionRecognitionConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StreamingAutomlActionRecognitionConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.modelName = "";
                            if (message.modelName != null && message.hasOwnProperty("modelName"))
                                object.modelName = message.modelName;
                            return object;
                        };
    
                        /**
                         * Converts this StreamingAutomlActionRecognitionConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StreamingAutomlActionRecognitionConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StreamingAutomlActionRecognitionConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StreamingAutomlActionRecognitionConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.StreamingAutomlActionRecognitionConfig";
                        };
    
                        return StreamingAutomlActionRecognitionConfig;
                    })();
    
                    v1p3beta1.StreamingAutomlClassificationConfig = (function() {
    
                        /**
                         * Properties of a StreamingAutomlClassificationConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IStreamingAutomlClassificationConfig
                         * @property {string|null} [modelName] StreamingAutomlClassificationConfig modelName
                         */
    
                        /**
                         * Constructs a new StreamingAutomlClassificationConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingAutomlClassificationConfig.
                         * @implements IStreamingAutomlClassificationConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlClassificationConfig=} [properties] Properties to set
                         */
                        function StreamingAutomlClassificationConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StreamingAutomlClassificationConfig modelName.
                         * @member {string} modelName
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig
                         * @instance
                         */
                        StreamingAutomlClassificationConfig.prototype.modelName = "";
    
                        /**
                         * Creates a new StreamingAutomlClassificationConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlClassificationConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig} StreamingAutomlClassificationConfig instance
                         */
                        StreamingAutomlClassificationConfig.create = function create(properties) {
                            return new StreamingAutomlClassificationConfig(properties);
                        };
    
                        /**
                         * Encodes the specified StreamingAutomlClassificationConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlClassificationConfig} message StreamingAutomlClassificationConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingAutomlClassificationConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.modelName != null && Object.hasOwnProperty.call(message, "modelName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.modelName);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StreamingAutomlClassificationConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlClassificationConfig} message StreamingAutomlClassificationConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingAutomlClassificationConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StreamingAutomlClassificationConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig} StreamingAutomlClassificationConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingAutomlClassificationConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.modelName = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StreamingAutomlClassificationConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig} StreamingAutomlClassificationConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingAutomlClassificationConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StreamingAutomlClassificationConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StreamingAutomlClassificationConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.modelName != null && message.hasOwnProperty("modelName"))
                                if (!$util.isString(message.modelName))
                                    return "modelName: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a StreamingAutomlClassificationConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig} StreamingAutomlClassificationConfig
                         */
                        StreamingAutomlClassificationConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig();
                            if (object.modelName != null)
                                message.modelName = String(object.modelName);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StreamingAutomlClassificationConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig} message StreamingAutomlClassificationConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StreamingAutomlClassificationConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.modelName = "";
                            if (message.modelName != null && message.hasOwnProperty("modelName"))
                                object.modelName = message.modelName;
                            return object;
                        };
    
                        /**
                         * Converts this StreamingAutomlClassificationConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StreamingAutomlClassificationConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StreamingAutomlClassificationConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StreamingAutomlClassificationConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.StreamingAutomlClassificationConfig";
                        };
    
                        return StreamingAutomlClassificationConfig;
                    })();
    
                    v1p3beta1.StreamingAutomlObjectTrackingConfig = (function() {
    
                        /**
                         * Properties of a StreamingAutomlObjectTrackingConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IStreamingAutomlObjectTrackingConfig
                         * @property {string|null} [modelName] StreamingAutomlObjectTrackingConfig modelName
                         */
    
                        /**
                         * Constructs a new StreamingAutomlObjectTrackingConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingAutomlObjectTrackingConfig.
                         * @implements IStreamingAutomlObjectTrackingConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlObjectTrackingConfig=} [properties] Properties to set
                         */
                        function StreamingAutomlObjectTrackingConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StreamingAutomlObjectTrackingConfig modelName.
                         * @member {string} modelName
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig
                         * @instance
                         */
                        StreamingAutomlObjectTrackingConfig.prototype.modelName = "";
    
                        /**
                         * Creates a new StreamingAutomlObjectTrackingConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlObjectTrackingConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig} StreamingAutomlObjectTrackingConfig instance
                         */
                        StreamingAutomlObjectTrackingConfig.create = function create(properties) {
                            return new StreamingAutomlObjectTrackingConfig(properties);
                        };
    
                        /**
                         * Encodes the specified StreamingAutomlObjectTrackingConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlObjectTrackingConfig} message StreamingAutomlObjectTrackingConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingAutomlObjectTrackingConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.modelName != null && Object.hasOwnProperty.call(message, "modelName"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.modelName);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StreamingAutomlObjectTrackingConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingAutomlObjectTrackingConfig} message StreamingAutomlObjectTrackingConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingAutomlObjectTrackingConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StreamingAutomlObjectTrackingConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig} StreamingAutomlObjectTrackingConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingAutomlObjectTrackingConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.modelName = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StreamingAutomlObjectTrackingConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig} StreamingAutomlObjectTrackingConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingAutomlObjectTrackingConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StreamingAutomlObjectTrackingConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StreamingAutomlObjectTrackingConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.modelName != null && message.hasOwnProperty("modelName"))
                                if (!$util.isString(message.modelName))
                                    return "modelName: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a StreamingAutomlObjectTrackingConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig} StreamingAutomlObjectTrackingConfig
                         */
                        StreamingAutomlObjectTrackingConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig();
                            if (object.modelName != null)
                                message.modelName = String(object.modelName);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StreamingAutomlObjectTrackingConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig} message StreamingAutomlObjectTrackingConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StreamingAutomlObjectTrackingConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.modelName = "";
                            if (message.modelName != null && message.hasOwnProperty("modelName"))
                                object.modelName = message.modelName;
                            return object;
                        };
    
                        /**
                         * Converts this StreamingAutomlObjectTrackingConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StreamingAutomlObjectTrackingConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StreamingAutomlObjectTrackingConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StreamingAutomlObjectTrackingConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.StreamingAutomlObjectTrackingConfig";
                        };
    
                        return StreamingAutomlObjectTrackingConfig;
                    })();
    
                    v1p3beta1.StreamingStorageConfig = (function() {
    
                        /**
                         * Properties of a StreamingStorageConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @interface IStreamingStorageConfig
                         * @property {boolean|null} [enableStorageAnnotationResult] StreamingStorageConfig enableStorageAnnotationResult
                         * @property {string|null} [annotationResultStorageDirectory] StreamingStorageConfig annotationResultStorageDirectory
                         */
    
                        /**
                         * Constructs a new StreamingStorageConfig.
                         * @memberof google.cloud.videointelligence.v1p3beta1
                         * @classdesc Represents a StreamingStorageConfig.
                         * @implements IStreamingStorageConfig
                         * @constructor
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingStorageConfig=} [properties] Properties to set
                         */
                        function StreamingStorageConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StreamingStorageConfig enableStorageAnnotationResult.
                         * @member {boolean} enableStorageAnnotationResult
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig
                         * @instance
                         */
                        StreamingStorageConfig.prototype.enableStorageAnnotationResult = false;
    
                        /**
                         * StreamingStorageConfig annotationResultStorageDirectory.
                         * @member {string} annotationResultStorageDirectory
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig
                         * @instance
                         */
                        StreamingStorageConfig.prototype.annotationResultStorageDirectory = "";
    
                        /**
                         * Creates a new StreamingStorageConfig instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingStorageConfig=} [properties] Properties to set
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig} StreamingStorageConfig instance
                         */
                        StreamingStorageConfig.create = function create(properties) {
                            return new StreamingStorageConfig(properties);
                        };
    
                        /**
                         * Encodes the specified StreamingStorageConfig message. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingStorageConfig} message StreamingStorageConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingStorageConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.enableStorageAnnotationResult != null && Object.hasOwnProperty.call(message, "enableStorageAnnotationResult"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.enableStorageAnnotationResult);
                            if (message.annotationResultStorageDirectory != null && Object.hasOwnProperty.call(message, "annotationResultStorageDirectory"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.annotationResultStorageDirectory);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StreamingStorageConfig message, length delimited. Does not implicitly {@link google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.IStreamingStorageConfig} message StreamingStorageConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StreamingStorageConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StreamingStorageConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig} StreamingStorageConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingStorageConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.enableStorageAnnotationResult = reader.bool();
                                        break;
                                    }
                                case 3: {
                                        message.annotationResultStorageDirectory = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StreamingStorageConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig} StreamingStorageConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StreamingStorageConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StreamingStorageConfig message.
                         * @function verify
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StreamingStorageConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.enableStorageAnnotationResult != null && message.hasOwnProperty("enableStorageAnnotationResult"))
                                if (typeof message.enableStorageAnnotationResult !== "boolean")
                                    return "enableStorageAnnotationResult: boolean expected";
                            if (message.annotationResultStorageDirectory != null && message.hasOwnProperty("annotationResultStorageDirectory"))
                                if (!$util.isString(message.annotationResultStorageDirectory))
                                    return "annotationResultStorageDirectory: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a StreamingStorageConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig} StreamingStorageConfig
                         */
                        StreamingStorageConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig)
                                return object;
                            var message = new $root.google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig();
                            if (object.enableStorageAnnotationResult != null)
                                message.enableStorageAnnotationResult = Boolean(object.enableStorageAnnotationResult);
                            if (object.annotationResultStorageDirectory != null)
                                message.annotationResultStorageDirectory = String(object.annotationResultStorageDirectory);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StreamingStorageConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig
                         * @static
                         * @param {google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig} message StreamingStorageConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StreamingStorageConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.enableStorageAnnotationResult = false;
                                object.annotationResultStorageDirectory = "";
                            }
                            if (message.enableStorageAnnotationResult != null && message.hasOwnProperty("enableStorageAnnotationResult"))
                                object.enableStorageAnnotationResult = message.enableStorageAnnotationResult;
                            if (message.annotationResultStorageDirectory != null && message.hasOwnProperty("annotationResultStorageDirectory"))
                                object.annotationResultStorageDirectory = message.annotationResultStorageDirectory;
                            return object;
                        };
    
                        /**
                         * Converts this StreamingStorageConfig to JSON.
                         * @function toJSON
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StreamingStorageConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StreamingStorageConfig
                         * @function getTypeUrl
                         * @memberof google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StreamingStorageConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.videointelligence.v1p3beta1.StreamingStorageConfig";
                        };
    
                        return StreamingStorageConfig;
                    })();
    
                    return v1p3beta1;
                })();
    
                return videointelligence;
            })();
    
            return cloud;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.rules && message.rules.length))
                                    message.rules = [];
                                message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.fullyDecodeReservedExpansion = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Http
                 * @function getTypeUrl
                 * @memberof google.api.Http
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Http";
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.get = reader.string();
                                break;
                            }
                        case 3: {
                                message.put = reader.string();
                                break;
                            }
                        case 4: {
                                message.post = reader.string();
                                break;
                            }
                        case 5: {
                                message["delete"] = reader.string();
                                break;
                            }
                        case 6: {
                                message.patch = reader.string();
                                break;
                            }
                        case 8: {
                                message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.body = reader.string();
                                break;
                            }
                        case 12: {
                                message.responseBody = reader.string();
                                break;
                            }
                        case 11: {
                                if (!(message.additionalBindings && message.additionalBindings.length))
                                    message.additionalBindings = [];
                                message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for HttpRule
                 * @function getTypeUrl
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.HttpRule";
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.kind = reader.string();
                                break;
                            }
                        case 2: {
                                message.path = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CustomHttpPattern
                 * @function getTypeUrl
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CustomHttpPattern";
                };
    
                return CustomHttpPattern;
            })();
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {number}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             * @property {number} UNORDERED_LIST=6 UNORDERED_LIST value
             * @property {number} NON_EMPTY_DEFAULT=7 NON_EMPTY_DEFAULT value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                values[valuesById[6] = "UNORDERED_LIST"] = 6;
                values[valuesById[7] = "NON_EMPTY_DEFAULT"] = 7;
                return values;
            })();
    
            return api;
        })();
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.file && message.file.length))
                                    message.file = [];
                                message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorSet
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 * @property {string|null} [edition] FileDescriptorProto edition
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * FileDescriptorProto edition.
                 * @member {string} edition
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.edition = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.edition);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message["package"] = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.dependency && message.dependency.length))
                                    message.dependency = [];
                                message.dependency.push(reader.string());
                                break;
                            }
                        case 10: {
                                if (!(message.publicDependency && message.publicDependency.length))
                                    message.publicDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.publicDependency.push(reader.int32());
                                } else
                                    message.publicDependency.push(reader.int32());
                                break;
                            }
                        case 11: {
                                if (!(message.weakDependency && message.weakDependency.length))
                                    message.weakDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.weakDependency.push(reader.int32());
                                } else
                                    message.weakDependency.push(reader.int32());
                                break;
                            }
                        case 4: {
                                if (!(message.messageType && message.messageType.length))
                                    message.messageType = [];
                                message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.service && message.service.length))
                                    message.service = [];
                                message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.syntax = reader.string();
                                break;
                            }
                        case 13: {
                                message.edition = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        if (!$util.isString(message.edition))
                            return "edition: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    if (object.edition != null)
                        message.edition = String(object.edition);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                        object.edition = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        object.edition = message.edition;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.field && message.field.length))
                                    message.field = [];
                                message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                if (!(message.nestedType && message.nestedType.length))
                                    message.nestedType = [];
                                message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.extensionRange && message.extensionRange.length))
                                    message.extensionRange = [];
                                message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                if (!(message.oneofDecl && message.oneofDecl.length))
                                    message.oneofDecl = [];
                                message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 10: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto";
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ExtensionRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ExtensionRangeOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 3: {
                                message.number = reader.int32();
                                break;
                            }
                        case 4: {
                                message.label = reader.int32();
                                break;
                            }
                        case 5: {
                                message.type = reader.int32();
                                break;
                            }
                        case 6: {
                                message.typeName = reader.string();
                                break;
                            }
                        case 2: {
                                message.extendee = reader.string();
                                break;
                            }
                        case 7: {
                                message.defaultValue = reader.string();
                                break;
                            }
                        case 9: {
                                message.oneofIndex = reader.int32();
                                break;
                            }
                        case 10: {
                                message.jsonName = reader.string();
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 17: {
                                message.proto3Optional = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    default:
                        if (typeof object.label === "number") {
                            message.label = object.label;
                            break;
                        }
                        break;
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === undefined ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === undefined ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.value && message.value.length))
                                    message.value = [];
                                message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EnumReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.number = reader.int32();
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.method && message.method.length))
                                    message.method = [];
                                message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.inputType = reader.string();
                                break;
                            }
                        case 3: {
                                message.outputType = reader.string();
                                break;
                            }
                        case 4: {
                                message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.clientStreaming = reader.bool();
                                break;
                            }
                        case 6: {
                                message.serverStreaming = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.javaPackage = reader.string();
                                break;
                            }
                        case 8: {
                                message.javaOuterClassname = reader.string();
                                break;
                            }
                        case 10: {
                                message.javaMultipleFiles = reader.bool();
                                break;
                            }
                        case 20: {
                                message.javaGenerateEqualsAndHash = reader.bool();
                                break;
                            }
                        case 27: {
                                message.javaStringCheckUtf8 = reader.bool();
                                break;
                            }
                        case 9: {
                                message.optimizeFor = reader.int32();
                                break;
                            }
                        case 11: {
                                message.goPackage = reader.string();
                                break;
                            }
                        case 16: {
                                message.ccGenericServices = reader.bool();
                                break;
                            }
                        case 17: {
                                message.javaGenericServices = reader.bool();
                                break;
                            }
                        case 18: {
                                message.pyGenericServices = reader.bool();
                                break;
                            }
                        case 42: {
                                message.phpGenericServices = reader.bool();
                                break;
                            }
                        case 23: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 31: {
                                message.ccEnableArenas = reader.bool();
                                break;
                            }
                        case 36: {
                                message.objcClassPrefix = reader.string();
                                break;
                            }
                        case 37: {
                                message.csharpNamespace = reader.string();
                                break;
                            }
                        case 39: {
                                message.swiftPrefix = reader.string();
                                break;
                            }
                        case 40: {
                                message.phpClassPrefix = reader.string();
                                break;
                            }
                        case 41: {
                                message.phpNamespace = reader.string();
                                break;
                            }
                        case 44: {
                                message.phpMetadataNamespace = reader.string();
                                break;
                            }
                        case 45: {
                                message.rubyPackage = reader.string();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    default:
                        if (typeof object.optimizeFor === "number") {
                            message.optimizeFor = object.optimizeFor;
                            break;
                        }
                        break;
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === undefined ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileOptions";
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.messageSetWireFormat = reader.bool();
                                break;
                            }
                        case 2: {
                                message.noStandardDescriptorAccessor = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 7: {
                                message.mapEntry = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MessageOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MessageOptions";
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [unverifiedLazy] FieldOptions unverifiedLazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions unverifiedLazy.
                 * @member {boolean} unverifiedLazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.unverifiedLazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                        writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverifiedLazy);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.ctype = reader.int32();
                                break;
                            }
                        case 2: {
                                message.packed = reader.bool();
                                break;
                            }
                        case 6: {
                                message.jstype = reader.int32();
                                break;
                            }
                        case 5: {
                                message.lazy = reader.bool();
                                break;
                            }
                        case 15: {
                                message.unverifiedLazy = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 10: {
                                message.weak = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1052: {
                                if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                    message[".google.api.fieldBehavior"] = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message[".google.api.fieldBehavior"].push(reader.int32());
                                } else
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        if (typeof message.unverifiedLazy !== "boolean")
                            return "unverifiedLazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    default:
                        if (typeof object.ctype === "number") {
                            message.ctype = object.ctype;
                            break;
                        }
                        break;
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    default:
                        if (typeof object.jstype === "number") {
                            message.jstype = object.jstype;
                            break;
                        }
                        break;
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.unverifiedLazy != null)
                        message.unverifiedLazy = Boolean(object.unverifiedLazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                                if (typeof object[".google.api.fieldBehavior"][i] === "number") {
                                    message[".google.api.fieldBehavior"][i] = object[".google.api.fieldBehavior"][i];
                                    break;
                                }
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            case "UNORDERED_LIST":
                            case 6:
                                message[".google.api.fieldBehavior"][i] = 6;
                                break;
                            case "NON_EMPTY_DEFAULT":
                            case 7:
                                message[".google.api.fieldBehavior"][i] = 7;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object.unverifiedLazy = false;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === undefined ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === undefined ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        object.unverifiedLazy = message.unverifiedLazy;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] === undefined ? message[".google.api.fieldBehavior"][j] : $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldOptions";
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofOptions";
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                message.allowAlias = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumOptions";
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1049: {
                                message[".google.api.defaultHost"] = reader.string();
                                break;
                            }
                        case 1050: {
                                message[".google.api.oauthScopes"] = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceOptions";
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 * @property {google.longrunning.IOperationInfo|null} [".google.longrunning.operationInfo"] MethodOptions .google.longrunning.operationInfo
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * MethodOptions .google.longrunning.operationInfo.
                 * @member {google.longrunning.IOperationInfo|null|undefined} .google.longrunning.operationInfo
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.longrunning.operationInfo"] = null;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.longrunning.operationInfo"] != null && Object.hasOwnProperty.call(message, ".google.longrunning.operationInfo"))
                        $root.google.longrunning.OperationInfo.encode(message[".google.longrunning.operationInfo"], writer.uint32(/* id 1049, wireType 2 =*/8394).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 34: {
                                message.idempotencyLevel = reader.int32();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 72295728: {
                                message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                                break;
                            }
                        case 1051: {
                                if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                    message[".google.api.methodSignature"] = [];
                                message[".google.api.methodSignature"].push(reader.string());
                                break;
                            }
                        case 1049: {
                                message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo")) {
                        var error = $root.google.longrunning.OperationInfo.verify(message[".google.longrunning.operationInfo"]);
                        if (error)
                            return ".google.longrunning.operationInfo." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    default:
                        if (typeof object.idempotencyLevel === "number") {
                            message.idempotencyLevel = object.idempotencyLevel;
                            break;
                        }
                        break;
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    if (object[".google.longrunning.operationInfo"] != null) {
                        if (typeof object[".google.longrunning.operationInfo"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected");
                        message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.fromObject(object[".google.longrunning.operationInfo"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object[".google.longrunning.operationInfo"] = null;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === undefined ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo"))
                        object[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.toObject(message[".google.longrunning.operationInfo"], options);
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodOptions";
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.name && message.name.length))
                                    message.name = [];
                                message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.identifierValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.positiveIntValue = reader.uint64();
                                break;
                            }
                        case 5: {
                                message.negativeIntValue = reader.int64();
                                break;
                            }
                        case 6: {
                                message.doubleValue = reader.double();
                                break;
                            }
                        case 7: {
                                message.stringValue = reader.bytes();
                                break;
                            }
                        case 8: {
                                message.aggregateValue = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length >= 0)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UninterpretedOption
                 * @function getTypeUrl
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.namePart = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.isExtension = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NamePart
                     * @function getTypeUrl
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.location && message.location.length))
                                    message.location = [];
                                message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SourceCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    if (!(message.span && message.span.length))
                                        message.span = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.span.push(reader.int32());
                                    } else
                                        message.span.push(reader.int32());
                                    break;
                                }
                            case 3: {
                                    message.leadingComments = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.trailingComments = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                        message.leadingDetachedComments = [];
                                    message.leadingDetachedComments.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Location
                     * @function getTypeUrl
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.annotation && message.annotation.length))
                                    message.annotation = [];
                                message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GeneratedCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     * @property {google.protobuf.GeneratedCodeInfo.Annotation.Semantic|null} [semantic] Annotation semantic
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Annotation semantic.
                     * @member {google.protobuf.GeneratedCodeInfo.Annotation.Semantic} semantic
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.semantic = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.semantic);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    message.sourceFile = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.begin = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 5: {
                                    message.semantic = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            switch (message.semantic) {
                            default:
                                return "semantic: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        switch (object.semantic) {
                        default:
                            if (typeof object.semantic === "number") {
                                message.semantic = object.semantic;
                                break;
                            }
                            break;
                        case "NONE":
                        case 0:
                            message.semantic = 0;
                            break;
                        case "SET":
                        case 1:
                            message.semantic = 1;
                            break;
                        case "ALIAS":
                        case 2:
                            message.semantic = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                            object.semantic = options.enums === String ? "NONE" : 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === undefined ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Annotation
                     * @function getTypeUrl
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
                    };
    
                    /**
                     * Semantic enum.
                     * @name google.protobuf.GeneratedCodeInfo.Annotation.Semantic
                     * @enum {number}
                     * @property {number} NONE=0 NONE value
                     * @property {number} SET=1 SET value
                     * @property {number} ALIAS=2 ALIAS value
                     */
                    Annotation.Semantic = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NONE"] = 0;
                        values[valuesById[1] = "SET"] = 1;
                        values[valuesById[2] = "ALIAS"] = 2;
                        return values;
                    })();
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Any instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 * @returns {google.protobuf.Any} Any instance
                 */
                Any.create = function create(properties) {
                    return new Any(properties);
                };
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type_url = reader.string();
                                break;
                            }
                        case 2: {
                                message.value = reader.bytes();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length >= 0)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Any
                 * @function getTypeUrl
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Any.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Any";
                };
    
                return Any;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Duration
                 * @function getTypeUrl
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Duration";
                };
    
                return Duration;
            })();
    
            protobuf.Empty = (function() {
    
                /**
                 * Properties of an Empty.
                 * @memberof google.protobuf
                 * @interface IEmpty
                 */
    
                /**
                 * Constructs a new Empty.
                 * @memberof google.protobuf
                 * @classdesc Represents an Empty.
                 * @implements IEmpty
                 * @constructor
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 */
                function Empty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new Empty instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 * @returns {google.protobuf.Empty} Empty instance
                 */
                Empty.create = function create(properties) {
                    return new Empty(properties);
                };
    
                /**
                 * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Empty message.
                 * @function verify
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Empty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an Empty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Empty} Empty
                 */
                Empty.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Empty)
                        return object;
                    return new $root.google.protobuf.Empty();
                };
    
                /**
                 * Creates a plain object from an Empty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.Empty} message Empty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Empty.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Empty to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Empty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Empty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Empty
                 * @function getTypeUrl
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Empty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Empty";
                };
    
                return Empty;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Timestamp
                 * @function getTypeUrl
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Timestamp";
                };
    
                return Timestamp;
            })();
    
            return protobuf;
        })();
    
        google.longrunning = (function() {
    
            /**
             * Namespace longrunning.
             * @memberof google
             * @namespace
             */
            var longrunning = {};
    
            longrunning.Operations = (function() {
    
                /**
                 * Constructs a new Operations service.
                 * @memberof google.longrunning
                 * @classdesc Represents an Operations
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Operations(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Operations.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Operations;
    
                /**
                 * Creates new Operations service using the specified rpc implementation.
                 * @function create
                 * @memberof google.longrunning.Operations
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Operations} RPC service. Useful where requests and/or responses are streamed.
                 */
                Operations.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|listOperations}.
                 * @memberof google.longrunning.Operations
                 * @typedef ListOperationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.ListOperationsResponse} [response] ListOperationsResponse
                 */
    
                /**
                 * Calls ListOperations.
                 * @function listOperations
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IListOperationsRequest} request ListOperationsRequest message or plain object
                 * @param {google.longrunning.Operations.ListOperationsCallback} callback Node-style callback called with the error, if any, and ListOperationsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.listOperations = function listOperations(request, callback) {
                    return this.rpcCall(listOperations, $root.google.longrunning.ListOperationsRequest, $root.google.longrunning.ListOperationsResponse, request, callback);
                }, "name", { value: "ListOperations" });
    
                /**
                 * Calls ListOperations.
                 * @function listOperations
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IListOperationsRequest} request ListOperationsRequest message or plain object
                 * @returns {Promise<google.longrunning.ListOperationsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|getOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef GetOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.Operation} [response] Operation
                 */
    
                /**
                 * Calls GetOperation.
                 * @function getOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IGetOperationRequest} request GetOperationRequest message or plain object
                 * @param {google.longrunning.Operations.GetOperationCallback} callback Node-style callback called with the error, if any, and Operation
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.getOperation = function getOperation(request, callback) {
                    return this.rpcCall(getOperation, $root.google.longrunning.GetOperationRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "GetOperation" });
    
                /**
                 * Calls GetOperation.
                 * @function getOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IGetOperationRequest} request GetOperationRequest message or plain object
                 * @returns {Promise<google.longrunning.Operation>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|deleteOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef DeleteOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls DeleteOperation.
                 * @function deleteOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IDeleteOperationRequest} request DeleteOperationRequest message or plain object
                 * @param {google.longrunning.Operations.DeleteOperationCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.deleteOperation = function deleteOperation(request, callback) {
                    return this.rpcCall(deleteOperation, $root.google.longrunning.DeleteOperationRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "DeleteOperation" });
    
                /**
                 * Calls DeleteOperation.
                 * @function deleteOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IDeleteOperationRequest} request DeleteOperationRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|cancelOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef CancelOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls CancelOperation.
                 * @function cancelOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.ICancelOperationRequest} request CancelOperationRequest message or plain object
                 * @param {google.longrunning.Operations.CancelOperationCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.cancelOperation = function cancelOperation(request, callback) {
                    return this.rpcCall(cancelOperation, $root.google.longrunning.CancelOperationRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "CancelOperation" });
    
                /**
                 * Calls CancelOperation.
                 * @function cancelOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.ICancelOperationRequest} request CancelOperationRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|waitOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef WaitOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.Operation} [response] Operation
                 */
    
                /**
                 * Calls WaitOperation.
                 * @function waitOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IWaitOperationRequest} request WaitOperationRequest message or plain object
                 * @param {google.longrunning.Operations.WaitOperationCallback} callback Node-style callback called with the error, if any, and Operation
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.waitOperation = function waitOperation(request, callback) {
                    return this.rpcCall(waitOperation, $root.google.longrunning.WaitOperationRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "WaitOperation" });
    
                /**
                 * Calls WaitOperation.
                 * @function waitOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IWaitOperationRequest} request WaitOperationRequest message or plain object
                 * @returns {Promise<google.longrunning.Operation>} Promise
                 * @variation 2
                 */
    
                return Operations;
            })();
    
            longrunning.Operation = (function() {
    
                /**
                 * Properties of an Operation.
                 * @memberof google.longrunning
                 * @interface IOperation
                 * @property {string|null} [name] Operation name
                 * @property {google.protobuf.IAny|null} [metadata] Operation metadata
                 * @property {boolean|null} [done] Operation done
                 * @property {google.rpc.IStatus|null} [error] Operation error
                 * @property {google.protobuf.IAny|null} [response] Operation response
                 */
    
                /**
                 * Constructs a new Operation.
                 * @memberof google.longrunning
                 * @classdesc Represents an Operation.
                 * @implements IOperation
                 * @constructor
                 * @param {google.longrunning.IOperation=} [properties] Properties to set
                 */
                function Operation(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Operation name.
                 * @member {string} name
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.name = "";
    
                /**
                 * Operation metadata.
                 * @member {google.protobuf.IAny|null|undefined} metadata
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.metadata = null;
    
                /**
                 * Operation done.
                 * @member {boolean} done
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.done = false;
    
                /**
                 * Operation error.
                 * @member {google.rpc.IStatus|null|undefined} error
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.error = null;
    
                /**
                 * Operation response.
                 * @member {google.protobuf.IAny|null|undefined} response
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.response = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Operation result.
                 * @member {"error"|"response"|undefined} result
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Object.defineProperty(Operation.prototype, "result", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "response"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Operation instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation=} [properties] Properties to set
                 * @returns {google.longrunning.Operation} Operation instance
                 */
                Operation.create = function create(properties) {
                    return new Operation(properties);
                };
    
                /**
                 * Encodes the specified Operation message. Does not implicitly {@link google.longrunning.Operation.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        $root.google.protobuf.Any.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.done != null && Object.hasOwnProperty.call(message, "done"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.done);
                    if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                        $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.response != null && Object.hasOwnProperty.call(message, "response"))
                        $root.google.protobuf.Any.encode(message.response, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Operation message, length delimited. Does not implicitly {@link google.longrunning.Operation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.Operation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.metadata = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.done = reader.bool();
                                break;
                            }
                        case 4: {
                                message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.response = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Operation message.
                 * @function verify
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Operation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.google.protobuf.Any.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.done != null && message.hasOwnProperty("done"))
                        if (typeof message.done !== "boolean")
                            return "done: boolean expected";
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.result = 1;
                        {
                            var error = $root.google.rpc.Status.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        if (properties.result === 1)
                            return "result: multiple values";
                        properties.result = 1;
                        {
                            var error = $root.google.protobuf.Any.verify(message.response);
                            if (error)
                                return "response." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an Operation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.Operation} Operation
                 */
                Operation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.Operation)
                        return object;
                    var message = new $root.google.longrunning.Operation();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".google.longrunning.Operation.metadata: object expected");
                        message.metadata = $root.google.protobuf.Any.fromObject(object.metadata);
                    }
                    if (object.done != null)
                        message.done = Boolean(object.done);
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".google.longrunning.Operation.error: object expected");
                        message.error = $root.google.rpc.Status.fromObject(object.error);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".google.longrunning.Operation.response: object expected");
                        message.response = $root.google.protobuf.Any.fromObject(object.response);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Operation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.Operation} message Operation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Operation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.metadata = null;
                        object.done = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.google.protobuf.Any.toObject(message.metadata, options);
                    if (message.done != null && message.hasOwnProperty("done"))
                        object.done = message.done;
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.google.rpc.Status.toObject(message.error, options);
                        if (options.oneofs)
                            object.result = "error";
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        object.response = $root.google.protobuf.Any.toObject(message.response, options);
                        if (options.oneofs)
                            object.result = "response";
                    }
                    return object;
                };
    
                /**
                 * Converts this Operation to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.Operation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Operation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Operation
                 * @function getTypeUrl
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Operation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.Operation";
                };
    
                return Operation;
            })();
    
            longrunning.GetOperationRequest = (function() {
    
                /**
                 * Properties of a GetOperationRequest.
                 * @memberof google.longrunning
                 * @interface IGetOperationRequest
                 * @property {string|null} [name] GetOperationRequest name
                 */
    
                /**
                 * Constructs a new GetOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a GetOperationRequest.
                 * @implements IGetOperationRequest
                 * @constructor
                 * @param {google.longrunning.IGetOperationRequest=} [properties] Properties to set
                 */
                function GetOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.GetOperationRequest
                 * @instance
                 */
                GetOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new GetOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest instance
                 */
                GetOperationRequest.create = function create(properties) {
                    return new GetOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified GetOperationRequest message. Does not implicitly {@link google.longrunning.GetOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest} message GetOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.GetOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest} message GetOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.GetOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 */
                GetOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.GetOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.GetOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.GetOperationRequest} message GetOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this GetOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.GetOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GetOperationRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GetOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.GetOperationRequest";
                };
    
                return GetOperationRequest;
            })();
    
            longrunning.ListOperationsRequest = (function() {
    
                /**
                 * Properties of a ListOperationsRequest.
                 * @memberof google.longrunning
                 * @interface IListOperationsRequest
                 * @property {string|null} [name] ListOperationsRequest name
                 * @property {string|null} [filter] ListOperationsRequest filter
                 * @property {number|null} [pageSize] ListOperationsRequest pageSize
                 * @property {string|null} [pageToken] ListOperationsRequest pageToken
                 */
    
                /**
                 * Constructs a new ListOperationsRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a ListOperationsRequest.
                 * @implements IListOperationsRequest
                 * @constructor
                 * @param {google.longrunning.IListOperationsRequest=} [properties] Properties to set
                 */
                function ListOperationsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOperationsRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.name = "";
    
                /**
                 * ListOperationsRequest filter.
                 * @member {string} filter
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.filter = "";
    
                /**
                 * ListOperationsRequest pageSize.
                 * @member {number} pageSize
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.pageSize = 0;
    
                /**
                 * ListOperationsRequest pageToken.
                 * @member {string} pageToken
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.pageToken = "";
    
                /**
                 * Creates a new ListOperationsRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest=} [properties] Properties to set
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest instance
                 */
                ListOperationsRequest.create = function create(properties) {
                    return new ListOperationsRequest(properties);
                };
    
                /**
                 * Encodes the specified ListOperationsRequest message. Does not implicitly {@link google.longrunning.ListOperationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest} message ListOperationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.filter);
                    if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                    if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOperationsRequest message, length delimited. Does not implicitly {@link google.longrunning.ListOperationsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest} message ListOperationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOperationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 4: {
                                message.name = reader.string();
                                break;
                            }
                        case 1: {
                                message.filter = reader.string();
                                break;
                            }
                        case 2: {
                                message.pageSize = reader.int32();
                                break;
                            }
                        case 3: {
                                message.pageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOperationsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOperationsRequest message.
                 * @function verify
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOperationsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        if (!$util.isInteger(message.pageSize))
                            return "pageSize: integer expected";
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        if (!$util.isString(message.pageToken))
                            return "pageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOperationsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 */
                ListOperationsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.ListOperationsRequest)
                        return object;
                    var message = new $root.google.longrunning.ListOperationsRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    if (object.pageSize != null)
                        message.pageSize = object.pageSize | 0;
                    if (object.pageToken != null)
                        message.pageToken = String(object.pageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOperationsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.ListOperationsRequest} message ListOperationsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOperationsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.filter = "";
                        object.pageSize = 0;
                        object.pageToken = "";
                        object.name = "";
                    }
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        object.pageSize = message.pageSize;
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        object.pageToken = message.pageToken;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this ListOperationsRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOperationsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListOperationsRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListOperationsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.ListOperationsRequest";
                };
    
                return ListOperationsRequest;
            })();
    
            longrunning.ListOperationsResponse = (function() {
    
                /**
                 * Properties of a ListOperationsResponse.
                 * @memberof google.longrunning
                 * @interface IListOperationsResponse
                 * @property {Array.<google.longrunning.IOperation>|null} [operations] ListOperationsResponse operations
                 * @property {string|null} [nextPageToken] ListOperationsResponse nextPageToken
                 */
    
                /**
                 * Constructs a new ListOperationsResponse.
                 * @memberof google.longrunning
                 * @classdesc Represents a ListOperationsResponse.
                 * @implements IListOperationsResponse
                 * @constructor
                 * @param {google.longrunning.IListOperationsResponse=} [properties] Properties to set
                 */
                function ListOperationsResponse(properties) {
                    this.operations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOperationsResponse operations.
                 * @member {Array.<google.longrunning.IOperation>} operations
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 */
                ListOperationsResponse.prototype.operations = $util.emptyArray;
    
                /**
                 * ListOperationsResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 */
                ListOperationsResponse.prototype.nextPageToken = "";
    
                /**
                 * Creates a new ListOperationsResponse instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse=} [properties] Properties to set
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse instance
                 */
                ListOperationsResponse.create = function create(properties) {
                    return new ListOperationsResponse(properties);
                };
    
                /**
                 * Encodes the specified ListOperationsResponse message. Does not implicitly {@link google.longrunning.ListOperationsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse} message ListOperationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.operations != null && message.operations.length)
                        for (var i = 0; i < message.operations.length; ++i)
                            $root.google.longrunning.Operation.encode(message.operations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOperationsResponse message, length delimited. Does not implicitly {@link google.longrunning.ListOperationsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse} message ListOperationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOperationsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.operations && message.operations.length))
                                    message.operations = [];
                                message.operations.push($root.google.longrunning.Operation.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.nextPageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOperationsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOperationsResponse message.
                 * @function verify
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOperationsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.operations != null && message.hasOwnProperty("operations")) {
                        if (!Array.isArray(message.operations))
                            return "operations: array expected";
                        for (var i = 0; i < message.operations.length; ++i) {
                            var error = $root.google.longrunning.Operation.verify(message.operations[i]);
                            if (error)
                                return "operations." + error;
                        }
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOperationsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 */
                ListOperationsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.ListOperationsResponse)
                        return object;
                    var message = new $root.google.longrunning.ListOperationsResponse();
                    if (object.operations) {
                        if (!Array.isArray(object.operations))
                            throw TypeError(".google.longrunning.ListOperationsResponse.operations: array expected");
                        message.operations = [];
                        for (var i = 0; i < object.operations.length; ++i) {
                            if (typeof object.operations[i] !== "object")
                                throw TypeError(".google.longrunning.ListOperationsResponse.operations: object expected");
                            message.operations[i] = $root.google.longrunning.Operation.fromObject(object.operations[i]);
                        }
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOperationsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.ListOperationsResponse} message ListOperationsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOperationsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.operations = [];
                    if (options.defaults)
                        object.nextPageToken = "";
                    if (message.operations && message.operations.length) {
                        object.operations = [];
                        for (var j = 0; j < message.operations.length; ++j)
                            object.operations[j] = $root.google.longrunning.Operation.toObject(message.operations[j], options);
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };
    
                /**
                 * Converts this ListOperationsResponse to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOperationsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListOperationsResponse
                 * @function getTypeUrl
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListOperationsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.ListOperationsResponse";
                };
    
                return ListOperationsResponse;
            })();
    
            longrunning.CancelOperationRequest = (function() {
    
                /**
                 * Properties of a CancelOperationRequest.
                 * @memberof google.longrunning
                 * @interface ICancelOperationRequest
                 * @property {string|null} [name] CancelOperationRequest name
                 */
    
                /**
                 * Constructs a new CancelOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a CancelOperationRequest.
                 * @implements ICancelOperationRequest
                 * @constructor
                 * @param {google.longrunning.ICancelOperationRequest=} [properties] Properties to set
                 */
                function CancelOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CancelOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.CancelOperationRequest
                 * @instance
                 */
                CancelOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new CancelOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest instance
                 */
                CancelOperationRequest.create = function create(properties) {
                    return new CancelOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified CancelOperationRequest message. Does not implicitly {@link google.longrunning.CancelOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest} message CancelOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified CancelOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.CancelOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest} message CancelOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CancelOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.CancelOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CancelOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CancelOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CancelOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a CancelOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 */
                CancelOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.CancelOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.CancelOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CancelOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.CancelOperationRequest} message CancelOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CancelOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this CancelOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.CancelOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CancelOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CancelOperationRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CancelOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.CancelOperationRequest";
                };
    
                return CancelOperationRequest;
            })();
    
            longrunning.DeleteOperationRequest = (function() {
    
                /**
                 * Properties of a DeleteOperationRequest.
                 * @memberof google.longrunning
                 * @interface IDeleteOperationRequest
                 * @property {string|null} [name] DeleteOperationRequest name
                 */
    
                /**
                 * Constructs a new DeleteOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a DeleteOperationRequest.
                 * @implements IDeleteOperationRequest
                 * @constructor
                 * @param {google.longrunning.IDeleteOperationRequest=} [properties] Properties to set
                 */
                function DeleteOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DeleteOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @instance
                 */
                DeleteOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new DeleteOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest instance
                 */
                DeleteOperationRequest.create = function create(properties) {
                    return new DeleteOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified DeleteOperationRequest message. Does not implicitly {@link google.longrunning.DeleteOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest} message DeleteOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified DeleteOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.DeleteOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest} message DeleteOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DeleteOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.DeleteOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DeleteOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DeleteOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a DeleteOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 */
                DeleteOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.DeleteOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.DeleteOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DeleteOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.DeleteOperationRequest} message DeleteOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this DeleteOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DeleteOperationRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DeleteOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.DeleteOperationRequest";
                };
    
                return DeleteOperationRequest;
            })();
    
            longrunning.WaitOperationRequest = (function() {
    
                /**
                 * Properties of a WaitOperationRequest.
                 * @memberof google.longrunning
                 * @interface IWaitOperationRequest
                 * @property {string|null} [name] WaitOperationRequest name
                 * @property {google.protobuf.IDuration|null} [timeout] WaitOperationRequest timeout
                 */
    
                /**
                 * Constructs a new WaitOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a WaitOperationRequest.
                 * @implements IWaitOperationRequest
                 * @constructor
                 * @param {google.longrunning.IWaitOperationRequest=} [properties] Properties to set
                 */
                function WaitOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * WaitOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 */
                WaitOperationRequest.prototype.name = "";
    
                /**
                 * WaitOperationRequest timeout.
                 * @member {google.protobuf.IDuration|null|undefined} timeout
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 */
                WaitOperationRequest.prototype.timeout = null;
    
                /**
                 * Creates a new WaitOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest instance
                 */
                WaitOperationRequest.create = function create(properties) {
                    return new WaitOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified WaitOperationRequest message. Does not implicitly {@link google.longrunning.WaitOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest} message WaitOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WaitOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                        $root.google.protobuf.Duration.encode(message.timeout, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified WaitOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.WaitOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest} message WaitOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WaitOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a WaitOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WaitOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.WaitOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.timeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a WaitOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WaitOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a WaitOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                WaitOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.timeout != null && message.hasOwnProperty("timeout")) {
                        var error = $root.google.protobuf.Duration.verify(message.timeout);
                        if (error)
                            return "timeout." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a WaitOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 */
                WaitOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.WaitOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.WaitOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.timeout != null) {
                        if (typeof object.timeout !== "object")
                            throw TypeError(".google.longrunning.WaitOperationRequest.timeout: object expected");
                        message.timeout = $root.google.protobuf.Duration.fromObject(object.timeout);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a WaitOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.WaitOperationRequest} message WaitOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                WaitOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.timeout = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.timeout != null && message.hasOwnProperty("timeout"))
                        object.timeout = $root.google.protobuf.Duration.toObject(message.timeout, options);
                    return object;
                };
    
                /**
                 * Converts this WaitOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                WaitOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for WaitOperationRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                WaitOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.WaitOperationRequest";
                };
    
                return WaitOperationRequest;
            })();
    
            longrunning.OperationInfo = (function() {
    
                /**
                 * Properties of an OperationInfo.
                 * @memberof google.longrunning
                 * @interface IOperationInfo
                 * @property {string|null} [responseType] OperationInfo responseType
                 * @property {string|null} [metadataType] OperationInfo metadataType
                 */
    
                /**
                 * Constructs a new OperationInfo.
                 * @memberof google.longrunning
                 * @classdesc Represents an OperationInfo.
                 * @implements IOperationInfo
                 * @constructor
                 * @param {google.longrunning.IOperationInfo=} [properties] Properties to set
                 */
                function OperationInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OperationInfo responseType.
                 * @member {string} responseType
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 */
                OperationInfo.prototype.responseType = "";
    
                /**
                 * OperationInfo metadataType.
                 * @member {string} metadataType
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 */
                OperationInfo.prototype.metadataType = "";
    
                /**
                 * Creates a new OperationInfo instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo=} [properties] Properties to set
                 * @returns {google.longrunning.OperationInfo} OperationInfo instance
                 */
                OperationInfo.create = function create(properties) {
                    return new OperationInfo(properties);
                };
    
                /**
                 * Encodes the specified OperationInfo message. Does not implicitly {@link google.longrunning.OperationInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo} message OperationInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OperationInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.responseType != null && Object.hasOwnProperty.call(message, "responseType"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseType);
                    if (message.metadataType != null && Object.hasOwnProperty.call(message, "metadataType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.metadataType);
                    return writer;
                };
    
                /**
                 * Encodes the specified OperationInfo message, length delimited. Does not implicitly {@link google.longrunning.OperationInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo} message OperationInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OperationInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OperationInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OperationInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.OperationInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.responseType = reader.string();
                                break;
                            }
                        case 2: {
                                message.metadataType = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OperationInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OperationInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OperationInfo message.
                 * @function verify
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OperationInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        if (!$util.isString(message.responseType))
                            return "responseType: string expected";
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        if (!$util.isString(message.metadataType))
                            return "metadataType: string expected";
                    return null;
                };
    
                /**
                 * Creates an OperationInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 */
                OperationInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.OperationInfo)
                        return object;
                    var message = new $root.google.longrunning.OperationInfo();
                    if (object.responseType != null)
                        message.responseType = String(object.responseType);
                    if (object.metadataType != null)
                        message.metadataType = String(object.metadataType);
                    return message;
                };
    
                /**
                 * Creates a plain object from an OperationInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.OperationInfo} message OperationInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OperationInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.responseType = "";
                        object.metadataType = "";
                    }
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        object.responseType = message.responseType;
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        object.metadataType = message.metadataType;
                    return object;
                };
    
                /**
                 * Converts this OperationInfo to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OperationInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OperationInfo
                 * @function getTypeUrl
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OperationInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.OperationInfo";
                };
    
                return OperationInfo;
            })();
    
            return longrunning;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            rpc.Status = (function() {
    
                /**
                 * Properties of a Status.
                 * @memberof google.rpc
                 * @interface IStatus
                 * @property {number|null} [code] Status code
                 * @property {string|null} [message] Status message
                 * @property {Array.<google.protobuf.IAny>|null} [details] Status details
                 */
    
                /**
                 * Constructs a new Status.
                 * @memberof google.rpc
                 * @classdesc Represents a Status.
                 * @implements IStatus
                 * @constructor
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 */
                function Status(properties) {
                    this.details = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Status code.
                 * @member {number} code
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.code = 0;
    
                /**
                 * Status message.
                 * @member {string} message
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.message = "";
    
                /**
                 * Status details.
                 * @member {Array.<google.protobuf.IAny>} details
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.details = $util.emptyArray;
    
                /**
                 * Creates a new Status instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 * @returns {google.rpc.Status} Status instance
                 */
                Status.create = function create(properties) {
                    return new Status(properties);
                };
    
                /**
                 * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.code = reader.int32();
                                break;
                            }
                        case 2: {
                                message.message = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.details && message.details.length))
                                    message.details = [];
                                message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Status message.
                 * @function verify
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Status.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Status} Status
                 */
                Status.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Status)
                        return object;
                    var message = new $root.google.rpc.Status();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".google.rpc.Status.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".google.rpc.Status.details: object expected");
                            message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.Status} message Status
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Status.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.details = [];
                    if (options.defaults) {
                        object.code = 0;
                        object.message = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Status to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Status
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Status.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Status
                 * @function getTypeUrl
                 * @memberof google.rpc.Status
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.rpc.Status";
                };
    
                return Status;
            })();
    
            return rpc;
        })();
    
        return google;
    })();

    return $root;
});
