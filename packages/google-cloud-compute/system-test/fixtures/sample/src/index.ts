// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import {
  AcceleratorTypesClient,
  AddressesClient,
  AutoscalersClient,
  BackendBucketsClient,
  BackendServicesClient,
  DisksClient,
  DiskTypesClient,
  ExternalVpnGatewaysClient,
  FirewallPoliciesClient,
  FirewallsClient,
  ForwardingRulesClient,
  GlobalAddressesClient,
  GlobalForwardingRulesClient,
  GlobalNetworkEndpointGroupsClient,
  GlobalOperationsClient,
  GlobalOrganizationOperationsClient,
  GlobalPublicDelegatedPrefixesClient,
  HealthChecksClient,
  ImageFamilyViewsClient,
  ImagesClient,
  InstanceGroupManagersClient,
  InstanceGroupsClient,
  InstancesClient,
  InstanceTemplatesClient,
  InterconnectAttachmentsClient,
  InterconnectLocationsClient,
  InterconnectsClient,
  LicenseCodesClient,
  LicensesClient,
  MachineImagesClient,
  MachineTypesClient,
  NetworkAttachmentsClient,
  NetworkEdgeSecurityServicesClient,
  NetworkEndpointGroupsClient,
  NetworkFirewallPoliciesClient,
  NetworksClient,
  NodeGroupsClient,
  NodeTemplatesClient,
  NodeTypesClient,
  PacketMirroringsClient,
  ProjectsClient,
  PublicAdvertisedPrefixesClient,
  PublicDelegatedPrefixesClient,
  RegionAutoscalersClient,
  RegionBackendServicesClient,
  RegionCommitmentsClient,
  RegionDisksClient,
  RegionDiskTypesClient,
  RegionHealthChecksClient,
  RegionHealthCheckServicesClient,
  RegionInstanceGroupManagersClient,
  RegionInstanceGroupsClient,
  RegionInstancesClient,
  RegionNetworkEndpointGroupsClient,
  RegionNetworkFirewallPoliciesClient,
  RegionNotificationEndpointsClient,
  RegionOperationsClient,
  RegionsClient,
  RegionSecurityPoliciesClient,
  RegionSslCertificatesClient,
  RegionSslPoliciesClient,
  RegionTargetHttpProxiesClient,
  RegionTargetHttpsProxiesClient,
  RegionTargetTcpProxiesClient,
  RegionUrlMapsClient,
  ReservationsClient,
  ResourcePoliciesClient,
  RoutersClient,
  RoutesClient,
  SecurityPoliciesClient,
  ServiceAttachmentsClient,
  SnapshotsClient,
  SslCertificatesClient,
  SslPoliciesClient,
  SubnetworksClient,
  TargetGrpcProxiesClient,
  TargetHttpProxiesClient,
  TargetHttpsProxiesClient,
  TargetInstancesClient,
  TargetPoolsClient,
  TargetSslProxiesClient,
  TargetTcpProxiesClient,
  TargetVpnGatewaysClient,
  UrlMapsClient,
  VpnGatewaysClient,
  VpnTunnelsClient,
  ZoneOperationsClient,
  ZonesClient,
} from '@google-cloud/compute';

// check that the client class type name can be used
function doStuffWithAcceleratorTypesClient(client: AcceleratorTypesClient) {
  client.close();
}
function doStuffWithAddressesClient(client: AddressesClient) {
  client.close();
}
function doStuffWithAutoscalersClient(client: AutoscalersClient) {
  client.close();
}
function doStuffWithBackendBucketsClient(client: BackendBucketsClient) {
  client.close();
}
function doStuffWithBackendServicesClient(client: BackendServicesClient) {
  client.close();
}
function doStuffWithDisksClient(client: DisksClient) {
  client.close();
}
function doStuffWithDiskTypesClient(client: DiskTypesClient) {
  client.close();
}
function doStuffWithExternalVpnGatewaysClient(
  client: ExternalVpnGatewaysClient
) {
  client.close();
}
function doStuffWithFirewallPoliciesClient(client: FirewallPoliciesClient) {
  client.close();
}
function doStuffWithFirewallsClient(client: FirewallsClient) {
  client.close();
}
function doStuffWithForwardingRulesClient(client: ForwardingRulesClient) {
  client.close();
}
function doStuffWithGlobalAddressesClient(client: GlobalAddressesClient) {
  client.close();
}
function doStuffWithGlobalForwardingRulesClient(
  client: GlobalForwardingRulesClient
) {
  client.close();
}
function doStuffWithGlobalNetworkEndpointGroupsClient(
  client: GlobalNetworkEndpointGroupsClient
) {
  client.close();
}
function doStuffWithGlobalOperationsClient(client: GlobalOperationsClient) {
  client.close();
}
function doStuffWithGlobalOrganizationOperationsClient(
  client: GlobalOrganizationOperationsClient
) {
  client.close();
}
function doStuffWithGlobalPublicDelegatedPrefixesClient(
  client: GlobalPublicDelegatedPrefixesClient
) {
  client.close();
}
function doStuffWithHealthChecksClient(client: HealthChecksClient) {
  client.close();
}
function doStuffWithImageFamilyViewsClient(client: ImageFamilyViewsClient) {
  client.close();
}
function doStuffWithImagesClient(client: ImagesClient) {
  client.close();
}
function doStuffWithInstanceGroupManagersClient(
  client: InstanceGroupManagersClient
) {
  client.close();
}
function doStuffWithInstanceGroupsClient(client: InstanceGroupsClient) {
  client.close();
}
function doStuffWithInstancesClient(client: InstancesClient) {
  client.close();
}
function doStuffWithInstanceTemplatesClient(client: InstanceTemplatesClient) {
  client.close();
}
function doStuffWithInterconnectAttachmentsClient(
  client: InterconnectAttachmentsClient
) {
  client.close();
}
function doStuffWithInterconnectLocationsClient(
  client: InterconnectLocationsClient
) {
  client.close();
}
function doStuffWithInterconnectsClient(client: InterconnectsClient) {
  client.close();
}
function doStuffWithLicenseCodesClient(client: LicenseCodesClient) {
  client.close();
}
function doStuffWithLicensesClient(client: LicensesClient) {
  client.close();
}
function doStuffWithMachineImagesClient(client: MachineImagesClient) {
  client.close();
}
function doStuffWithMachineTypesClient(client: MachineTypesClient) {
  client.close();
}
function doStuffWithNetworkAttachmentsClient(client: NetworkAttachmentsClient) {
  client.close();
}
function doStuffWithNetworkEdgeSecurityServicesClient(
  client: NetworkEdgeSecurityServicesClient
) {
  client.close();
}
function doStuffWithNetworkEndpointGroupsClient(
  client: NetworkEndpointGroupsClient
) {
  client.close();
}
function doStuffWithNetworkFirewallPoliciesClient(
  client: NetworkFirewallPoliciesClient
) {
  client.close();
}
function doStuffWithNetworksClient(client: NetworksClient) {
  client.close();
}
function doStuffWithNodeGroupsClient(client: NodeGroupsClient) {
  client.close();
}
function doStuffWithNodeTemplatesClient(client: NodeTemplatesClient) {
  client.close();
}
function doStuffWithNodeTypesClient(client: NodeTypesClient) {
  client.close();
}
function doStuffWithPacketMirroringsClient(client: PacketMirroringsClient) {
  client.close();
}
function doStuffWithProjectsClient(client: ProjectsClient) {
  client.close();
}
function doStuffWithPublicAdvertisedPrefixesClient(
  client: PublicAdvertisedPrefixesClient
) {
  client.close();
}
function doStuffWithPublicDelegatedPrefixesClient(
  client: PublicDelegatedPrefixesClient
) {
  client.close();
}
function doStuffWithRegionAutoscalersClient(client: RegionAutoscalersClient) {
  client.close();
}
function doStuffWithRegionBackendServicesClient(
  client: RegionBackendServicesClient
) {
  client.close();
}
function doStuffWithRegionCommitmentsClient(client: RegionCommitmentsClient) {
  client.close();
}
function doStuffWithRegionDisksClient(client: RegionDisksClient) {
  client.close();
}
function doStuffWithRegionDiskTypesClient(client: RegionDiskTypesClient) {
  client.close();
}
function doStuffWithRegionHealthChecksClient(client: RegionHealthChecksClient) {
  client.close();
}
function doStuffWithRegionHealthCheckServicesClient(
  client: RegionHealthCheckServicesClient
) {
  client.close();
}
function doStuffWithRegionInstanceGroupManagersClient(
  client: RegionInstanceGroupManagersClient
) {
  client.close();
}
function doStuffWithRegionInstanceGroupsClient(
  client: RegionInstanceGroupsClient
) {
  client.close();
}
function doStuffWithRegionInstancesClient(client: RegionInstancesClient) {
  client.close();
}
function doStuffWithRegionNetworkEndpointGroupsClient(
  client: RegionNetworkEndpointGroupsClient
) {
  client.close();
}
function doStuffWithRegionNetworkFirewallPoliciesClient(
  client: RegionNetworkFirewallPoliciesClient
) {
  client.close();
}
function doStuffWithRegionNotificationEndpointsClient(
  client: RegionNotificationEndpointsClient
) {
  client.close();
}
function doStuffWithRegionOperationsClient(client: RegionOperationsClient) {
  client.close();
}
function doStuffWithRegionsClient(client: RegionsClient) {
  client.close();
}
function doStuffWithRegionSecurityPoliciesClient(
  client: RegionSecurityPoliciesClient
) {
  client.close();
}
function doStuffWithRegionSslCertificatesClient(
  client: RegionSslCertificatesClient
) {
  client.close();
}
function doStuffWithRegionSslPoliciesClient(client: RegionSslPoliciesClient) {
  client.close();
}
function doStuffWithRegionTargetHttpProxiesClient(
  client: RegionTargetHttpProxiesClient
) {
  client.close();
}
function doStuffWithRegionTargetHttpsProxiesClient(
  client: RegionTargetHttpsProxiesClient
) {
  client.close();
}
function doStuffWithRegionTargetTcpProxiesClient(
  client: RegionTargetTcpProxiesClient
) {
  client.close();
}
function doStuffWithRegionUrlMapsClient(client: RegionUrlMapsClient) {
  client.close();
}
function doStuffWithReservationsClient(client: ReservationsClient) {
  client.close();
}
function doStuffWithResourcePoliciesClient(client: ResourcePoliciesClient) {
  client.close();
}
function doStuffWithRoutersClient(client: RoutersClient) {
  client.close();
}
function doStuffWithRoutesClient(client: RoutesClient) {
  client.close();
}
function doStuffWithSecurityPoliciesClient(client: SecurityPoliciesClient) {
  client.close();
}
function doStuffWithServiceAttachmentsClient(client: ServiceAttachmentsClient) {
  client.close();
}
function doStuffWithSnapshotsClient(client: SnapshotsClient) {
  client.close();
}
function doStuffWithSslCertificatesClient(client: SslCertificatesClient) {
  client.close();
}
function doStuffWithSslPoliciesClient(client: SslPoliciesClient) {
  client.close();
}
function doStuffWithSubnetworksClient(client: SubnetworksClient) {
  client.close();
}
function doStuffWithTargetGrpcProxiesClient(client: TargetGrpcProxiesClient) {
  client.close();
}
function doStuffWithTargetHttpProxiesClient(client: TargetHttpProxiesClient) {
  client.close();
}
function doStuffWithTargetHttpsProxiesClient(client: TargetHttpsProxiesClient) {
  client.close();
}
function doStuffWithTargetInstancesClient(client: TargetInstancesClient) {
  client.close();
}
function doStuffWithTargetPoolsClient(client: TargetPoolsClient) {
  client.close();
}
function doStuffWithTargetSslProxiesClient(client: TargetSslProxiesClient) {
  client.close();
}
function doStuffWithTargetTcpProxiesClient(client: TargetTcpProxiesClient) {
  client.close();
}
function doStuffWithTargetVpnGatewaysClient(client: TargetVpnGatewaysClient) {
  client.close();
}
function doStuffWithUrlMapsClient(client: UrlMapsClient) {
  client.close();
}
function doStuffWithVpnGatewaysClient(client: VpnGatewaysClient) {
  client.close();
}
function doStuffWithVpnTunnelsClient(client: VpnTunnelsClient) {
  client.close();
}
function doStuffWithZoneOperationsClient(client: ZoneOperationsClient) {
  client.close();
}
function doStuffWithZonesClient(client: ZonesClient) {
  client.close();
}

function main() {
  // check that the client instance can be created
  const acceleratorTypesClient = new AcceleratorTypesClient();
  doStuffWithAcceleratorTypesClient(acceleratorTypesClient);
  // check that the client instance can be created
  const addressesClient = new AddressesClient();
  doStuffWithAddressesClient(addressesClient);
  // check that the client instance can be created
  const autoscalersClient = new AutoscalersClient();
  doStuffWithAutoscalersClient(autoscalersClient);
  // check that the client instance can be created
  const backendBucketsClient = new BackendBucketsClient();
  doStuffWithBackendBucketsClient(backendBucketsClient);
  // check that the client instance can be created
  const backendServicesClient = new BackendServicesClient();
  doStuffWithBackendServicesClient(backendServicesClient);
  // check that the client instance can be created
  const disksClient = new DisksClient();
  doStuffWithDisksClient(disksClient);
  // check that the client instance can be created
  const diskTypesClient = new DiskTypesClient();
  doStuffWithDiskTypesClient(diskTypesClient);
  // check that the client instance can be created
  const externalVpnGatewaysClient = new ExternalVpnGatewaysClient();
  doStuffWithExternalVpnGatewaysClient(externalVpnGatewaysClient);
  // check that the client instance can be created
  const firewallPoliciesClient = new FirewallPoliciesClient();
  doStuffWithFirewallPoliciesClient(firewallPoliciesClient);
  // check that the client instance can be created
  const firewallsClient = new FirewallsClient();
  doStuffWithFirewallsClient(firewallsClient);
  // check that the client instance can be created
  const forwardingRulesClient = new ForwardingRulesClient();
  doStuffWithForwardingRulesClient(forwardingRulesClient);
  // check that the client instance can be created
  const globalAddressesClient = new GlobalAddressesClient();
  doStuffWithGlobalAddressesClient(globalAddressesClient);
  // check that the client instance can be created
  const globalForwardingRulesClient = new GlobalForwardingRulesClient();
  doStuffWithGlobalForwardingRulesClient(globalForwardingRulesClient);
  // check that the client instance can be created
  const globalNetworkEndpointGroupsClient =
    new GlobalNetworkEndpointGroupsClient();
  doStuffWithGlobalNetworkEndpointGroupsClient(
    globalNetworkEndpointGroupsClient
  );
  // check that the client instance can be created
  const globalOperationsClient = new GlobalOperationsClient();
  doStuffWithGlobalOperationsClient(globalOperationsClient);
  // check that the client instance can be created
  const globalOrganizationOperationsClient =
    new GlobalOrganizationOperationsClient();
  doStuffWithGlobalOrganizationOperationsClient(
    globalOrganizationOperationsClient
  );
  // check that the client instance can be created
  const globalPublicDelegatedPrefixesClient =
    new GlobalPublicDelegatedPrefixesClient();
  doStuffWithGlobalPublicDelegatedPrefixesClient(
    globalPublicDelegatedPrefixesClient
  );
  // check that the client instance can be created
  const healthChecksClient = new HealthChecksClient();
  doStuffWithHealthChecksClient(healthChecksClient);
  // check that the client instance can be created
  const imageFamilyViewsClient = new ImageFamilyViewsClient();
  doStuffWithImageFamilyViewsClient(imageFamilyViewsClient);
  // check that the client instance can be created
  const imagesClient = new ImagesClient();
  doStuffWithImagesClient(imagesClient);
  // check that the client instance can be created
  const instanceGroupManagersClient = new InstanceGroupManagersClient();
  doStuffWithInstanceGroupManagersClient(instanceGroupManagersClient);
  // check that the client instance can be created
  const instanceGroupsClient = new InstanceGroupsClient();
  doStuffWithInstanceGroupsClient(instanceGroupsClient);
  // check that the client instance can be created
  const instancesClient = new InstancesClient();
  doStuffWithInstancesClient(instancesClient);
  // check that the client instance can be created
  const instanceTemplatesClient = new InstanceTemplatesClient();
  doStuffWithInstanceTemplatesClient(instanceTemplatesClient);
  // check that the client instance can be created
  const interconnectAttachmentsClient = new InterconnectAttachmentsClient();
  doStuffWithInterconnectAttachmentsClient(interconnectAttachmentsClient);
  // check that the client instance can be created
  const interconnectLocationsClient = new InterconnectLocationsClient();
  doStuffWithInterconnectLocationsClient(interconnectLocationsClient);
  // check that the client instance can be created
  const interconnectsClient = new InterconnectsClient();
  doStuffWithInterconnectsClient(interconnectsClient);
  // check that the client instance can be created
  const licenseCodesClient = new LicenseCodesClient();
  doStuffWithLicenseCodesClient(licenseCodesClient);
  // check that the client instance can be created
  const licensesClient = new LicensesClient();
  doStuffWithLicensesClient(licensesClient);
  // check that the client instance can be created
  const machineImagesClient = new MachineImagesClient();
  doStuffWithMachineImagesClient(machineImagesClient);
  // check that the client instance can be created
  const machineTypesClient = new MachineTypesClient();
  doStuffWithMachineTypesClient(machineTypesClient);
  // check that the client instance can be created
  const networkAttachmentsClient = new NetworkAttachmentsClient();
  doStuffWithNetworkAttachmentsClient(networkAttachmentsClient);
  // check that the client instance can be created
  const networkEdgeSecurityServicesClient =
    new NetworkEdgeSecurityServicesClient();
  doStuffWithNetworkEdgeSecurityServicesClient(
    networkEdgeSecurityServicesClient
  );
  // check that the client instance can be created
  const networkEndpointGroupsClient = new NetworkEndpointGroupsClient();
  doStuffWithNetworkEndpointGroupsClient(networkEndpointGroupsClient);
  // check that the client instance can be created
  const networkFirewallPoliciesClient = new NetworkFirewallPoliciesClient();
  doStuffWithNetworkFirewallPoliciesClient(networkFirewallPoliciesClient);
  // check that the client instance can be created
  const networksClient = new NetworksClient();
  doStuffWithNetworksClient(networksClient);
  // check that the client instance can be created
  const nodeGroupsClient = new NodeGroupsClient();
  doStuffWithNodeGroupsClient(nodeGroupsClient);
  // check that the client instance can be created
  const nodeTemplatesClient = new NodeTemplatesClient();
  doStuffWithNodeTemplatesClient(nodeTemplatesClient);
  // check that the client instance can be created
  const nodeTypesClient = new NodeTypesClient();
  doStuffWithNodeTypesClient(nodeTypesClient);
  // check that the client instance can be created
  const packetMirroringsClient = new PacketMirroringsClient();
  doStuffWithPacketMirroringsClient(packetMirroringsClient);
  // check that the client instance can be created
  const projectsClient = new ProjectsClient();
  doStuffWithProjectsClient(projectsClient);
  // check that the client instance can be created
  const publicAdvertisedPrefixesClient = new PublicAdvertisedPrefixesClient();
  doStuffWithPublicAdvertisedPrefixesClient(publicAdvertisedPrefixesClient);
  // check that the client instance can be created
  const publicDelegatedPrefixesClient = new PublicDelegatedPrefixesClient();
  doStuffWithPublicDelegatedPrefixesClient(publicDelegatedPrefixesClient);
  // check that the client instance can be created
  const regionAutoscalersClient = new RegionAutoscalersClient();
  doStuffWithRegionAutoscalersClient(regionAutoscalersClient);
  // check that the client instance can be created
  const regionBackendServicesClient = new RegionBackendServicesClient();
  doStuffWithRegionBackendServicesClient(regionBackendServicesClient);
  // check that the client instance can be created
  const regionCommitmentsClient = new RegionCommitmentsClient();
  doStuffWithRegionCommitmentsClient(regionCommitmentsClient);
  // check that the client instance can be created
  const regionDisksClient = new RegionDisksClient();
  doStuffWithRegionDisksClient(regionDisksClient);
  // check that the client instance can be created
  const regionDiskTypesClient = new RegionDiskTypesClient();
  doStuffWithRegionDiskTypesClient(regionDiskTypesClient);
  // check that the client instance can be created
  const regionHealthChecksClient = new RegionHealthChecksClient();
  doStuffWithRegionHealthChecksClient(regionHealthChecksClient);
  // check that the client instance can be created
  const regionHealthCheckServicesClient = new RegionHealthCheckServicesClient();
  doStuffWithRegionHealthCheckServicesClient(regionHealthCheckServicesClient);
  // check that the client instance can be created
  const regionInstanceGroupManagersClient =
    new RegionInstanceGroupManagersClient();
  doStuffWithRegionInstanceGroupManagersClient(
    regionInstanceGroupManagersClient
  );
  // check that the client instance can be created
  const regionInstanceGroupsClient = new RegionInstanceGroupsClient();
  doStuffWithRegionInstanceGroupsClient(regionInstanceGroupsClient);
  // check that the client instance can be created
  const regionInstancesClient = new RegionInstancesClient();
  doStuffWithRegionInstancesClient(regionInstancesClient);
  // check that the client instance can be created
  const regionNetworkEndpointGroupsClient =
    new RegionNetworkEndpointGroupsClient();
  doStuffWithRegionNetworkEndpointGroupsClient(
    regionNetworkEndpointGroupsClient
  );
  // check that the client instance can be created
  const regionNetworkFirewallPoliciesClient =
    new RegionNetworkFirewallPoliciesClient();
  doStuffWithRegionNetworkFirewallPoliciesClient(
    regionNetworkFirewallPoliciesClient
  );
  // check that the client instance can be created
  const regionNotificationEndpointsClient =
    new RegionNotificationEndpointsClient();
  doStuffWithRegionNotificationEndpointsClient(
    regionNotificationEndpointsClient
  );
  // check that the client instance can be created
  const regionOperationsClient = new RegionOperationsClient();
  doStuffWithRegionOperationsClient(regionOperationsClient);
  // check that the client instance can be created
  const regionsClient = new RegionsClient();
  doStuffWithRegionsClient(regionsClient);
  // check that the client instance can be created
  const regionSecurityPoliciesClient = new RegionSecurityPoliciesClient();
  doStuffWithRegionSecurityPoliciesClient(regionSecurityPoliciesClient);
  // check that the client instance can be created
  const regionSslCertificatesClient = new RegionSslCertificatesClient();
  doStuffWithRegionSslCertificatesClient(regionSslCertificatesClient);
  // check that the client instance can be created
  const regionSslPoliciesClient = new RegionSslPoliciesClient();
  doStuffWithRegionSslPoliciesClient(regionSslPoliciesClient);
  // check that the client instance can be created
  const regionTargetHttpProxiesClient = new RegionTargetHttpProxiesClient();
  doStuffWithRegionTargetHttpProxiesClient(regionTargetHttpProxiesClient);
  // check that the client instance can be created
  const regionTargetHttpsProxiesClient = new RegionTargetHttpsProxiesClient();
  doStuffWithRegionTargetHttpsProxiesClient(regionTargetHttpsProxiesClient);
  // check that the client instance can be created
  const regionTargetTcpProxiesClient = new RegionTargetTcpProxiesClient();
  doStuffWithRegionTargetTcpProxiesClient(regionTargetTcpProxiesClient);
  // check that the client instance can be created
  const regionUrlMapsClient = new RegionUrlMapsClient();
  doStuffWithRegionUrlMapsClient(regionUrlMapsClient);
  // check that the client instance can be created
  const reservationsClient = new ReservationsClient();
  doStuffWithReservationsClient(reservationsClient);
  // check that the client instance can be created
  const resourcePoliciesClient = new ResourcePoliciesClient();
  doStuffWithResourcePoliciesClient(resourcePoliciesClient);
  // check that the client instance can be created
  const routersClient = new RoutersClient();
  doStuffWithRoutersClient(routersClient);
  // check that the client instance can be created
  const routesClient = new RoutesClient();
  doStuffWithRoutesClient(routesClient);
  // check that the client instance can be created
  const securityPoliciesClient = new SecurityPoliciesClient();
  doStuffWithSecurityPoliciesClient(securityPoliciesClient);
  // check that the client instance can be created
  const serviceAttachmentsClient = new ServiceAttachmentsClient();
  doStuffWithServiceAttachmentsClient(serviceAttachmentsClient);
  // check that the client instance can be created
  const snapshotsClient = new SnapshotsClient();
  doStuffWithSnapshotsClient(snapshotsClient);
  // check that the client instance can be created
  const sslCertificatesClient = new SslCertificatesClient();
  doStuffWithSslCertificatesClient(sslCertificatesClient);
  // check that the client instance can be created
  const sslPoliciesClient = new SslPoliciesClient();
  doStuffWithSslPoliciesClient(sslPoliciesClient);
  // check that the client instance can be created
  const subnetworksClient = new SubnetworksClient();
  doStuffWithSubnetworksClient(subnetworksClient);
  // check that the client instance can be created
  const targetGrpcProxiesClient = new TargetGrpcProxiesClient();
  doStuffWithTargetGrpcProxiesClient(targetGrpcProxiesClient);
  // check that the client instance can be created
  const targetHttpProxiesClient = new TargetHttpProxiesClient();
  doStuffWithTargetHttpProxiesClient(targetHttpProxiesClient);
  // check that the client instance can be created
  const targetHttpsProxiesClient = new TargetHttpsProxiesClient();
  doStuffWithTargetHttpsProxiesClient(targetHttpsProxiesClient);
  // check that the client instance can be created
  const targetInstancesClient = new TargetInstancesClient();
  doStuffWithTargetInstancesClient(targetInstancesClient);
  // check that the client instance can be created
  const targetPoolsClient = new TargetPoolsClient();
  doStuffWithTargetPoolsClient(targetPoolsClient);
  // check that the client instance can be created
  const targetSslProxiesClient = new TargetSslProxiesClient();
  doStuffWithTargetSslProxiesClient(targetSslProxiesClient);
  // check that the client instance can be created
  const targetTcpProxiesClient = new TargetTcpProxiesClient();
  doStuffWithTargetTcpProxiesClient(targetTcpProxiesClient);
  // check that the client instance can be created
  const targetVpnGatewaysClient = new TargetVpnGatewaysClient();
  doStuffWithTargetVpnGatewaysClient(targetVpnGatewaysClient);
  // check that the client instance can be created
  const urlMapsClient = new UrlMapsClient();
  doStuffWithUrlMapsClient(urlMapsClient);
  // check that the client instance can be created
  const vpnGatewaysClient = new VpnGatewaysClient();
  doStuffWithVpnGatewaysClient(vpnGatewaysClient);
  // check that the client instance can be created
  const vpnTunnelsClient = new VpnTunnelsClient();
  doStuffWithVpnTunnelsClient(vpnTunnelsClient);
  // check that the client instance can be created
  const zoneOperationsClient = new ZoneOperationsClient();
  doStuffWithZoneOperationsClient(zoneOperationsClient);
  // check that the client instance can be created
  const zonesClient = new ZonesClient();
  doStuffWithZonesClient(zonesClient);
}

main();
