// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* eslint-disable node/no-missing-require, no-unused-vars */
const compute = require('@google-cloud/compute');

function main() {
  const acceleratorTypesClient = new compute.AcceleratorTypesClient();
  const addressesClient = new compute.AddressesClient();
  const autoscalersClient = new compute.AutoscalersClient();
  const backendBucketsClient = new compute.BackendBucketsClient();
  const backendServicesClient = new compute.BackendServicesClient();
  const disksClient = new compute.DisksClient();
  const diskTypesClient = new compute.DiskTypesClient();
  const externalVpnGatewaysClient = new compute.ExternalVpnGatewaysClient();
  const firewallPoliciesClient = new compute.FirewallPoliciesClient();
  const firewallsClient = new compute.FirewallsClient();
  const forwardingRulesClient = new compute.ForwardingRulesClient();
  const globalAddressesClient = new compute.GlobalAddressesClient();
  const globalForwardingRulesClient = new compute.GlobalForwardingRulesClient();
  const globalNetworkEndpointGroupsClient =
    new compute.GlobalNetworkEndpointGroupsClient();
  const globalOperationsClient = new compute.GlobalOperationsClient();
  const globalOrganizationOperationsClient =
    new compute.GlobalOrganizationOperationsClient();
  const globalPublicDelegatedPrefixesClient =
    new compute.GlobalPublicDelegatedPrefixesClient();
  const healthChecksClient = new compute.HealthChecksClient();
  const imageFamilyViewsClient = new compute.ImageFamilyViewsClient();
  const imagesClient = new compute.ImagesClient();
  const instanceGroupManagersClient = new compute.InstanceGroupManagersClient();
  const instanceGroupsClient = new compute.InstanceGroupsClient();
  const instancesClient = new compute.InstancesClient();
  const instanceTemplatesClient = new compute.InstanceTemplatesClient();
  const interconnectAttachmentsClient =
    new compute.InterconnectAttachmentsClient();
  const interconnectLocationsClient = new compute.InterconnectLocationsClient();
  const interconnectsClient = new compute.InterconnectsClient();
  const licenseCodesClient = new compute.LicenseCodesClient();
  const licensesClient = new compute.LicensesClient();
  const machineImagesClient = new compute.MachineImagesClient();
  const machineTypesClient = new compute.MachineTypesClient();
  const networkAttachmentsClient = new compute.NetworkAttachmentsClient();
  const networkEdgeSecurityServicesClient =
    new compute.NetworkEdgeSecurityServicesClient();
  const networkEndpointGroupsClient = new compute.NetworkEndpointGroupsClient();
  const networkFirewallPoliciesClient =
    new compute.NetworkFirewallPoliciesClient();
  const networksClient = new compute.NetworksClient();
  const nodeGroupsClient = new compute.NodeGroupsClient();
  const nodeTemplatesClient = new compute.NodeTemplatesClient();
  const nodeTypesClient = new compute.NodeTypesClient();
  const packetMirroringsClient = new compute.PacketMirroringsClient();
  const projectsClient = new compute.ProjectsClient();
  const publicAdvertisedPrefixesClient =
    new compute.PublicAdvertisedPrefixesClient();
  const publicDelegatedPrefixesClient =
    new compute.PublicDelegatedPrefixesClient();
  const regionAutoscalersClient = new compute.RegionAutoscalersClient();
  const regionBackendServicesClient = new compute.RegionBackendServicesClient();
  const regionCommitmentsClient = new compute.RegionCommitmentsClient();
  const regionDisksClient = new compute.RegionDisksClient();
  const regionDiskTypesClient = new compute.RegionDiskTypesClient();
  const regionHealthChecksClient = new compute.RegionHealthChecksClient();
  const regionHealthCheckServicesClient =
    new compute.RegionHealthCheckServicesClient();
  const regionInstanceGroupManagersClient =
    new compute.RegionInstanceGroupManagersClient();
  const regionInstanceGroupsClient = new compute.RegionInstanceGroupsClient();
  const regionInstancesClient = new compute.RegionInstancesClient();
  const regionNetworkEndpointGroupsClient =
    new compute.RegionNetworkEndpointGroupsClient();
  const regionNetworkFirewallPoliciesClient =
    new compute.RegionNetworkFirewallPoliciesClient();
  const regionNotificationEndpointsClient =
    new compute.RegionNotificationEndpointsClient();
  const regionOperationsClient = new compute.RegionOperationsClient();
  const regionsClient = new compute.RegionsClient();
  const regionSecurityPoliciesClient =
    new compute.RegionSecurityPoliciesClient();
  const regionSslCertificatesClient = new compute.RegionSslCertificatesClient();
  const regionSslPoliciesClient = new compute.RegionSslPoliciesClient();
  const regionTargetHttpProxiesClient =
    new compute.RegionTargetHttpProxiesClient();
  const regionTargetHttpsProxiesClient =
    new compute.RegionTargetHttpsProxiesClient();
  const regionTargetTcpProxiesClient =
    new compute.RegionTargetTcpProxiesClient();
  const regionUrlMapsClient = new compute.RegionUrlMapsClient();
  const reservationsClient = new compute.ReservationsClient();
  const resourcePoliciesClient = new compute.ResourcePoliciesClient();
  const routersClient = new compute.RoutersClient();
  const routesClient = new compute.RoutesClient();
  const securityPoliciesClient = new compute.SecurityPoliciesClient();
  const serviceAttachmentsClient = new compute.ServiceAttachmentsClient();
  const snapshotsClient = new compute.SnapshotsClient();
  const sslCertificatesClient = new compute.SslCertificatesClient();
  const sslPoliciesClient = new compute.SslPoliciesClient();
  const subnetworksClient = new compute.SubnetworksClient();
  const targetGrpcProxiesClient = new compute.TargetGrpcProxiesClient();
  const targetHttpProxiesClient = new compute.TargetHttpProxiesClient();
  const targetHttpsProxiesClient = new compute.TargetHttpsProxiesClient();
  const targetInstancesClient = new compute.TargetInstancesClient();
  const targetPoolsClient = new compute.TargetPoolsClient();
  const targetSslProxiesClient = new compute.TargetSslProxiesClient();
  const targetTcpProxiesClient = new compute.TargetTcpProxiesClient();
  const targetVpnGatewaysClient = new compute.TargetVpnGatewaysClient();
  const urlMapsClient = new compute.UrlMapsClient();
  const vpnGatewaysClient = new compute.VpnGatewaysClient();
  const vpnTunnelsClient = new compute.VpnTunnelsClient();
  const zoneOperationsClient = new compute.ZoneOperationsClient();
  const zonesClient = new compute.ZonesClient();
}

main();
