// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v2/migration_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './migration_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Service to handle EDW migrations.
 * @class
 * @memberof v2
 */
export class MigrationServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  migrationServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of MigrationServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new MigrationServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof MigrationServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      migrationSubtaskPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/workflows/{workflow}/subtasks/{subtask}'
      ),
      migrationWorkflowPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/workflows/{workflow}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listMigrationWorkflows: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'migrationWorkflows'
      ),
      listMigrationSubtasks: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'migrationSubtasks'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.bigquery.migration.v2.MigrationService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.migrationServiceStub) {
      return this.migrationServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.bigquery.migration.v2.MigrationService.
    this.migrationServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.bigquery.migration.v2.MigrationService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.bigquery.migration.v2
            .MigrationService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const migrationServiceStubMethods = [
      'createMigrationWorkflow',
      'getMigrationWorkflow',
      'listMigrationWorkflows',
      'deleteMigrationWorkflow',
      'startMigrationWorkflow',
      'getMigrationSubtask',
      'listMigrationSubtasks',
    ];
    for (const methodName of migrationServiceStubMethods) {
      const callPromise = this.migrationServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.migrationServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'bigquerymigration.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'bigquerymigration.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Creates a migration workflow.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the project to which this migration workflow belongs.
   *   Example: `projects/foo/locations/bar`
   * @param {google.cloud.bigquery.migration.v2.MigrationWorkflow} request.migrationWorkflow
   *   Required. The migration workflow to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.migration.v2.MigrationWorkflow|MigrationWorkflow}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/migration_service.create_migration_workflow.js</caption>
   * region_tag:bigquerymigration_v2_generated_MigrationService_CreateMigrationWorkflow_async
   */
  createMigrationWorkflow(
    request?: protos.google.cloud.bigquery.migration.v2.ICreateMigrationWorkflowRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow,
      (
        | protos.google.cloud.bigquery.migration.v2.ICreateMigrationWorkflowRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createMigrationWorkflow(
    request: protos.google.cloud.bigquery.migration.v2.ICreateMigrationWorkflowRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow,
      | protos.google.cloud.bigquery.migration.v2.ICreateMigrationWorkflowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createMigrationWorkflow(
    request: protos.google.cloud.bigquery.migration.v2.ICreateMigrationWorkflowRequest,
    callback: Callback<
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow,
      | protos.google.cloud.bigquery.migration.v2.ICreateMigrationWorkflowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createMigrationWorkflow(
    request?: protos.google.cloud.bigquery.migration.v2.ICreateMigrationWorkflowRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow,
          | protos.google.cloud.bigquery.migration.v2.ICreateMigrationWorkflowRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow,
      | protos.google.cloud.bigquery.migration.v2.ICreateMigrationWorkflowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow,
      (
        | protos.google.cloud.bigquery.migration.v2.ICreateMigrationWorkflowRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createMigrationWorkflow(
      request,
      options,
      callback
    );
  }
  /**
   * Gets a previously created migration workflow.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique identifier for the migration workflow.
   *   Example: `projects/123/locations/us/workflows/1234`
   * @param {google.protobuf.FieldMask} request.readMask
   *   The list of fields to be retrieved.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.migration.v2.MigrationWorkflow|MigrationWorkflow}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/migration_service.get_migration_workflow.js</caption>
   * region_tag:bigquerymigration_v2_generated_MigrationService_GetMigrationWorkflow_async
   */
  getMigrationWorkflow(
    request?: protos.google.cloud.bigquery.migration.v2.IGetMigrationWorkflowRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow,
      (
        | protos.google.cloud.bigquery.migration.v2.IGetMigrationWorkflowRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getMigrationWorkflow(
    request: protos.google.cloud.bigquery.migration.v2.IGetMigrationWorkflowRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow,
      | protos.google.cloud.bigquery.migration.v2.IGetMigrationWorkflowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMigrationWorkflow(
    request: protos.google.cloud.bigquery.migration.v2.IGetMigrationWorkflowRequest,
    callback: Callback<
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow,
      | protos.google.cloud.bigquery.migration.v2.IGetMigrationWorkflowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMigrationWorkflow(
    request?: protos.google.cloud.bigquery.migration.v2.IGetMigrationWorkflowRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow,
          | protos.google.cloud.bigquery.migration.v2.IGetMigrationWorkflowRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow,
      | protos.google.cloud.bigquery.migration.v2.IGetMigrationWorkflowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow,
      (
        | protos.google.cloud.bigquery.migration.v2.IGetMigrationWorkflowRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getMigrationWorkflow(request, options, callback);
  }
  /**
   * Deletes a migration workflow by name.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique identifier for the migration workflow.
   *   Example: `projects/123/locations/us/workflows/1234`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/migration_service.delete_migration_workflow.js</caption>
   * region_tag:bigquerymigration_v2_generated_MigrationService_DeleteMigrationWorkflow_async
   */
  deleteMigrationWorkflow(
    request?: protos.google.cloud.bigquery.migration.v2.IDeleteMigrationWorkflowRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.migration.v2.IDeleteMigrationWorkflowRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  deleteMigrationWorkflow(
    request: protos.google.cloud.bigquery.migration.v2.IDeleteMigrationWorkflowRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.migration.v2.IDeleteMigrationWorkflowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteMigrationWorkflow(
    request: protos.google.cloud.bigquery.migration.v2.IDeleteMigrationWorkflowRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.migration.v2.IDeleteMigrationWorkflowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteMigrationWorkflow(
    request?: protos.google.cloud.bigquery.migration.v2.IDeleteMigrationWorkflowRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.migration.v2.IDeleteMigrationWorkflowRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.migration.v2.IDeleteMigrationWorkflowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.migration.v2.IDeleteMigrationWorkflowRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteMigrationWorkflow(
      request,
      options,
      callback
    );
  }
  /**
   * Starts a previously created migration workflow. I.e., the state transitions
   * from DRAFT to RUNNING. This is a no-op if the state is already RUNNING.
   * An error will be signaled if the state is anything other than DRAFT or
   * RUNNING.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique identifier for the migration workflow.
   *   Example: `projects/123/locations/us/workflows/1234`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/migration_service.start_migration_workflow.js</caption>
   * region_tag:bigquerymigration_v2_generated_MigrationService_StartMigrationWorkflow_async
   */
  startMigrationWorkflow(
    request?: protos.google.cloud.bigquery.migration.v2.IStartMigrationWorkflowRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.migration.v2.IStartMigrationWorkflowRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  startMigrationWorkflow(
    request: protos.google.cloud.bigquery.migration.v2.IStartMigrationWorkflowRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.migration.v2.IStartMigrationWorkflowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  startMigrationWorkflow(
    request: protos.google.cloud.bigquery.migration.v2.IStartMigrationWorkflowRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.migration.v2.IStartMigrationWorkflowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  startMigrationWorkflow(
    request?: protos.google.cloud.bigquery.migration.v2.IStartMigrationWorkflowRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.migration.v2.IStartMigrationWorkflowRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.migration.v2.IStartMigrationWorkflowRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.migration.v2.IStartMigrationWorkflowRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.startMigrationWorkflow(
      request,
      options,
      callback
    );
  }
  /**
   * Gets a previously created migration subtask.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The unique identifier for the migration subtask.
   *   Example: `projects/123/locations/us/workflows/1234/subtasks/543`
   * @param {google.protobuf.FieldMask} [request.readMask]
   *   Optional. The list of fields to be retrieved.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.migration.v2.MigrationSubtask|MigrationSubtask}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/migration_service.get_migration_subtask.js</caption>
   * region_tag:bigquerymigration_v2_generated_MigrationService_GetMigrationSubtask_async
   */
  getMigrationSubtask(
    request?: protos.google.cloud.bigquery.migration.v2.IGetMigrationSubtaskRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.migration.v2.IMigrationSubtask,
      (
        | protos.google.cloud.bigquery.migration.v2.IGetMigrationSubtaskRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getMigrationSubtask(
    request: protos.google.cloud.bigquery.migration.v2.IGetMigrationSubtaskRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.migration.v2.IMigrationSubtask,
      | protos.google.cloud.bigquery.migration.v2.IGetMigrationSubtaskRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMigrationSubtask(
    request: protos.google.cloud.bigquery.migration.v2.IGetMigrationSubtaskRequest,
    callback: Callback<
      protos.google.cloud.bigquery.migration.v2.IMigrationSubtask,
      | protos.google.cloud.bigquery.migration.v2.IGetMigrationSubtaskRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getMigrationSubtask(
    request?: protos.google.cloud.bigquery.migration.v2.IGetMigrationSubtaskRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.migration.v2.IMigrationSubtask,
          | protos.google.cloud.bigquery.migration.v2.IGetMigrationSubtaskRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.migration.v2.IMigrationSubtask,
      | protos.google.cloud.bigquery.migration.v2.IGetMigrationSubtaskRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.migration.v2.IMigrationSubtask,
      (
        | protos.google.cloud.bigquery.migration.v2.IGetMigrationSubtaskRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getMigrationSubtask(request, options, callback);
  }

  /**
   * Lists previously created migration workflow.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location of the migration workflows to list.
   *   Example: `projects/123/locations/us`
   * @param {google.protobuf.FieldMask} request.readMask
   *   The list of fields to be retrieved.
   * @param {number} request.pageSize
   *   The maximum number of migration workflows to return. The service may return
   *   fewer than this number.
   * @param {string} request.pageToken
   *   A page token, received from previous `ListMigrationWorkflows` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListMigrationWorkflows`
   *   must match the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.bigquery.migration.v2.MigrationWorkflow|MigrationWorkflow}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listMigrationWorkflowsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMigrationWorkflows(
    request?: protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow[],
      protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsRequest | null,
      protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsResponse,
    ]
  >;
  listMigrationWorkflows(
    request: protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsRequest,
      | protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow
    >
  ): void;
  listMigrationWorkflows(
    request: protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsRequest,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsRequest,
      | protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow
    >
  ): void;
  listMigrationWorkflows(
    request?: protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsRequest,
          | protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsResponse
          | null
          | undefined,
          protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsRequest,
      | protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow[],
      protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsRequest | null,
      protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listMigrationWorkflows(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location of the migration workflows to list.
   *   Example: `projects/123/locations/us`
   * @param {google.protobuf.FieldMask} request.readMask
   *   The list of fields to be retrieved.
   * @param {number} request.pageSize
   *   The maximum number of migration workflows to return. The service may return
   *   fewer than this number.
   * @param {string} request.pageToken
   *   A page token, received from previous `ListMigrationWorkflows` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListMigrationWorkflows`
   *   must match the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.bigquery.migration.v2.MigrationWorkflow|MigrationWorkflow} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listMigrationWorkflowsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMigrationWorkflowsStream(
    request?: protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMigrationWorkflows'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMigrationWorkflows.createStream(
      this.innerApiCalls.listMigrationWorkflows as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listMigrationWorkflows`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location of the migration workflows to list.
   *   Example: `projects/123/locations/us`
   * @param {google.protobuf.FieldMask} request.readMask
   *   The list of fields to be retrieved.
   * @param {number} request.pageSize
   *   The maximum number of migration workflows to return. The service may return
   *   fewer than this number.
   * @param {string} request.pageToken
   *   A page token, received from previous `ListMigrationWorkflows` call.
   *   Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListMigrationWorkflows`
   *   must match the call that provided the page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.bigquery.migration.v2.MigrationWorkflow|MigrationWorkflow}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/migration_service.list_migration_workflows.js</caption>
   * region_tag:bigquerymigration_v2_generated_MigrationService_ListMigrationWorkflows_async
   */
  listMigrationWorkflowsAsync(
    request?: protos.google.cloud.bigquery.migration.v2.IListMigrationWorkflowsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMigrationWorkflows'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMigrationWorkflows.asyncIterate(
      this.innerApiCalls['listMigrationWorkflows'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.bigquery.migration.v2.IMigrationWorkflow>;
  }
  /**
   * Lists previously created migration subtasks.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The migration task of the subtasks to list.
   *   Example: `projects/123/locations/us/workflows/1234`
   * @param {google.protobuf.FieldMask} [request.readMask]
   *   Optional. The list of fields to be retrieved.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of migration tasks to return. The service may
   *   return fewer than this number.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from previous `ListMigrationSubtasks`
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListMigrationSubtasks`
   *   must match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. The filter to apply. This can be used to get the subtasks of a
   *   specific tasks in a workflow, e.g. `migration_task = "ab012"` where
   *   `"ab012"` is the task ID (not the name in the named map).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.bigquery.migration.v2.MigrationSubtask|MigrationSubtask}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listMigrationSubtasksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMigrationSubtasks(
    request?: protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.migration.v2.IMigrationSubtask[],
      protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksRequest | null,
      protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksResponse,
    ]
  >;
  listMigrationSubtasks(
    request: protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksRequest,
      | protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.migration.v2.IMigrationSubtask
    >
  ): void;
  listMigrationSubtasks(
    request: protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksRequest,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksRequest,
      | protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.migration.v2.IMigrationSubtask
    >
  ): void;
  listMigrationSubtasks(
    request?: protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksRequest,
          | protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksResponse
          | null
          | undefined,
          protos.google.cloud.bigquery.migration.v2.IMigrationSubtask
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksRequest,
      | protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.migration.v2.IMigrationSubtask
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.migration.v2.IMigrationSubtask[],
      protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksRequest | null,
      protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listMigrationSubtasks(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The migration task of the subtasks to list.
   *   Example: `projects/123/locations/us/workflows/1234`
   * @param {google.protobuf.FieldMask} [request.readMask]
   *   Optional. The list of fields to be retrieved.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of migration tasks to return. The service may
   *   return fewer than this number.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from previous `ListMigrationSubtasks`
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListMigrationSubtasks`
   *   must match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. The filter to apply. This can be used to get the subtasks of a
   *   specific tasks in a workflow, e.g. `migration_task = "ab012"` where
   *   `"ab012"` is the task ID (not the name in the named map).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.bigquery.migration.v2.MigrationSubtask|MigrationSubtask} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listMigrationSubtasksAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listMigrationSubtasksStream(
    request?: protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMigrationSubtasks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMigrationSubtasks.createStream(
      this.innerApiCalls.listMigrationSubtasks as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listMigrationSubtasks`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The migration task of the subtasks to list.
   *   Example: `projects/123/locations/us/workflows/1234`
   * @param {google.protobuf.FieldMask} [request.readMask]
   *   Optional. The list of fields to be retrieved.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of migration tasks to return. The service may
   *   return fewer than this number.
   * @param {string} [request.pageToken]
   *   Optional. A page token, received from previous `ListMigrationSubtasks`
   *   call. Provide this to retrieve the subsequent page.
   *
   *   When paginating, all other parameters provided to `ListMigrationSubtasks`
   *   must match the call that provided the page token.
   * @param {string} [request.filter]
   *   Optional. The filter to apply. This can be used to get the subtasks of a
   *   specific tasks in a workflow, e.g. `migration_task = "ab012"` where
   *   `"ab012"` is the task ID (not the name in the named map).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.bigquery.migration.v2.MigrationSubtask|MigrationSubtask}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v2/migration_service.list_migration_subtasks.js</caption>
   * region_tag:bigquerymigration_v2_generated_MigrationService_ListMigrationSubtasks_async
   */
  listMigrationSubtasksAsync(
    request?: protos.google.cloud.bigquery.migration.v2.IListMigrationSubtasksRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.migration.v2.IMigrationSubtask> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listMigrationSubtasks'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listMigrationSubtasks.asyncIterate(
      this.innerApiCalls['listMigrationSubtasks'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.bigquery.migration.v2.IMigrationSubtask>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified migrationSubtask resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} workflow
   * @param {string} subtask
   * @returns {string} Resource name string.
   */
  migrationSubtaskPath(
    project: string,
    location: string,
    workflow: string,
    subtask: string
  ) {
    return this.pathTemplates.migrationSubtaskPathTemplate.render({
      project: project,
      location: location,
      workflow: workflow,
      subtask: subtask,
    });
  }

  /**
   * Parse the project from MigrationSubtask resource.
   *
   * @param {string} migrationSubtaskName
   *   A fully-qualified path representing MigrationSubtask resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMigrationSubtaskName(migrationSubtaskName: string) {
    return this.pathTemplates.migrationSubtaskPathTemplate.match(
      migrationSubtaskName
    ).project;
  }

  /**
   * Parse the location from MigrationSubtask resource.
   *
   * @param {string} migrationSubtaskName
   *   A fully-qualified path representing MigrationSubtask resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMigrationSubtaskName(migrationSubtaskName: string) {
    return this.pathTemplates.migrationSubtaskPathTemplate.match(
      migrationSubtaskName
    ).location;
  }

  /**
   * Parse the workflow from MigrationSubtask resource.
   *
   * @param {string} migrationSubtaskName
   *   A fully-qualified path representing MigrationSubtask resource.
   * @returns {string} A string representing the workflow.
   */
  matchWorkflowFromMigrationSubtaskName(migrationSubtaskName: string) {
    return this.pathTemplates.migrationSubtaskPathTemplate.match(
      migrationSubtaskName
    ).workflow;
  }

  /**
   * Parse the subtask from MigrationSubtask resource.
   *
   * @param {string} migrationSubtaskName
   *   A fully-qualified path representing MigrationSubtask resource.
   * @returns {string} A string representing the subtask.
   */
  matchSubtaskFromMigrationSubtaskName(migrationSubtaskName: string) {
    return this.pathTemplates.migrationSubtaskPathTemplate.match(
      migrationSubtaskName
    ).subtask;
  }

  /**
   * Return a fully-qualified migrationWorkflow resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} workflow
   * @returns {string} Resource name string.
   */
  migrationWorkflowPath(project: string, location: string, workflow: string) {
    return this.pathTemplates.migrationWorkflowPathTemplate.render({
      project: project,
      location: location,
      workflow: workflow,
    });
  }

  /**
   * Parse the project from MigrationWorkflow resource.
   *
   * @param {string} migrationWorkflowName
   *   A fully-qualified path representing MigrationWorkflow resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMigrationWorkflowName(migrationWorkflowName: string) {
    return this.pathTemplates.migrationWorkflowPathTemplate.match(
      migrationWorkflowName
    ).project;
  }

  /**
   * Parse the location from MigrationWorkflow resource.
   *
   * @param {string} migrationWorkflowName
   *   A fully-qualified path representing MigrationWorkflow resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMigrationWorkflowName(migrationWorkflowName: string) {
    return this.pathTemplates.migrationWorkflowPathTemplate.match(
      migrationWorkflowName
    ).location;
  }

  /**
   * Parse the workflow from MigrationWorkflow resource.
   *
   * @param {string} migrationWorkflowName
   *   A fully-qualified path representing MigrationWorkflow resource.
   * @returns {string} A string representing the workflow.
   */
  matchWorkflowFromMigrationWorkflowName(migrationWorkflowName: string) {
    return this.pathTemplates.migrationWorkflowPathTemplate.match(
      migrationWorkflowName
    ).workflow;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.migrationServiceStub && !this._terminated) {
      return this.migrationServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
