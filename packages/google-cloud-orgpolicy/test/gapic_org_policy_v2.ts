// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as orgpolicyModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v2.OrgPolicyClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath = orgpolicyModule.v2.OrgPolicyClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint = orgpolicyModule.v2.OrgPolicyClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = orgpolicyModule.v2.OrgPolicyClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.orgPolicyStub, undefined);
      await client.initialize();
      assert(client.orgPolicyStub);
    });

    it('has close method for the initialized client', done => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.orgPolicyStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.orgPolicyStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getPolicy', () => {
    it('invokes getPolicy without error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.GetPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.GetPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.Policy()
      );
      client.innerApiCalls.getPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.getPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPolicy without error using callback', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.GetPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.GetPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.Policy()
      );
      client.innerApiCalls.getPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.orgpolicy.v2.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPolicy with error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.GetPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.GetPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(client.getPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getPolicy with closed client', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.GetPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.GetPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getPolicy(request), expectedError);
    });
  });

  describe('getEffectivePolicy', () => {
    it('invokes getEffectivePolicy without error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.GetEffectivePolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.GetEffectivePolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.Policy()
      );
      client.innerApiCalls.getEffectivePolicy =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getEffectivePolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEffectivePolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEffectivePolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEffectivePolicy without error using callback', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.GetEffectivePolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.GetEffectivePolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.Policy()
      );
      client.innerApiCalls.getEffectivePolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getEffectivePolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.orgpolicy.v2.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getEffectivePolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEffectivePolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEffectivePolicy with error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.GetEffectivePolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.GetEffectivePolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getEffectivePolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getEffectivePolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getEffectivePolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getEffectivePolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getEffectivePolicy with closed client', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.GetEffectivePolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.GetEffectivePolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getEffectivePolicy(request), expectedError);
    });
  });

  describe('createPolicy', () => {
    it('invokes createPolicy without error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.CreatePolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.CreatePolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.Policy()
      );
      client.innerApiCalls.createPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.createPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPolicy without error using callback', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.CreatePolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.CreatePolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.Policy()
      );
      client.innerApiCalls.createPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.orgpolicy.v2.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPolicy with error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.CreatePolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.CreatePolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createPolicy with closed client', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.CreatePolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.CreatePolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createPolicy(request), expectedError);
    });
  });

  describe('updatePolicy', () => {
    it('invokes updatePolicy without error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.UpdatePolicyRequest()
      );
      request.policy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.UpdatePolicyRequest',
        ['policy', 'name']
      );
      request.policy.name = defaultValue1;
      const expectedHeaderRequestParams = `policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.Policy()
      );
      client.innerApiCalls.updatePolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.updatePolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePolicy without error using callback', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.UpdatePolicyRequest()
      );
      request.policy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.UpdatePolicyRequest',
        ['policy', 'name']
      );
      request.policy.name = defaultValue1;
      const expectedHeaderRequestParams = `policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.Policy()
      );
      client.innerApiCalls.updatePolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updatePolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.orgpolicy.v2.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updatePolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePolicy with error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.UpdatePolicyRequest()
      );
      request.policy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.UpdatePolicyRequest',
        ['policy', 'name']
      );
      request.policy.name = defaultValue1;
      const expectedHeaderRequestParams = `policy.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updatePolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updatePolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updatePolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updatePolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updatePolicy with closed client', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.UpdatePolicyRequest()
      );
      request.policy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.UpdatePolicyRequest',
        ['policy', 'name']
      );
      request.policy.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updatePolicy(request), expectedError);
    });
  });

  describe('deletePolicy', () => {
    it('invokes deletePolicy without error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.DeletePolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.DeletePolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deletePolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.deletePolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePolicy without error using callback', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.DeletePolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.DeletePolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deletePolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deletePolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deletePolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePolicy with error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.DeletePolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.DeletePolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deletePolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deletePolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deletePolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deletePolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deletePolicy with closed client', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.DeletePolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.DeletePolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deletePolicy(request), expectedError);
    });
  });

  describe('listConstraints', () => {
    it('invokes listConstraints without error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListConstraintsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListConstraintsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.orgpolicy.v2.Constraint()
        ),
        generateSampleMessage(
          new protos.google.cloud.orgpolicy.v2.Constraint()
        ),
        generateSampleMessage(
          new protos.google.cloud.orgpolicy.v2.Constraint()
        ),
      ];
      client.innerApiCalls.listConstraints = stubSimpleCall(expectedResponse);
      const [response] = await client.listConstraints(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConstraints as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConstraints as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConstraints without error using callback', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListConstraintsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListConstraintsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.orgpolicy.v2.Constraint()
        ),
        generateSampleMessage(
          new protos.google.cloud.orgpolicy.v2.Constraint()
        ),
        generateSampleMessage(
          new protos.google.cloud.orgpolicy.v2.Constraint()
        ),
      ];
      client.innerApiCalls.listConstraints =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listConstraints(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.orgpolicy.v2.IConstraint[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConstraints as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConstraints as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConstraints with error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListConstraintsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListConstraintsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listConstraints = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listConstraints(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listConstraints as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConstraints as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConstraintsStream without error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListConstraintsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListConstraintsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.orgpolicy.v2.Constraint()
        ),
        generateSampleMessage(
          new protos.google.cloud.orgpolicy.v2.Constraint()
        ),
        generateSampleMessage(
          new protos.google.cloud.orgpolicy.v2.Constraint()
        ),
      ];
      client.descriptors.page.listConstraints.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listConstraintsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.orgpolicy.v2.Constraint[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.orgpolicy.v2.Constraint) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listConstraints.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConstraints, request)
      );
      assert(
        (client.descriptors.page.listConstraints.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listConstraintsStream with error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListConstraintsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListConstraintsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConstraints.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listConstraintsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.orgpolicy.v2.Constraint[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.orgpolicy.v2.Constraint) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listConstraints.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConstraints, request)
      );
      assert(
        (client.descriptors.page.listConstraints.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listConstraints without error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListConstraintsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListConstraintsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.orgpolicy.v2.Constraint()
        ),
        generateSampleMessage(
          new protos.google.cloud.orgpolicy.v2.Constraint()
        ),
        generateSampleMessage(
          new protos.google.cloud.orgpolicy.v2.Constraint()
        ),
      ];
      client.descriptors.page.listConstraints.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.orgpolicy.v2.IConstraint[] = [];
      const iterable = client.listConstraintsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConstraints.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConstraints.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listConstraints with error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListConstraintsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListConstraintsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConstraints.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listConstraintsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.orgpolicy.v2.IConstraint[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConstraints.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConstraints.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listPolicies', () => {
    it('invokes listPolicies without error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.orgpolicy.v2.Policy()),
        generateSampleMessage(new protos.google.cloud.orgpolicy.v2.Policy()),
        generateSampleMessage(new protos.google.cloud.orgpolicy.v2.Policy()),
      ];
      client.innerApiCalls.listPolicies = stubSimpleCall(expectedResponse);
      const [response] = await client.listPolicies(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPolicies without error using callback', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.orgpolicy.v2.Policy()),
        generateSampleMessage(new protos.google.cloud.orgpolicy.v2.Policy()),
        generateSampleMessage(new protos.google.cloud.orgpolicy.v2.Policy()),
      ];
      client.innerApiCalls.listPolicies =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listPolicies(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.orgpolicy.v2.IPolicy[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPolicies with error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listPolicies = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listPolicies(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listPoliciesStream without error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.orgpolicy.v2.Policy()),
        generateSampleMessage(new protos.google.cloud.orgpolicy.v2.Policy()),
        generateSampleMessage(new protos.google.cloud.orgpolicy.v2.Policy()),
      ];
      client.descriptors.page.listPolicies.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.orgpolicy.v2.Policy[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.orgpolicy.v2.Policy) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listPolicies.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPolicies, request)
      );
      assert(
        (client.descriptors.page.listPolicies.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listPoliciesStream with error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPolicies.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.orgpolicy.v2.Policy[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.orgpolicy.v2.Policy) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listPolicies.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listPolicies, request)
      );
      assert(
        (client.descriptors.page.listPolicies.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPolicies without error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.orgpolicy.v2.Policy()),
        generateSampleMessage(new protos.google.cloud.orgpolicy.v2.Policy()),
        generateSampleMessage(new protos.google.cloud.orgpolicy.v2.Policy()),
      ];
      client.descriptors.page.listPolicies.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.orgpolicy.v2.IPolicy[] = [];
      const iterable = client.listPoliciesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPolicies.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPolicies.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listPolicies with error', async () => {
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.orgpolicy.v2.ListPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.orgpolicy.v2.ListPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listPolicies.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPoliciesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.orgpolicy.v2.IPolicy[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listPolicies.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listPolicies.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('folderConstraint', () => {
      const fakePath = '/rendered/path/folderConstraint';
      const expectedParameters = {
        folder: 'folderValue',
        constraint: 'constraintValue',
      };
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderConstraintPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderConstraintPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderConstraintPath', () => {
        const result = client.folderConstraintPath(
          'folderValue',
          'constraintValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.folderConstraintPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderConstraintName', () => {
        const result = client.matchFolderFromFolderConstraintName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (client.pathTemplates.folderConstraintPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConstraintFromFolderConstraintName', () => {
        const result = client.matchConstraintFromFolderConstraintName(fakePath);
        assert.strictEqual(result, 'constraintValue');
        assert(
          (client.pathTemplates.folderConstraintPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('folderPolicy', () => {
      const fakePath = '/rendered/path/folderPolicy';
      const expectedParameters = {
        folder: 'folderValue',
        policy: 'policyValue',
      };
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderPolicyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderPolicyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderPolicyPath', () => {
        const result = client.folderPolicyPath('folderValue', 'policyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.folderPolicyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderPolicyName', () => {
        const result = client.matchFolderFromFolderPolicyName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (client.pathTemplates.folderPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPolicyFromFolderPolicyName', () => {
        const result = client.matchPolicyFromFolderPolicyName(fakePath);
        assert.strictEqual(result, 'policyValue');
        assert(
          (client.pathTemplates.folderPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationConstraint', () => {
      const fakePath = '/rendered/path/organizationConstraint';
      const expectedParameters = {
        organization: 'organizationValue',
        constraint: 'constraintValue',
      };
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationConstraintPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationConstraintPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationConstraintPath', () => {
        const result = client.organizationConstraintPath(
          'organizationValue',
          'constraintValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationConstraintPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationConstraintName', () => {
        const result =
          client.matchOrganizationFromOrganizationConstraintName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationConstraintPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConstraintFromOrganizationConstraintName', () => {
        const result =
          client.matchConstraintFromOrganizationConstraintName(fakePath);
        assert.strictEqual(result, 'constraintValue');
        assert(
          (
            client.pathTemplates.organizationConstraintPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organizationPolicy', () => {
      const fakePath = '/rendered/path/organizationPolicy';
      const expectedParameters = {
        organization: 'organizationValue',
        policy: 'policyValue',
      };
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationPolicyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationPolicyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationPolicyPath', () => {
        const result = client.organizationPolicyPath(
          'organizationValue',
          'policyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.organizationPolicyPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationPolicyName', () => {
        const result =
          client.matchOrganizationFromOrganizationPolicyName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (
            client.pathTemplates.organizationPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPolicyFromOrganizationPolicyName', () => {
        const result = client.matchPolicyFromOrganizationPolicyName(fakePath);
        assert.strictEqual(result, 'policyValue');
        assert(
          (
            client.pathTemplates.organizationPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectConstraint', () => {
      const fakePath = '/rendered/path/projectConstraint';
      const expectedParameters = {
        project: 'projectValue',
        constraint: 'constraintValue',
      };
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectConstraintPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectConstraintPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectConstraintPath', () => {
        const result = client.projectConstraintPath(
          'projectValue',
          'constraintValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.projectConstraintPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectConstraintName', () => {
        const result = client.matchProjectFromProjectConstraintName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.projectConstraintPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConstraintFromProjectConstraintName', () => {
        const result =
          client.matchConstraintFromProjectConstraintName(fakePath);
        assert.strictEqual(result, 'constraintValue');
        assert(
          (
            client.pathTemplates.projectConstraintPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('projectPolicy', () => {
      const fakePath = '/rendered/path/projectPolicy';
      const expectedParameters = {
        project: 'projectValue',
        policy: 'policyValue',
      };
      const client = new orgpolicyModule.v2.OrgPolicyClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPolicyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPolicyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPolicyPath', () => {
        const result = client.projectPolicyPath('projectValue', 'policyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPolicyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectPolicyName', () => {
        const result = client.matchProjectFromProjectPolicyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchPolicyFromProjectPolicyName', () => {
        const result = client.matchPolicyFromProjectPolicyName(fakePath);
        assert.strictEqual(result, 'policyValue');
        assert(
          (client.pathTemplates.projectPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
