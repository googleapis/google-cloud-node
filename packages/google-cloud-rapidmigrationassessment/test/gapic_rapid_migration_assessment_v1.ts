// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as rapidmigrationassessmentModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.RapidMigrationAssessmentClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(
        apiEndpoint,
        'rapidmigrationassessment.googleapis.com'
      );
    });

    it('has universeDomain', () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath =
          rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient
            .servicePath;
        assert.strictEqual(
          servicePath,
          'rapidmigrationassessment.googleapis.com'
        );
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint =
          rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient
            .apiEndpoint;
        assert.strictEqual(
          apiEndpoint,
          'rapidmigrationassessment.googleapis.com'
        );
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          universeDomain: 'example.com',
        });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'rapidmigrationassessment.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          universe_domain: 'example.com',
        });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'rapidmigrationassessment.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'rapidmigrationassessment.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client =
            new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient(
              {universeDomain: 'configured.example.com'}
            );
          const servicePath = client.apiEndpoint;
          assert.strictEqual(
            servicePath,
            'rapidmigrationassessment.configured.example.com'
          );
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port =
        rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          fallback: true,
        });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.rapidMigrationAssessmentStub, undefined);
      await client.initialize();
      assert(client.rapidMigrationAssessmentStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      assert(client.rapidMigrationAssessmentStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.rapidMigrationAssessmentStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getAnnotation', () => {
    it('invokes getAnnotation without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.GetAnnotationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.GetAnnotationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.Annotation()
      );
      client.innerApiCalls.getAnnotation = stubSimpleCall(expectedResponse);
      const [response] = await client.getAnnotation(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAnnotation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAnnotation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAnnotation without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.GetAnnotationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.GetAnnotationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.Annotation()
      );
      client.innerApiCalls.getAnnotation =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAnnotation(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.rapidmigrationassessment.v1.IAnnotation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAnnotation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAnnotation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAnnotation with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.GetAnnotationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.GetAnnotationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAnnotation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAnnotation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAnnotation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAnnotation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAnnotation with closed client', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.GetAnnotationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.GetAnnotationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAnnotation(request), expectedError);
    });
  });

  describe('getCollector', () => {
    it('invokes getCollector without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.GetCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.GetCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.Collector()
      );
      client.innerApiCalls.getCollector = stubSimpleCall(expectedResponse);
      const [response] = await client.getCollector(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCollector without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.GetCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.GetCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.Collector()
      );
      client.innerApiCalls.getCollector =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCollector(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.rapidmigrationassessment.v1.ICollector | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCollector with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.GetCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.GetCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCollector = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getCollector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCollector with closed client', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.GetCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.GetCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getCollector(request), expectedError);
    });
  });

  describe('createCollector', () => {
    it('invokes createCollector without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.CreateCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.CreateCollectorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createCollector =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createCollector(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCollector without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.CreateCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.CreateCollectorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createCollector =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCollector(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.rapidmigrationassessment.v1.ICollector,
              protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.rapidmigrationassessment.v1.ICollector,
        protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCollector with call error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.CreateCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.CreateCollectorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCollector = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createCollector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCollector with LRO error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.CreateCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.CreateCollectorRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCollector = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createCollector(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateCollectorProgress without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateCollectorProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateCollectorProgress with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateCollectorProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createAnnotation', () => {
    it('invokes createAnnotation without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.CreateAnnotationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.CreateAnnotationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAnnotation =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createAnnotation(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAnnotation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAnnotation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAnnotation without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.CreateAnnotationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.CreateAnnotationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAnnotation =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAnnotation(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.rapidmigrationassessment.v1.IAnnotation,
              protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.rapidmigrationassessment.v1.IAnnotation,
        protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAnnotation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAnnotation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAnnotation with call error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.CreateAnnotationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.CreateAnnotationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAnnotation = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAnnotation(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAnnotation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAnnotation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAnnotation with LRO error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.CreateAnnotationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.CreateAnnotationRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAnnotation = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createAnnotation(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAnnotation as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAnnotation as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateAnnotationProgress without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateAnnotationProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateAnnotationProgress with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateAnnotationProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateCollector', () => {
    it('invokes updateCollector without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.UpdateCollectorRequest()
      );
      request.collector ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.UpdateCollectorRequest',
        ['collector', 'name']
      );
      request.collector.name = defaultValue1;
      const expectedHeaderRequestParams = `collector.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateCollector =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateCollector(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCollector without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.UpdateCollectorRequest()
      );
      request.collector ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.UpdateCollectorRequest',
        ['collector', 'name']
      );
      request.collector.name = defaultValue1;
      const expectedHeaderRequestParams = `collector.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateCollector =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateCollector(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.rapidmigrationassessment.v1.ICollector,
              protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.rapidmigrationassessment.v1.ICollector,
        protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCollector with call error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.UpdateCollectorRequest()
      );
      request.collector ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.UpdateCollectorRequest',
        ['collector', 'name']
      );
      request.collector.name = defaultValue1;
      const expectedHeaderRequestParams = `collector.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateCollector = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateCollector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCollector with LRO error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.UpdateCollectorRequest()
      );
      request.collector ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.UpdateCollectorRequest',
        ['collector', 'name']
      );
      request.collector.name = defaultValue1;
      const expectedHeaderRequestParams = `collector.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateCollector = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateCollector(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateCollectorProgress without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateCollectorProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateCollectorProgress with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateCollectorProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteCollector', () => {
    it('invokes deleteCollector without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.DeleteCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.DeleteCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteCollector =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteCollector(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCollector without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.DeleteCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.DeleteCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteCollector =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteCollector(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.rapidmigrationassessment.v1.ICollector,
              protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.rapidmigrationassessment.v1.ICollector,
        protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCollector with call error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.DeleteCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.DeleteCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteCollector = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteCollector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteCollector with LRO error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.DeleteCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.DeleteCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteCollector = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteCollector(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteCollectorProgress without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteCollectorProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteCollectorProgress with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteCollectorProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('resumeCollector', () => {
    it('invokes resumeCollector without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.ResumeCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.ResumeCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resumeCollector =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.resumeCollector(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resumeCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeCollector without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.ResumeCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.ResumeCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resumeCollector =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.resumeCollector(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.rapidmigrationassessment.v1.ICollector,
              protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.rapidmigrationassessment.v1.ICollector,
        protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resumeCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeCollector with call error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.ResumeCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.ResumeCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resumeCollector = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.resumeCollector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.resumeCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeCollector with LRO error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.ResumeCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.ResumeCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resumeCollector = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.resumeCollector(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.resumeCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkResumeCollectorProgress without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkResumeCollectorProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkResumeCollectorProgress with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkResumeCollectorProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('registerCollector', () => {
    it('invokes registerCollector without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.RegisterCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.RegisterCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.registerCollector =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.registerCollector(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.registerCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.registerCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes registerCollector without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.RegisterCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.RegisterCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.registerCollector =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.registerCollector(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.rapidmigrationassessment.v1.ICollector,
              protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.rapidmigrationassessment.v1.ICollector,
        protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.registerCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.registerCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes registerCollector with call error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.RegisterCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.RegisterCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.registerCollector = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.registerCollector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.registerCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.registerCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes registerCollector with LRO error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.RegisterCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.RegisterCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.registerCollector = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.registerCollector(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.registerCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.registerCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkRegisterCollectorProgress without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkRegisterCollectorProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkRegisterCollectorProgress with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkRegisterCollectorProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('pauseCollector', () => {
    it('invokes pauseCollector without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.PauseCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.PauseCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.pauseCollector =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.pauseCollector(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.pauseCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.pauseCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes pauseCollector without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.PauseCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.PauseCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.pauseCollector =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.pauseCollector(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.rapidmigrationassessment.v1.ICollector,
              protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.rapidmigrationassessment.v1.ICollector,
        protos.google.cloud.rapidmigrationassessment.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.pauseCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.pauseCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes pauseCollector with call error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.PauseCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.PauseCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.pauseCollector = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.pauseCollector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.pauseCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.pauseCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes pauseCollector with LRO error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.PauseCollectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.PauseCollectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.pauseCollector = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.pauseCollector(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.pauseCollector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.pauseCollector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkPauseCollectorProgress without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkPauseCollectorProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkPauseCollectorProgress with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkPauseCollectorProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listCollectors', () => {
    it('invokes listCollectors without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.rapidmigrationassessment.v1.Collector()
        ),
        generateSampleMessage(
          new protos.google.cloud.rapidmigrationassessment.v1.Collector()
        ),
        generateSampleMessage(
          new protos.google.cloud.rapidmigrationassessment.v1.Collector()
        ),
      ];
      client.innerApiCalls.listCollectors = stubSimpleCall(expectedResponse);
      const [response] = await client.listCollectors(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCollectors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCollectors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCollectors without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.rapidmigrationassessment.v1.Collector()
        ),
        generateSampleMessage(
          new protos.google.cloud.rapidmigrationassessment.v1.Collector()
        ),
        generateSampleMessage(
          new protos.google.cloud.rapidmigrationassessment.v1.Collector()
        ),
      ];
      client.innerApiCalls.listCollectors =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCollectors(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.rapidmigrationassessment.v1.ICollector[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCollectors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCollectors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCollectors with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listCollectors = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listCollectors(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listCollectors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCollectors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCollectorsStream without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.rapidmigrationassessment.v1.Collector()
        ),
        generateSampleMessage(
          new protos.google.cloud.rapidmigrationassessment.v1.Collector()
        ),
        generateSampleMessage(
          new protos.google.cloud.rapidmigrationassessment.v1.Collector()
        ),
      ];
      client.descriptors.page.listCollectors.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCollectorsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.rapidmigrationassessment.v1.Collector[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.rapidmigrationassessment.v1.Collector
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listCollectors.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCollectors, request)
      );
      assert(
        (client.descriptors.page.listCollectors.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listCollectorsStream with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCollectors.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listCollectorsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.rapidmigrationassessment.v1.Collector[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.rapidmigrationassessment.v1.Collector
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listCollectors.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCollectors, request)
      );
      assert(
        (client.descriptors.page.listCollectors.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listCollectors without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.rapidmigrationassessment.v1.Collector()
        ),
        generateSampleMessage(
          new protos.google.cloud.rapidmigrationassessment.v1.Collector()
        ),
        generateSampleMessage(
          new protos.google.cloud.rapidmigrationassessment.v1.Collector()
        ),
      ];
      client.descriptors.page.listCollectors.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.rapidmigrationassessment.v1.ICollector[] =
        [];
      const iterable = client.listCollectorsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCollectors.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCollectors.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listCollectors with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.rapidmigrationassessment.v1.ListCollectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCollectors.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listCollectorsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.rapidmigrationassessment.v1.ICollector[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCollectors.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCollectors.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('annotation', () => {
      const fakePath = '/rendered/path/annotation';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        annotation: 'annotationValue',
      };
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.annotationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.annotationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('annotationPath', () => {
        const result = client.annotationPath(
          'projectValue',
          'locationValue',
          'annotationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.annotationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAnnotationName', () => {
        const result = client.matchProjectFromAnnotationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAnnotationName', () => {
        const result = client.matchLocationFromAnnotationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAnnotationFromAnnotationName', () => {
        const result = client.matchAnnotationFromAnnotationName(fakePath);
        assert.strictEqual(result, 'annotationValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('collector', () => {
      const fakePath = '/rendered/path/collector';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        collector: 'collectorValue',
      };
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.collectorPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.collectorPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('collectorPath', () => {
        const result = client.collectorPath(
          'projectValue',
          'locationValue',
          'collectorValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.collectorPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromCollectorName', () => {
        const result = client.matchProjectFromCollectorName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.collectorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromCollectorName', () => {
        const result = client.matchLocationFromCollectorName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.collectorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCollectorFromCollectorName', () => {
        const result = client.matchCollectorFromCollectorName(fakePath);
        assert.strictEqual(result, 'collectorValue');
        assert(
          (client.pathTemplates.collectorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client =
        new rapidmigrationassessmentModule.v1.RapidMigrationAssessmentClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
