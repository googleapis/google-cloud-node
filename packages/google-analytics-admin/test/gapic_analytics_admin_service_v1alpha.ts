// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as analyticsadminserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1alpha.AnalyticsAdminServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient
          .servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient
          .apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port =
        analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          fallback: true,
        });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.analyticsAdminServiceStub, undefined);
      await client.initialize();
      assert(client.analyticsAdminServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      assert(client.analyticsAdminServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.analyticsAdminServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getAccount', () => {
    it('invokes getAccount without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetAccountRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetAccountRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Account()
      );
      client.innerApiCalls.getAccount = stubSimpleCall(expectedResponse);
      const [response] = await client.getAccount(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAccount as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAccount as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAccount without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetAccountRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetAccountRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Account()
      );
      client.innerApiCalls.getAccount =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAccount(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IAccount | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAccount as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAccount as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAccount with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetAccountRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetAccountRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAccount = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAccount(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAccount as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAccount as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAccount with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetAccountRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetAccountRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAccount(request), expectedError);
    });
  });

  describe('deleteAccount', () => {
    it('invokes deleteAccount without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteAccountRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteAccountRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAccount = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteAccount(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAccount as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAccount as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAccount without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteAccountRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteAccountRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteAccount =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAccount(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAccount as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAccount as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAccount with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteAccountRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteAccountRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAccount = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAccount(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAccount as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAccount as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAccount with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteAccountRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteAccountRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteAccount(request), expectedError);
    });
  });

  describe('updateAccount', () => {
    it('invokes updateAccount without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateAccountRequest()
      );
      request.account ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateAccountRequest',
        ['account', 'name']
      );
      request.account.name = defaultValue1;
      const expectedHeaderRequestParams = `account.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Account()
      );
      client.innerApiCalls.updateAccount = stubSimpleCall(expectedResponse);
      const [response] = await client.updateAccount(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAccount as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAccount as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAccount without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateAccountRequest()
      );
      request.account ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateAccountRequest',
        ['account', 'name']
      );
      request.account.name = defaultValue1;
      const expectedHeaderRequestParams = `account.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Account()
      );
      client.innerApiCalls.updateAccount =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAccount(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IAccount | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAccount as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAccount as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAccount with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateAccountRequest()
      );
      request.account ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateAccountRequest',
        ['account', 'name']
      );
      request.account.name = defaultValue1;
      const expectedHeaderRequestParams = `account.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAccount = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateAccount(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAccount as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAccount as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAccount with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateAccountRequest()
      );
      request.account ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateAccountRequest',
        ['account', 'name']
      );
      request.account.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateAccount(request), expectedError);
    });
  });

  describe('provisionAccountTicket', () => {
    it('invokes provisionAccountTicket without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ProvisionAccountTicketRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ProvisionAccountTicketResponse()
      );
      client.innerApiCalls.provisionAccountTicket =
        stubSimpleCall(expectedResponse);
      const [response] = await client.provisionAccountTicket(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes provisionAccountTicket without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ProvisionAccountTicketRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ProvisionAccountTicketResponse()
      );
      client.innerApiCalls.provisionAccountTicket =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.provisionAccountTicket(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IProvisionAccountTicketResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes provisionAccountTicket with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ProvisionAccountTicketRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.provisionAccountTicket = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.provisionAccountTicket(request),
        expectedError
      );
    });

    it('invokes provisionAccountTicket with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ProvisionAccountTicketRequest()
      );
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.provisionAccountTicket(request),
        expectedError
      );
    });
  });

  describe('getProperty', () => {
    it('invokes getProperty without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetPropertyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetPropertyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Property()
      );
      client.innerApiCalls.getProperty = stubSimpleCall(expectedResponse);
      const [response] = await client.getProperty(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getProperty as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProperty as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProperty without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetPropertyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetPropertyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Property()
      );
      client.innerApiCalls.getProperty =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getProperty(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IProperty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getProperty as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProperty as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProperty with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetPropertyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetPropertyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getProperty = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getProperty(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getProperty as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProperty as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProperty with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetPropertyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetPropertyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getProperty(request), expectedError);
    });
  });

  describe('createProperty', () => {
    it('invokes createProperty without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreatePropertyRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Property()
      );
      client.innerApiCalls.createProperty = stubSimpleCall(expectedResponse);
      const [response] = await client.createProperty(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes createProperty without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreatePropertyRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Property()
      );
      client.innerApiCalls.createProperty =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createProperty(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IProperty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes createProperty with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreatePropertyRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.createProperty = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createProperty(request), expectedError);
    });

    it('invokes createProperty with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreatePropertyRequest()
      );
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createProperty(request), expectedError);
    });
  });

  describe('deleteProperty', () => {
    it('invokes deleteProperty without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeletePropertyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeletePropertyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Property()
      );
      client.innerApiCalls.deleteProperty = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteProperty(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteProperty as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteProperty as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteProperty without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeletePropertyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeletePropertyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Property()
      );
      client.innerApiCalls.deleteProperty =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteProperty(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IProperty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteProperty as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteProperty as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteProperty with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeletePropertyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeletePropertyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteProperty = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteProperty(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteProperty as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteProperty as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteProperty with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeletePropertyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeletePropertyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteProperty(request), expectedError);
    });
  });

  describe('updateProperty', () => {
    it('invokes updateProperty without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdatePropertyRequest()
      );
      request.property ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdatePropertyRequest',
        ['property', 'name']
      );
      request.property.name = defaultValue1;
      const expectedHeaderRequestParams = `property.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Property()
      );
      client.innerApiCalls.updateProperty = stubSimpleCall(expectedResponse);
      const [response] = await client.updateProperty(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateProperty as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateProperty as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateProperty without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdatePropertyRequest()
      );
      request.property ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdatePropertyRequest',
        ['property', 'name']
      );
      request.property.name = defaultValue1;
      const expectedHeaderRequestParams = `property.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Property()
      );
      client.innerApiCalls.updateProperty =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateProperty(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IProperty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateProperty as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateProperty as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateProperty with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdatePropertyRequest()
      );
      request.property ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdatePropertyRequest',
        ['property', 'name']
      );
      request.property.name = defaultValue1;
      const expectedHeaderRequestParams = `property.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateProperty = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateProperty(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateProperty as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateProperty as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateProperty with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdatePropertyRequest()
      );
      request.property ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdatePropertyRequest',
        ['property', 'name']
      );
      request.property.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateProperty(request), expectedError);
    });
  });

  describe('getUserLink', () => {
    it('invokes getUserLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetUserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetUserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UserLink()
      );
      client.innerApiCalls.getUserLink = stubSimpleCall(expectedResponse);
      const [response] = await client.getUserLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getUserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getUserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getUserLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetUserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetUserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UserLink()
      );
      client.innerApiCalls.getUserLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getUserLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IUserLink | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getUserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getUserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getUserLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetUserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetUserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getUserLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getUserLink(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getUserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getUserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getUserLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetUserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetUserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getUserLink(request), expectedError);
    });
  });

  describe('batchGetUserLinks', () => {
    it('invokes batchGetUserLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchGetUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchGetUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchGetUserLinksResponse()
      );
      client.innerApiCalls.batchGetUserLinks = stubSimpleCall(expectedResponse);
      const [response] = await client.batchGetUserLinks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchGetUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchGetUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchGetUserLinks without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchGetUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchGetUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchGetUserLinksResponse()
      );
      client.innerApiCalls.batchGetUserLinks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchGetUserLinks(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IBatchGetUserLinksResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchGetUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchGetUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchGetUserLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchGetUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchGetUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchGetUserLinks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchGetUserLinks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchGetUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchGetUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchGetUserLinks with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchGetUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchGetUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.batchGetUserLinks(request), expectedError);
    });
  });

  describe('createUserLink', () => {
    it('invokes createUserLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateUserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateUserLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UserLink()
      );
      client.innerApiCalls.createUserLink = stubSimpleCall(expectedResponse);
      const [response] = await client.createUserLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createUserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createUserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createUserLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateUserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateUserLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UserLink()
      );
      client.innerApiCalls.createUserLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createUserLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IUserLink | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createUserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createUserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createUserLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateUserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateUserLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createUserLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createUserLink(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createUserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createUserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createUserLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateUserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateUserLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createUserLink(request), expectedError);
    });
  });

  describe('batchCreateUserLinks', () => {
    it('invokes batchCreateUserLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchCreateUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchCreateUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchCreateUserLinksResponse()
      );
      client.innerApiCalls.batchCreateUserLinks =
        stubSimpleCall(expectedResponse);
      const [response] = await client.batchCreateUserLinks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchCreateUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchCreateUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchCreateUserLinks without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchCreateUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchCreateUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchCreateUserLinksResponse()
      );
      client.innerApiCalls.batchCreateUserLinks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchCreateUserLinks(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchCreateUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchCreateUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchCreateUserLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchCreateUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchCreateUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchCreateUserLinks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchCreateUserLinks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchCreateUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchCreateUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchCreateUserLinks with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchCreateUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchCreateUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.batchCreateUserLinks(request), expectedError);
    });
  });

  describe('updateUserLink', () => {
    it('invokes updateUserLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateUserLinkRequest()
      );
      request.userLink ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateUserLinkRequest',
        ['userLink', 'name']
      );
      request.userLink.name = defaultValue1;
      const expectedHeaderRequestParams = `user_link.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UserLink()
      );
      client.innerApiCalls.updateUserLink = stubSimpleCall(expectedResponse);
      const [response] = await client.updateUserLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateUserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateUserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateUserLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateUserLinkRequest()
      );
      request.userLink ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateUserLinkRequest',
        ['userLink', 'name']
      );
      request.userLink.name = defaultValue1;
      const expectedHeaderRequestParams = `user_link.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UserLink()
      );
      client.innerApiCalls.updateUserLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateUserLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IUserLink | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateUserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateUserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateUserLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateUserLinkRequest()
      );
      request.userLink ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateUserLinkRequest',
        ['userLink', 'name']
      );
      request.userLink.name = defaultValue1;
      const expectedHeaderRequestParams = `user_link.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateUserLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateUserLink(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateUserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateUserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateUserLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateUserLinkRequest()
      );
      request.userLink ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateUserLinkRequest',
        ['userLink', 'name']
      );
      request.userLink.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateUserLink(request), expectedError);
    });
  });

  describe('batchUpdateUserLinks', () => {
    it('invokes batchUpdateUserLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchUpdateUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchUpdateUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchUpdateUserLinksResponse()
      );
      client.innerApiCalls.batchUpdateUserLinks =
        stubSimpleCall(expectedResponse);
      const [response] = await client.batchUpdateUserLinks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchUpdateUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchUpdateUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchUpdateUserLinks without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchUpdateUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchUpdateUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchUpdateUserLinksResponse()
      );
      client.innerApiCalls.batchUpdateUserLinks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchUpdateUserLinks(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchUpdateUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchUpdateUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchUpdateUserLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchUpdateUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchUpdateUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchUpdateUserLinks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchUpdateUserLinks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchUpdateUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchUpdateUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchUpdateUserLinks with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchUpdateUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchUpdateUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.batchUpdateUserLinks(request), expectedError);
    });
  });

  describe('deleteUserLink', () => {
    it('invokes deleteUserLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteUserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteUserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteUserLink = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteUserLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteUserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteUserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteUserLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteUserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteUserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteUserLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteUserLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteUserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteUserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteUserLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteUserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteUserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteUserLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteUserLink(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteUserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteUserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteUserLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteUserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteUserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteUserLink(request), expectedError);
    });
  });

  describe('batchDeleteUserLinks', () => {
    it('invokes batchDeleteUserLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchDeleteUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchDeleteUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.batchDeleteUserLinks =
        stubSimpleCall(expectedResponse);
      const [response] = await client.batchDeleteUserLinks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchDeleteUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchDeleteUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchDeleteUserLinks without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchDeleteUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchDeleteUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.batchDeleteUserLinks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.batchDeleteUserLinks(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.batchDeleteUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchDeleteUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchDeleteUserLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchDeleteUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchDeleteUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.batchDeleteUserLinks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.batchDeleteUserLinks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.batchDeleteUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.batchDeleteUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes batchDeleteUserLinks with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.BatchDeleteUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.BatchDeleteUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.batchDeleteUserLinks(request), expectedError);
    });
  });

  describe('createFirebaseLink', () => {
    it('invokes createFirebaseLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateFirebaseLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateFirebaseLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.FirebaseLink()
      );
      client.innerApiCalls.createFirebaseLink =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createFirebaseLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createFirebaseLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createFirebaseLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createFirebaseLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateFirebaseLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateFirebaseLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.FirebaseLink()
      );
      client.innerApiCalls.createFirebaseLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createFirebaseLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IFirebaseLink | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createFirebaseLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createFirebaseLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createFirebaseLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateFirebaseLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateFirebaseLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createFirebaseLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createFirebaseLink(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createFirebaseLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createFirebaseLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createFirebaseLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateFirebaseLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateFirebaseLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createFirebaseLink(request), expectedError);
    });
  });

  describe('deleteFirebaseLink', () => {
    it('invokes deleteFirebaseLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteFirebaseLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteFirebaseLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteFirebaseLink =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteFirebaseLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteFirebaseLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteFirebaseLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteFirebaseLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteFirebaseLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteFirebaseLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteFirebaseLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteFirebaseLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteFirebaseLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteFirebaseLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteFirebaseLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteFirebaseLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteFirebaseLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteFirebaseLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteFirebaseLink(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteFirebaseLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteFirebaseLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteFirebaseLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteFirebaseLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteFirebaseLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteFirebaseLink(request), expectedError);
    });
  });

  describe('getGlobalSiteTag', () => {
    it('invokes getGlobalSiteTag without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetGlobalSiteTagRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetGlobalSiteTagRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GlobalSiteTag()
      );
      client.innerApiCalls.getGlobalSiteTag = stubSimpleCall(expectedResponse);
      const [response] = await client.getGlobalSiteTag(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGlobalSiteTag as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlobalSiteTag as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlobalSiteTag without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetGlobalSiteTagRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetGlobalSiteTagRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GlobalSiteTag()
      );
      client.innerApiCalls.getGlobalSiteTag =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getGlobalSiteTag(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IGlobalSiteTag | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGlobalSiteTag as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlobalSiteTag as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlobalSiteTag with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetGlobalSiteTagRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetGlobalSiteTagRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getGlobalSiteTag = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getGlobalSiteTag(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getGlobalSiteTag as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlobalSiteTag as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlobalSiteTag with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetGlobalSiteTagRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetGlobalSiteTagRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getGlobalSiteTag(request), expectedError);
    });
  });

  describe('createGoogleAdsLink', () => {
    it('invokes createGoogleAdsLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateGoogleAdsLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateGoogleAdsLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
      );
      client.innerApiCalls.createGoogleAdsLink =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createGoogleAdsLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGoogleAdsLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGoogleAdsLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGoogleAdsLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateGoogleAdsLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateGoogleAdsLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
      );
      client.innerApiCalls.createGoogleAdsLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createGoogleAdsLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IGoogleAdsLink | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createGoogleAdsLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGoogleAdsLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGoogleAdsLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateGoogleAdsLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateGoogleAdsLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createGoogleAdsLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createGoogleAdsLink(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createGoogleAdsLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createGoogleAdsLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createGoogleAdsLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateGoogleAdsLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateGoogleAdsLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createGoogleAdsLink(request), expectedError);
    });
  });

  describe('updateGoogleAdsLink', () => {
    it('invokes updateGoogleAdsLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateGoogleAdsLinkRequest()
      );
      request.googleAdsLink ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateGoogleAdsLinkRequest',
        ['googleAdsLink', 'name']
      );
      request.googleAdsLink.name = defaultValue1;
      const expectedHeaderRequestParams = `google_ads_link.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
      );
      client.innerApiCalls.updateGoogleAdsLink =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateGoogleAdsLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGoogleAdsLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGoogleAdsLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGoogleAdsLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateGoogleAdsLinkRequest()
      );
      request.googleAdsLink ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateGoogleAdsLinkRequest',
        ['googleAdsLink', 'name']
      );
      request.googleAdsLink.name = defaultValue1;
      const expectedHeaderRequestParams = `google_ads_link.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
      );
      client.innerApiCalls.updateGoogleAdsLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateGoogleAdsLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IGoogleAdsLink | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGoogleAdsLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGoogleAdsLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGoogleAdsLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateGoogleAdsLinkRequest()
      );
      request.googleAdsLink ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateGoogleAdsLinkRequest',
        ['googleAdsLink', 'name']
      );
      request.googleAdsLink.name = defaultValue1;
      const expectedHeaderRequestParams = `google_ads_link.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateGoogleAdsLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateGoogleAdsLink(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateGoogleAdsLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGoogleAdsLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGoogleAdsLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateGoogleAdsLinkRequest()
      );
      request.googleAdsLink ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateGoogleAdsLinkRequest',
        ['googleAdsLink', 'name']
      );
      request.googleAdsLink.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateGoogleAdsLink(request), expectedError);
    });
  });

  describe('deleteGoogleAdsLink', () => {
    it('invokes deleteGoogleAdsLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteGoogleAdsLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteGoogleAdsLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteGoogleAdsLink =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteGoogleAdsLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGoogleAdsLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGoogleAdsLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGoogleAdsLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteGoogleAdsLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteGoogleAdsLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteGoogleAdsLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteGoogleAdsLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteGoogleAdsLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGoogleAdsLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGoogleAdsLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteGoogleAdsLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteGoogleAdsLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteGoogleAdsLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteGoogleAdsLink(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteGoogleAdsLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteGoogleAdsLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteGoogleAdsLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteGoogleAdsLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteGoogleAdsLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteGoogleAdsLink(request), expectedError);
    });
  });

  describe('getDataSharingSettings', () => {
    it('invokes getDataSharingSettings without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDataSharingSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDataSharingSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DataSharingSettings()
      );
      client.innerApiCalls.getDataSharingSettings =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getDataSharingSettings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDataSharingSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataSharingSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataSharingSettings without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDataSharingSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDataSharingSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DataSharingSettings()
      );
      client.innerApiCalls.getDataSharingSettings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDataSharingSettings(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDataSharingSettings | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDataSharingSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataSharingSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataSharingSettings with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDataSharingSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDataSharingSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDataSharingSettings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getDataSharingSettings(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getDataSharingSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataSharingSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataSharingSettings with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDataSharingSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDataSharingSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getDataSharingSettings(request),
        expectedError
      );
    });
  });

  describe('getMeasurementProtocolSecret', () => {
    it('invokes getMeasurementProtocolSecret without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetMeasurementProtocolSecretRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetMeasurementProtocolSecretRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
      );
      client.innerApiCalls.getMeasurementProtocolSecret =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getMeasurementProtocolSecret(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMeasurementProtocolSecret without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetMeasurementProtocolSecretRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetMeasurementProtocolSecretRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
      );
      client.innerApiCalls.getMeasurementProtocolSecret =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getMeasurementProtocolSecret(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IMeasurementProtocolSecret | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMeasurementProtocolSecret with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetMeasurementProtocolSecretRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetMeasurementProtocolSecretRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getMeasurementProtocolSecret = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getMeasurementProtocolSecret(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMeasurementProtocolSecret with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetMeasurementProtocolSecretRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetMeasurementProtocolSecretRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getMeasurementProtocolSecret(request),
        expectedError
      );
    });
  });

  describe('createMeasurementProtocolSecret', () => {
    it('invokes createMeasurementProtocolSecret without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateMeasurementProtocolSecretRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateMeasurementProtocolSecretRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
      );
      client.innerApiCalls.createMeasurementProtocolSecret =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createMeasurementProtocolSecret(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMeasurementProtocolSecret without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateMeasurementProtocolSecretRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateMeasurementProtocolSecretRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
      );
      client.innerApiCalls.createMeasurementProtocolSecret =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createMeasurementProtocolSecret(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IMeasurementProtocolSecret | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMeasurementProtocolSecret with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateMeasurementProtocolSecretRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateMeasurementProtocolSecretRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createMeasurementProtocolSecret = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createMeasurementProtocolSecret(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMeasurementProtocolSecret with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateMeasurementProtocolSecretRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateMeasurementProtocolSecretRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createMeasurementProtocolSecret(request),
        expectedError
      );
    });
  });

  describe('deleteMeasurementProtocolSecret', () => {
    it('invokes deleteMeasurementProtocolSecret without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteMeasurementProtocolSecretRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteMeasurementProtocolSecretRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteMeasurementProtocolSecret =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteMeasurementProtocolSecret(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMeasurementProtocolSecret without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteMeasurementProtocolSecretRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteMeasurementProtocolSecretRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteMeasurementProtocolSecret =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteMeasurementProtocolSecret(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMeasurementProtocolSecret with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteMeasurementProtocolSecretRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteMeasurementProtocolSecretRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteMeasurementProtocolSecret = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteMeasurementProtocolSecret(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMeasurementProtocolSecret with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteMeasurementProtocolSecretRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteMeasurementProtocolSecretRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteMeasurementProtocolSecret(request),
        expectedError
      );
    });
  });

  describe('updateMeasurementProtocolSecret', () => {
    it('invokes updateMeasurementProtocolSecret without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateMeasurementProtocolSecretRequest()
      );
      request.measurementProtocolSecret ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateMeasurementProtocolSecretRequest',
        ['measurementProtocolSecret', 'name']
      );
      request.measurementProtocolSecret.name = defaultValue1;
      const expectedHeaderRequestParams = `measurement_protocol_secret.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
      );
      client.innerApiCalls.updateMeasurementProtocolSecret =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateMeasurementProtocolSecret(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMeasurementProtocolSecret without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateMeasurementProtocolSecretRequest()
      );
      request.measurementProtocolSecret ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateMeasurementProtocolSecretRequest',
        ['measurementProtocolSecret', 'name']
      );
      request.measurementProtocolSecret.name = defaultValue1;
      const expectedHeaderRequestParams = `measurement_protocol_secret.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
      );
      client.innerApiCalls.updateMeasurementProtocolSecret =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateMeasurementProtocolSecret(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IMeasurementProtocolSecret | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMeasurementProtocolSecret with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateMeasurementProtocolSecretRequest()
      );
      request.measurementProtocolSecret ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateMeasurementProtocolSecretRequest',
        ['measurementProtocolSecret', 'name']
      );
      request.measurementProtocolSecret.name = defaultValue1;
      const expectedHeaderRequestParams = `measurement_protocol_secret.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateMeasurementProtocolSecret = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateMeasurementProtocolSecret(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMeasurementProtocolSecret as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMeasurementProtocolSecret with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateMeasurementProtocolSecretRequest()
      );
      request.measurementProtocolSecret ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateMeasurementProtocolSecretRequest',
        ['measurementProtocolSecret', 'name']
      );
      request.measurementProtocolSecret.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateMeasurementProtocolSecret(request),
        expectedError
      );
    });
  });

  describe('acknowledgeUserDataCollection', () => {
    it('invokes acknowledgeUserDataCollection without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AcknowledgeUserDataCollectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.AcknowledgeUserDataCollectionRequest',
        ['property']
      );
      request.property = defaultValue1;
      const expectedHeaderRequestParams = `property=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AcknowledgeUserDataCollectionResponse()
      );
      client.innerApiCalls.acknowledgeUserDataCollection =
        stubSimpleCall(expectedResponse);
      const [response] = await client.acknowledgeUserDataCollection(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.acknowledgeUserDataCollection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.acknowledgeUserDataCollection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes acknowledgeUserDataCollection without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AcknowledgeUserDataCollectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.AcknowledgeUserDataCollectionRequest',
        ['property']
      );
      request.property = defaultValue1;
      const expectedHeaderRequestParams = `property=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AcknowledgeUserDataCollectionResponse()
      );
      client.innerApiCalls.acknowledgeUserDataCollection =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.acknowledgeUserDataCollection(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IAcknowledgeUserDataCollectionResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.acknowledgeUserDataCollection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.acknowledgeUserDataCollection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes acknowledgeUserDataCollection with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AcknowledgeUserDataCollectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.AcknowledgeUserDataCollectionRequest',
        ['property']
      );
      request.property = defaultValue1;
      const expectedHeaderRequestParams = `property=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.acknowledgeUserDataCollection = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.acknowledgeUserDataCollection(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.acknowledgeUserDataCollection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.acknowledgeUserDataCollection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes acknowledgeUserDataCollection with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AcknowledgeUserDataCollectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.AcknowledgeUserDataCollectionRequest',
        ['property']
      );
      request.property = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.acknowledgeUserDataCollection(request),
        expectedError
      );
    });
  });

  describe('getGoogleSignalsSettings', () => {
    it('invokes getGoogleSignalsSettings without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetGoogleSignalsSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetGoogleSignalsSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GoogleSignalsSettings()
      );
      client.innerApiCalls.getGoogleSignalsSettings =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getGoogleSignalsSettings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGoogleSignalsSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGoogleSignalsSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGoogleSignalsSettings without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetGoogleSignalsSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetGoogleSignalsSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GoogleSignalsSettings()
      );
      client.innerApiCalls.getGoogleSignalsSettings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getGoogleSignalsSettings(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IGoogleSignalsSettings | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGoogleSignalsSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGoogleSignalsSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGoogleSignalsSettings with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetGoogleSignalsSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetGoogleSignalsSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getGoogleSignalsSettings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getGoogleSignalsSettings(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getGoogleSignalsSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGoogleSignalsSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGoogleSignalsSettings with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetGoogleSignalsSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetGoogleSignalsSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getGoogleSignalsSettings(request),
        expectedError
      );
    });
  });

  describe('updateGoogleSignalsSettings', () => {
    it('invokes updateGoogleSignalsSettings without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateGoogleSignalsSettingsRequest()
      );
      request.googleSignalsSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateGoogleSignalsSettingsRequest',
        ['googleSignalsSettings', 'name']
      );
      request.googleSignalsSettings.name = defaultValue1;
      const expectedHeaderRequestParams = `google_signals_settings.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GoogleSignalsSettings()
      );
      client.innerApiCalls.updateGoogleSignalsSettings =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateGoogleSignalsSettings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGoogleSignalsSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGoogleSignalsSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGoogleSignalsSettings without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateGoogleSignalsSettingsRequest()
      );
      request.googleSignalsSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateGoogleSignalsSettingsRequest',
        ['googleSignalsSettings', 'name']
      );
      request.googleSignalsSettings.name = defaultValue1;
      const expectedHeaderRequestParams = `google_signals_settings.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GoogleSignalsSettings()
      );
      client.innerApiCalls.updateGoogleSignalsSettings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateGoogleSignalsSettings(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IGoogleSignalsSettings | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateGoogleSignalsSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGoogleSignalsSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGoogleSignalsSettings with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateGoogleSignalsSettingsRequest()
      );
      request.googleSignalsSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateGoogleSignalsSettingsRequest',
        ['googleSignalsSettings', 'name']
      );
      request.googleSignalsSettings.name = defaultValue1;
      const expectedHeaderRequestParams = `google_signals_settings.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateGoogleSignalsSettings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateGoogleSignalsSettings(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateGoogleSignalsSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateGoogleSignalsSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateGoogleSignalsSettings with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateGoogleSignalsSettingsRequest()
      );
      request.googleSignalsSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateGoogleSignalsSettingsRequest',
        ['googleSignalsSettings', 'name']
      );
      request.googleSignalsSettings.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateGoogleSignalsSettings(request),
        expectedError
      );
    });
  });

  describe('createConversionEvent', () => {
    it('invokes createConversionEvent without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateConversionEventRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateConversionEventRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ConversionEvent()
      );
      client.innerApiCalls.createConversionEvent =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createConversionEvent(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConversionEvent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConversionEvent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConversionEvent without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateConversionEventRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateConversionEventRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ConversionEvent()
      );
      client.innerApiCalls.createConversionEvent =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createConversionEvent(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IConversionEvent | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConversionEvent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConversionEvent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConversionEvent with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateConversionEventRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateConversionEventRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createConversionEvent = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createConversionEvent(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createConversionEvent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConversionEvent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConversionEvent with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateConversionEventRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateConversionEventRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createConversionEvent(request),
        expectedError
      );
    });
  });

  describe('getConversionEvent', () => {
    it('invokes getConversionEvent without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetConversionEventRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetConversionEventRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ConversionEvent()
      );
      client.innerApiCalls.getConversionEvent =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getConversionEvent(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConversionEvent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConversionEvent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConversionEvent without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetConversionEventRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetConversionEventRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ConversionEvent()
      );
      client.innerApiCalls.getConversionEvent =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getConversionEvent(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IConversionEvent | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConversionEvent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConversionEvent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConversionEvent with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetConversionEventRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetConversionEventRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getConversionEvent = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getConversionEvent(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getConversionEvent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConversionEvent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConversionEvent with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetConversionEventRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetConversionEventRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getConversionEvent(request), expectedError);
    });
  });

  describe('deleteConversionEvent', () => {
    it('invokes deleteConversionEvent without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteConversionEventRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteConversionEventRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteConversionEvent =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteConversionEvent(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConversionEvent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConversionEvent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConversionEvent without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteConversionEventRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteConversionEventRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteConversionEvent =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteConversionEvent(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConversionEvent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConversionEvent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConversionEvent with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteConversionEventRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteConversionEventRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteConversionEvent = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteConversionEvent(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteConversionEvent as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConversionEvent as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConversionEvent with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteConversionEventRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteConversionEventRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteConversionEvent(request),
        expectedError
      );
    });
  });

  describe('getDisplayVideo360AdvertiserLink', () => {
    it('invokes getDisplayVideo360AdvertiserLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
      );
      client.innerApiCalls.getDisplayVideo360AdvertiserLink =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getDisplayVideo360AdvertiserLink(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDisplayVideo360AdvertiserLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
      );
      client.innerApiCalls.getDisplayVideo360AdvertiserLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDisplayVideo360AdvertiserLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDisplayVideo360AdvertiserLink | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDisplayVideo360AdvertiserLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDisplayVideo360AdvertiserLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getDisplayVideo360AdvertiserLink(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDisplayVideo360AdvertiserLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getDisplayVideo360AdvertiserLink(request),
        expectedError
      );
    });
  });

  describe('createDisplayVideo360AdvertiserLink', () => {
    it('invokes createDisplayVideo360AdvertiserLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
      );
      client.innerApiCalls.createDisplayVideo360AdvertiserLink =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createDisplayVideo360AdvertiserLink(
        request
      );
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDisplayVideo360AdvertiserLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
      );
      client.innerApiCalls.createDisplayVideo360AdvertiserLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createDisplayVideo360AdvertiserLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDisplayVideo360AdvertiserLink | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDisplayVideo360AdvertiserLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createDisplayVideo360AdvertiserLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createDisplayVideo360AdvertiserLink(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDisplayVideo360AdvertiserLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createDisplayVideo360AdvertiserLink(request),
        expectedError
      );
    });
  });

  describe('deleteDisplayVideo360AdvertiserLink', () => {
    it('invokes deleteDisplayVideo360AdvertiserLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDisplayVideo360AdvertiserLink =
        stubSimpleCall(expectedResponse);
      const [response] = await client.deleteDisplayVideo360AdvertiserLink(
        request
      );
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDisplayVideo360AdvertiserLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDisplayVideo360AdvertiserLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteDisplayVideo360AdvertiserLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDisplayVideo360AdvertiserLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteDisplayVideo360AdvertiserLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteDisplayVideo360AdvertiserLink(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDisplayVideo360AdvertiserLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteDisplayVideo360AdvertiserLink(request),
        expectedError
      );
    });
  });

  describe('updateDisplayVideo360AdvertiserLink', () => {
    it('invokes updateDisplayVideo360AdvertiserLink without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateDisplayVideo360AdvertiserLinkRequest()
      );
      request.displayVideo_360AdvertiserLink ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateDisplayVideo360AdvertiserLinkRequest',
        ['displayVideo_360AdvertiserLink', 'name']
      );
      request.displayVideo_360AdvertiserLink.name = defaultValue1;
      const expectedHeaderRequestParams = `display_video_360_advertiser_link.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
      );
      client.innerApiCalls.updateDisplayVideo360AdvertiserLink =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateDisplayVideo360AdvertiserLink(
        request
      );
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDisplayVideo360AdvertiserLink without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateDisplayVideo360AdvertiserLinkRequest()
      );
      request.displayVideo_360AdvertiserLink ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateDisplayVideo360AdvertiserLinkRequest',
        ['displayVideo_360AdvertiserLink', 'name']
      );
      request.displayVideo_360AdvertiserLink.name = defaultValue1;
      const expectedHeaderRequestParams = `display_video_360_advertiser_link.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
      );
      client.innerApiCalls.updateDisplayVideo360AdvertiserLink =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateDisplayVideo360AdvertiserLink(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDisplayVideo360AdvertiserLink | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDisplayVideo360AdvertiserLink with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateDisplayVideo360AdvertiserLinkRequest()
      );
      request.displayVideo_360AdvertiserLink ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateDisplayVideo360AdvertiserLinkRequest',
        ['displayVideo_360AdvertiserLink', 'name']
      );
      request.displayVideo_360AdvertiserLink.name = defaultValue1;
      const expectedHeaderRequestParams = `display_video_360_advertiser_link.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateDisplayVideo360AdvertiserLink = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateDisplayVideo360AdvertiserLink(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDisplayVideo360AdvertiserLink as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDisplayVideo360AdvertiserLink with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateDisplayVideo360AdvertiserLinkRequest()
      );
      request.displayVideo_360AdvertiserLink ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateDisplayVideo360AdvertiserLinkRequest',
        ['displayVideo_360AdvertiserLink', 'name']
      );
      request.displayVideo_360AdvertiserLink.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateDisplayVideo360AdvertiserLink(request),
        expectedError
      );
    });
  });

  describe('getDisplayVideo360AdvertiserLinkProposal', () => {
    it('invokes getDisplayVideo360AdvertiserLinkProposal without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
      );
      client.innerApiCalls.getDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getDisplayVideo360AdvertiserLinkProposal(
        request
      );
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .getDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .getDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDisplayVideo360AdvertiserLinkProposal without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
      );
      client.innerApiCalls.getDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDisplayVideo360AdvertiserLinkProposal(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDisplayVideo360AdvertiserLinkProposal | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .getDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .getDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDisplayVideo360AdvertiserLinkProposal with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getDisplayVideo360AdvertiserLinkProposal(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .getDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .getDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDisplayVideo360AdvertiserLinkProposal with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getDisplayVideo360AdvertiserLinkProposal(request),
        expectedError
      );
    });
  });

  describe('createDisplayVideo360AdvertiserLinkProposal', () => {
    it('invokes createDisplayVideo360AdvertiserLinkProposal without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkProposalRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
      );
      client.innerApiCalls.createDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.createDisplayVideo360AdvertiserLinkProposal(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .createDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .createDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDisplayVideo360AdvertiserLinkProposal without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkProposalRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
      );
      client.innerApiCalls.createDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createDisplayVideo360AdvertiserLinkProposal(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDisplayVideo360AdvertiserLinkProposal | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .createDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .createDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDisplayVideo360AdvertiserLinkProposal with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkProposalRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.createDisplayVideo360AdvertiserLinkProposal(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .createDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .createDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDisplayVideo360AdvertiserLinkProposal with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateDisplayVideo360AdvertiserLinkProposalRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createDisplayVideo360AdvertiserLinkProposal(request),
        expectedError
      );
    });
  });

  describe('deleteDisplayVideo360AdvertiserLinkProposal', () => {
    it('invokes deleteDisplayVideo360AdvertiserLinkProposal without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.deleteDisplayVideo360AdvertiserLinkProposal(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .deleteDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .deleteDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDisplayVideo360AdvertiserLinkProposal without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteDisplayVideo360AdvertiserLinkProposal(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .deleteDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .deleteDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDisplayVideo360AdvertiserLinkProposal with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.deleteDisplayVideo360AdvertiserLinkProposal(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .deleteDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .deleteDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDisplayVideo360AdvertiserLinkProposal with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.deleteDisplayVideo360AdvertiserLinkProposal(request),
        expectedError
      );
    });
  });

  describe('approveDisplayVideo360AdvertiserLinkProposal', () => {
    it('invokes approveDisplayVideo360AdvertiserLinkProposal without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ApproveDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ApproveDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ApproveDisplayVideo360AdvertiserLinkProposalResponse()
      );
      client.innerApiCalls.approveDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.approveDisplayVideo360AdvertiserLinkProposal(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .approveDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .approveDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes approveDisplayVideo360AdvertiserLinkProposal without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ApproveDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ApproveDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ApproveDisplayVideo360AdvertiserLinkProposalResponse()
      );
      client.innerApiCalls.approveDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.approveDisplayVideo360AdvertiserLinkProposal(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IApproveDisplayVideo360AdvertiserLinkProposalResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .approveDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .approveDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes approveDisplayVideo360AdvertiserLinkProposal with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ApproveDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ApproveDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.approveDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.approveDisplayVideo360AdvertiserLinkProposal(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .approveDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .approveDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes approveDisplayVideo360AdvertiserLinkProposal with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ApproveDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ApproveDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.approveDisplayVideo360AdvertiserLinkProposal(request),
        expectedError
      );
    });
  });

  describe('cancelDisplayVideo360AdvertiserLinkProposal', () => {
    it('invokes cancelDisplayVideo360AdvertiserLinkProposal without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CancelDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CancelDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
      );
      client.innerApiCalls.cancelDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.cancelDisplayVideo360AdvertiserLinkProposal(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .cancelDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .cancelDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes cancelDisplayVideo360AdvertiserLinkProposal without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CancelDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CancelDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
      );
      client.innerApiCalls.cancelDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.cancelDisplayVideo360AdvertiserLinkProposal(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDisplayVideo360AdvertiserLinkProposal | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .cancelDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .cancelDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes cancelDisplayVideo360AdvertiserLinkProposal with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CancelDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CancelDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.cancelDisplayVideo360AdvertiserLinkProposal =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.cancelDisplayVideo360AdvertiserLinkProposal(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .cancelDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .cancelDisplayVideo360AdvertiserLinkProposal as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes cancelDisplayVideo360AdvertiserLinkProposal with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CancelDisplayVideo360AdvertiserLinkProposalRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CancelDisplayVideo360AdvertiserLinkProposalRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.cancelDisplayVideo360AdvertiserLinkProposal(request),
        expectedError
      );
    });
  });

  describe('createCustomDimension', () => {
    it('invokes createCustomDimension without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateCustomDimensionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateCustomDimensionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CustomDimension()
      );
      client.innerApiCalls.createCustomDimension =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createCustomDimension(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCustomDimension as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCustomDimension as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCustomDimension without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateCustomDimensionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateCustomDimensionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CustomDimension()
      );
      client.innerApiCalls.createCustomDimension =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCustomDimension(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.ICustomDimension | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCustomDimension as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCustomDimension as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCustomDimension with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateCustomDimensionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateCustomDimensionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCustomDimension = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createCustomDimension(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createCustomDimension as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCustomDimension as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCustomDimension with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateCustomDimensionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateCustomDimensionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.createCustomDimension(request),
        expectedError
      );
    });
  });

  describe('updateCustomDimension', () => {
    it('invokes updateCustomDimension without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateCustomDimensionRequest()
      );
      request.customDimension ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateCustomDimensionRequest',
        ['customDimension', 'name']
      );
      request.customDimension.name = defaultValue1;
      const expectedHeaderRequestParams = `custom_dimension.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CustomDimension()
      );
      client.innerApiCalls.updateCustomDimension =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateCustomDimension(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCustomDimension as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCustomDimension as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCustomDimension without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateCustomDimensionRequest()
      );
      request.customDimension ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateCustomDimensionRequest',
        ['customDimension', 'name']
      );
      request.customDimension.name = defaultValue1;
      const expectedHeaderRequestParams = `custom_dimension.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CustomDimension()
      );
      client.innerApiCalls.updateCustomDimension =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateCustomDimension(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.ICustomDimension | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCustomDimension as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCustomDimension as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCustomDimension with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateCustomDimensionRequest()
      );
      request.customDimension ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateCustomDimensionRequest',
        ['customDimension', 'name']
      );
      request.customDimension.name = defaultValue1;
      const expectedHeaderRequestParams = `custom_dimension.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateCustomDimension = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateCustomDimension(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateCustomDimension as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCustomDimension as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCustomDimension with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateCustomDimensionRequest()
      );
      request.customDimension ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateCustomDimensionRequest',
        ['customDimension', 'name']
      );
      request.customDimension.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateCustomDimension(request),
        expectedError
      );
    });
  });

  describe('archiveCustomDimension', () => {
    it('invokes archiveCustomDimension without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ArchiveCustomDimensionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ArchiveCustomDimensionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.archiveCustomDimension =
        stubSimpleCall(expectedResponse);
      const [response] = await client.archiveCustomDimension(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.archiveCustomDimension as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.archiveCustomDimension as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes archiveCustomDimension without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ArchiveCustomDimensionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ArchiveCustomDimensionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.archiveCustomDimension =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.archiveCustomDimension(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.archiveCustomDimension as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.archiveCustomDimension as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes archiveCustomDimension with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ArchiveCustomDimensionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ArchiveCustomDimensionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.archiveCustomDimension = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.archiveCustomDimension(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.archiveCustomDimension as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.archiveCustomDimension as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes archiveCustomDimension with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ArchiveCustomDimensionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ArchiveCustomDimensionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.archiveCustomDimension(request),
        expectedError
      );
    });
  });

  describe('getCustomDimension', () => {
    it('invokes getCustomDimension without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetCustomDimensionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetCustomDimensionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CustomDimension()
      );
      client.innerApiCalls.getCustomDimension =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getCustomDimension(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCustomDimension as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCustomDimension as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCustomDimension without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetCustomDimensionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetCustomDimensionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CustomDimension()
      );
      client.innerApiCalls.getCustomDimension =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCustomDimension(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.ICustomDimension | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCustomDimension as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCustomDimension as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCustomDimension with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetCustomDimensionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetCustomDimensionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCustomDimension = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getCustomDimension(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getCustomDimension as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCustomDimension as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCustomDimension with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetCustomDimensionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetCustomDimensionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getCustomDimension(request), expectedError);
    });
  });

  describe('createCustomMetric', () => {
    it('invokes createCustomMetric without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateCustomMetricRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateCustomMetricRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CustomMetric()
      );
      client.innerApiCalls.createCustomMetric =
        stubSimpleCall(expectedResponse);
      const [response] = await client.createCustomMetric(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCustomMetric as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCustomMetric as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCustomMetric without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateCustomMetricRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateCustomMetricRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CustomMetric()
      );
      client.innerApiCalls.createCustomMetric =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createCustomMetric(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.ICustomMetric | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createCustomMetric as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCustomMetric as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCustomMetric with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateCustomMetricRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateCustomMetricRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createCustomMetric = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createCustomMetric(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createCustomMetric as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createCustomMetric as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createCustomMetric with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateCustomMetricRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateCustomMetricRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createCustomMetric(request), expectedError);
    });
  });

  describe('updateCustomMetric', () => {
    it('invokes updateCustomMetric without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateCustomMetricRequest()
      );
      request.customMetric ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateCustomMetricRequest',
        ['customMetric', 'name']
      );
      request.customMetric.name = defaultValue1;
      const expectedHeaderRequestParams = `custom_metric.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CustomMetric()
      );
      client.innerApiCalls.updateCustomMetric =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateCustomMetric(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCustomMetric as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCustomMetric as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCustomMetric without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateCustomMetricRequest()
      );
      request.customMetric ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateCustomMetricRequest',
        ['customMetric', 'name']
      );
      request.customMetric.name = defaultValue1;
      const expectedHeaderRequestParams = `custom_metric.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CustomMetric()
      );
      client.innerApiCalls.updateCustomMetric =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateCustomMetric(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.ICustomMetric | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateCustomMetric as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCustomMetric as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCustomMetric with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateCustomMetricRequest()
      );
      request.customMetric ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateCustomMetricRequest',
        ['customMetric', 'name']
      );
      request.customMetric.name = defaultValue1;
      const expectedHeaderRequestParams = `custom_metric.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateCustomMetric = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateCustomMetric(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateCustomMetric as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateCustomMetric as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateCustomMetric with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateCustomMetricRequest()
      );
      request.customMetric ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateCustomMetricRequest',
        ['customMetric', 'name']
      );
      request.customMetric.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateCustomMetric(request), expectedError);
    });
  });

  describe('archiveCustomMetric', () => {
    it('invokes archiveCustomMetric without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ArchiveCustomMetricRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ArchiveCustomMetricRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.archiveCustomMetric =
        stubSimpleCall(expectedResponse);
      const [response] = await client.archiveCustomMetric(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.archiveCustomMetric as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.archiveCustomMetric as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes archiveCustomMetric without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ArchiveCustomMetricRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ArchiveCustomMetricRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.archiveCustomMetric =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.archiveCustomMetric(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.archiveCustomMetric as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.archiveCustomMetric as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes archiveCustomMetric with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ArchiveCustomMetricRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ArchiveCustomMetricRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.archiveCustomMetric = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.archiveCustomMetric(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.archiveCustomMetric as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.archiveCustomMetric as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes archiveCustomMetric with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ArchiveCustomMetricRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ArchiveCustomMetricRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.archiveCustomMetric(request), expectedError);
    });
  });

  describe('getCustomMetric', () => {
    it('invokes getCustomMetric without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetCustomMetricRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetCustomMetricRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CustomMetric()
      );
      client.innerApiCalls.getCustomMetric = stubSimpleCall(expectedResponse);
      const [response] = await client.getCustomMetric(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCustomMetric as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCustomMetric as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCustomMetric without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetCustomMetricRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetCustomMetricRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CustomMetric()
      );
      client.innerApiCalls.getCustomMetric =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getCustomMetric(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.ICustomMetric | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getCustomMetric as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCustomMetric as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCustomMetric with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetCustomMetricRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetCustomMetricRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getCustomMetric = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getCustomMetric(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getCustomMetric as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getCustomMetric as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getCustomMetric with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetCustomMetricRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetCustomMetricRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getCustomMetric(request), expectedError);
    });
  });

  describe('getDataRetentionSettings', () => {
    it('invokes getDataRetentionSettings without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDataRetentionSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDataRetentionSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DataRetentionSettings()
      );
      client.innerApiCalls.getDataRetentionSettings =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getDataRetentionSettings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDataRetentionSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataRetentionSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataRetentionSettings without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDataRetentionSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDataRetentionSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DataRetentionSettings()
      );
      client.innerApiCalls.getDataRetentionSettings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDataRetentionSettings(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDataRetentionSettings | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDataRetentionSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataRetentionSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataRetentionSettings with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDataRetentionSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDataRetentionSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDataRetentionSettings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getDataRetentionSettings(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getDataRetentionSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataRetentionSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataRetentionSettings with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDataRetentionSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDataRetentionSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getDataRetentionSettings(request),
        expectedError
      );
    });
  });

  describe('updateDataRetentionSettings', () => {
    it('invokes updateDataRetentionSettings without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateDataRetentionSettingsRequest()
      );
      request.dataRetentionSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateDataRetentionSettingsRequest',
        ['dataRetentionSettings', 'name']
      );
      request.dataRetentionSettings.name = defaultValue1;
      const expectedHeaderRequestParams = `data_retention_settings.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DataRetentionSettings()
      );
      client.innerApiCalls.updateDataRetentionSettings =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateDataRetentionSettings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDataRetentionSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataRetentionSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDataRetentionSettings without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateDataRetentionSettingsRequest()
      );
      request.dataRetentionSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateDataRetentionSettingsRequest',
        ['dataRetentionSettings', 'name']
      );
      request.dataRetentionSettings.name = defaultValue1;
      const expectedHeaderRequestParams = `data_retention_settings.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DataRetentionSettings()
      );
      client.innerApiCalls.updateDataRetentionSettings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateDataRetentionSettings(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDataRetentionSettings | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDataRetentionSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataRetentionSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDataRetentionSettings with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateDataRetentionSettingsRequest()
      );
      request.dataRetentionSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateDataRetentionSettingsRequest',
        ['dataRetentionSettings', 'name']
      );
      request.dataRetentionSettings.name = defaultValue1;
      const expectedHeaderRequestParams = `data_retention_settings.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateDataRetentionSettings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateDataRetentionSettings(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateDataRetentionSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataRetentionSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDataRetentionSettings with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateDataRetentionSettingsRequest()
      );
      request.dataRetentionSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateDataRetentionSettingsRequest',
        ['dataRetentionSettings', 'name']
      );
      request.dataRetentionSettings.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateDataRetentionSettings(request),
        expectedError
      );
    });
  });

  describe('createDataStream', () => {
    it('invokes createDataStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateDataStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateDataStreamRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DataStream()
      );
      client.innerApiCalls.createDataStream = stubSimpleCall(expectedResponse);
      const [response] = await client.createDataStream(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDataStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDataStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDataStream without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateDataStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateDataStreamRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DataStream()
      );
      client.innerApiCalls.createDataStream =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createDataStream(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDataStream | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createDataStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDataStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDataStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateDataStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateDataStreamRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createDataStream = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createDataStream(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createDataStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createDataStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createDataStream with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateDataStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateDataStreamRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createDataStream(request), expectedError);
    });
  });

  describe('deleteDataStream', () => {
    it('invokes deleteDataStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteDataStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteDataStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDataStream = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteDataStream(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDataStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDataStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDataStream without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteDataStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteDataStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteDataStream =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteDataStream(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteDataStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDataStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDataStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteDataStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteDataStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteDataStream = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteDataStream(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteDataStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteDataStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteDataStream with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DeleteDataStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.DeleteDataStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.deleteDataStream(request), expectedError);
    });
  });

  describe('updateDataStream', () => {
    it('invokes updateDataStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateDataStreamRequest()
      );
      request.dataStream ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateDataStreamRequest',
        ['dataStream', 'name']
      );
      request.dataStream.name = defaultValue1;
      const expectedHeaderRequestParams = `data_stream.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DataStream()
      );
      client.innerApiCalls.updateDataStream = stubSimpleCall(expectedResponse);
      const [response] = await client.updateDataStream(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDataStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDataStream without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateDataStreamRequest()
      );
      request.dataStream ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateDataStreamRequest',
        ['dataStream', 'name']
      );
      request.dataStream.name = defaultValue1;
      const expectedHeaderRequestParams = `data_stream.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DataStream()
      );
      client.innerApiCalls.updateDataStream =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateDataStream(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDataStream | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateDataStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDataStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateDataStreamRequest()
      );
      request.dataStream ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateDataStreamRequest',
        ['dataStream', 'name']
      );
      request.dataStream.name = defaultValue1;
      const expectedHeaderRequestParams = `data_stream.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateDataStream = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateDataStream(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateDataStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateDataStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateDataStream with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateDataStreamRequest()
      );
      request.dataStream ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateDataStreamRequest',
        ['dataStream', 'name']
      );
      request.dataStream.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateDataStream(request), expectedError);
    });
  });

  describe('getDataStream', () => {
    it('invokes getDataStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDataStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDataStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DataStream()
      );
      client.innerApiCalls.getDataStream = stubSimpleCall(expectedResponse);
      const [response] = await client.getDataStream(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDataStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataStream without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDataStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDataStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.DataStream()
      );
      client.innerApiCalls.getDataStream =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getDataStream(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDataStream | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getDataStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDataStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDataStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getDataStream = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getDataStream(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getDataStream as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getDataStream as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getDataStream with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetDataStreamRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetDataStreamRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getDataStream(request), expectedError);
    });
  });

  describe('getAudience', () => {
    it('invokes getAudience without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetAudienceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetAudienceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Audience()
      );
      client.innerApiCalls.getAudience = stubSimpleCall(expectedResponse);
      const [response] = await client.getAudience(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAudience as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAudience as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAudience without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetAudienceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetAudienceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Audience()
      );
      client.innerApiCalls.getAudience =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAudience(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IAudience | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAudience as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAudience as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAudience with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetAudienceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetAudienceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAudience = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAudience(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAudience as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAudience as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAudience with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetAudienceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetAudienceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAudience(request), expectedError);
    });
  });

  describe('createAudience', () => {
    it('invokes createAudience without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateAudienceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateAudienceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Audience()
      );
      client.innerApiCalls.createAudience = stubSimpleCall(expectedResponse);
      const [response] = await client.createAudience(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAudience as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAudience as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAudience without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateAudienceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateAudienceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Audience()
      );
      client.innerApiCalls.createAudience =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAudience(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IAudience | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAudience as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAudience as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAudience with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateAudienceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateAudienceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAudience = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAudience(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAudience as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAudience as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAudience with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.CreateAudienceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.CreateAudienceRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.createAudience(request), expectedError);
    });
  });

  describe('updateAudience', () => {
    it('invokes updateAudience without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateAudienceRequest()
      );
      request.audience ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateAudienceRequest',
        ['audience', 'name']
      );
      request.audience.name = defaultValue1;
      const expectedHeaderRequestParams = `audience.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Audience()
      );
      client.innerApiCalls.updateAudience = stubSimpleCall(expectedResponse);
      const [response] = await client.updateAudience(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAudience as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAudience as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAudience without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateAudienceRequest()
      );
      request.audience ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateAudienceRequest',
        ['audience', 'name']
      );
      request.audience.name = defaultValue1;
      const expectedHeaderRequestParams = `audience.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.Audience()
      );
      client.innerApiCalls.updateAudience =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAudience(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IAudience | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAudience as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAudience as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAudience with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateAudienceRequest()
      );
      request.audience ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateAudienceRequest',
        ['audience', 'name']
      );
      request.audience.name = defaultValue1;
      const expectedHeaderRequestParams = `audience.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAudience = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateAudience(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAudience as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAudience as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAudience with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateAudienceRequest()
      );
      request.audience ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateAudienceRequest',
        ['audience', 'name']
      );
      request.audience.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.updateAudience(request), expectedError);
    });
  });

  describe('archiveAudience', () => {
    it('invokes archiveAudience without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ArchiveAudienceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ArchiveAudienceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.archiveAudience = stubSimpleCall(expectedResponse);
      const [response] = await client.archiveAudience(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.archiveAudience as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.archiveAudience as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes archiveAudience without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ArchiveAudienceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ArchiveAudienceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.archiveAudience =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.archiveAudience(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.archiveAudience as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.archiveAudience as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes archiveAudience with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ArchiveAudienceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ArchiveAudienceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.archiveAudience = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.archiveAudience(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.archiveAudience as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.archiveAudience as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes archiveAudience with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ArchiveAudienceRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ArchiveAudienceRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.archiveAudience(request), expectedError);
    });
  });

  describe('getAttributionSettings', () => {
    it('invokes getAttributionSettings without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetAttributionSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetAttributionSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AttributionSettings()
      );
      client.innerApiCalls.getAttributionSettings =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getAttributionSettings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAttributionSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAttributionSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAttributionSettings without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetAttributionSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetAttributionSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AttributionSettings()
      );
      client.innerApiCalls.getAttributionSettings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAttributionSettings(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IAttributionSettings | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAttributionSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAttributionSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAttributionSettings with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetAttributionSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetAttributionSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAttributionSettings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getAttributionSettings(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getAttributionSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAttributionSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAttributionSettings with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.GetAttributionSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.GetAttributionSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getAttributionSettings(request),
        expectedError
      );
    });
  });

  describe('updateAttributionSettings', () => {
    it('invokes updateAttributionSettings without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateAttributionSettingsRequest()
      );
      request.attributionSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateAttributionSettingsRequest',
        ['attributionSettings', 'name']
      );
      request.attributionSettings.name = defaultValue1;
      const expectedHeaderRequestParams = `attribution_settings.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AttributionSettings()
      );
      client.innerApiCalls.updateAttributionSettings =
        stubSimpleCall(expectedResponse);
      const [response] = await client.updateAttributionSettings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAttributionSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAttributionSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAttributionSettings without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateAttributionSettingsRequest()
      );
      request.attributionSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateAttributionSettingsRequest',
        ['attributionSettings', 'name']
      );
      request.attributionSettings.name = defaultValue1;
      const expectedHeaderRequestParams = `attribution_settings.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AttributionSettings()
      );
      client.innerApiCalls.updateAttributionSettings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAttributionSettings(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IAttributionSettings | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAttributionSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAttributionSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAttributionSettings with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateAttributionSettingsRequest()
      );
      request.attributionSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateAttributionSettingsRequest',
        ['attributionSettings', 'name']
      );
      request.attributionSettings.name = defaultValue1;
      const expectedHeaderRequestParams = `attribution_settings.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAttributionSettings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateAttributionSettings(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateAttributionSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAttributionSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAttributionSettings with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.UpdateAttributionSettingsRequest()
      );
      request.attributionSettings ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.UpdateAttributionSettingsRequest',
        ['attributionSettings', 'name']
      );
      request.attributionSettings.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.updateAttributionSettings(request),
        expectedError
      );
    });
  });

  describe('runAccessReport', () => {
    it('invokes runAccessReport without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.RunAccessReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.RunAccessReportRequest',
        ['entity']
      );
      request.entity = defaultValue1;
      const expectedHeaderRequestParams = `entity=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.RunAccessReportResponse()
      );
      client.innerApiCalls.runAccessReport = stubSimpleCall(expectedResponse);
      const [response] = await client.runAccessReport(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.runAccessReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runAccessReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runAccessReport without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.RunAccessReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.RunAccessReportRequest',
        ['entity']
      );
      request.entity = defaultValue1;
      const expectedHeaderRequestParams = `entity=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.RunAccessReportResponse()
      );
      client.innerApiCalls.runAccessReport =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.runAccessReport(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IRunAccessReportResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.runAccessReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runAccessReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runAccessReport with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.RunAccessReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.RunAccessReportRequest',
        ['entity']
      );
      request.entity = defaultValue1;
      const expectedHeaderRequestParams = `entity=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.runAccessReport = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.runAccessReport(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.runAccessReport as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.runAccessReport as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes runAccessReport with closed client', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.RunAccessReportRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.RunAccessReportRequest',
        ['entity']
      );
      request.entity = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.runAccessReport(request), expectedError);
    });
  });

  describe('listAccounts', () => {
    it('invokes listAccounts without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Account()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Account()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Account()
        ),
      ];
      client.innerApiCalls.listAccounts = stubSimpleCall(expectedResponse);
      const [response] = await client.listAccounts(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listAccounts without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Account()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Account()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Account()
        ),
      ];
      client.innerApiCalls.listAccounts =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAccounts(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IAccount[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listAccounts with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountsRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.listAccounts = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAccounts(request), expectedError);
    });

    it('invokes listAccountsStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Account()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Account()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Account()
        ),
      ];
      client.descriptors.page.listAccounts.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAccountsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.Account[] = [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.Account) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAccounts.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAccounts, request)
      );
    });

    it('invokes listAccountsStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountsRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listAccounts.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listAccountsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.Account[] = [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.Account) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAccounts.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAccounts, request)
      );
    });

    it('uses async iteration with listAccounts without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Account()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Account()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Account()
        ),
      ];
      client.descriptors.page.listAccounts.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IAccount[] = [];
      const iterable = client.listAccountsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAccounts.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });

    it('uses async iteration with listAccounts with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountsRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listAccounts.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAccountsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IAccount[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAccounts.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('listAccountSummaries', () => {
    it('invokes listAccountSummaries without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AccountSummary()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AccountSummary()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AccountSummary()
        ),
      ];
      client.innerApiCalls.listAccountSummaries =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAccountSummaries(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listAccountSummaries without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AccountSummary()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AccountSummary()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AccountSummary()
        ),
      ];
      client.innerApiCalls.listAccountSummaries =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAccountSummaries(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.analytics.admin.v1alpha.IAccountSummary[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listAccountSummaries with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.listAccountSummaries = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAccountSummaries(request), expectedError);
    });

    it('invokes listAccountSummariesStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AccountSummary()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AccountSummary()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AccountSummary()
        ),
      ];
      client.descriptors.page.listAccountSummaries.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAccountSummariesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.AccountSummary[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.AccountSummary) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAccountSummaries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAccountSummaries, request)
      );
    });

    it('invokes listAccountSummariesStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listAccountSummaries.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAccountSummariesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.AccountSummary[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.AccountSummary) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAccountSummaries.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAccountSummaries, request)
      );
    });

    it('uses async iteration with listAccountSummaries without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AccountSummary()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AccountSummary()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AccountSummary()
        ),
      ];
      client.descriptors.page.listAccountSummaries.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IAccountSummary[] =
        [];
      const iterable = client.listAccountSummariesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAccountSummaries.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });

    it('uses async iteration with listAccountSummaries with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listAccountSummaries.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAccountSummariesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IAccountSummary[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAccountSummaries.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('listProperties', () => {
    it('invokes listProperties without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListPropertiesRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Property()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Property()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Property()
        ),
      ];
      client.innerApiCalls.listProperties = stubSimpleCall(expectedResponse);
      const [response] = await client.listProperties(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listProperties without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListPropertiesRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Property()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Property()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Property()
        ),
      ];
      client.innerApiCalls.listProperties =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listProperties(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IProperty[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes listProperties with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListPropertiesRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.listProperties = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listProperties(request), expectedError);
    });

    it('invokes listPropertiesStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListPropertiesRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Property()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Property()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Property()
        ),
      ];
      client.descriptors.page.listProperties.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listPropertiesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.Property[] = [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.Property) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listProperties.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listProperties, request)
      );
    });

    it('invokes listPropertiesStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListPropertiesRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listProperties.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listPropertiesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.Property[] = [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.Property) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listProperties.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listProperties, request)
      );
    });

    it('uses async iteration with listProperties without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListPropertiesRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Property()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Property()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Property()
        ),
      ];
      client.descriptors.page.listProperties.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IProperty[] = [];
      const iterable = client.listPropertiesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listProperties.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });

    it('uses async iteration with listProperties with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListPropertiesRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.listProperties.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listPropertiesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IProperty[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listProperties.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('listUserLinks', () => {
    it('invokes listUserLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.UserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.UserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.UserLink()
        ),
      ];
      client.innerApiCalls.listUserLinks = stubSimpleCall(expectedResponse);
      const [response] = await client.listUserLinks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listUserLinks without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.UserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.UserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.UserLink()
        ),
      ];
      client.innerApiCalls.listUserLinks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listUserLinks(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IUserLink[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listUserLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listUserLinks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listUserLinks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listUserLinksStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.UserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.UserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.UserLink()
        ),
      ];
      client.descriptors.page.listUserLinks.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listUserLinksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.UserLink[] = [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.UserLink) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listUserLinks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listUserLinks, request)
      );
      assert(
        (client.descriptors.page.listUserLinks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listUserLinksStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listUserLinks.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listUserLinksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.UserLink[] = [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.UserLink) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listUserLinks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listUserLinks, request)
      );
      assert(
        (client.descriptors.page.listUserLinks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listUserLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.UserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.UserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.UserLink()
        ),
      ];
      client.descriptors.page.listUserLinks.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IUserLink[] = [];
      const iterable = client.listUserLinksAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listUserLinks.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listUserLinks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listUserLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listUserLinks.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listUserLinksAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IUserLink[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listUserLinks.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listUserLinks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('auditUserLinks', () => {
    it('invokes auditUserLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.AuditUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AuditUserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AuditUserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AuditUserLink()
        ),
      ];
      client.innerApiCalls.auditUserLinks = stubSimpleCall(expectedResponse);
      const [response] = await client.auditUserLinks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.auditUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.auditUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes auditUserLinks without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.AuditUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AuditUserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AuditUserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AuditUserLink()
        ),
      ];
      client.innerApiCalls.auditUserLinks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.auditUserLinks(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.analytics.admin.v1alpha.IAuditUserLink[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.auditUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.auditUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes auditUserLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.AuditUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.auditUserLinks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.auditUserLinks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.auditUserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.auditUserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes auditUserLinksStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.AuditUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AuditUserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AuditUserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AuditUserLink()
        ),
      ];
      client.descriptors.page.auditUserLinks.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.auditUserLinksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.AuditUserLink[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.AuditUserLink) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.auditUserLinks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.auditUserLinks, request)
      );
      assert(
        (client.descriptors.page.auditUserLinks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes auditUserLinksStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.AuditUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.auditUserLinks.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.auditUserLinksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.AuditUserLink[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.AuditUserLink) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.auditUserLinks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.auditUserLinks, request)
      );
      assert(
        (client.descriptors.page.auditUserLinks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with auditUserLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.AuditUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AuditUserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AuditUserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.AuditUserLink()
        ),
      ];
      client.descriptors.page.auditUserLinks.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IAuditUserLink[] =
        [];
      const iterable = client.auditUserLinksAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.auditUserLinks.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.auditUserLinks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with auditUserLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.AuditUserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.auditUserLinks.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.auditUserLinksAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IAuditUserLink[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.auditUserLinks.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.auditUserLinks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listFirebaseLinks', () => {
    it('invokes listFirebaseLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListFirebaseLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.FirebaseLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.FirebaseLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.FirebaseLink()
        ),
      ];
      client.innerApiCalls.listFirebaseLinks = stubSimpleCall(expectedResponse);
      const [response] = await client.listFirebaseLinks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listFirebaseLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listFirebaseLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listFirebaseLinks without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListFirebaseLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.FirebaseLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.FirebaseLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.FirebaseLink()
        ),
      ];
      client.innerApiCalls.listFirebaseLinks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listFirebaseLinks(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.analytics.admin.v1alpha.IFirebaseLink[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listFirebaseLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listFirebaseLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listFirebaseLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListFirebaseLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listFirebaseLinks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listFirebaseLinks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listFirebaseLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listFirebaseLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listFirebaseLinksStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListFirebaseLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.FirebaseLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.FirebaseLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.FirebaseLink()
        ),
      ];
      client.descriptors.page.listFirebaseLinks.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listFirebaseLinksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.FirebaseLink[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.FirebaseLink) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listFirebaseLinks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listFirebaseLinks, request)
      );
      assert(
        (client.descriptors.page.listFirebaseLinks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listFirebaseLinksStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListFirebaseLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listFirebaseLinks.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listFirebaseLinksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.FirebaseLink[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.FirebaseLink) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listFirebaseLinks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listFirebaseLinks, request)
      );
      assert(
        (client.descriptors.page.listFirebaseLinks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listFirebaseLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListFirebaseLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.FirebaseLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.FirebaseLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.FirebaseLink()
        ),
      ];
      client.descriptors.page.listFirebaseLinks.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IFirebaseLink[] =
        [];
      const iterable = client.listFirebaseLinksAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listFirebaseLinks.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listFirebaseLinks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listFirebaseLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListFirebaseLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listFirebaseLinks.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listFirebaseLinksAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IFirebaseLink[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listFirebaseLinks.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listFirebaseLinks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listGoogleAdsLinks', () => {
    it('invokes listGoogleAdsLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
        ),
      ];
      client.innerApiCalls.listGoogleAdsLinks =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listGoogleAdsLinks(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGoogleAdsLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGoogleAdsLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGoogleAdsLinks without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
        ),
      ];
      client.innerApiCalls.listGoogleAdsLinks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listGoogleAdsLinks(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.analytics.admin.v1alpha.IGoogleAdsLink[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listGoogleAdsLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGoogleAdsLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGoogleAdsLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listGoogleAdsLinks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listGoogleAdsLinks(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listGoogleAdsLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listGoogleAdsLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listGoogleAdsLinksStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
        ),
      ];
      client.descriptors.page.listGoogleAdsLinks.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listGoogleAdsLinksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.GoogleAdsLink[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.GoogleAdsLink) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listGoogleAdsLinks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGoogleAdsLinks, request)
      );
      assert(
        (client.descriptors.page.listGoogleAdsLinks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listGoogleAdsLinksStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGoogleAdsLinks.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listGoogleAdsLinksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.GoogleAdsLink[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.GoogleAdsLink) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listGoogleAdsLinks.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listGoogleAdsLinks, request)
      );
      assert(
        (client.descriptors.page.listGoogleAdsLinks.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listGoogleAdsLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.GoogleAdsLink()
        ),
      ];
      client.descriptors.page.listGoogleAdsLinks.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IGoogleAdsLink[] =
        [];
      const iterable = client.listGoogleAdsLinksAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGoogleAdsLinks.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGoogleAdsLinks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listGoogleAdsLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listGoogleAdsLinks.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listGoogleAdsLinksAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IGoogleAdsLink[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listGoogleAdsLinks.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listGoogleAdsLinks.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listMeasurementProtocolSecrets', () => {
    it('invokes listMeasurementProtocolSecrets without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
        ),
      ];
      client.innerApiCalls.listMeasurementProtocolSecrets =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listMeasurementProtocolSecrets(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMeasurementProtocolSecrets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMeasurementProtocolSecrets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMeasurementProtocolSecrets without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
        ),
      ];
      client.innerApiCalls.listMeasurementProtocolSecrets =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listMeasurementProtocolSecrets(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.analytics.admin.v1alpha.IMeasurementProtocolSecret[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMeasurementProtocolSecrets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMeasurementProtocolSecrets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMeasurementProtocolSecrets with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listMeasurementProtocolSecrets = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listMeasurementProtocolSecrets(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listMeasurementProtocolSecrets as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMeasurementProtocolSecrets as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMeasurementProtocolSecretsStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
        ),
      ];
      client.descriptors.page.listMeasurementProtocolSecrets.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listMeasurementProtocolSecretsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listMeasurementProtocolSecrets
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listMeasurementProtocolSecrets,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listMeasurementProtocolSecrets
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listMeasurementProtocolSecretsStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMeasurementProtocolSecrets.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listMeasurementProtocolSecretsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listMeasurementProtocolSecrets
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listMeasurementProtocolSecrets,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listMeasurementProtocolSecrets
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMeasurementProtocolSecrets without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.MeasurementProtocolSecret()
        ),
      ];
      client.descriptors.page.listMeasurementProtocolSecrets.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IMeasurementProtocolSecret[] =
        [];
      const iterable = client.listMeasurementProtocolSecretsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMeasurementProtocolSecrets
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listMeasurementProtocolSecrets
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMeasurementProtocolSecrets with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListMeasurementProtocolSecretsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMeasurementProtocolSecrets.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listMeasurementProtocolSecretsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IMeasurementProtocolSecret[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMeasurementProtocolSecrets
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listMeasurementProtocolSecrets
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('searchChangeHistoryEvents', () => {
    it('invokes searchChangeHistoryEvents without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ChangeHistoryEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ChangeHistoryEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ChangeHistoryEvent()
        ),
      ];
      client.innerApiCalls.searchChangeHistoryEvents =
        stubSimpleCall(expectedResponse);
      const [response] = await client.searchChangeHistoryEvents(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.searchChangeHistoryEvents as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.searchChangeHistoryEvents as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes searchChangeHistoryEvents without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ChangeHistoryEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ChangeHistoryEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ChangeHistoryEvent()
        ),
      ];
      client.innerApiCalls.searchChangeHistoryEvents =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.searchChangeHistoryEvents(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.analytics.admin.v1alpha.IChangeHistoryEvent[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.searchChangeHistoryEvents as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.searchChangeHistoryEvents as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes searchChangeHistoryEvents with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.searchChangeHistoryEvents = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.searchChangeHistoryEvents(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.searchChangeHistoryEvents as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.searchChangeHistoryEvents as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes searchChangeHistoryEventsStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ChangeHistoryEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ChangeHistoryEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ChangeHistoryEvent()
        ),
      ];
      client.descriptors.page.searchChangeHistoryEvents.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.searchChangeHistoryEventsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.ChangeHistoryEvent[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.analytics.admin.v1alpha.ChangeHistoryEvent
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.searchChangeHistoryEvents
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.searchChangeHistoryEvents, request)
      );
      assert(
        (
          client.descriptors.page.searchChangeHistoryEvents
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes searchChangeHistoryEventsStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.searchChangeHistoryEvents.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.searchChangeHistoryEventsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.ChangeHistoryEvent[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.analytics.admin.v1alpha.ChangeHistoryEvent
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.searchChangeHistoryEvents
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.searchChangeHistoryEvents, request)
      );
      assert(
        (
          client.descriptors.page.searchChangeHistoryEvents
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with searchChangeHistoryEvents without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ChangeHistoryEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ChangeHistoryEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ChangeHistoryEvent()
        ),
      ];
      client.descriptors.page.searchChangeHistoryEvents.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IChangeHistoryEvent[] =
        [];
      const iterable = client.searchChangeHistoryEventsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.searchChangeHistoryEvents
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.searchChangeHistoryEvents
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with searchChangeHistoryEvents with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.SearchChangeHistoryEventsRequest',
        ['account']
      );
      request.account = defaultValue1;
      const expectedHeaderRequestParams = `account=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.searchChangeHistoryEvents.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.searchChangeHistoryEventsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IChangeHistoryEvent[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.searchChangeHistoryEvents
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.searchChangeHistoryEvents
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listConversionEvents', () => {
    it('invokes listConversionEvents without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListConversionEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListConversionEventsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ConversionEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ConversionEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ConversionEvent()
        ),
      ];
      client.innerApiCalls.listConversionEvents =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listConversionEvents(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConversionEvents as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConversionEvents as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConversionEvents without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListConversionEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListConversionEventsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ConversionEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ConversionEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ConversionEvent()
        ),
      ];
      client.innerApiCalls.listConversionEvents =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listConversionEvents(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.analytics.admin.v1alpha.IConversionEvent[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConversionEvents as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConversionEvents as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConversionEvents with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListConversionEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListConversionEventsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listConversionEvents = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listConversionEvents(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listConversionEvents as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConversionEvents as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConversionEventsStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListConversionEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListConversionEventsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ConversionEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ConversionEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ConversionEvent()
        ),
      ];
      client.descriptors.page.listConversionEvents.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listConversionEventsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.ConversionEvent[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.ConversionEvent) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listConversionEvents.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConversionEvents, request)
      );
      assert(
        (client.descriptors.page.listConversionEvents.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listConversionEventsStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListConversionEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListConversionEventsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConversionEvents.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listConversionEventsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.ConversionEvent[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.ConversionEvent) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listConversionEvents.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConversionEvents, request)
      );
      assert(
        (client.descriptors.page.listConversionEvents.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listConversionEvents without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListConversionEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListConversionEventsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ConversionEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ConversionEvent()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.ConversionEvent()
        ),
      ];
      client.descriptors.page.listConversionEvents.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IConversionEvent[] =
        [];
      const iterable = client.listConversionEventsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConversionEvents.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConversionEvents.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listConversionEvents with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListConversionEventsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListConversionEventsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConversionEvents.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listConversionEventsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IConversionEvent[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConversionEvents.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConversionEvents.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listDisplayVideo360AdvertiserLinks', () => {
    it('invokes listDisplayVideo360AdvertiserLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
        ),
      ];
      client.innerApiCalls.listDisplayVideo360AdvertiserLinks =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listDisplayVideo360AdvertiserLinks(
        request
      );
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDisplayVideo360AdvertiserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDisplayVideo360AdvertiserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDisplayVideo360AdvertiserLinks without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
        ),
      ];
      client.innerApiCalls.listDisplayVideo360AdvertiserLinks =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDisplayVideo360AdvertiserLinks(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.analytics.admin.v1alpha.IDisplayVideo360AdvertiserLink[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDisplayVideo360AdvertiserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDisplayVideo360AdvertiserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDisplayVideo360AdvertiserLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDisplayVideo360AdvertiserLinks = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listDisplayVideo360AdvertiserLinks(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listDisplayVideo360AdvertiserLinks as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDisplayVideo360AdvertiserLinks as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDisplayVideo360AdvertiserLinksStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
        ),
      ];
      client.descriptors.page.listDisplayVideo360AdvertiserLinks.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDisplayVideo360AdvertiserLinksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinks
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listDisplayVideo360AdvertiserLinks,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinks
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listDisplayVideo360AdvertiserLinksStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDisplayVideo360AdvertiserLinks.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listDisplayVideo360AdvertiserLinksStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinks
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listDisplayVideo360AdvertiserLinks,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinks
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDisplayVideo360AdvertiserLinks without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLink()
        ),
      ];
      client.descriptors.page.listDisplayVideo360AdvertiserLinks.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IDisplayVideo360AdvertiserLink[] =
        [];
      const iterable = client.listDisplayVideo360AdvertiserLinksAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinks
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinks
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDisplayVideo360AdvertiserLinks with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinksRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDisplayVideo360AdvertiserLinks.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listDisplayVideo360AdvertiserLinksAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IDisplayVideo360AdvertiserLink[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinks
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinks
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listDisplayVideo360AdvertiserLinkProposals', () => {
    it('invokes listDisplayVideo360AdvertiserLinkProposals without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
        ),
      ];
      client.innerApiCalls.listDisplayVideo360AdvertiserLinkProposals =
        stubSimpleCall(expectedResponse);
      const [response] =
        await client.listDisplayVideo360AdvertiserLinkProposals(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .listDisplayVideo360AdvertiserLinkProposals as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listDisplayVideo360AdvertiserLinkProposals as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDisplayVideo360AdvertiserLinkProposals without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
        ),
      ];
      client.innerApiCalls.listDisplayVideo360AdvertiserLinkProposals =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDisplayVideo360AdvertiserLinkProposals(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.analytics.admin.v1alpha.IDisplayVideo360AdvertiserLinkProposal[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls
          .listDisplayVideo360AdvertiserLinkProposals as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listDisplayVideo360AdvertiserLinkProposals as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDisplayVideo360AdvertiserLinkProposals with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDisplayVideo360AdvertiserLinkProposals =
        stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.listDisplayVideo360AdvertiserLinkProposals(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls
          .listDisplayVideo360AdvertiserLinkProposals as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls
          .listDisplayVideo360AdvertiserLinkProposals as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDisplayVideo360AdvertiserLinkProposalsStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
        ),
      ];
      client.descriptors.page.listDisplayVideo360AdvertiserLinkProposals.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream =
        client.listDisplayVideo360AdvertiserLinkProposalsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinkProposals
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listDisplayVideo360AdvertiserLinkProposals,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinkProposals
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listDisplayVideo360AdvertiserLinkProposalsStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDisplayVideo360AdvertiserLinkProposals.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream =
        client.listDisplayVideo360AdvertiserLinkProposalsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinkProposals
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(
            client.innerApiCalls.listDisplayVideo360AdvertiserLinkProposals,
            request
          )
      );
      assert(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinkProposals
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDisplayVideo360AdvertiserLinkProposals without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DisplayVideo360AdvertiserLinkProposal()
        ),
      ];
      client.descriptors.page.listDisplayVideo360AdvertiserLinkProposals.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IDisplayVideo360AdvertiserLinkProposal[] =
        [];
      const iterable =
        client.listDisplayVideo360AdvertiserLinkProposalsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinkProposals
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinkProposals
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDisplayVideo360AdvertiserLinkProposals with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDisplayVideo360AdvertiserLinkProposalsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDisplayVideo360AdvertiserLinkProposals.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable =
        client.listDisplayVideo360AdvertiserLinkProposalsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IDisplayVideo360AdvertiserLinkProposal[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinkProposals
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listDisplayVideo360AdvertiserLinkProposals
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listCustomDimensions', () => {
    it('invokes listCustomDimensions without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomDimensionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomDimensionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomDimension()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomDimension()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomDimension()
        ),
      ];
      client.innerApiCalls.listCustomDimensions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listCustomDimensions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCustomDimensions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCustomDimensions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCustomDimensions without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomDimensionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomDimensionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomDimension()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomDimension()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomDimension()
        ),
      ];
      client.innerApiCalls.listCustomDimensions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCustomDimensions(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.analytics.admin.v1alpha.ICustomDimension[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCustomDimensions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCustomDimensions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCustomDimensions with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomDimensionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomDimensionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listCustomDimensions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listCustomDimensions(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listCustomDimensions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCustomDimensions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCustomDimensionsStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomDimensionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomDimensionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomDimension()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomDimension()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomDimension()
        ),
      ];
      client.descriptors.page.listCustomDimensions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCustomDimensionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.CustomDimension[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.CustomDimension) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listCustomDimensions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCustomDimensions, request)
      );
      assert(
        (client.descriptors.page.listCustomDimensions.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listCustomDimensionsStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomDimensionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomDimensionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCustomDimensions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listCustomDimensionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.CustomDimension[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.CustomDimension) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listCustomDimensions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCustomDimensions, request)
      );
      assert(
        (client.descriptors.page.listCustomDimensions.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCustomDimensions without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomDimensionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomDimensionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomDimension()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomDimension()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomDimension()
        ),
      ];
      client.descriptors.page.listCustomDimensions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.ICustomDimension[] =
        [];
      const iterable = client.listCustomDimensionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCustomDimensions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCustomDimensions.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCustomDimensions with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomDimensionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomDimensionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCustomDimensions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listCustomDimensionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.ICustomDimension[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCustomDimensions.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCustomDimensions.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listCustomMetrics', () => {
    it('invokes listCustomMetrics without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomMetricsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomMetric()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomMetric()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomMetric()
        ),
      ];
      client.innerApiCalls.listCustomMetrics = stubSimpleCall(expectedResponse);
      const [response] = await client.listCustomMetrics(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCustomMetrics as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCustomMetrics as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCustomMetrics without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomMetricsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomMetric()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomMetric()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomMetric()
        ),
      ];
      client.innerApiCalls.listCustomMetrics =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listCustomMetrics(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.analytics.admin.v1alpha.ICustomMetric[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listCustomMetrics as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCustomMetrics as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCustomMetrics with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomMetricsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listCustomMetrics = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listCustomMetrics(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listCustomMetrics as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listCustomMetrics as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listCustomMetricsStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomMetricsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomMetric()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomMetric()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomMetric()
        ),
      ];
      client.descriptors.page.listCustomMetrics.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listCustomMetricsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.CustomMetric[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.CustomMetric) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listCustomMetrics.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCustomMetrics, request)
      );
      assert(
        (client.descriptors.page.listCustomMetrics.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listCustomMetricsStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomMetricsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCustomMetrics.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listCustomMetricsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.CustomMetric[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.CustomMetric) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listCustomMetrics.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listCustomMetrics, request)
      );
      assert(
        (client.descriptors.page.listCustomMetrics.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCustomMetrics without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomMetricsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomMetric()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomMetric()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.CustomMetric()
        ),
      ];
      client.descriptors.page.listCustomMetrics.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.ICustomMetric[] =
        [];
      const iterable = client.listCustomMetricsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCustomMetrics.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCustomMetrics.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listCustomMetrics with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListCustomMetricsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListCustomMetricsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listCustomMetrics.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listCustomMetricsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.ICustomMetric[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listCustomMetrics.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listCustomMetrics.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listDataStreams', () => {
    it('invokes listDataStreams without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDataStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDataStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DataStream()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DataStream()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DataStream()
        ),
      ];
      client.innerApiCalls.listDataStreams = stubSimpleCall(expectedResponse);
      const [response] = await client.listDataStreams(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDataStreams as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDataStreams as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDataStreams without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDataStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDataStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DataStream()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DataStream()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DataStream()
        ),
      ];
      client.innerApiCalls.listDataStreams =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listDataStreams(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IDataStream[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listDataStreams as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDataStreams as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDataStreams with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDataStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDataStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listDataStreams = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listDataStreams(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listDataStreams as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listDataStreams as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listDataStreamsStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDataStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDataStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DataStream()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DataStream()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DataStream()
        ),
      ];
      client.descriptors.page.listDataStreams.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listDataStreamsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.DataStream[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.DataStream) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listDataStreams.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDataStreams, request)
      );
      assert(
        (client.descriptors.page.listDataStreams.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listDataStreamsStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDataStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDataStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDataStreams.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listDataStreamsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.DataStream[] =
          [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.DataStream) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listDataStreams.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listDataStreams, request)
      );
      assert(
        (client.descriptors.page.listDataStreams.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDataStreams without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDataStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDataStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DataStream()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DataStream()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.DataStream()
        ),
      ];
      client.descriptors.page.listDataStreams.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IDataStream[] = [];
      const iterable = client.listDataStreamsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDataStreams.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDataStreams.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listDataStreams with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListDataStreamsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListDataStreamsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listDataStreams.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listDataStreamsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IDataStream[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listDataStreams.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listDataStreams.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listAudiences', () => {
    it('invokes listAudiences without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAudiencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListAudiencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Audience()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Audience()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Audience()
        ),
      ];
      client.innerApiCalls.listAudiences = stubSimpleCall(expectedResponse);
      const [response] = await client.listAudiences(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAudiences as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAudiences as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAudiences without error using callback', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAudiencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListAudiencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Audience()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Audience()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Audience()
        ),
      ];
      client.innerApiCalls.listAudiences =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAudiences(
          request,
          (
            err?: Error | null,
            result?: protos.google.analytics.admin.v1alpha.IAudience[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAudiences as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAudiences as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAudiences with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAudiencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListAudiencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAudiences = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAudiences(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listAudiences as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAudiences as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAudiencesStream without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAudiencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListAudiencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Audience()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Audience()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Audience()
        ),
      ];
      client.descriptors.page.listAudiences.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAudiencesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.Audience[] = [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.Audience) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAudiences.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAudiences, request)
      );
      assert(
        (client.descriptors.page.listAudiences.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAudiencesStream with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAudiencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListAudiencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAudiences.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAudiencesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.analytics.admin.v1alpha.Audience[] = [];
        stream.on(
          'data',
          (response: protos.google.analytics.admin.v1alpha.Audience) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAudiences.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAudiences, request)
      );
      assert(
        (client.descriptors.page.listAudiences.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAudiences without error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAudiencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListAudiencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Audience()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Audience()
        ),
        generateSampleMessage(
          new protos.google.analytics.admin.v1alpha.Audience()
        ),
      ];
      client.descriptors.page.listAudiences.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.analytics.admin.v1alpha.IAudience[] = [];
      const iterable = client.listAudiencesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAudiences.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAudiences.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAudiences with error', async () => {
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.analytics.admin.v1alpha.ListAudiencesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.analytics.admin.v1alpha.ListAudiencesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAudiences.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAudiencesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.analytics.admin.v1alpha.IAudience[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAudiences.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAudiences.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('account', () => {
      const fakePath = '/rendered/path/account';
      const expectedParameters = {
        account: 'accountValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.accountPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.accountPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('accountPath', () => {
        const result = client.accountPath('accountValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.accountPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchAccountFromAccountName', () => {
        const result = client.matchAccountFromAccountName(fakePath);
        assert.strictEqual(result, 'accountValue');
        assert(
          (client.pathTemplates.accountPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('accountSummary', () => {
      const fakePath = '/rendered/path/accountSummary';
      const expectedParameters = {
        account_summary: 'accountSummaryValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.accountSummaryPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.accountSummaryPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('accountSummaryPath', () => {
        const result = client.accountSummaryPath('accountSummaryValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.accountSummaryPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchAccountSummaryFromAccountSummaryName', () => {
        const result =
          client.matchAccountSummaryFromAccountSummaryName(fakePath);
        assert.strictEqual(result, 'accountSummaryValue');
        assert(
          (client.pathTemplates.accountSummaryPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('accountUserLink', () => {
      const fakePath = '/rendered/path/accountUserLink';
      const expectedParameters = {
        account: 'accountValue',
        user_link: 'userLinkValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.accountUserLinkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.accountUserLinkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('accountUserLinkPath', () => {
        const result = client.accountUserLinkPath(
          'accountValue',
          'userLinkValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.accountUserLinkPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchAccountFromAccountUserLinkName', () => {
        const result = client.matchAccountFromAccountUserLinkName(fakePath);
        assert.strictEqual(result, 'accountValue');
        assert(
          (client.pathTemplates.accountUserLinkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchUserLinkFromAccountUserLinkName', () => {
        const result = client.matchUserLinkFromAccountUserLinkName(fakePath);
        assert.strictEqual(result, 'userLinkValue');
        assert(
          (client.pathTemplates.accountUserLinkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('attributionSettings', () => {
      const fakePath = '/rendered/path/attributionSettings';
      const expectedParameters = {
        property: 'propertyValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.attributionSettingsPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.attributionSettingsPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('attributionSettingsPath', () => {
        const result = client.attributionSettingsPath('propertyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.attributionSettingsPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromAttributionSettingsName', () => {
        const result =
          client.matchPropertyFromAttributionSettingsName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (
            client.pathTemplates.attributionSettingsPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('audience', () => {
      const fakePath = '/rendered/path/audience';
      const expectedParameters = {
        property: 'propertyValue',
        audience: 'audienceValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.audiencePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.audiencePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('audiencePath', () => {
        const result = client.audiencePath('propertyValue', 'audienceValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.audiencePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromAudienceName', () => {
        const result = client.matchPropertyFromAudienceName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (client.pathTemplates.audiencePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAudienceFromAudienceName', () => {
        const result = client.matchAudienceFromAudienceName(fakePath);
        assert.strictEqual(result, 'audienceValue');
        assert(
          (client.pathTemplates.audiencePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('conversionEvent', () => {
      const fakePath = '/rendered/path/conversionEvent';
      const expectedParameters = {
        property: 'propertyValue',
        conversion_event: 'conversionEventValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.conversionEventPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.conversionEventPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('conversionEventPath', () => {
        const result = client.conversionEventPath(
          'propertyValue',
          'conversionEventValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.conversionEventPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromConversionEventName', () => {
        const result = client.matchPropertyFromConversionEventName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (client.pathTemplates.conversionEventPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConversionEventFromConversionEventName', () => {
        const result =
          client.matchConversionEventFromConversionEventName(fakePath);
        assert.strictEqual(result, 'conversionEventValue');
        assert(
          (client.pathTemplates.conversionEventPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('customDimension', () => {
      const fakePath = '/rendered/path/customDimension';
      const expectedParameters = {
        property: 'propertyValue',
        custom_dimension: 'customDimensionValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.customDimensionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.customDimensionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('customDimensionPath', () => {
        const result = client.customDimensionPath(
          'propertyValue',
          'customDimensionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.customDimensionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromCustomDimensionName', () => {
        const result = client.matchPropertyFromCustomDimensionName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (client.pathTemplates.customDimensionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomDimensionFromCustomDimensionName', () => {
        const result =
          client.matchCustomDimensionFromCustomDimensionName(fakePath);
        assert.strictEqual(result, 'customDimensionValue');
        assert(
          (client.pathTemplates.customDimensionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('customMetric', () => {
      const fakePath = '/rendered/path/customMetric';
      const expectedParameters = {
        property: 'propertyValue',
        custom_metric: 'customMetricValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.customMetricPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.customMetricPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('customMetricPath', () => {
        const result = client.customMetricPath(
          'propertyValue',
          'customMetricValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.customMetricPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromCustomMetricName', () => {
        const result = client.matchPropertyFromCustomMetricName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (client.pathTemplates.customMetricPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchCustomMetricFromCustomMetricName', () => {
        const result = client.matchCustomMetricFromCustomMetricName(fakePath);
        assert.strictEqual(result, 'customMetricValue');
        assert(
          (client.pathTemplates.customMetricPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataRetentionSettings', () => {
      const fakePath = '/rendered/path/dataRetentionSettings';
      const expectedParameters = {
        property: 'propertyValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.dataRetentionSettingsPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataRetentionSettingsPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataRetentionSettingsPath', () => {
        const result = client.dataRetentionSettingsPath('propertyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.dataRetentionSettingsPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromDataRetentionSettingsName', () => {
        const result =
          client.matchPropertyFromDataRetentionSettingsName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (
            client.pathTemplates.dataRetentionSettingsPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataSharingSettings', () => {
      const fakePath = '/rendered/path/dataSharingSettings';
      const expectedParameters = {
        account: 'accountValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.dataSharingSettingsPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataSharingSettingsPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataSharingSettingsPath', () => {
        const result = client.dataSharingSettingsPath('accountValue');
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.dataSharingSettingsPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchAccountFromDataSharingSettingsName', () => {
        const result = client.matchAccountFromDataSharingSettingsName(fakePath);
        assert.strictEqual(result, 'accountValue');
        assert(
          (
            client.pathTemplates.dataSharingSettingsPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('dataStream', () => {
      const fakePath = '/rendered/path/dataStream';
      const expectedParameters = {
        property: 'propertyValue',
        data_stream: 'dataStreamValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.dataStreamPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.dataStreamPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('dataStreamPath', () => {
        const result = client.dataStreamPath(
          'propertyValue',
          'dataStreamValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.dataStreamPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromDataStreamName', () => {
        const result = client.matchPropertyFromDataStreamName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (client.pathTemplates.dataStreamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStreamFromDataStreamName', () => {
        const result = client.matchDataStreamFromDataStreamName(fakePath);
        assert.strictEqual(result, 'dataStreamValue');
        assert(
          (client.pathTemplates.dataStreamPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('displayVideo360AdvertiserLink', () => {
      const fakePath = '/rendered/path/displayVideo360AdvertiserLink';
      const expectedParameters = {
        property: 'propertyValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.displayVideo360AdvertiserLinkPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.displayVideo360AdvertiserLinkPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('displayVideo360AdvertiserLinkPath', () => {
        const result =
          client.displayVideo360AdvertiserLinkPath('propertyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.displayVideo360AdvertiserLinkPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromDisplayVideo360AdvertiserLinkName', () => {
        const result =
          client.matchPropertyFromDisplayVideo360AdvertiserLinkName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (
            client.pathTemplates.displayVideo360AdvertiserLinkPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('displayVideo360AdvertiserLinkProposal', () => {
      const fakePath = '/rendered/path/displayVideo360AdvertiserLinkProposal';
      const expectedParameters = {
        property: 'propertyValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.displayVideo360AdvertiserLinkProposalPathTemplate.render =
        sinon.stub().returns(fakePath);
      client.pathTemplates.displayVideo360AdvertiserLinkProposalPathTemplate.match =
        sinon.stub().returns(expectedParameters);

      it('displayVideo360AdvertiserLinkProposalPath', () => {
        const result =
          client.displayVideo360AdvertiserLinkProposalPath('propertyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates
              .displayVideo360AdvertiserLinkProposalPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromDisplayVideo360AdvertiserLinkProposalName', () => {
        const result =
          client.matchPropertyFromDisplayVideo360AdvertiserLinkProposalName(
            fakePath
          );
        assert.strictEqual(result, 'propertyValue');
        assert(
          (
            client.pathTemplates
              .displayVideo360AdvertiserLinkProposalPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('firebaseLink', () => {
      const fakePath = '/rendered/path/firebaseLink';
      const expectedParameters = {
        property: 'propertyValue',
        firebase_link: 'firebaseLinkValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.firebaseLinkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.firebaseLinkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('firebaseLinkPath', () => {
        const result = client.firebaseLinkPath(
          'propertyValue',
          'firebaseLinkValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.firebaseLinkPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromFirebaseLinkName', () => {
        const result = client.matchPropertyFromFirebaseLinkName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (client.pathTemplates.firebaseLinkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchFirebaseLinkFromFirebaseLinkName', () => {
        const result = client.matchFirebaseLinkFromFirebaseLinkName(fakePath);
        assert.strictEqual(result, 'firebaseLinkValue');
        assert(
          (client.pathTemplates.firebaseLinkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('globalSiteTag', () => {
      const fakePath = '/rendered/path/globalSiteTag';
      const expectedParameters = {
        property: 'propertyValue',
        data_stream: 'dataStreamValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.globalSiteTagPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.globalSiteTagPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('globalSiteTagPath', () => {
        const result = client.globalSiteTagPath(
          'propertyValue',
          'dataStreamValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.globalSiteTagPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromGlobalSiteTagName', () => {
        const result = client.matchPropertyFromGlobalSiteTagName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (client.pathTemplates.globalSiteTagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStreamFromGlobalSiteTagName', () => {
        const result = client.matchDataStreamFromGlobalSiteTagName(fakePath);
        assert.strictEqual(result, 'dataStreamValue');
        assert(
          (client.pathTemplates.globalSiteTagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('googleAdsLink', () => {
      const fakePath = '/rendered/path/googleAdsLink';
      const expectedParameters = {
        property: 'propertyValue',
        google_ads_link: 'googleAdsLinkValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.googleAdsLinkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.googleAdsLinkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('googleAdsLinkPath', () => {
        const result = client.googleAdsLinkPath(
          'propertyValue',
          'googleAdsLinkValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.googleAdsLinkPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromGoogleAdsLinkName', () => {
        const result = client.matchPropertyFromGoogleAdsLinkName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (client.pathTemplates.googleAdsLinkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchGoogleAdsLinkFromGoogleAdsLinkName', () => {
        const result = client.matchGoogleAdsLinkFromGoogleAdsLinkName(fakePath);
        assert.strictEqual(result, 'googleAdsLinkValue');
        assert(
          (client.pathTemplates.googleAdsLinkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('googleSignalsSettings', () => {
      const fakePath = '/rendered/path/googleSignalsSettings';
      const expectedParameters = {
        property: 'propertyValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.googleSignalsSettingsPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.googleSignalsSettingsPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('googleSignalsSettingsPath', () => {
        const result = client.googleSignalsSettingsPath('propertyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.googleSignalsSettingsPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromGoogleSignalsSettingsName', () => {
        const result =
          client.matchPropertyFromGoogleSignalsSettingsName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (
            client.pathTemplates.googleSignalsSettingsPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('measurementProtocolSecret', () => {
      const fakePath = '/rendered/path/measurementProtocolSecret';
      const expectedParameters = {
        property: 'propertyValue',
        data_stream: 'dataStreamValue',
        measurement_protocol_secret: 'measurementProtocolSecretValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.measurementProtocolSecretPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.measurementProtocolSecretPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('measurementProtocolSecretPath', () => {
        const result = client.measurementProtocolSecretPath(
          'propertyValue',
          'dataStreamValue',
          'measurementProtocolSecretValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.measurementProtocolSecretPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromMeasurementProtocolSecretName', () => {
        const result =
          client.matchPropertyFromMeasurementProtocolSecretName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (
            client.pathTemplates.measurementProtocolSecretPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchDataStreamFromMeasurementProtocolSecretName', () => {
        const result =
          client.matchDataStreamFromMeasurementProtocolSecretName(fakePath);
        assert.strictEqual(result, 'dataStreamValue');
        assert(
          (
            client.pathTemplates.measurementProtocolSecretPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMeasurementProtocolSecretFromMeasurementProtocolSecretName', () => {
        const result =
          client.matchMeasurementProtocolSecretFromMeasurementProtocolSecretName(
            fakePath
          );
        assert.strictEqual(result, 'measurementProtocolSecretValue');
        assert(
          (
            client.pathTemplates.measurementProtocolSecretPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('property', () => {
      const fakePath = '/rendered/path/property';
      const expectedParameters = {
        property: 'propertyValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.propertyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.propertyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('propertyPath', () => {
        const result = client.propertyPath('propertyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.propertyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromPropertyName', () => {
        const result = client.matchPropertyFromPropertyName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (client.pathTemplates.propertyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('propertyUserLink', () => {
      const fakePath = '/rendered/path/propertyUserLink';
      const expectedParameters = {
        property: 'propertyValue',
        user_link: 'userLinkValue',
      };
      const client =
        new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.propertyUserLinkPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.propertyUserLinkPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('propertyUserLinkPath', () => {
        const result = client.propertyUserLinkPath(
          'propertyValue',
          'userLinkValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.propertyUserLinkPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchPropertyFromPropertyUserLinkName', () => {
        const result = client.matchPropertyFromPropertyUserLinkName(fakePath);
        assert.strictEqual(result, 'propertyValue');
        assert(
          (client.pathTemplates.propertyUserLinkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchUserLinkFromPropertyUserLinkName', () => {
        const result = client.matchUserLinkFromPropertyUserLinkName(fakePath);
        assert.strictEqual(result, 'userLinkValue');
        assert(
          (client.pathTemplates.propertyUserLinkPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
