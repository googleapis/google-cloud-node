// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as awsclustersModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.AwsClustersClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath = awsclustersModule.v1.AwsClustersClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint = awsclustersModule.v1.AwsClustersClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = awsclustersModule.v1.AwsClustersClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new awsclustersModule.v1.AwsClustersClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.awsClustersStub, undefined);
      await client.initialize();
      assert(client.awsClustersStub);
    });

    it('has close method for the initialized client', done => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.awsClustersStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.awsClustersStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getAwsCluster', () => {
    it('invokes getAwsCluster without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAwsClusterRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AwsCluster()
      );
      client.innerApiCalls.getAwsCluster = stubSimpleCall(expectedResponse);
      const [response] = await client.getAwsCluster(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getAwsCluster without error using callback', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAwsClusterRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AwsCluster()
      );
      client.innerApiCalls.getAwsCluster =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAwsCluster(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IAwsCluster | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getAwsCluster with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAwsClusterRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getAwsCluster = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAwsCluster(request), expectedError);
      assert(
        (client.innerApiCalls.getAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getAwsCluster with closed client', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAwsClusterRequest()
      );
      request.name = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAwsCluster(request), expectedError);
    });
  });

  describe('generateAwsAccessToken', () => {
    it('invokes generateAwsAccessToken without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GenerateAwsAccessTokenRequest()
      );
      request.awsCluster = '';
      const expectedHeaderRequestParams = 'aws_cluster=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GenerateAwsAccessTokenResponse()
      );
      client.innerApiCalls.generateAwsAccessToken =
        stubSimpleCall(expectedResponse);
      const [response] = await client.generateAwsAccessToken(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.generateAwsAccessToken as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes generateAwsAccessToken without error using callback', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GenerateAwsAccessTokenRequest()
      );
      request.awsCluster = '';
      const expectedHeaderRequestParams = 'aws_cluster=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GenerateAwsAccessTokenResponse()
      );
      client.innerApiCalls.generateAwsAccessToken =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.generateAwsAccessToken(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IGenerateAwsAccessTokenResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.generateAwsAccessToken as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes generateAwsAccessToken with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GenerateAwsAccessTokenRequest()
      );
      request.awsCluster = '';
      const expectedHeaderRequestParams = 'aws_cluster=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.generateAwsAccessToken = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.generateAwsAccessToken(request),
        expectedError
      );
      assert(
        (client.innerApiCalls.generateAwsAccessToken as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes generateAwsAccessToken with closed client', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GenerateAwsAccessTokenRequest()
      );
      request.awsCluster = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.generateAwsAccessToken(request),
        expectedError
      );
    });
  });

  describe('getAwsNodePool', () => {
    it('invokes getAwsNodePool without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAwsNodePoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
      );
      client.innerApiCalls.getAwsNodePool = stubSimpleCall(expectedResponse);
      const [response] = await client.getAwsNodePool(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getAwsNodePool without error using callback', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAwsNodePoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
      );
      client.innerApiCalls.getAwsNodePool =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAwsNodePool(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IAwsNodePool | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getAwsNodePool with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAwsNodePoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getAwsNodePool = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAwsNodePool(request), expectedError);
      assert(
        (client.innerApiCalls.getAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getAwsNodePool with closed client', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAwsNodePoolRequest()
      );
      request.name = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAwsNodePool(request), expectedError);
    });
  });

  describe('getAwsServerConfig', () => {
    it('invokes getAwsServerConfig without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAwsServerConfigRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AwsServerConfig()
      );
      client.innerApiCalls.getAwsServerConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getAwsServerConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getAwsServerConfig as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getAwsServerConfig without error using callback', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAwsServerConfigRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AwsServerConfig()
      );
      client.innerApiCalls.getAwsServerConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAwsServerConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IAwsServerConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getAwsServerConfig as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getAwsServerConfig with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAwsServerConfigRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getAwsServerConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAwsServerConfig(request), expectedError);
      assert(
        (client.innerApiCalls.getAwsServerConfig as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getAwsServerConfig with closed client', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAwsServerConfigRequest()
      );
      request.name = '';
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAwsServerConfig(request), expectedError);
    });
  });

  describe('createAwsCluster', () => {
    it('invokes createAwsCluster without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAwsClusterRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAwsCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createAwsCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createAwsCluster without error using callback', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAwsClusterRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAwsCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAwsCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkemulticloud.v1.IAwsCluster,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkemulticloud.v1.IAwsCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createAwsCluster with call error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAwsClusterRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createAwsCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAwsCluster(request), expectedError);
      assert(
        (client.innerApiCalls.createAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createAwsCluster with LRO error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAwsClusterRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createAwsCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createAwsCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.createAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkCreateAwsClusterProgress without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateAwsClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateAwsClusterProgress with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateAwsClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateAwsCluster', () => {
    it('invokes updateAwsCluster without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAwsClusterRequest()
      );
      request.awsCluster = {};
      request.awsCluster.name = '';
      const expectedHeaderRequestParams = 'aws_cluster.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAwsCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateAwsCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateAwsCluster without error using callback', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAwsClusterRequest()
      );
      request.awsCluster = {};
      request.awsCluster.name = '';
      const expectedHeaderRequestParams = 'aws_cluster.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAwsCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAwsCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkemulticloud.v1.IAwsCluster,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkemulticloud.v1.IAwsCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateAwsCluster with call error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAwsClusterRequest()
      );
      request.awsCluster = {};
      request.awsCluster.name = '';
      const expectedHeaderRequestParams = 'aws_cluster.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAwsCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateAwsCluster(request), expectedError);
      assert(
        (client.innerApiCalls.updateAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateAwsCluster with LRO error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAwsClusterRequest()
      );
      request.awsCluster = {};
      request.awsCluster.name = '';
      const expectedHeaderRequestParams = 'aws_cluster.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAwsCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateAwsCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.updateAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkUpdateAwsClusterProgress without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateAwsClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateAwsClusterProgress with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateAwsClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteAwsCluster', () => {
    it('invokes deleteAwsCluster without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAwsClusterRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAwsCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteAwsCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteAwsCluster without error using callback', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAwsClusterRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAwsCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAwsCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteAwsCluster with call error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAwsClusterRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAwsCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAwsCluster(request), expectedError);
      assert(
        (client.innerApiCalls.deleteAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteAwsCluster with LRO error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAwsClusterRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAwsCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteAwsCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.deleteAwsCluster as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkDeleteAwsClusterProgress without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteAwsClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteAwsClusterProgress with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteAwsClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createAwsNodePool', () => {
    it('invokes createAwsNodePool without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAwsNodePoolRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAwsNodePool =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createAwsNodePool(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createAwsNodePool without error using callback', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAwsNodePoolRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAwsNodePool =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAwsNodePool(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkemulticloud.v1.IAwsNodePool,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkemulticloud.v1.IAwsNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createAwsNodePool with call error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAwsNodePoolRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createAwsNodePool = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAwsNodePool(request), expectedError);
      assert(
        (client.innerApiCalls.createAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createAwsNodePool with LRO error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAwsNodePoolRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createAwsNodePool = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createAwsNodePool(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.createAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkCreateAwsNodePoolProgress without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateAwsNodePoolProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateAwsNodePoolProgress with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateAwsNodePoolProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateAwsNodePool', () => {
    it('invokes updateAwsNodePool without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAwsNodePoolRequest()
      );
      request.awsNodePool = {};
      request.awsNodePool.name = '';
      const expectedHeaderRequestParams = 'aws_node_pool.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAwsNodePool =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateAwsNodePool(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateAwsNodePool without error using callback', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAwsNodePoolRequest()
      );
      request.awsNodePool = {};
      request.awsNodePool.name = '';
      const expectedHeaderRequestParams = 'aws_node_pool.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAwsNodePool =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAwsNodePool(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkemulticloud.v1.IAwsNodePool,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkemulticloud.v1.IAwsNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateAwsNodePool with call error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAwsNodePoolRequest()
      );
      request.awsNodePool = {};
      request.awsNodePool.name = '';
      const expectedHeaderRequestParams = 'aws_node_pool.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAwsNodePool = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateAwsNodePool(request), expectedError);
      assert(
        (client.innerApiCalls.updateAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateAwsNodePool with LRO error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAwsNodePoolRequest()
      );
      request.awsNodePool = {};
      request.awsNodePool.name = '';
      const expectedHeaderRequestParams = 'aws_node_pool.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAwsNodePool = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateAwsNodePool(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.updateAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkUpdateAwsNodePoolProgress without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateAwsNodePoolProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateAwsNodePoolProgress with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateAwsNodePoolProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteAwsNodePool', () => {
    it('invokes deleteAwsNodePool without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAwsNodePoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAwsNodePool =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteAwsNodePool(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteAwsNodePool without error using callback', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAwsNodePoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAwsNodePool =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAwsNodePool(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteAwsNodePool with call error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAwsNodePoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAwsNodePool = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAwsNodePool(request), expectedError);
      assert(
        (client.innerApiCalls.deleteAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteAwsNodePool with LRO error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAwsNodePoolRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAwsNodePool = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteAwsNodePool(request);
      await assert.rejects(operation.promise(), expectedError);
      assert(
        (client.innerApiCalls.deleteAwsNodePool as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes checkDeleteAwsNodePoolProgress without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteAwsNodePoolProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteAwsNodePoolProgress with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteAwsNodePoolProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listAwsClusters', () => {
    it('invokes listAwsClusters without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsClustersRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsCluster()
        ),
      ];
      client.innerApiCalls.listAwsClusters = stubSimpleCall(expectedResponse);
      const [response] = await client.listAwsClusters(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listAwsClusters as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listAwsClusters without error using callback', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsClustersRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsCluster()
        ),
      ];
      client.innerApiCalls.listAwsClusters =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAwsClusters(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IAwsCluster[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listAwsClusters as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listAwsClusters with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsClustersRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listAwsClusters = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAwsClusters(request), expectedError);
      assert(
        (client.innerApiCalls.listAwsClusters as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listAwsClustersStream without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsClustersRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsCluster()
        ),
      ];
      client.descriptors.page.listAwsClusters.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAwsClustersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkemulticloud.v1.AwsCluster[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkemulticloud.v1.AwsCluster) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAwsClusters.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAwsClusters, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listAwsClusters.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listAwsClustersStream with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsClustersRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listAwsClusters.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAwsClustersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkemulticloud.v1.AwsCluster[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkemulticloud.v1.AwsCluster) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAwsClusters.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAwsClusters, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listAwsClusters.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listAwsClusters without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsClustersRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsCluster()
        ),
      ];
      client.descriptors.page.listAwsClusters.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.gkemulticloud.v1.IAwsCluster[] = [];
      const iterable = client.listAwsClustersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAwsClusters.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listAwsClusters.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listAwsClusters with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsClustersRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listAwsClusters.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAwsClustersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.gkemulticloud.v1.IAwsCluster[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAwsClusters.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listAwsClusters.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listAwsNodePools', () => {
    it('invokes listAwsNodePools without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsNodePoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
        ),
      ];
      client.innerApiCalls.listAwsNodePools = stubSimpleCall(expectedResponse);
      const [response] = await client.listAwsNodePools(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listAwsNodePools as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listAwsNodePools without error using callback', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsNodePoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
        ),
      ];
      client.innerApiCalls.listAwsNodePools =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAwsNodePools(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IAwsNodePool[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listAwsNodePools as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listAwsNodePools with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsNodePoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listAwsNodePools = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAwsNodePools(request), expectedError);
      assert(
        (client.innerApiCalls.listAwsNodePools as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listAwsNodePoolsStream without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsNodePoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
        ),
      ];
      client.descriptors.page.listAwsNodePools.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAwsNodePoolsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkemulticloud.v1.AwsNodePool[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkemulticloud.v1.AwsNodePool) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAwsNodePools.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAwsNodePools, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listAwsNodePools.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listAwsNodePoolsStream with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsNodePoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listAwsNodePools.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAwsNodePoolsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkemulticloud.v1.AwsNodePool[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkemulticloud.v1.AwsNodePool) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAwsNodePools.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAwsNodePools, request)
      );
      assert.strictEqual(
        (
          client.descriptors.page.listAwsNodePools.createStream as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listAwsNodePools without error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsNodePoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AwsNodePool()
        ),
      ];
      client.descriptors.page.listAwsNodePools.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.gkemulticloud.v1.IAwsNodePool[] = [];
      const iterable = client.listAwsNodePoolsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAwsNodePools.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listAwsNodePools.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listAwsNodePools with error', async () => {
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAwsNodePoolsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listAwsNodePools.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAwsNodePoolsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.gkemulticloud.v1.IAwsNodePool[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAwsNodePools.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (
          client.descriptors.page.listAwsNodePools.asyncIterate as SinonStub
        ).getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('Path templates', () => {
    describe('awsCluster', () => {
      const fakePath = '/rendered/path/awsCluster';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        aws_cluster: 'awsClusterValue',
      };
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.awsClusterPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.awsClusterPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('awsClusterPath', () => {
        const result = client.awsClusterPath(
          'projectValue',
          'locationValue',
          'awsClusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.awsClusterPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAwsClusterName', () => {
        const result = client.matchProjectFromAwsClusterName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.awsClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAwsClusterName', () => {
        const result = client.matchLocationFromAwsClusterName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.awsClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAwsClusterFromAwsClusterName', () => {
        const result = client.matchAwsClusterFromAwsClusterName(fakePath);
        assert.strictEqual(result, 'awsClusterValue');
        assert(
          (client.pathTemplates.awsClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('awsNodePool', () => {
      const fakePath = '/rendered/path/awsNodePool';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        aws_cluster: 'awsClusterValue',
        aws_node_pool: 'awsNodePoolValue',
      };
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.awsNodePoolPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.awsNodePoolPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('awsNodePoolPath', () => {
        const result = client.awsNodePoolPath(
          'projectValue',
          'locationValue',
          'awsClusterValue',
          'awsNodePoolValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.awsNodePoolPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAwsNodePoolName', () => {
        const result = client.matchProjectFromAwsNodePoolName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.awsNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAwsNodePoolName', () => {
        const result = client.matchLocationFromAwsNodePoolName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.awsNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAwsClusterFromAwsNodePoolName', () => {
        const result = client.matchAwsClusterFromAwsNodePoolName(fakePath);
        assert.strictEqual(result, 'awsClusterValue');
        assert(
          (client.pathTemplates.awsNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAwsNodePoolFromAwsNodePoolName', () => {
        const result = client.matchAwsNodePoolFromAwsNodePoolName(fakePath);
        assert.strictEqual(result, 'awsNodePoolValue');
        assert(
          (client.pathTemplates.awsNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('awsServerConfig', () => {
      const fakePath = '/rendered/path/awsServerConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.awsServerConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.awsServerConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('awsServerConfigPath', () => {
        const result = client.awsServerConfigPath(
          'projectValue',
          'locationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.awsServerConfigPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAwsServerConfigName', () => {
        const result = client.matchProjectFromAwsServerConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.awsServerConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAwsServerConfigName', () => {
        const result = client.matchLocationFromAwsServerConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.awsServerConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('azureClient', () => {
      const fakePath = '/rendered/path/azureClient';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        azure_client: 'azureClientValue',
      };
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.azureClientPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.azureClientPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('azureClientPath', () => {
        const result = client.azureClientPath(
          'projectValue',
          'locationValue',
          'azureClientValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.azureClientPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAzureClientName', () => {
        const result = client.matchProjectFromAzureClientName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.azureClientPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAzureClientName', () => {
        const result = client.matchLocationFromAzureClientName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.azureClientPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAzureClientFromAzureClientName', () => {
        const result = client.matchAzureClientFromAzureClientName(fakePath);
        assert.strictEqual(result, 'azureClientValue');
        assert(
          (client.pathTemplates.azureClientPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('azureCluster', () => {
      const fakePath = '/rendered/path/azureCluster';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        azure_cluster: 'azureClusterValue',
      };
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.azureClusterPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.azureClusterPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('azureClusterPath', () => {
        const result = client.azureClusterPath(
          'projectValue',
          'locationValue',
          'azureClusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.azureClusterPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAzureClusterName', () => {
        const result = client.matchProjectFromAzureClusterName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.azureClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAzureClusterName', () => {
        const result = client.matchLocationFromAzureClusterName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.azureClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAzureClusterFromAzureClusterName', () => {
        const result = client.matchAzureClusterFromAzureClusterName(fakePath);
        assert.strictEqual(result, 'azureClusterValue');
        assert(
          (client.pathTemplates.azureClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('azureNodePool', () => {
      const fakePath = '/rendered/path/azureNodePool';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        azure_cluster: 'azureClusterValue',
        azure_node_pool: 'azureNodePoolValue',
      };
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.azureNodePoolPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.azureNodePoolPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('azureNodePoolPath', () => {
        const result = client.azureNodePoolPath(
          'projectValue',
          'locationValue',
          'azureClusterValue',
          'azureNodePoolValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.azureNodePoolPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAzureNodePoolName', () => {
        const result = client.matchProjectFromAzureNodePoolName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.azureNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAzureNodePoolName', () => {
        const result = client.matchLocationFromAzureNodePoolName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.azureNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAzureClusterFromAzureNodePoolName', () => {
        const result = client.matchAzureClusterFromAzureNodePoolName(fakePath);
        assert.strictEqual(result, 'azureClusterValue');
        assert(
          (client.pathTemplates.azureNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAzureNodePoolFromAzureNodePoolName', () => {
        const result = client.matchAzureNodePoolFromAzureNodePoolName(fakePath);
        assert.strictEqual(result, 'azureNodePoolValue');
        assert(
          (client.pathTemplates.azureNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('azureServerConfig', () => {
      const fakePath = '/rendered/path/azureServerConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.azureServerConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.azureServerConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('azureServerConfigPath', () => {
        const result = client.azureServerConfigPath(
          'projectValue',
          'locationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.azureServerConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAzureServerConfigName', () => {
        const result = client.matchProjectFromAzureServerConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.azureServerConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAzureServerConfigName', () => {
        const result = client.matchLocationFromAzureServerConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.azureServerConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new awsclustersModule.v1.AwsClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
