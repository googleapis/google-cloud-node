// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as azureclustersModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.AzureClustersClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        azureclustersModule.v1.AzureClustersClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        azureclustersModule.v1.AzureClustersClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = azureclustersModule.v1.AzureClustersClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new azureclustersModule.v1.AzureClustersClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.azureClustersStub, undefined);
      await client.initialize();
      assert(client.azureClustersStub);
    });

    it('has close method for the initialized client', done => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.azureClustersStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.azureClustersStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getAzureClient', () => {
    it('invokes getAzureClient without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureClientRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureClientRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AzureClient()
      );
      client.innerApiCalls.getAzureClient = stubSimpleCall(expectedResponse);
      const [response] = await client.getAzureClient(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAzureClient as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAzureClient as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAzureClient without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureClientRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureClientRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AzureClient()
      );
      client.innerApiCalls.getAzureClient =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAzureClient(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IAzureClient | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAzureClient as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAzureClient as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAzureClient with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureClientRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureClientRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAzureClient = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAzureClient(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAzureClient as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAzureClient as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAzureClient with closed client', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureClientRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureClientRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAzureClient(request), expectedError);
    });
  });

  describe('getAzureCluster', () => {
    it('invokes getAzureCluster without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AzureCluster()
      );
      client.innerApiCalls.getAzureCluster = stubSimpleCall(expectedResponse);
      const [response] = await client.getAzureCluster(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAzureCluster without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AzureCluster()
      );
      client.innerApiCalls.getAzureCluster =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAzureCluster(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IAzureCluster | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAzureCluster with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAzureCluster = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAzureCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAzureCluster with closed client', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAzureCluster(request), expectedError);
    });
  });

  describe('generateAzureAccessToken', () => {
    it('invokes generateAzureAccessToken without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GenerateAzureAccessTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GenerateAzureAccessTokenRequest',
        ['azureCluster']
      );
      request.azureCluster = defaultValue1;
      const expectedHeaderRequestParams = `azure_cluster=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GenerateAzureAccessTokenResponse()
      );
      client.innerApiCalls.generateAzureAccessToken =
        stubSimpleCall(expectedResponse);
      const [response] = await client.generateAzureAccessToken(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateAzureAccessToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateAzureAccessToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateAzureAccessToken without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GenerateAzureAccessTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GenerateAzureAccessTokenRequest',
        ['azureCluster']
      );
      request.azureCluster = defaultValue1;
      const expectedHeaderRequestParams = `azure_cluster=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GenerateAzureAccessTokenResponse()
      );
      client.innerApiCalls.generateAzureAccessToken =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.generateAzureAccessToken(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateAzureAccessToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateAzureAccessToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateAzureAccessToken with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GenerateAzureAccessTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GenerateAzureAccessTokenRequest',
        ['azureCluster']
      );
      request.azureCluster = defaultValue1;
      const expectedHeaderRequestParams = `azure_cluster=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.generateAzureAccessToken = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.generateAzureAccessToken(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.generateAzureAccessToken as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateAzureAccessToken as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateAzureAccessToken with closed client', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GenerateAzureAccessTokenRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GenerateAzureAccessTokenRequest',
        ['azureCluster']
      );
      request.azureCluster = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.generateAzureAccessToken(request),
        expectedError
      );
    });
  });

  describe('getAzureNodePool', () => {
    it('invokes getAzureNodePool without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureNodePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureNodePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
      );
      client.innerApiCalls.getAzureNodePool = stubSimpleCall(expectedResponse);
      const [response] = await client.getAzureNodePool(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAzureNodePool without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureNodePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureNodePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
      );
      client.innerApiCalls.getAzureNodePool =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAzureNodePool(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IAzureNodePool | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAzureNodePool with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureNodePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureNodePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAzureNodePool = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAzureNodePool(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAzureNodePool with closed client', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureNodePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureNodePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAzureNodePool(request), expectedError);
    });
  });

  describe('getAzureServerConfig', () => {
    it('invokes getAzureServerConfig without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureServerConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AzureServerConfig()
      );
      client.innerApiCalls.getAzureServerConfig =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getAzureServerConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAzureServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAzureServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAzureServerConfig without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureServerConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.AzureServerConfig()
      );
      client.innerApiCalls.getAzureServerConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAzureServerConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IAzureServerConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAzureServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAzureServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAzureServerConfig with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureServerConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAzureServerConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getAzureServerConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getAzureServerConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAzureServerConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAzureServerConfig with closed client', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.GetAzureServerConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.GetAzureServerConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getAzureServerConfig(request), expectedError);
    });
  });

  describe('createAzureClient', () => {
    it('invokes createAzureClient without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAzureClientRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.CreateAzureClientRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAzureClient =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createAzureClient(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAzureClient as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAzureClient as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAzureClient without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAzureClientRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.CreateAzureClientRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAzureClient =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAzureClient(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkemulticloud.v1.IAzureClient,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureClient,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAzureClient as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAzureClient as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAzureClient with call error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAzureClientRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.CreateAzureClientRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAzureClient = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAzureClient(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAzureClient as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAzureClient as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAzureClient with LRO error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAzureClientRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.CreateAzureClientRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAzureClient = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createAzureClient(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAzureClient as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAzureClient as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateAzureClientProgress without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateAzureClientProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateAzureClientProgress with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateAzureClientProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteAzureClient', () => {
    it('invokes deleteAzureClient without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAzureClientRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.DeleteAzureClientRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAzureClient =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteAzureClient(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAzureClient as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAzureClient as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAzureClient without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAzureClientRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.DeleteAzureClientRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAzureClient =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAzureClient(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAzureClient as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAzureClient as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAzureClient with call error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAzureClientRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.DeleteAzureClientRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAzureClient = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAzureClient(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAzureClient as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAzureClient as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAzureClient with LRO error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAzureClientRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.DeleteAzureClientRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAzureClient = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteAzureClient(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAzureClient as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAzureClient as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteAzureClientProgress without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteAzureClientProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteAzureClientProgress with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteAzureClientProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createAzureCluster', () => {
    it('invokes createAzureCluster without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAzureClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.CreateAzureClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAzureCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createAzureCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAzureCluster without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAzureClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.CreateAzureClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAzureCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAzureCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkemulticloud.v1.IAzureCluster,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAzureCluster with call error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAzureClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.CreateAzureClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAzureCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAzureCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAzureCluster with LRO error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAzureClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.CreateAzureClusterRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAzureCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createAzureCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateAzureClusterProgress without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateAzureClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateAzureClusterProgress with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateAzureClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateAzureCluster', () => {
    it('invokes updateAzureCluster without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAzureClusterRequest()
      );
      request.azureCluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.UpdateAzureClusterRequest',
        ['azureCluster', 'name']
      );
      request.azureCluster.name = defaultValue1;
      const expectedHeaderRequestParams = `azure_cluster.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAzureCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateAzureCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAzureCluster without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAzureClusterRequest()
      );
      request.azureCluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.UpdateAzureClusterRequest',
        ['azureCluster', 'name']
      );
      request.azureCluster.name = defaultValue1;
      const expectedHeaderRequestParams = `azure_cluster.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAzureCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAzureCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkemulticloud.v1.IAzureCluster,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAzureCluster with call error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAzureClusterRequest()
      );
      request.azureCluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.UpdateAzureClusterRequest',
        ['azureCluster', 'name']
      );
      request.azureCluster.name = defaultValue1;
      const expectedHeaderRequestParams = `azure_cluster.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAzureCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateAzureCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAzureCluster with LRO error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAzureClusterRequest()
      );
      request.azureCluster ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.UpdateAzureClusterRequest',
        ['azureCluster', 'name']
      );
      request.azureCluster.name = defaultValue1;
      const expectedHeaderRequestParams = `azure_cluster.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAzureCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateAzureCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateAzureClusterProgress without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateAzureClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateAzureClusterProgress with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateAzureClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteAzureCluster', () => {
    it('invokes deleteAzureCluster without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAzureClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.DeleteAzureClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAzureCluster =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteAzureCluster(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAzureCluster without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAzureClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.DeleteAzureClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAzureCluster =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAzureCluster(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAzureCluster with call error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAzureClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.DeleteAzureClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAzureCluster = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAzureCluster(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAzureCluster with LRO error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAzureClusterRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.DeleteAzureClusterRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAzureCluster = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteAzureCluster(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAzureCluster as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAzureCluster as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteAzureClusterProgress without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteAzureClusterProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteAzureClusterProgress with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteAzureClusterProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createAzureNodePool', () => {
    it('invokes createAzureNodePool without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAzureNodePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.CreateAzureNodePoolRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAzureNodePool =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createAzureNodePool(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAzureNodePool without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAzureNodePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.CreateAzureNodePoolRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAzureNodePool =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAzureNodePool(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAzureNodePool with call error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAzureNodePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.CreateAzureNodePoolRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAzureNodePool = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createAzureNodePool(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAzureNodePool with LRO error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.CreateAzureNodePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.CreateAzureNodePoolRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAzureNodePool = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createAzureNodePool(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateAzureNodePoolProgress without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateAzureNodePoolProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateAzureNodePoolProgress with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateAzureNodePoolProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateAzureNodePool', () => {
    it('invokes updateAzureNodePool without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAzureNodePoolRequest()
      );
      request.azureNodePool ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.UpdateAzureNodePoolRequest',
        ['azureNodePool', 'name']
      );
      request.azureNodePool.name = defaultValue1;
      const expectedHeaderRequestParams = `azure_node_pool.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAzureNodePool =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateAzureNodePool(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAzureNodePool without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAzureNodePoolRequest()
      );
      request.azureNodePool ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.UpdateAzureNodePoolRequest',
        ['azureNodePool', 'name']
      );
      request.azureNodePool.name = defaultValue1;
      const expectedHeaderRequestParams = `azure_node_pool.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAzureNodePool =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAzureNodePool(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAzureNodePool with call error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAzureNodePoolRequest()
      );
      request.azureNodePool ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.UpdateAzureNodePoolRequest',
        ['azureNodePool', 'name']
      );
      request.azureNodePool.name = defaultValue1;
      const expectedHeaderRequestParams = `azure_node_pool.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAzureNodePool = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateAzureNodePool(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAzureNodePool with LRO error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.UpdateAzureNodePoolRequest()
      );
      request.azureNodePool ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.UpdateAzureNodePoolRequest',
        ['azureNodePool', 'name']
      );
      request.azureNodePool.name = defaultValue1;
      const expectedHeaderRequestParams = `azure_node_pool.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAzureNodePool = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateAzureNodePool(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateAzureNodePoolProgress without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateAzureNodePoolProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateAzureNodePoolProgress with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateAzureNodePoolProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteAzureNodePool', () => {
    it('invokes deleteAzureNodePool without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAzureNodePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.DeleteAzureNodePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAzureNodePool =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteAzureNodePool(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAzureNodePool without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAzureNodePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.DeleteAzureNodePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAzureNodePool =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAzureNodePool(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.gkemulticloud.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAzureNodePool with call error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAzureNodePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.DeleteAzureNodePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAzureNodePool = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteAzureNodePool(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAzureNodePool with LRO error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.DeleteAzureNodePoolRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.DeleteAzureNodePoolRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAzureNodePool = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteAzureNodePool(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAzureNodePool as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAzureNodePool as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteAzureNodePoolProgress without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteAzureNodePoolProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteAzureNodePoolProgress with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteAzureNodePoolProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listAzureClients', () => {
    it('invokes listAzureClients without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClientsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClientsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureClient()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureClient()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureClient()
        ),
      ];
      client.innerApiCalls.listAzureClients = stubSimpleCall(expectedResponse);
      const [response] = await client.listAzureClients(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAzureClients as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAzureClients as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAzureClients without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClientsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClientsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureClient()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureClient()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureClient()
        ),
      ];
      client.innerApiCalls.listAzureClients =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAzureClients(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IAzureClient[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAzureClients as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAzureClients as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAzureClients with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClientsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClientsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAzureClients = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAzureClients(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listAzureClients as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAzureClients as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAzureClientsStream without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClientsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClientsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureClient()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureClient()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureClient()
        ),
      ];
      client.descriptors.page.listAzureClients.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAzureClientsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkemulticloud.v1.AzureClient[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkemulticloud.v1.AzureClient) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAzureClients.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAzureClients, request)
      );
      assert(
        (client.descriptors.page.listAzureClients.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAzureClientsStream with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClientsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClientsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAzureClients.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAzureClientsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkemulticloud.v1.AzureClient[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkemulticloud.v1.AzureClient) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAzureClients.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAzureClients, request)
      );
      assert(
        (client.descriptors.page.listAzureClients.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAzureClients without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClientsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClientsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureClient()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureClient()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureClient()
        ),
      ];
      client.descriptors.page.listAzureClients.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.gkemulticloud.v1.IAzureClient[] = [];
      const iterable = client.listAzureClientsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAzureClients.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAzureClients.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAzureClients with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClientsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClientsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAzureClients.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAzureClientsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.gkemulticloud.v1.IAzureClient[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAzureClients.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAzureClients.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listAzureClusters', () => {
    it('invokes listAzureClusters without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureCluster()
        ),
      ];
      client.innerApiCalls.listAzureClusters = stubSimpleCall(expectedResponse);
      const [response] = await client.listAzureClusters(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAzureClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAzureClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAzureClusters without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureCluster()
        ),
      ];
      client.innerApiCalls.listAzureClusters =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAzureClusters(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.gkemulticloud.v1.IAzureCluster[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAzureClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAzureClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAzureClusters with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAzureClusters = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAzureClusters(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listAzureClusters as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAzureClusters as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAzureClustersStream without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureCluster()
        ),
      ];
      client.descriptors.page.listAzureClusters.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAzureClustersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkemulticloud.v1.AzureCluster[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkemulticloud.v1.AzureCluster) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAzureClusters.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAzureClusters, request)
      );
      assert(
        (client.descriptors.page.listAzureClusters.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAzureClustersStream with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAzureClusters.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAzureClustersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkemulticloud.v1.AzureCluster[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkemulticloud.v1.AzureCluster) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAzureClusters.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAzureClusters, request)
      );
      assert(
        (client.descriptors.page.listAzureClusters.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAzureClusters without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureCluster()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureCluster()
        ),
      ];
      client.descriptors.page.listAzureClusters.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.gkemulticloud.v1.IAzureCluster[] =
        [];
      const iterable = client.listAzureClustersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAzureClusters.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAzureClusters.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAzureClusters with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureClustersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureClustersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAzureClusters.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAzureClustersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.gkemulticloud.v1.IAzureCluster[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAzureClusters.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAzureClusters.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listAzureNodePools', () => {
    it('invokes listAzureNodePools without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
        ),
      ];
      client.innerApiCalls.listAzureNodePools =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAzureNodePools(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAzureNodePools as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAzureNodePools as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAzureNodePools without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
        ),
      ];
      client.innerApiCalls.listAzureNodePools =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAzureNodePools(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.gkemulticloud.v1.IAzureNodePool[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAzureNodePools as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAzureNodePools as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAzureNodePools with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAzureNodePools = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listAzureNodePools(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listAzureNodePools as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAzureNodePools as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAzureNodePoolsStream without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
        ),
      ];
      client.descriptors.page.listAzureNodePools.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAzureNodePoolsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkemulticloud.v1.AzureNodePool[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkemulticloud.v1.AzureNodePool) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAzureNodePools.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAzureNodePools, request)
      );
      assert(
        (client.descriptors.page.listAzureNodePools.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAzureNodePoolsStream with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAzureNodePools.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAzureNodePoolsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.gkemulticloud.v1.AzureNodePool[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.gkemulticloud.v1.AzureNodePool) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listAzureNodePools.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAzureNodePools, request)
      );
      assert(
        (client.descriptors.page.listAzureNodePools.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAzureNodePools without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
        ),
        generateSampleMessage(
          new protos.google.cloud.gkemulticloud.v1.AzureNodePool()
        ),
      ];
      client.descriptors.page.listAzureNodePools.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.gkemulticloud.v1.IAzureNodePool[] =
        [];
      const iterable = client.listAzureNodePoolsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAzureNodePools.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAzureNodePools.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAzureNodePools with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.gkemulticloud.v1.ListAzureNodePoolsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAzureNodePools.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAzureNodePoolsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.gkemulticloud.v1.IAzureNodePool[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAzureNodePools.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listAzureNodePools.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('attachedCluster', () => {
      const fakePath = '/rendered/path/attachedCluster';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        attached_cluster: 'attachedClusterValue',
      };
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.attachedClusterPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.attachedClusterPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('attachedClusterPath', () => {
        const result = client.attachedClusterPath(
          'projectValue',
          'locationValue',
          'attachedClusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.attachedClusterPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAttachedClusterName', () => {
        const result = client.matchProjectFromAttachedClusterName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.attachedClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAttachedClusterName', () => {
        const result = client.matchLocationFromAttachedClusterName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.attachedClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAttachedClusterFromAttachedClusterName', () => {
        const result =
          client.matchAttachedClusterFromAttachedClusterName(fakePath);
        assert.strictEqual(result, 'attachedClusterValue');
        assert(
          (client.pathTemplates.attachedClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('attachedServerConfig', () => {
      const fakePath = '/rendered/path/attachedServerConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.attachedServerConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.attachedServerConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('attachedServerConfigPath', () => {
        const result = client.attachedServerConfigPath(
          'projectValue',
          'locationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.attachedServerConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAttachedServerConfigName', () => {
        const result =
          client.matchProjectFromAttachedServerConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.attachedServerConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAttachedServerConfigName', () => {
        const result =
          client.matchLocationFromAttachedServerConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.attachedServerConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('awsCluster', () => {
      const fakePath = '/rendered/path/awsCluster';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        aws_cluster: 'awsClusterValue',
      };
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.awsClusterPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.awsClusterPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('awsClusterPath', () => {
        const result = client.awsClusterPath(
          'projectValue',
          'locationValue',
          'awsClusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.awsClusterPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAwsClusterName', () => {
        const result = client.matchProjectFromAwsClusterName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.awsClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAwsClusterName', () => {
        const result = client.matchLocationFromAwsClusterName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.awsClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAwsClusterFromAwsClusterName', () => {
        const result = client.matchAwsClusterFromAwsClusterName(fakePath);
        assert.strictEqual(result, 'awsClusterValue');
        assert(
          (client.pathTemplates.awsClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('awsNodePool', () => {
      const fakePath = '/rendered/path/awsNodePool';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        aws_cluster: 'awsClusterValue',
        aws_node_pool: 'awsNodePoolValue',
      };
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.awsNodePoolPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.awsNodePoolPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('awsNodePoolPath', () => {
        const result = client.awsNodePoolPath(
          'projectValue',
          'locationValue',
          'awsClusterValue',
          'awsNodePoolValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.awsNodePoolPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAwsNodePoolName', () => {
        const result = client.matchProjectFromAwsNodePoolName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.awsNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAwsNodePoolName', () => {
        const result = client.matchLocationFromAwsNodePoolName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.awsNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAwsClusterFromAwsNodePoolName', () => {
        const result = client.matchAwsClusterFromAwsNodePoolName(fakePath);
        assert.strictEqual(result, 'awsClusterValue');
        assert(
          (client.pathTemplates.awsNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAwsNodePoolFromAwsNodePoolName', () => {
        const result = client.matchAwsNodePoolFromAwsNodePoolName(fakePath);
        assert.strictEqual(result, 'awsNodePoolValue');
        assert(
          (client.pathTemplates.awsNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('awsServerConfig', () => {
      const fakePath = '/rendered/path/awsServerConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.awsServerConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.awsServerConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('awsServerConfigPath', () => {
        const result = client.awsServerConfigPath(
          'projectValue',
          'locationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.awsServerConfigPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAwsServerConfigName', () => {
        const result = client.matchProjectFromAwsServerConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.awsServerConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAwsServerConfigName', () => {
        const result = client.matchLocationFromAwsServerConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.awsServerConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('azureClient', () => {
      const fakePath = '/rendered/path/azureClient';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        azure_client: 'azureClientValue',
      };
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.azureClientPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.azureClientPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('azureClientPath', () => {
        const result = client.azureClientPath(
          'projectValue',
          'locationValue',
          'azureClientValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.azureClientPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAzureClientName', () => {
        const result = client.matchProjectFromAzureClientName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.azureClientPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAzureClientName', () => {
        const result = client.matchLocationFromAzureClientName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.azureClientPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAzureClientFromAzureClientName', () => {
        const result = client.matchAzureClientFromAzureClientName(fakePath);
        assert.strictEqual(result, 'azureClientValue');
        assert(
          (client.pathTemplates.azureClientPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('azureCluster', () => {
      const fakePath = '/rendered/path/azureCluster';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        azure_cluster: 'azureClusterValue',
      };
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.azureClusterPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.azureClusterPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('azureClusterPath', () => {
        const result = client.azureClusterPath(
          'projectValue',
          'locationValue',
          'azureClusterValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.azureClusterPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAzureClusterName', () => {
        const result = client.matchProjectFromAzureClusterName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.azureClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAzureClusterName', () => {
        const result = client.matchLocationFromAzureClusterName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.azureClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAzureClusterFromAzureClusterName', () => {
        const result = client.matchAzureClusterFromAzureClusterName(fakePath);
        assert.strictEqual(result, 'azureClusterValue');
        assert(
          (client.pathTemplates.azureClusterPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('azureNodePool', () => {
      const fakePath = '/rendered/path/azureNodePool';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        azure_cluster: 'azureClusterValue',
        azure_node_pool: 'azureNodePoolValue',
      };
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.azureNodePoolPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.azureNodePoolPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('azureNodePoolPath', () => {
        const result = client.azureNodePoolPath(
          'projectValue',
          'locationValue',
          'azureClusterValue',
          'azureNodePoolValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.azureNodePoolPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAzureNodePoolName', () => {
        const result = client.matchProjectFromAzureNodePoolName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.azureNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAzureNodePoolName', () => {
        const result = client.matchLocationFromAzureNodePoolName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.azureNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAzureClusterFromAzureNodePoolName', () => {
        const result = client.matchAzureClusterFromAzureNodePoolName(fakePath);
        assert.strictEqual(result, 'azureClusterValue');
        assert(
          (client.pathTemplates.azureNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAzureNodePoolFromAzureNodePoolName', () => {
        const result = client.matchAzureNodePoolFromAzureNodePoolName(fakePath);
        assert.strictEqual(result, 'azureNodePoolValue');
        assert(
          (client.pathTemplates.azureNodePoolPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('azureServerConfig', () => {
      const fakePath = '/rendered/path/azureServerConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.azureServerConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.azureServerConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('azureServerConfigPath', () => {
        const result = client.azureServerConfigPath(
          'projectValue',
          'locationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.azureServerConfigPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAzureServerConfigName', () => {
        const result = client.matchProjectFromAzureServerConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.azureServerConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAzureServerConfigName', () => {
        const result = client.matchLocationFromAzureServerConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.azureServerConfigPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new azureclustersModule.v1.AzureClustersClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
