// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/azure_clusters_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './azure_clusters_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The AzureClusters API provides a single centrally managed service
 *  to create and manage Anthos clusters that run on Azure infrastructure.
 * @class
 * @memberof v1
 */
export class AzureClustersClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  azureClustersStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AzureClustersClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new AzureClustersClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof AzureClustersClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      attachedClusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/attachedClusters/{attached_cluster}'
      ),
      attachedServerConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/attachedServerConfig'
      ),
      awsClusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/awsClusters/{aws_cluster}'
      ),
      awsNodePoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/awsClusters/{aws_cluster}/awsNodePools/{aws_node_pool}'
      ),
      awsServerConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/awsServerConfig'
      ),
      azureClientPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/azureClients/{azure_client}'
      ),
      azureClusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/azureClusters/{azure_cluster}'
      ),
      azureNodePoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/azureClusters/{azure_cluster}/azureNodePools/{azure_node_pool}'
      ),
      azureServerConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/azureServerConfig'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listAzureClients: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'azureClients'
      ),
      listAzureClusters: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'azureClusters'
      ),
      listAzureNodePools: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'azureNodePools'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createAzureClientResponse = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.AzureClient'
    ) as gax.protobuf.Type;
    const createAzureClientMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteAzureClientResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteAzureClientMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createAzureClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.AzureCluster'
    ) as gax.protobuf.Type;
    const createAzureClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateAzureClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.AzureCluster'
    ) as gax.protobuf.Type;
    const updateAzureClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteAzureClusterResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteAzureClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createAzureNodePoolResponse = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.AzureNodePool'
    ) as gax.protobuf.Type;
    const createAzureNodePoolMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateAzureNodePoolResponse = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.AzureNodePool'
    ) as gax.protobuf.Type;
    const updateAzureNodePoolMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteAzureNodePoolResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteAzureNodePoolMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createAzureClient: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createAzureClientResponse.decode.bind(createAzureClientResponse),
        createAzureClientMetadata.decode.bind(createAzureClientMetadata)
      ),
      deleteAzureClient: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteAzureClientResponse.decode.bind(deleteAzureClientResponse),
        deleteAzureClientMetadata.decode.bind(deleteAzureClientMetadata)
      ),
      createAzureCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createAzureClusterResponse.decode.bind(createAzureClusterResponse),
        createAzureClusterMetadata.decode.bind(createAzureClusterMetadata)
      ),
      updateAzureCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateAzureClusterResponse.decode.bind(updateAzureClusterResponse),
        updateAzureClusterMetadata.decode.bind(updateAzureClusterMetadata)
      ),
      deleteAzureCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteAzureClusterResponse.decode.bind(deleteAzureClusterResponse),
        deleteAzureClusterMetadata.decode.bind(deleteAzureClusterMetadata)
      ),
      createAzureNodePool: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createAzureNodePoolResponse.decode.bind(createAzureNodePoolResponse),
        createAzureNodePoolMetadata.decode.bind(createAzureNodePoolMetadata)
      ),
      updateAzureNodePool: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateAzureNodePoolResponse.decode.bind(updateAzureNodePoolResponse),
        updateAzureNodePoolMetadata.decode.bind(updateAzureNodePoolMetadata)
      ),
      deleteAzureNodePool: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteAzureNodePoolResponse.decode.bind(deleteAzureNodePoolResponse),
        deleteAzureNodePoolMetadata.decode.bind(deleteAzureNodePoolMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.gkemulticloud.v1.AzureClusters',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.azureClustersStub) {
      return this.azureClustersStub;
    }

    // Put together the "service stub" for
    // google.cloud.gkemulticloud.v1.AzureClusters.
    this.azureClustersStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.gkemulticloud.v1.AzureClusters'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.gkemulticloud.v1.AzureClusters,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const azureClustersStubMethods = [
      'createAzureClient',
      'getAzureClient',
      'listAzureClients',
      'deleteAzureClient',
      'createAzureCluster',
      'updateAzureCluster',
      'getAzureCluster',
      'listAzureClusters',
      'deleteAzureCluster',
      'generateAzureAccessToken',
      'createAzureNodePool',
      'updateAzureNodePool',
      'getAzureNodePool',
      'listAzureNodePools',
      'deleteAzureNodePool',
      'getAzureServerConfig',
    ];
    for (const methodName of azureClustersStubMethods) {
      const callPromise = this.azureClustersStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.azureClustersStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'gkemulticloud.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'gkemulticloud.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Describes a specific
   * {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient} resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the
   *   {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient} resource to
   *   describe.
   *
   *   {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient} names are
   *   formatted as
   *   `projects/<project-id>/locations/<region>/azureClients/<client-id>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AzureClient]{@link google.cloud.gkemulticloud.v1.AzureClient}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.get_azure_client.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_GetAzureClient_async
   */
  getAzureClient(
    request?: protos.google.cloud.gkemulticloud.v1.IGetAzureClientRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureClient,
      protos.google.cloud.gkemulticloud.v1.IGetAzureClientRequest | undefined,
      {} | undefined
    ]
  >;
  getAzureClient(
    request: protos.google.cloud.gkemulticloud.v1.IGetAzureClientRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IAzureClient,
      | protos.google.cloud.gkemulticloud.v1.IGetAzureClientRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAzureClient(
    request: protos.google.cloud.gkemulticloud.v1.IGetAzureClientRequest,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IAzureClient,
      | protos.google.cloud.gkemulticloud.v1.IGetAzureClientRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAzureClient(
    request?: protos.google.cloud.gkemulticloud.v1.IGetAzureClientRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkemulticloud.v1.IAzureClient,
          | protos.google.cloud.gkemulticloud.v1.IGetAzureClientRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkemulticloud.v1.IAzureClient,
      | protos.google.cloud.gkemulticloud.v1.IGetAzureClientRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureClient,
      protos.google.cloud.gkemulticloud.v1.IGetAzureClientRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAzureClient(request, options, callback);
  }
  /**
   * Describes a specific
   * {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the
   *   {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} resource to
   *   describe.
   *
   *   `AzureCluster` names are formatted as
   *   `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AzureCluster]{@link google.cloud.gkemulticloud.v1.AzureCluster}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.get_azure_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_GetAzureCluster_async
   */
  getAzureCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IGetAzureClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureCluster,
      protos.google.cloud.gkemulticloud.v1.IGetAzureClusterRequest | undefined,
      {} | undefined
    ]
  >;
  getAzureCluster(
    request: protos.google.cloud.gkemulticloud.v1.IGetAzureClusterRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IAzureCluster,
      | protos.google.cloud.gkemulticloud.v1.IGetAzureClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAzureCluster(
    request: protos.google.cloud.gkemulticloud.v1.IGetAzureClusterRequest,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IAzureCluster,
      | protos.google.cloud.gkemulticloud.v1.IGetAzureClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAzureCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IGetAzureClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkemulticloud.v1.IAzureCluster,
          | protos.google.cloud.gkemulticloud.v1.IGetAzureClusterRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkemulticloud.v1.IAzureCluster,
      | protos.google.cloud.gkemulticloud.v1.IGetAzureClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureCluster,
      protos.google.cloud.gkemulticloud.v1.IGetAzureClusterRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAzureCluster(request, options, callback);
  }
  /**
   * Generates a short-lived access token to authenticate to a given
   * {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.azureCluster
   *   Required. The name of the
   *   {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} resource to
   *   authenticate to.
   *
   *   `AzureCluster` names are formatted as
   *   `projects/<project-id>/locations/<region>/AzureClusters/<cluster-id>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GenerateAzureAccessTokenResponse]{@link google.cloud.gkemulticloud.v1.GenerateAzureAccessTokenResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.generate_azure_access_token.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_GenerateAzureAccessToken_async
   */
  generateAzureAccessToken(
    request?: protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenResponse,
      (
        | protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  generateAzureAccessToken(
    request: protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenResponse,
      | protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateAzureAccessToken(
    request: protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenRequest,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenResponse,
      | protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateAzureAccessToken(
    request?: protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenResponse,
          | protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenResponse,
      | protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenResponse,
      (
        | protos.google.cloud.gkemulticloud.v1.IGenerateAzureAccessTokenRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        azure_cluster: request.azureCluster ?? '',
      });
    this.initialize();
    return this.innerApiCalls.generateAzureAccessToken(
      request,
      options,
      callback
    );
  }
  /**
   * Describes a specific
   * {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool} resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the
   *   {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool} resource to
   *   describe.
   *
   *   `AzureNodePool` names are formatted as
   *   `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>/azureNodePools/<node-pool-id>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AzureNodePool]{@link google.cloud.gkemulticloud.v1.AzureNodePool}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.get_azure_node_pool.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_GetAzureNodePool_async
   */
  getAzureNodePool(
    request?: protos.google.cloud.gkemulticloud.v1.IGetAzureNodePoolRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
      protos.google.cloud.gkemulticloud.v1.IGetAzureNodePoolRequest | undefined,
      {} | undefined
    ]
  >;
  getAzureNodePool(
    request: protos.google.cloud.gkemulticloud.v1.IGetAzureNodePoolRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
      | protos.google.cloud.gkemulticloud.v1.IGetAzureNodePoolRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAzureNodePool(
    request: protos.google.cloud.gkemulticloud.v1.IGetAzureNodePoolRequest,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
      | protos.google.cloud.gkemulticloud.v1.IGetAzureNodePoolRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAzureNodePool(
    request?: protos.google.cloud.gkemulticloud.v1.IGetAzureNodePoolRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
          | protos.google.cloud.gkemulticloud.v1.IGetAzureNodePoolRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
      | protos.google.cloud.gkemulticloud.v1.IGetAzureNodePoolRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
      protos.google.cloud.gkemulticloud.v1.IGetAzureNodePoolRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAzureNodePool(request, options, callback);
  }
  /**
   * Returns information, such as supported Azure regions and Kubernetes
   * versions, on a given Google Cloud location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the
   *   {@link google.cloud.gkemulticloud.v1.AzureServerConfig|AzureServerConfig}
   *   resource to describe.
   *
   *   `AzureServerConfig` names are formatted as
   *   `projects/<project-id>/locations/<region>/azureServerConfig`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AzureServerConfig]{@link google.cloud.gkemulticloud.v1.AzureServerConfig}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.get_azure_server_config.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_GetAzureServerConfig_async
   */
  getAzureServerConfig(
    request?: protos.google.cloud.gkemulticloud.v1.IGetAzureServerConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureServerConfig,
      (
        | protos.google.cloud.gkemulticloud.v1.IGetAzureServerConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getAzureServerConfig(
    request: protos.google.cloud.gkemulticloud.v1.IGetAzureServerConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IAzureServerConfig,
      | protos.google.cloud.gkemulticloud.v1.IGetAzureServerConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAzureServerConfig(
    request: protos.google.cloud.gkemulticloud.v1.IGetAzureServerConfigRequest,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IAzureServerConfig,
      | protos.google.cloud.gkemulticloud.v1.IGetAzureServerConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAzureServerConfig(
    request?: protos.google.cloud.gkemulticloud.v1.IGetAzureServerConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkemulticloud.v1.IAzureServerConfig,
          | protos.google.cloud.gkemulticloud.v1.IGetAzureServerConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkemulticloud.v1.IAzureServerConfig,
      | protos.google.cloud.gkemulticloud.v1.IGetAzureServerConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureServerConfig,
      (
        | protos.google.cloud.gkemulticloud.v1.IGetAzureServerConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAzureServerConfig(request, options, callback);
  }

  /**
   * Creates a new {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient}
   * resource on a given Google Cloud project and region.
   *
   * `AzureClient` resources hold client authentication
   * information needed by the Anthos Multicloud API to manage Azure resources
   * on your Azure subscription on your behalf.
   *
   * If successful, the response contains a newly created
   * {@link google.longrunning.Operation|Operation} resource that can be
   * described to track the status of the operation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location where this
   *   {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient} resource will be
   *   created.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {google.cloud.gkemulticloud.v1.AzureClient} request.azureClient
   *   Required. The specification of the
   *   {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient} to create.
   * @param {string} request.azureClientId
   *   Required. A client provided ID the resource. Must be unique within the
   *   parent resource.
   *
   *   The provided ID will be part of the
   *   {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient} resource name
   *   formatted as
   *   `projects/<project-id>/locations/<region>/azureClients/<client-id>`.
   *
   *   Valid characters are `/{@link 0-9|a-z}-/`. Cannot be longer than 63 characters.
   * @param {boolean} request.validateOnly
   *   If set, only validate the request, but do not actually create the client.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.create_azure_client.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_CreateAzureClient_async
   */
  createAzureClient(
    request?: protos.google.cloud.gkemulticloud.v1.ICreateAzureClientRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureClient,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createAzureClient(
    request: protos.google.cloud.gkemulticloud.v1.ICreateAzureClientRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureClient,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAzureClient(
    request: protos.google.cloud.gkemulticloud.v1.ICreateAzureClientRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureClient,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAzureClient(
    request?: protos.google.cloud.gkemulticloud.v1.ICreateAzureClientRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkemulticloud.v1.IAzureClient,
            protos.google.cloud.gkemulticloud.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureClient,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureClient,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createAzureClient(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createAzureClient()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.create_azure_client.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_CreateAzureClient_async
   */
  async checkCreateAzureClientProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkemulticloud.v1.AzureClient,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createAzureClient,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkemulticloud.v1.AzureClient,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a specific {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient}
   * resource.
   *
   * If the client is used by one or more clusters, deletion will
   * fail and a `FAILED_PRECONDITION` error will be returned.
   *
   * If successful, the response contains a newly created
   * {@link google.longrunning.Operation|Operation} resource that can be
   * described to track the status of the operation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name the
   *   {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient} to delete.
   *
   *   {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient} names are
   *   formatted as
   *   `projects/<project-id>/locations/<region>/azureClients/<client-id>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {boolean} request.allowMissing
   *   If set to true, and the
   *   {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient} resource is not
   *   found, the request will succeed but no action will be taken on the server
   *   and a completed {@link google.longrunning.Operation|Operation} will be returned.
   *
   *   Useful for idempotent deletion.
   * @param {boolean} request.validateOnly
   *   If set, only validate the request, but do not actually delete the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.delete_azure_client.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_DeleteAzureClient_async
   */
  deleteAzureClient(
    request?: protos.google.cloud.gkemulticloud.v1.IDeleteAzureClientRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteAzureClient(
    request: protos.google.cloud.gkemulticloud.v1.IDeleteAzureClientRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAzureClient(
    request: protos.google.cloud.gkemulticloud.v1.IDeleteAzureClientRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAzureClient(
    request?: protos.google.cloud.gkemulticloud.v1.IDeleteAzureClientRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gkemulticloud.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteAzureClient(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteAzureClient()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.delete_azure_client.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_DeleteAzureClient_async
   */
  async checkDeleteAzureClientProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteAzureClient,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster}
   * resource on a given GCP project and region.
   *
   * If successful, the response contains a newly created
   * {@link google.longrunning.Operation|Operation} resource that can be
   * described to track the status of the operation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location where this
   *   {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} resource will be
   *   created.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {google.cloud.gkemulticloud.v1.AzureCluster} request.azureCluster
   *   Required. The specification of the
   *   {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} to create.
   * @param {string} request.azureClusterId
   *   Required. A client provided ID the resource. Must be unique within the
   *   parent resource.
   *
   *   The provided ID will be part of the
   *   {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} resource name
   *   formatted as
   *   `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`.
   *
   *   Valid characters are `/{@link 0-9|a-z}-/`. Cannot be longer than 63 characters.
   * @param {boolean} request.validateOnly
   *   If set, only validate the request, but do not actually create the cluster.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.create_azure_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_CreateAzureCluster_async
   */
  createAzureCluster(
    request?: protos.google.cloud.gkemulticloud.v1.ICreateAzureClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createAzureCluster(
    request: protos.google.cloud.gkemulticloud.v1.ICreateAzureClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAzureCluster(
    request: protos.google.cloud.gkemulticloud.v1.ICreateAzureClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAzureCluster(
    request?: protos.google.cloud.gkemulticloud.v1.ICreateAzureClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkemulticloud.v1.IAzureCluster,
            protos.google.cloud.gkemulticloud.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createAzureCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createAzureCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.create_azure_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_CreateAzureCluster_async
   */
  async checkCreateAzureClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkemulticloud.v1.AzureCluster,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createAzureCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkemulticloud.v1.AzureCluster,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >;
  }
  /**
   * Updates an {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.gkemulticloud.v1.AzureCluster} request.azureCluster
   *   Required. The {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster}
   *   resource to update.
   * @param {boolean} request.validateOnly
   *   If set, only validate the request, but do not actually update the cluster.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update. At least one path must be supplied in
   *   this field. The elements of the repeated paths field can only include these
   *   fields from {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster}:
   *
   *    *   `description`.
   *    *   `azureClient`.
   *    *   `control_plane.version`.
   *    *   `control_plane.vm_size`.
   *    *   `annotations`.
   *    *   `authorization.admin_users`.
   *    *   `control_plane.root_volume.size_gib`.
   *    *   `control_plane.proxy_config`.
   *    *   `control_plane.proxy_config.resource_group_id`.
   *    *   `control_plane.proxy_config.secret_id`.
   *    *   `control_plane.ssh_config.authorized_key`.
   *    *   `logging_config.component_config.enable_components`
   *    *   `monitoring_config.managed_prometheus_config.enabled`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.update_azure_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_UpdateAzureCluster_async
   */
  updateAzureCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IUpdateAzureClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateAzureCluster(
    request: protos.google.cloud.gkemulticloud.v1.IUpdateAzureClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateAzureCluster(
    request: protos.google.cloud.gkemulticloud.v1.IUpdateAzureClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateAzureCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IUpdateAzureClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkemulticloud.v1.IAzureCluster,
            protos.google.cloud.gkemulticloud.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'azure_cluster.name': request.azureCluster!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateAzureCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateAzureCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.update_azure_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_UpdateAzureCluster_async
   */
  async checkUpdateAzureClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkemulticloud.v1.AzureCluster,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateAzureCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkemulticloud.v1.AzureCluster,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a specific
   * {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} resource.
   *
   * Fails if the cluster has one or more associated
   * {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool} resources.
   *
   * If successful, the response contains a newly created
   * {@link google.longrunning.Operation|Operation} resource that can be
   * described to track the status of the operation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name the
   *   {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} to delete.
   *
   *   `AzureCluster` names are formatted as
   *   `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {boolean} request.allowMissing
   *   If set to true, and the
   *   {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} resource is not
   *   found, the request will succeed but no action will be taken on the server
   *   and a completed {@link google.longrunning.Operation|Operation} will be returned.
   *
   *   Useful for idempotent deletion.
   * @param {boolean} request.validateOnly
   *   If set, only validate the request, but do not actually delete the resource.
   * @param {string} request.etag
   *   The current etag of the
   *   {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster}.
   *
   *   Allows clients to perform deletions through optimistic concurrency control.
   *
   *   If the provided etag does not match the current etag of the cluster,
   *   the request will fail and an ABORTED error will be returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.delete_azure_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_DeleteAzureCluster_async
   */
  deleteAzureCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IDeleteAzureClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteAzureCluster(
    request: protos.google.cloud.gkemulticloud.v1.IDeleteAzureClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAzureCluster(
    request: protos.google.cloud.gkemulticloud.v1.IDeleteAzureClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAzureCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IDeleteAzureClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gkemulticloud.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteAzureCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteAzureCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.delete_azure_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_DeleteAzureCluster_async
   */
  async checkDeleteAzureClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteAzureCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool},
   * attached to a given
   * {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster}.
   *
   * If successful, the response contains a newly created
   * {@link google.longrunning.Operation|Operation} resource that can be
   * described to track the status of the operation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster}
   *   resource where this node pool will be created.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {google.cloud.gkemulticloud.v1.AzureNodePool} request.azureNodePool
   *   Required. The specification of the
   *   {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool} to create.
   * @param {string} request.azureNodePoolId
   *   Required. A client provided ID the resource. Must be unique within the
   *   parent resource.
   *
   *   The provided ID will be part of the
   *   {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool} resource name
   *   formatted as
   *   `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>/azureNodePools/<node-pool-id>`.
   *
   *   Valid characters are `/{@link 0-9|a-z}-/`. Cannot be longer than 63 characters.
   * @param {boolean} request.validateOnly
   *   If set, only validate the request, but do not actually create the node
   *   pool.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.create_azure_node_pool.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_CreateAzureNodePool_async
   */
  createAzureNodePool(
    request?: protos.google.cloud.gkemulticloud.v1.ICreateAzureNodePoolRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createAzureNodePool(
    request: protos.google.cloud.gkemulticloud.v1.ICreateAzureNodePoolRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAzureNodePool(
    request: protos.google.cloud.gkemulticloud.v1.ICreateAzureNodePoolRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAzureNodePool(
    request?: protos.google.cloud.gkemulticloud.v1.ICreateAzureNodePoolRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
            protos.google.cloud.gkemulticloud.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createAzureNodePool(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createAzureNodePool()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.create_azure_node_pool.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_CreateAzureNodePool_async
   */
  async checkCreateAzureNodePoolProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkemulticloud.v1.AzureNodePool,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createAzureNodePool,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkemulticloud.v1.AzureNodePool,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >;
  }
  /**
   * Updates an {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.gkemulticloud.v1.AzureNodePool} request.azureNodePool
   *   Required. The {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool}
   *   resource to update.
   * @param {boolean} request.validateOnly
   *   If set, only validate the request, but don't actually update the node pool.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update. At least one path must be supplied in
   *   this field. The elements of the repeated paths field can only include these
   *   fields from {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool}:
   *
   *    *.  `annotations`.
   *    *   `version`.
   *    *   `autoscaling.min_node_count`.
   *    *   `autoscaling.max_node_count`.
   *    *   `config.ssh_config.authorized_key`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.update_azure_node_pool.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_UpdateAzureNodePool_async
   */
  updateAzureNodePool(
    request?: protos.google.cloud.gkemulticloud.v1.IUpdateAzureNodePoolRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateAzureNodePool(
    request: protos.google.cloud.gkemulticloud.v1.IUpdateAzureNodePoolRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateAzureNodePool(
    request: protos.google.cloud.gkemulticloud.v1.IUpdateAzureNodePoolRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateAzureNodePool(
    request?: protos.google.cloud.gkemulticloud.v1.IUpdateAzureNodePoolRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
            protos.google.cloud.gkemulticloud.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAzureNodePool,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'azure_node_pool.name': request.azureNodePool!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateAzureNodePool(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateAzureNodePool()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.update_azure_node_pool.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_UpdateAzureNodePool_async
   */
  async checkUpdateAzureNodePoolProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkemulticloud.v1.AzureNodePool,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateAzureNodePool,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkemulticloud.v1.AzureNodePool,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a specific
   * {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool} resource.
   *
   * If successful, the response contains a newly created
   * {@link google.longrunning.Operation|Operation} resource that can be
   * described to track the status of the operation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name the
   *   {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool} to delete.
   *
   *   `AzureNodePool` names are formatted as
   *   `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>/azureNodePools/<node-pool-id>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {boolean} request.validateOnly
   *   If set, only validate the request, but do not actually delete the node
   *   pool.
   * @param {boolean} request.allowMissing
   *   If set to true, and the
   *   {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool} resource is
   *   not found, the request will succeed but no action will be taken on the
   *   server and a completed {@link google.longrunning.Operation|Operation} will be
   *   returned.
   *
   *   Useful for idempotent deletion.
   * @param {string} request.etag
   *   The current ETag of the
   *   {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool}.
   *
   *   Allows clients to perform deletions through optimistic concurrency control.
   *
   *   If the provided ETag does not match the current etag of the node pool,
   *   the request will fail and an ABORTED error will be returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.delete_azure_node_pool.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_DeleteAzureNodePool_async
   */
  deleteAzureNodePool(
    request?: protos.google.cloud.gkemulticloud.v1.IDeleteAzureNodePoolRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteAzureNodePool(
    request: protos.google.cloud.gkemulticloud.v1.IDeleteAzureNodePoolRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAzureNodePool(
    request: protos.google.cloud.gkemulticloud.v1.IDeleteAzureNodePoolRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAzureNodePool(
    request?: protos.google.cloud.gkemulticloud.v1.IDeleteAzureNodePoolRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gkemulticloud.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteAzureNodePool(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteAzureNodePool()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.delete_azure_node_pool.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_DeleteAzureNodePool_async
   */
  async checkDeleteAzureNodePoolProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteAzureNodePool,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >;
  }
  /**
   * Lists all {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient}
   * resources on a given Google Cloud project and region.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location which owns this collection of
   *   {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient} resources.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 50 will be used by the service.
   *   Regardless of the pageSize value, the response can include a partial list
   *   and a caller should only rely on response's
   *   {@link google.cloud.gkemulticloud.v1.ListAzureClientsResponse.next_page_token|nextPageToken}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The `nextPageToken` value returned from a previous
   *   {@link google.cloud.gkemulticloud.v1.AzureClusters.ListAzureClients|azureClients.list}
   *   request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [AzureClient]{@link google.cloud.gkemulticloud.v1.AzureClient}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAzureClientsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAzureClients(
    request?: protos.google.cloud.gkemulticloud.v1.IListAzureClientsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureClient[],
      protos.google.cloud.gkemulticloud.v1.IListAzureClientsRequest | null,
      protos.google.cloud.gkemulticloud.v1.IListAzureClientsResponse
    ]
  >;
  listAzureClients(
    request: protos.google.cloud.gkemulticloud.v1.IListAzureClientsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gkemulticloud.v1.IListAzureClientsRequest,
      | protos.google.cloud.gkemulticloud.v1.IListAzureClientsResponse
      | null
      | undefined,
      protos.google.cloud.gkemulticloud.v1.IAzureClient
    >
  ): void;
  listAzureClients(
    request: protos.google.cloud.gkemulticloud.v1.IListAzureClientsRequest,
    callback: PaginationCallback<
      protos.google.cloud.gkemulticloud.v1.IListAzureClientsRequest,
      | protos.google.cloud.gkemulticloud.v1.IListAzureClientsResponse
      | null
      | undefined,
      protos.google.cloud.gkemulticloud.v1.IAzureClient
    >
  ): void;
  listAzureClients(
    request?: protos.google.cloud.gkemulticloud.v1.IListAzureClientsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gkemulticloud.v1.IListAzureClientsRequest,
          | protos.google.cloud.gkemulticloud.v1.IListAzureClientsResponse
          | null
          | undefined,
          protos.google.cloud.gkemulticloud.v1.IAzureClient
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gkemulticloud.v1.IListAzureClientsRequest,
      | protos.google.cloud.gkemulticloud.v1.IListAzureClientsResponse
      | null
      | undefined,
      protos.google.cloud.gkemulticloud.v1.IAzureClient
    >
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureClient[],
      protos.google.cloud.gkemulticloud.v1.IListAzureClientsRequest | null,
      protos.google.cloud.gkemulticloud.v1.IListAzureClientsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAzureClients(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location which owns this collection of
   *   {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient} resources.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 50 will be used by the service.
   *   Regardless of the pageSize value, the response can include a partial list
   *   and a caller should only rely on response's
   *   {@link google.cloud.gkemulticloud.v1.ListAzureClientsResponse.next_page_token|nextPageToken}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The `nextPageToken` value returned from a previous
   *   {@link google.cloud.gkemulticloud.v1.AzureClusters.ListAzureClients|azureClients.list}
   *   request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [AzureClient]{@link google.cloud.gkemulticloud.v1.AzureClient} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAzureClientsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAzureClientsStream(
    request?: protos.google.cloud.gkemulticloud.v1.IListAzureClientsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAzureClients'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAzureClients.createStream(
      this.innerApiCalls.listAzureClients as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAzureClients`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location which owns this collection of
   *   {@link google.cloud.gkemulticloud.v1.AzureClient|AzureClient} resources.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 50 will be used by the service.
   *   Regardless of the pageSize value, the response can include a partial list
   *   and a caller should only rely on response's
   *   {@link google.cloud.gkemulticloud.v1.ListAzureClientsResponse.next_page_token|nextPageToken}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The `nextPageToken` value returned from a previous
   *   {@link google.cloud.gkemulticloud.v1.AzureClusters.ListAzureClients|azureClients.list}
   *   request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [AzureClient]{@link google.cloud.gkemulticloud.v1.AzureClient}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.list_azure_clients.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_ListAzureClients_async
   */
  listAzureClientsAsync(
    request?: protos.google.cloud.gkemulticloud.v1.IListAzureClientsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gkemulticloud.v1.IAzureClient> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAzureClients'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAzureClients.asyncIterate(
      this.innerApiCalls['listAzureClients'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gkemulticloud.v1.IAzureClient>;
  }
  /**
   * Lists all {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster}
   * resources on a given Google Cloud project and region.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location which owns this collection of
   *   {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} resources.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 50 will be used by the service.
   *   Regardless of the pageSize value, the response can include a partial list
   *   and a caller should only rely on response's
   *   {@link google.cloud.gkemulticloud.v1.ListAzureClustersResponse.next_page_token|nextPageToken}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The `nextPageToken` value returned from a previous
   *   {@link google.cloud.gkemulticloud.v1.AzureClusters.ListAzureClusters|azureClusters.list}
   *   request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [AzureCluster]{@link google.cloud.gkemulticloud.v1.AzureCluster}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAzureClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAzureClusters(
    request?: protos.google.cloud.gkemulticloud.v1.IListAzureClustersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureCluster[],
      protos.google.cloud.gkemulticloud.v1.IListAzureClustersRequest | null,
      protos.google.cloud.gkemulticloud.v1.IListAzureClustersResponse
    ]
  >;
  listAzureClusters(
    request: protos.google.cloud.gkemulticloud.v1.IListAzureClustersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gkemulticloud.v1.IListAzureClustersRequest,
      | protos.google.cloud.gkemulticloud.v1.IListAzureClustersResponse
      | null
      | undefined,
      protos.google.cloud.gkemulticloud.v1.IAzureCluster
    >
  ): void;
  listAzureClusters(
    request: protos.google.cloud.gkemulticloud.v1.IListAzureClustersRequest,
    callback: PaginationCallback<
      protos.google.cloud.gkemulticloud.v1.IListAzureClustersRequest,
      | protos.google.cloud.gkemulticloud.v1.IListAzureClustersResponse
      | null
      | undefined,
      protos.google.cloud.gkemulticloud.v1.IAzureCluster
    >
  ): void;
  listAzureClusters(
    request?: protos.google.cloud.gkemulticloud.v1.IListAzureClustersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gkemulticloud.v1.IListAzureClustersRequest,
          | protos.google.cloud.gkemulticloud.v1.IListAzureClustersResponse
          | null
          | undefined,
          protos.google.cloud.gkemulticloud.v1.IAzureCluster
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gkemulticloud.v1.IListAzureClustersRequest,
      | protos.google.cloud.gkemulticloud.v1.IListAzureClustersResponse
      | null
      | undefined,
      protos.google.cloud.gkemulticloud.v1.IAzureCluster
    >
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureCluster[],
      protos.google.cloud.gkemulticloud.v1.IListAzureClustersRequest | null,
      protos.google.cloud.gkemulticloud.v1.IListAzureClustersResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAzureClusters(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location which owns this collection of
   *   {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} resources.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 50 will be used by the service.
   *   Regardless of the pageSize value, the response can include a partial list
   *   and a caller should only rely on response's
   *   {@link google.cloud.gkemulticloud.v1.ListAzureClustersResponse.next_page_token|nextPageToken}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The `nextPageToken` value returned from a previous
   *   {@link google.cloud.gkemulticloud.v1.AzureClusters.ListAzureClusters|azureClusters.list}
   *   request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [AzureCluster]{@link google.cloud.gkemulticloud.v1.AzureCluster} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAzureClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAzureClustersStream(
    request?: protos.google.cloud.gkemulticloud.v1.IListAzureClustersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAzureClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAzureClusters.createStream(
      this.innerApiCalls.listAzureClusters as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAzureClusters`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location which owns this collection of
   *   {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster} resources.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 50 will be used by the service.
   *   Regardless of the pageSize value, the response can include a partial list
   *   and a caller should only rely on response's
   *   {@link google.cloud.gkemulticloud.v1.ListAzureClustersResponse.next_page_token|nextPageToken}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The `nextPageToken` value returned from a previous
   *   {@link google.cloud.gkemulticloud.v1.AzureClusters.ListAzureClusters|azureClusters.list}
   *   request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [AzureCluster]{@link google.cloud.gkemulticloud.v1.AzureCluster}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.list_azure_clusters.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_ListAzureClusters_async
   */
  listAzureClustersAsync(
    request?: protos.google.cloud.gkemulticloud.v1.IListAzureClustersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gkemulticloud.v1.IAzureCluster> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAzureClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAzureClusters.asyncIterate(
      this.innerApiCalls['listAzureClusters'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gkemulticloud.v1.IAzureCluster>;
  }
  /**
   * Lists all {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool}
   * resources on a given
   * {@link google.cloud.gkemulticloud.v1.AzureCluster|AzureCluster}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent `AzureCluster` which owns this collection of
   *   {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool} resources.
   *
   *   `AzureCluster` names are formatted as
   *   `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 50 will be used by the service.
   *   Regardless of the pageSize value, the response can include a partial list
   *   and a caller should only rely on response's
   *   {@link google.cloud.gkemulticloud.v1.ListAzureNodePoolsResponse.next_page_token|nextPageToken}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The `nextPageToken` value returned from a previous
   *   {@link google.cloud.gkemulticloud.v1.AzureClusters.ListAzureNodePools|azureNodePools.list}
   *   request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [AzureNodePool]{@link google.cloud.gkemulticloud.v1.AzureNodePool}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAzureNodePoolsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAzureNodePools(
    request?: protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureNodePool[],
      protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsRequest | null,
      protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsResponse
    ]
  >;
  listAzureNodePools(
    request: protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsRequest,
      | protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsResponse
      | null
      | undefined,
      protos.google.cloud.gkemulticloud.v1.IAzureNodePool
    >
  ): void;
  listAzureNodePools(
    request: protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsRequest,
    callback: PaginationCallback<
      protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsRequest,
      | protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsResponse
      | null
      | undefined,
      protos.google.cloud.gkemulticloud.v1.IAzureNodePool
    >
  ): void;
  listAzureNodePools(
    request?: protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsRequest,
          | protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsResponse
          | null
          | undefined,
          protos.google.cloud.gkemulticloud.v1.IAzureNodePool
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsRequest,
      | protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsResponse
      | null
      | undefined,
      protos.google.cloud.gkemulticloud.v1.IAzureNodePool
    >
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAzureNodePool[],
      protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsRequest | null,
      protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAzureNodePools(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent `AzureCluster` which owns this collection of
   *   {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool} resources.
   *
   *   `AzureCluster` names are formatted as
   *   `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 50 will be used by the service.
   *   Regardless of the pageSize value, the response can include a partial list
   *   and a caller should only rely on response's
   *   {@link google.cloud.gkemulticloud.v1.ListAzureNodePoolsResponse.next_page_token|nextPageToken}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The `nextPageToken` value returned from a previous
   *   {@link google.cloud.gkemulticloud.v1.AzureClusters.ListAzureNodePools|azureNodePools.list}
   *   request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [AzureNodePool]{@link google.cloud.gkemulticloud.v1.AzureNodePool} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAzureNodePoolsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAzureNodePoolsStream(
    request?: protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAzureNodePools'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAzureNodePools.createStream(
      this.innerApiCalls.listAzureNodePools as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAzureNodePools`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent `AzureCluster` which owns this collection of
   *   {@link google.cloud.gkemulticloud.v1.AzureNodePool|AzureNodePool} resources.
   *
   *   `AzureCluster` names are formatted as
   *   `projects/<project-id>/locations/<region>/azureClusters/<cluster-id>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 50 will be used by the service.
   *   Regardless of the pageSize value, the response can include a partial list
   *   and a caller should only rely on response's
   *   {@link google.cloud.gkemulticloud.v1.ListAzureNodePoolsResponse.next_page_token|nextPageToken}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The `nextPageToken` value returned from a previous
   *   {@link google.cloud.gkemulticloud.v1.AzureClusters.ListAzureNodePools|azureNodePools.list}
   *   request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [AzureNodePool]{@link google.cloud.gkemulticloud.v1.AzureNodePool}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/azure_clusters.list_azure_node_pools.js</caption>
   * region_tag:gkemulticloud_v1_generated_AzureClusters_ListAzureNodePools_async
   */
  listAzureNodePoolsAsync(
    request?: protos.google.cloud.gkemulticloud.v1.IListAzureNodePoolsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gkemulticloud.v1.IAzureNodePool> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAzureNodePools'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAzureNodePools.asyncIterate(
      this.innerApiCalls['listAzureNodePools'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gkemulticloud.v1.IAzureNodePool>;
  }
  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified attachedCluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} attached_cluster
   * @returns {string} Resource name string.
   */
  attachedClusterPath(
    project: string,
    location: string,
    attachedCluster: string
  ) {
    return this.pathTemplates.attachedClusterPathTemplate.render({
      project: project,
      location: location,
      attached_cluster: attachedCluster,
    });
  }

  /**
   * Parse the project from AttachedCluster resource.
   *
   * @param {string} attachedClusterName
   *   A fully-qualified path representing AttachedCluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAttachedClusterName(attachedClusterName: string) {
    return this.pathTemplates.attachedClusterPathTemplate.match(
      attachedClusterName
    ).project;
  }

  /**
   * Parse the location from AttachedCluster resource.
   *
   * @param {string} attachedClusterName
   *   A fully-qualified path representing AttachedCluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAttachedClusterName(attachedClusterName: string) {
    return this.pathTemplates.attachedClusterPathTemplate.match(
      attachedClusterName
    ).location;
  }

  /**
   * Parse the attached_cluster from AttachedCluster resource.
   *
   * @param {string} attachedClusterName
   *   A fully-qualified path representing AttachedCluster resource.
   * @returns {string} A string representing the attached_cluster.
   */
  matchAttachedClusterFromAttachedClusterName(attachedClusterName: string) {
    return this.pathTemplates.attachedClusterPathTemplate.match(
      attachedClusterName
    ).attached_cluster;
  }

  /**
   * Return a fully-qualified attachedServerConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  attachedServerConfigPath(project: string, location: string) {
    return this.pathTemplates.attachedServerConfigPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from AttachedServerConfig resource.
   *
   * @param {string} attachedServerConfigName
   *   A fully-qualified path representing AttachedServerConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAttachedServerConfigName(attachedServerConfigName: string) {
    return this.pathTemplates.attachedServerConfigPathTemplate.match(
      attachedServerConfigName
    ).project;
  }

  /**
   * Parse the location from AttachedServerConfig resource.
   *
   * @param {string} attachedServerConfigName
   *   A fully-qualified path representing AttachedServerConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAttachedServerConfigName(attachedServerConfigName: string) {
    return this.pathTemplates.attachedServerConfigPathTemplate.match(
      attachedServerConfigName
    ).location;
  }

  /**
   * Return a fully-qualified awsCluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} aws_cluster
   * @returns {string} Resource name string.
   */
  awsClusterPath(project: string, location: string, awsCluster: string) {
    return this.pathTemplates.awsClusterPathTemplate.render({
      project: project,
      location: location,
      aws_cluster: awsCluster,
    });
  }

  /**
   * Parse the project from AwsCluster resource.
   *
   * @param {string} awsClusterName
   *   A fully-qualified path representing AwsCluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAwsClusterName(awsClusterName: string) {
    return this.pathTemplates.awsClusterPathTemplate.match(awsClusterName)
      .project;
  }

  /**
   * Parse the location from AwsCluster resource.
   *
   * @param {string} awsClusterName
   *   A fully-qualified path representing AwsCluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAwsClusterName(awsClusterName: string) {
    return this.pathTemplates.awsClusterPathTemplate.match(awsClusterName)
      .location;
  }

  /**
   * Parse the aws_cluster from AwsCluster resource.
   *
   * @param {string} awsClusterName
   *   A fully-qualified path representing AwsCluster resource.
   * @returns {string} A string representing the aws_cluster.
   */
  matchAwsClusterFromAwsClusterName(awsClusterName: string) {
    return this.pathTemplates.awsClusterPathTemplate.match(awsClusterName)
      .aws_cluster;
  }

  /**
   * Return a fully-qualified awsNodePool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} aws_cluster
   * @param {string} aws_node_pool
   * @returns {string} Resource name string.
   */
  awsNodePoolPath(
    project: string,
    location: string,
    awsCluster: string,
    awsNodePool: string
  ) {
    return this.pathTemplates.awsNodePoolPathTemplate.render({
      project: project,
      location: location,
      aws_cluster: awsCluster,
      aws_node_pool: awsNodePool,
    });
  }

  /**
   * Parse the project from AwsNodePool resource.
   *
   * @param {string} awsNodePoolName
   *   A fully-qualified path representing AwsNodePool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAwsNodePoolName(awsNodePoolName: string) {
    return this.pathTemplates.awsNodePoolPathTemplate.match(awsNodePoolName)
      .project;
  }

  /**
   * Parse the location from AwsNodePool resource.
   *
   * @param {string} awsNodePoolName
   *   A fully-qualified path representing AwsNodePool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAwsNodePoolName(awsNodePoolName: string) {
    return this.pathTemplates.awsNodePoolPathTemplate.match(awsNodePoolName)
      .location;
  }

  /**
   * Parse the aws_cluster from AwsNodePool resource.
   *
   * @param {string} awsNodePoolName
   *   A fully-qualified path representing AwsNodePool resource.
   * @returns {string} A string representing the aws_cluster.
   */
  matchAwsClusterFromAwsNodePoolName(awsNodePoolName: string) {
    return this.pathTemplates.awsNodePoolPathTemplate.match(awsNodePoolName)
      .aws_cluster;
  }

  /**
   * Parse the aws_node_pool from AwsNodePool resource.
   *
   * @param {string} awsNodePoolName
   *   A fully-qualified path representing AwsNodePool resource.
   * @returns {string} A string representing the aws_node_pool.
   */
  matchAwsNodePoolFromAwsNodePoolName(awsNodePoolName: string) {
    return this.pathTemplates.awsNodePoolPathTemplate.match(awsNodePoolName)
      .aws_node_pool;
  }

  /**
   * Return a fully-qualified awsServerConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  awsServerConfigPath(project: string, location: string) {
    return this.pathTemplates.awsServerConfigPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from AwsServerConfig resource.
   *
   * @param {string} awsServerConfigName
   *   A fully-qualified path representing AwsServerConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAwsServerConfigName(awsServerConfigName: string) {
    return this.pathTemplates.awsServerConfigPathTemplate.match(
      awsServerConfigName
    ).project;
  }

  /**
   * Parse the location from AwsServerConfig resource.
   *
   * @param {string} awsServerConfigName
   *   A fully-qualified path representing AwsServerConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAwsServerConfigName(awsServerConfigName: string) {
    return this.pathTemplates.awsServerConfigPathTemplate.match(
      awsServerConfigName
    ).location;
  }

  /**
   * Return a fully-qualified azureClient resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} azure_client
   * @returns {string} Resource name string.
   */
  azureClientPath(project: string, location: string, azureClient: string) {
    return this.pathTemplates.azureClientPathTemplate.render({
      project: project,
      location: location,
      azure_client: azureClient,
    });
  }

  /**
   * Parse the project from AzureClient resource.
   *
   * @param {string} azureClientName
   *   A fully-qualified path representing AzureClient resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAzureClientName(azureClientName: string) {
    return this.pathTemplates.azureClientPathTemplate.match(azureClientName)
      .project;
  }

  /**
   * Parse the location from AzureClient resource.
   *
   * @param {string} azureClientName
   *   A fully-qualified path representing AzureClient resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAzureClientName(azureClientName: string) {
    return this.pathTemplates.azureClientPathTemplate.match(azureClientName)
      .location;
  }

  /**
   * Parse the azure_client from AzureClient resource.
   *
   * @param {string} azureClientName
   *   A fully-qualified path representing AzureClient resource.
   * @returns {string} A string representing the azure_client.
   */
  matchAzureClientFromAzureClientName(azureClientName: string) {
    return this.pathTemplates.azureClientPathTemplate.match(azureClientName)
      .azure_client;
  }

  /**
   * Return a fully-qualified azureCluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} azure_cluster
   * @returns {string} Resource name string.
   */
  azureClusterPath(project: string, location: string, azureCluster: string) {
    return this.pathTemplates.azureClusterPathTemplate.render({
      project: project,
      location: location,
      azure_cluster: azureCluster,
    });
  }

  /**
   * Parse the project from AzureCluster resource.
   *
   * @param {string} azureClusterName
   *   A fully-qualified path representing AzureCluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAzureClusterName(azureClusterName: string) {
    return this.pathTemplates.azureClusterPathTemplate.match(azureClusterName)
      .project;
  }

  /**
   * Parse the location from AzureCluster resource.
   *
   * @param {string} azureClusterName
   *   A fully-qualified path representing AzureCluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAzureClusterName(azureClusterName: string) {
    return this.pathTemplates.azureClusterPathTemplate.match(azureClusterName)
      .location;
  }

  /**
   * Parse the azure_cluster from AzureCluster resource.
   *
   * @param {string} azureClusterName
   *   A fully-qualified path representing AzureCluster resource.
   * @returns {string} A string representing the azure_cluster.
   */
  matchAzureClusterFromAzureClusterName(azureClusterName: string) {
    return this.pathTemplates.azureClusterPathTemplate.match(azureClusterName)
      .azure_cluster;
  }

  /**
   * Return a fully-qualified azureNodePool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} azure_cluster
   * @param {string} azure_node_pool
   * @returns {string} Resource name string.
   */
  azureNodePoolPath(
    project: string,
    location: string,
    azureCluster: string,
    azureNodePool: string
  ) {
    return this.pathTemplates.azureNodePoolPathTemplate.render({
      project: project,
      location: location,
      azure_cluster: azureCluster,
      azure_node_pool: azureNodePool,
    });
  }

  /**
   * Parse the project from AzureNodePool resource.
   *
   * @param {string} azureNodePoolName
   *   A fully-qualified path representing AzureNodePool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAzureNodePoolName(azureNodePoolName: string) {
    return this.pathTemplates.azureNodePoolPathTemplate.match(azureNodePoolName)
      .project;
  }

  /**
   * Parse the location from AzureNodePool resource.
   *
   * @param {string} azureNodePoolName
   *   A fully-qualified path representing AzureNodePool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAzureNodePoolName(azureNodePoolName: string) {
    return this.pathTemplates.azureNodePoolPathTemplate.match(azureNodePoolName)
      .location;
  }

  /**
   * Parse the azure_cluster from AzureNodePool resource.
   *
   * @param {string} azureNodePoolName
   *   A fully-qualified path representing AzureNodePool resource.
   * @returns {string} A string representing the azure_cluster.
   */
  matchAzureClusterFromAzureNodePoolName(azureNodePoolName: string) {
    return this.pathTemplates.azureNodePoolPathTemplate.match(azureNodePoolName)
      .azure_cluster;
  }

  /**
   * Parse the azure_node_pool from AzureNodePool resource.
   *
   * @param {string} azureNodePoolName
   *   A fully-qualified path representing AzureNodePool resource.
   * @returns {string} A string representing the azure_node_pool.
   */
  matchAzureNodePoolFromAzureNodePoolName(azureNodePoolName: string) {
    return this.pathTemplates.azureNodePoolPathTemplate.match(azureNodePoolName)
      .azure_node_pool;
  }

  /**
   * Return a fully-qualified azureServerConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  azureServerConfigPath(project: string, location: string) {
    return this.pathTemplates.azureServerConfigPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from AzureServerConfig resource.
   *
   * @param {string} azureServerConfigName
   *   A fully-qualified path representing AzureServerConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAzureServerConfigName(azureServerConfigName: string) {
    return this.pathTemplates.azureServerConfigPathTemplate.match(
      azureServerConfigName
    ).project;
  }

  /**
   * Parse the location from AzureServerConfig resource.
   *
   * @param {string} azureServerConfigName
   *   A fully-qualified path representing AzureServerConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAzureServerConfigName(azureServerConfigName: string) {
    return this.pathTemplates.azureServerConfigPathTemplate.match(
      azureServerConfigName
    ).location;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.azureClustersStub && !this._terminated) {
      return this.azureClustersStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
