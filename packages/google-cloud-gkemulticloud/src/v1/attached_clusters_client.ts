// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/attached_clusters_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './attached_clusters_client_config.json';
const version = require('../../../package.json').version;

/**
 *  The AttachedClusters API provides a single centrally managed service
 *  to register and manage Anthos attached clusters that run on customer's owned
 *  infrastructure.
 * @class
 * @memberof v1
 */
export class AttachedClustersClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  attachedClustersStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AttachedClustersClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new AttachedClustersClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof AttachedClustersClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      attachedClusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/attachedClusters/{attached_cluster}'
      ),
      attachedServerConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/attachedServerConfig'
      ),
      awsClusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/awsClusters/{aws_cluster}'
      ),
      awsNodePoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/awsClusters/{aws_cluster}/awsNodePools/{aws_node_pool}'
      ),
      awsServerConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/awsServerConfig'
      ),
      azureClientPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/azureClients/{azure_client}'
      ),
      azureClusterPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/azureClusters/{azure_cluster}'
      ),
      azureNodePoolPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/azureClusters/{azure_cluster}/azureNodePools/{azure_node_pool}'
      ),
      azureServerConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/azureServerConfig'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listAttachedClusters: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'attachedClusters'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createAttachedClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.AttachedCluster'
    ) as gax.protobuf.Type;
    const createAttachedClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateAttachedClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.AttachedCluster'
    ) as gax.protobuf.Type;
    const updateAttachedClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const importAttachedClusterResponse = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.AttachedCluster'
    ) as gax.protobuf.Type;
    const importAttachedClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteAttachedClusterResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteAttachedClusterMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkemulticloud.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createAttachedCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createAttachedClusterResponse.decode.bind(
          createAttachedClusterResponse
        ),
        createAttachedClusterMetadata.decode.bind(createAttachedClusterMetadata)
      ),
      updateAttachedCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateAttachedClusterResponse.decode.bind(
          updateAttachedClusterResponse
        ),
        updateAttachedClusterMetadata.decode.bind(updateAttachedClusterMetadata)
      ),
      importAttachedCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        importAttachedClusterResponse.decode.bind(
          importAttachedClusterResponse
        ),
        importAttachedClusterMetadata.decode.bind(importAttachedClusterMetadata)
      ),
      deleteAttachedCluster: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteAttachedClusterResponse.decode.bind(
          deleteAttachedClusterResponse
        ),
        deleteAttachedClusterMetadata.decode.bind(deleteAttachedClusterMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.gkemulticloud.v1.AttachedClusters',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.attachedClustersStub) {
      return this.attachedClustersStub;
    }

    // Put together the "service stub" for
    // google.cloud.gkemulticloud.v1.AttachedClusters.
    this.attachedClustersStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.gkemulticloud.v1.AttachedClusters'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.gkemulticloud.v1.AttachedClusters,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const attachedClustersStubMethods = [
      'createAttachedCluster',
      'updateAttachedCluster',
      'importAttachedCluster',
      'getAttachedCluster',
      'listAttachedClusters',
      'deleteAttachedCluster',
      'getAttachedServerConfig',
      'generateAttachedClusterInstallManifest',
    ];
    for (const methodName of attachedClustersStubMethods) {
      const callPromise = this.attachedClustersStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.attachedClustersStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'gkemulticloud.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'gkemulticloud.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Describes a specific
   * {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource
   *   to describe.
   *
   *   `AttachedCluster` names are formatted as
   *   `projects/<project-id>/locations/<region>/attachedClusters/<cluster-id>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AttachedCluster]{@link google.cloud.gkemulticloud.v1.AttachedCluster}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/attached_clusters.get_attached_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AttachedClusters_GetAttachedCluster_async
   */
  getAttachedCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IGetAttachedClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
      (
        | protos.google.cloud.gkemulticloud.v1.IGetAttachedClusterRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getAttachedCluster(
    request: protos.google.cloud.gkemulticloud.v1.IGetAttachedClusterRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
      | protos.google.cloud.gkemulticloud.v1.IGetAttachedClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAttachedCluster(
    request: protos.google.cloud.gkemulticloud.v1.IGetAttachedClusterRequest,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
      | protos.google.cloud.gkemulticloud.v1.IGetAttachedClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAttachedCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IGetAttachedClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
          | protos.google.cloud.gkemulticloud.v1.IGetAttachedClusterRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
      | protos.google.cloud.gkemulticloud.v1.IGetAttachedClusterRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
      (
        | protos.google.cloud.gkemulticloud.v1.IGetAttachedClusterRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAttachedCluster(request, options, callback);
  }
  /**
   * Returns information, such as supported Kubernetes versions, on a given
   * Google Cloud location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the
   *   {@link google.cloud.gkemulticloud.v1.AttachedServerConfig|AttachedServerConfig}
   *   resource to describe.
   *
   *   `AttachedServerConfig` names are formatted as
   *   `projects/<project-id>/locations/<region>/attachedServerConfig`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AttachedServerConfig]{@link google.cloud.gkemulticloud.v1.AttachedServerConfig}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/attached_clusters.get_attached_server_config.js</caption>
   * region_tag:gkemulticloud_v1_generated_AttachedClusters_GetAttachedServerConfig_async
   */
  getAttachedServerConfig(
    request?: protos.google.cloud.gkemulticloud.v1.IGetAttachedServerConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAttachedServerConfig,
      (
        | protos.google.cloud.gkemulticloud.v1.IGetAttachedServerConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getAttachedServerConfig(
    request: protos.google.cloud.gkemulticloud.v1.IGetAttachedServerConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IAttachedServerConfig,
      | protos.google.cloud.gkemulticloud.v1.IGetAttachedServerConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAttachedServerConfig(
    request: protos.google.cloud.gkemulticloud.v1.IGetAttachedServerConfigRequest,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IAttachedServerConfig,
      | protos.google.cloud.gkemulticloud.v1.IGetAttachedServerConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getAttachedServerConfig(
    request?: protos.google.cloud.gkemulticloud.v1.IGetAttachedServerConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkemulticloud.v1.IAttachedServerConfig,
          | protos.google.cloud.gkemulticloud.v1.IGetAttachedServerConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkemulticloud.v1.IAttachedServerConfig,
      | protos.google.cloud.gkemulticloud.v1.IGetAttachedServerConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAttachedServerConfig,
      (
        | protos.google.cloud.gkemulticloud.v1.IGetAttachedServerConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getAttachedServerConfig(
      request,
      options,
      callback
    );
  }
  /**
   * Generates the install manifest to be installed on the target cluster.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location where this
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource
   *   will be created.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {string} request.attachedClusterId
   *   Required. A client provided ID the resource. Must be unique within the
   *   parent resource.
   *
   *   The provided ID will be part of the
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource
   *   name formatted as
   *   `projects/<project-id>/locations/<region>/attachedClusters/<cluster-id>`.
   *
   *   Valid characters are `/{@link 0-9|a-z}-/`. Cannot be longer than 63 characters.
   *
   *   When generating an install manifest for importing an existing Membership
   *   resource, the attached_cluster_id field must be the Membership id.
   *
   *   Membership names are formatted as `resource name formatted as
   *   `projects/<project-id>/locations/<region>/memberships/<membership-id>`.
   * @param {string} request.platformVersion
   *   Required. The platform version for the cluster (e.g. `1.19.0-gke.1000`).
   *
   *   You can list all supported versions on a given Google Cloud region by
   *   calling
   *   {@link google.cloud.gkemulticloud.v1.AttachedClusters.GetAttachedServerConfig|GetAttachedServerConfig}.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [GenerateAttachedClusterInstallManifestResponse]{@link google.cloud.gkemulticloud.v1.GenerateAttachedClusterInstallManifestResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/attached_clusters.generate_attached_cluster_install_manifest.js</caption>
   * region_tag:gkemulticloud_v1_generated_AttachedClusters_GenerateAttachedClusterInstallManifest_async
   */
  generateAttachedClusterInstallManifest(
    request?: protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestResponse,
      (
        | protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  generateAttachedClusterInstallManifest(
    request: protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestResponse,
      | protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateAttachedClusterInstallManifest(
    request: protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestRequest,
    callback: Callback<
      protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestResponse,
      | protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  generateAttachedClusterInstallManifest(
    request?: protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestResponse,
          | protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestResponse,
      | protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestResponse,
      (
        | protos.google.cloud.gkemulticloud.v1.IGenerateAttachedClusterInstallManifestRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.generateAttachedClusterInstallManifest(
      request,
      options,
      callback
    );
  }

  /**
   * Creates a new
   * {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource
   * on a given GCP project and region.
   *
   * If successful, the response contains a newly created
   * {@link google.longrunning.Operation|Operation} resource that can be
   * described to track the status of the operation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location where this
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource
   *   will be created.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {google.cloud.gkemulticloud.v1.AttachedCluster} request.attachedCluster
   *   Required. The specification of the
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} to create.
   * @param {string} request.attachedClusterId
   *   Required. A client provided ID the resource. Must be unique within the
   *   parent resource.
   *
   *   The provided ID will be part of the
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource
   *   name formatted as
   *   `projects/<project-id>/locations/<region>/attachedClusters/<cluster-id>`.
   *
   *   Valid characters are `/{@link 0-9|a-z}-/`. Cannot be longer than 63 characters.
   * @param {boolean} request.validateOnly
   *   If set, only validate the request, but do not actually create the cluster.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/attached_clusters.create_attached_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AttachedClusters_CreateAttachedCluster_async
   */
  createAttachedCluster(
    request?: protos.google.cloud.gkemulticloud.v1.ICreateAttachedClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createAttachedCluster(
    request: protos.google.cloud.gkemulticloud.v1.ICreateAttachedClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAttachedCluster(
    request: protos.google.cloud.gkemulticloud.v1.ICreateAttachedClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createAttachedCluster(
    request?: protos.google.cloud.gkemulticloud.v1.ICreateAttachedClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
            protos.google.cloud.gkemulticloud.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createAttachedCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createAttachedCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/attached_clusters.create_attached_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AttachedClusters_CreateAttachedCluster_async
   */
  async checkCreateAttachedClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkemulticloud.v1.AttachedCluster,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createAttachedCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkemulticloud.v1.AttachedCluster,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >;
  }
  /**
   * Updates an
   * {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster}.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.gkemulticloud.v1.AttachedCluster} request.attachedCluster
   *   Required. The
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource
   *   to update.
   * @param {boolean} request.validateOnly
   *   If set, only validate the request, but do not actually update the cluster.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Mask of fields to update. At least one path must be supplied in
   *   this field. The elements of the repeated paths field can only include these
   *   fields from
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster}:
   *
   *    *   `description`.
   *    *   `annotations`.
   *    *   `platform_version`.
   *    *   `authorization.admin_users`.
   *    *   `logging_config.component_config.enable_components`.
   *    *   `monitoring_config.managed_prometheus_config.enabled`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/attached_clusters.update_attached_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AttachedClusters_UpdateAttachedCluster_async
   */
  updateAttachedCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IUpdateAttachedClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateAttachedCluster(
    request: protos.google.cloud.gkemulticloud.v1.IUpdateAttachedClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateAttachedCluster(
    request: protos.google.cloud.gkemulticloud.v1.IUpdateAttachedClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateAttachedCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IUpdateAttachedClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
            protos.google.cloud.gkemulticloud.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'attached_cluster.name': request.attachedCluster!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateAttachedCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateAttachedCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/attached_clusters.update_attached_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AttachedClusters_UpdateAttachedCluster_async
   */
  async checkUpdateAttachedClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkemulticloud.v1.AttachedCluster,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateAttachedCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkemulticloud.v1.AttachedCluster,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >;
  }
  /**
   * Imports creates a new
   * {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource
   * by importing an existing Fleet Membership resource.
   *
   * Attached Clusters created before the introduction of the Anthos Multi-Cloud
   * API can be imported through this method.
   *
   * If successful, the response contains a newly created
   * {@link google.longrunning.Operation|Operation} resource that can be
   * described to track the status of the operation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location where this
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource
   *   will be created.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on Google Cloud resource names.
   * @param {boolean} request.validateOnly
   *   If set, only validate the request, but do not actually import the cluster.
   * @param {string} request.fleetMembership
   *   Required. The name of the fleet membership resource to import.
   * @param {string} request.platformVersion
   *   Required. The platform version for the cluster (e.g. `1.19.0-gke.1000`).
   *
   *   You can list all supported versions on a given Google Cloud region by
   *   calling
   *   {@link google.cloud.gkemulticloud.v1.AttachedClusters.GetAttachedServerConfig|GetAttachedServerConfig}.
   * @param {string} request.distribution
   *   Required. The Kubernetes distribution of the underlying attached cluster.
   *
   *   Supported values: ["eks", "aks"].
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/attached_clusters.import_attached_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AttachedClusters_ImportAttachedCluster_async
   */
  importAttachedCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IImportAttachedClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  importAttachedCluster(
    request: protos.google.cloud.gkemulticloud.v1.IImportAttachedClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importAttachedCluster(
    request: protos.google.cloud.gkemulticloud.v1.IImportAttachedClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  importAttachedCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IImportAttachedClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
            protos.google.cloud.gkemulticloud.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.gkemulticloud.v1.IAttachedCluster,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.importAttachedCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `importAttachedCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/attached_clusters.import_attached_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AttachedClusters_ImportAttachedCluster_async
   */
  async checkImportAttachedClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.gkemulticloud.v1.AttachedCluster,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.importAttachedCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.gkemulticloud.v1.AttachedCluster,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a specific
   * {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource.
   *
   * If successful, the response contains a newly created
   * {@link google.longrunning.Operation|Operation} resource that can be
   * described to track the status of the operation.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name the
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} to delete.
   *
   *   `AttachedCluster` names are formatted as
   *   `projects/<project-id>/locations/<region>/attachedClusters/<cluster-id>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {boolean} request.validateOnly
   *   If set, only validate the request, but do not actually delete the resource.
   * @param {boolean} request.allowMissing
   *   If set to true, and the
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource
   *   is not found, the request will succeed but no action will be taken on the
   *   server and a completed {@link google.longrunning.Operation|Operation} will be
   *   returned.
   *
   *   Useful for idempotent deletion.
   * @param {boolean} request.ignoreErrors
   *   If set to true, the deletion of
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resource
   *   will succeed even if errors occur during deleting in cluster resources.
   *   Using this parameter may result in orphaned resources in the cluster.
   * @param {string} request.etag
   *   The current etag of the
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster}.
   *
   *   Allows clients to perform deletions through optimistic concurrency control.
   *
   *   If the provided etag does not match the current etag of the cluster,
   *   the request will fail and an ABORTED error will be returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/attached_clusters.delete_attached_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AttachedClusters_DeleteAttachedCluster_async
   */
  deleteAttachedCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IDeleteAttachedClusterRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteAttachedCluster(
    request: protos.google.cloud.gkemulticloud.v1.IDeleteAttachedClusterRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAttachedCluster(
    request: protos.google.cloud.gkemulticloud.v1.IDeleteAttachedClusterRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteAttachedCluster(
    request?: protos.google.cloud.gkemulticloud.v1.IDeleteAttachedClusterRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.gkemulticloud.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.gkemulticloud.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteAttachedCluster(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteAttachedCluster()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/attached_clusters.delete_attached_cluster.js</caption>
   * region_tag:gkemulticloud_v1_generated_AttachedClusters_DeleteAttachedCluster_async
   */
  async checkDeleteAttachedClusterProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteAttachedCluster,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.gkemulticloud.v1.OperationMetadata
    >;
  }
  /**
   * Lists all {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster}
   * resources on a given Google Cloud project and region.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location which owns this collection of
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resources.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 50 will be used by the service.
   *   Regardless of the pageSize value, the response can include a partial list
   *   and a caller should only rely on response's
   *   {@link google.cloud.gkemulticloud.v1.ListAttachedClustersResponse.next_page_token|nextPageToken}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The `nextPageToken` value returned from a previous
   *   {@link google.cloud.gkemulticloud.v1.AttachedClusters.ListAttachedClusters|attachedClusters.list}
   *   request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [AttachedCluster]{@link google.cloud.gkemulticloud.v1.AttachedCluster}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listAttachedClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAttachedClusters(
    request?: protos.google.cloud.gkemulticloud.v1.IListAttachedClustersRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAttachedCluster[],
      protos.google.cloud.gkemulticloud.v1.IListAttachedClustersRequest | null,
      protos.google.cloud.gkemulticloud.v1.IListAttachedClustersResponse
    ]
  >;
  listAttachedClusters(
    request: protos.google.cloud.gkemulticloud.v1.IListAttachedClustersRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.gkemulticloud.v1.IListAttachedClustersRequest,
      | protos.google.cloud.gkemulticloud.v1.IListAttachedClustersResponse
      | null
      | undefined,
      protos.google.cloud.gkemulticloud.v1.IAttachedCluster
    >
  ): void;
  listAttachedClusters(
    request: protos.google.cloud.gkemulticloud.v1.IListAttachedClustersRequest,
    callback: PaginationCallback<
      protos.google.cloud.gkemulticloud.v1.IListAttachedClustersRequest,
      | protos.google.cloud.gkemulticloud.v1.IListAttachedClustersResponse
      | null
      | undefined,
      protos.google.cloud.gkemulticloud.v1.IAttachedCluster
    >
  ): void;
  listAttachedClusters(
    request?: protos.google.cloud.gkemulticloud.v1.IListAttachedClustersRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.gkemulticloud.v1.IListAttachedClustersRequest,
          | protos.google.cloud.gkemulticloud.v1.IListAttachedClustersResponse
          | null
          | undefined,
          protos.google.cloud.gkemulticloud.v1.IAttachedCluster
        >,
    callback?: PaginationCallback<
      protos.google.cloud.gkemulticloud.v1.IListAttachedClustersRequest,
      | protos.google.cloud.gkemulticloud.v1.IListAttachedClustersResponse
      | null
      | undefined,
      protos.google.cloud.gkemulticloud.v1.IAttachedCluster
    >
  ): Promise<
    [
      protos.google.cloud.gkemulticloud.v1.IAttachedCluster[],
      protos.google.cloud.gkemulticloud.v1.IListAttachedClustersRequest | null,
      protos.google.cloud.gkemulticloud.v1.IListAttachedClustersResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listAttachedClusters(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location which owns this collection of
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resources.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 50 will be used by the service.
   *   Regardless of the pageSize value, the response can include a partial list
   *   and a caller should only rely on response's
   *   {@link google.cloud.gkemulticloud.v1.ListAttachedClustersResponse.next_page_token|nextPageToken}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The `nextPageToken` value returned from a previous
   *   {@link google.cloud.gkemulticloud.v1.AttachedClusters.ListAttachedClusters|attachedClusters.list}
   *   request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [AttachedCluster]{@link google.cloud.gkemulticloud.v1.AttachedCluster} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listAttachedClustersAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listAttachedClustersStream(
    request?: protos.google.cloud.gkemulticloud.v1.IListAttachedClustersRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAttachedClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAttachedClusters.createStream(
      this.innerApiCalls.listAttachedClusters as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listAttachedClusters`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent location which owns this collection of
   *   {@link google.cloud.gkemulticloud.v1.AttachedCluster|AttachedCluster} resources.
   *
   *   Location names are formatted as `projects/<project-id>/locations/<region>`.
   *
   *   See [Resource Names](https://cloud.google.com/apis/design/resource_names)
   *   for more details on GCP resource names.
   * @param {number} request.pageSize
   *   The maximum number of items to return.
   *
   *   If not specified, a default value of 50 will be used by the service.
   *   Regardless of the pageSize value, the response can include a partial list
   *   and a caller should only rely on response's
   *   {@link google.cloud.gkemulticloud.v1.ListAttachedClustersResponse.next_page_token|nextPageToken}
   *   to determine if there are more instances left to be queried.
   * @param {string} request.pageToken
   *   The `nextPageToken` value returned from a previous
   *   {@link google.cloud.gkemulticloud.v1.AttachedClusters.ListAttachedClusters|attachedClusters.list}
   *   request, if any.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [AttachedCluster]{@link google.cloud.gkemulticloud.v1.AttachedCluster}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/attached_clusters.list_attached_clusters.js</caption>
   * region_tag:gkemulticloud_v1_generated_AttachedClusters_ListAttachedClusters_async
   */
  listAttachedClustersAsync(
    request?: protos.google.cloud.gkemulticloud.v1.IListAttachedClustersRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.gkemulticloud.v1.IAttachedCluster> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listAttachedClusters'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listAttachedClusters.asyncIterate(
      this.innerApiCalls['listAttachedClusters'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.gkemulticloud.v1.IAttachedCluster>;
  }
  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * [google.longrunning.Operation]{@link
   * external:"google.longrunning.Operation"}. The promise has a method named
   * "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified attachedCluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} attached_cluster
   * @returns {string} Resource name string.
   */
  attachedClusterPath(
    project: string,
    location: string,
    attachedCluster: string
  ) {
    return this.pathTemplates.attachedClusterPathTemplate.render({
      project: project,
      location: location,
      attached_cluster: attachedCluster,
    });
  }

  /**
   * Parse the project from AttachedCluster resource.
   *
   * @param {string} attachedClusterName
   *   A fully-qualified path representing AttachedCluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAttachedClusterName(attachedClusterName: string) {
    return this.pathTemplates.attachedClusterPathTemplate.match(
      attachedClusterName
    ).project;
  }

  /**
   * Parse the location from AttachedCluster resource.
   *
   * @param {string} attachedClusterName
   *   A fully-qualified path representing AttachedCluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAttachedClusterName(attachedClusterName: string) {
    return this.pathTemplates.attachedClusterPathTemplate.match(
      attachedClusterName
    ).location;
  }

  /**
   * Parse the attached_cluster from AttachedCluster resource.
   *
   * @param {string} attachedClusterName
   *   A fully-qualified path representing AttachedCluster resource.
   * @returns {string} A string representing the attached_cluster.
   */
  matchAttachedClusterFromAttachedClusterName(attachedClusterName: string) {
    return this.pathTemplates.attachedClusterPathTemplate.match(
      attachedClusterName
    ).attached_cluster;
  }

  /**
   * Return a fully-qualified attachedServerConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  attachedServerConfigPath(project: string, location: string) {
    return this.pathTemplates.attachedServerConfigPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from AttachedServerConfig resource.
   *
   * @param {string} attachedServerConfigName
   *   A fully-qualified path representing AttachedServerConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAttachedServerConfigName(attachedServerConfigName: string) {
    return this.pathTemplates.attachedServerConfigPathTemplate.match(
      attachedServerConfigName
    ).project;
  }

  /**
   * Parse the location from AttachedServerConfig resource.
   *
   * @param {string} attachedServerConfigName
   *   A fully-qualified path representing AttachedServerConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAttachedServerConfigName(attachedServerConfigName: string) {
    return this.pathTemplates.attachedServerConfigPathTemplate.match(
      attachedServerConfigName
    ).location;
  }

  /**
   * Return a fully-qualified awsCluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} aws_cluster
   * @returns {string} Resource name string.
   */
  awsClusterPath(project: string, location: string, awsCluster: string) {
    return this.pathTemplates.awsClusterPathTemplate.render({
      project: project,
      location: location,
      aws_cluster: awsCluster,
    });
  }

  /**
   * Parse the project from AwsCluster resource.
   *
   * @param {string} awsClusterName
   *   A fully-qualified path representing AwsCluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAwsClusterName(awsClusterName: string) {
    return this.pathTemplates.awsClusterPathTemplate.match(awsClusterName)
      .project;
  }

  /**
   * Parse the location from AwsCluster resource.
   *
   * @param {string} awsClusterName
   *   A fully-qualified path representing AwsCluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAwsClusterName(awsClusterName: string) {
    return this.pathTemplates.awsClusterPathTemplate.match(awsClusterName)
      .location;
  }

  /**
   * Parse the aws_cluster from AwsCluster resource.
   *
   * @param {string} awsClusterName
   *   A fully-qualified path representing AwsCluster resource.
   * @returns {string} A string representing the aws_cluster.
   */
  matchAwsClusterFromAwsClusterName(awsClusterName: string) {
    return this.pathTemplates.awsClusterPathTemplate.match(awsClusterName)
      .aws_cluster;
  }

  /**
   * Return a fully-qualified awsNodePool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} aws_cluster
   * @param {string} aws_node_pool
   * @returns {string} Resource name string.
   */
  awsNodePoolPath(
    project: string,
    location: string,
    awsCluster: string,
    awsNodePool: string
  ) {
    return this.pathTemplates.awsNodePoolPathTemplate.render({
      project: project,
      location: location,
      aws_cluster: awsCluster,
      aws_node_pool: awsNodePool,
    });
  }

  /**
   * Parse the project from AwsNodePool resource.
   *
   * @param {string} awsNodePoolName
   *   A fully-qualified path representing AwsNodePool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAwsNodePoolName(awsNodePoolName: string) {
    return this.pathTemplates.awsNodePoolPathTemplate.match(awsNodePoolName)
      .project;
  }

  /**
   * Parse the location from AwsNodePool resource.
   *
   * @param {string} awsNodePoolName
   *   A fully-qualified path representing AwsNodePool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAwsNodePoolName(awsNodePoolName: string) {
    return this.pathTemplates.awsNodePoolPathTemplate.match(awsNodePoolName)
      .location;
  }

  /**
   * Parse the aws_cluster from AwsNodePool resource.
   *
   * @param {string} awsNodePoolName
   *   A fully-qualified path representing AwsNodePool resource.
   * @returns {string} A string representing the aws_cluster.
   */
  matchAwsClusterFromAwsNodePoolName(awsNodePoolName: string) {
    return this.pathTemplates.awsNodePoolPathTemplate.match(awsNodePoolName)
      .aws_cluster;
  }

  /**
   * Parse the aws_node_pool from AwsNodePool resource.
   *
   * @param {string} awsNodePoolName
   *   A fully-qualified path representing AwsNodePool resource.
   * @returns {string} A string representing the aws_node_pool.
   */
  matchAwsNodePoolFromAwsNodePoolName(awsNodePoolName: string) {
    return this.pathTemplates.awsNodePoolPathTemplate.match(awsNodePoolName)
      .aws_node_pool;
  }

  /**
   * Return a fully-qualified awsServerConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  awsServerConfigPath(project: string, location: string) {
    return this.pathTemplates.awsServerConfigPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from AwsServerConfig resource.
   *
   * @param {string} awsServerConfigName
   *   A fully-qualified path representing AwsServerConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAwsServerConfigName(awsServerConfigName: string) {
    return this.pathTemplates.awsServerConfigPathTemplate.match(
      awsServerConfigName
    ).project;
  }

  /**
   * Parse the location from AwsServerConfig resource.
   *
   * @param {string} awsServerConfigName
   *   A fully-qualified path representing AwsServerConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAwsServerConfigName(awsServerConfigName: string) {
    return this.pathTemplates.awsServerConfigPathTemplate.match(
      awsServerConfigName
    ).location;
  }

  /**
   * Return a fully-qualified azureClient resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} azure_client
   * @returns {string} Resource name string.
   */
  azureClientPath(project: string, location: string, azureClient: string) {
    return this.pathTemplates.azureClientPathTemplate.render({
      project: project,
      location: location,
      azure_client: azureClient,
    });
  }

  /**
   * Parse the project from AzureClient resource.
   *
   * @param {string} azureClientName
   *   A fully-qualified path representing AzureClient resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAzureClientName(azureClientName: string) {
    return this.pathTemplates.azureClientPathTemplate.match(azureClientName)
      .project;
  }

  /**
   * Parse the location from AzureClient resource.
   *
   * @param {string} azureClientName
   *   A fully-qualified path representing AzureClient resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAzureClientName(azureClientName: string) {
    return this.pathTemplates.azureClientPathTemplate.match(azureClientName)
      .location;
  }

  /**
   * Parse the azure_client from AzureClient resource.
   *
   * @param {string} azureClientName
   *   A fully-qualified path representing AzureClient resource.
   * @returns {string} A string representing the azure_client.
   */
  matchAzureClientFromAzureClientName(azureClientName: string) {
    return this.pathTemplates.azureClientPathTemplate.match(azureClientName)
      .azure_client;
  }

  /**
   * Return a fully-qualified azureCluster resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} azure_cluster
   * @returns {string} Resource name string.
   */
  azureClusterPath(project: string, location: string, azureCluster: string) {
    return this.pathTemplates.azureClusterPathTemplate.render({
      project: project,
      location: location,
      azure_cluster: azureCluster,
    });
  }

  /**
   * Parse the project from AzureCluster resource.
   *
   * @param {string} azureClusterName
   *   A fully-qualified path representing AzureCluster resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAzureClusterName(azureClusterName: string) {
    return this.pathTemplates.azureClusterPathTemplate.match(azureClusterName)
      .project;
  }

  /**
   * Parse the location from AzureCluster resource.
   *
   * @param {string} azureClusterName
   *   A fully-qualified path representing AzureCluster resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAzureClusterName(azureClusterName: string) {
    return this.pathTemplates.azureClusterPathTemplate.match(azureClusterName)
      .location;
  }

  /**
   * Parse the azure_cluster from AzureCluster resource.
   *
   * @param {string} azureClusterName
   *   A fully-qualified path representing AzureCluster resource.
   * @returns {string} A string representing the azure_cluster.
   */
  matchAzureClusterFromAzureClusterName(azureClusterName: string) {
    return this.pathTemplates.azureClusterPathTemplate.match(azureClusterName)
      .azure_cluster;
  }

  /**
   * Return a fully-qualified azureNodePool resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} azure_cluster
   * @param {string} azure_node_pool
   * @returns {string} Resource name string.
   */
  azureNodePoolPath(
    project: string,
    location: string,
    azureCluster: string,
    azureNodePool: string
  ) {
    return this.pathTemplates.azureNodePoolPathTemplate.render({
      project: project,
      location: location,
      azure_cluster: azureCluster,
      azure_node_pool: azureNodePool,
    });
  }

  /**
   * Parse the project from AzureNodePool resource.
   *
   * @param {string} azureNodePoolName
   *   A fully-qualified path representing AzureNodePool resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAzureNodePoolName(azureNodePoolName: string) {
    return this.pathTemplates.azureNodePoolPathTemplate.match(azureNodePoolName)
      .project;
  }

  /**
   * Parse the location from AzureNodePool resource.
   *
   * @param {string} azureNodePoolName
   *   A fully-qualified path representing AzureNodePool resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAzureNodePoolName(azureNodePoolName: string) {
    return this.pathTemplates.azureNodePoolPathTemplate.match(azureNodePoolName)
      .location;
  }

  /**
   * Parse the azure_cluster from AzureNodePool resource.
   *
   * @param {string} azureNodePoolName
   *   A fully-qualified path representing AzureNodePool resource.
   * @returns {string} A string representing the azure_cluster.
   */
  matchAzureClusterFromAzureNodePoolName(azureNodePoolName: string) {
    return this.pathTemplates.azureNodePoolPathTemplate.match(azureNodePoolName)
      .azure_cluster;
  }

  /**
   * Parse the azure_node_pool from AzureNodePool resource.
   *
   * @param {string} azureNodePoolName
   *   A fully-qualified path representing AzureNodePool resource.
   * @returns {string} A string representing the azure_node_pool.
   */
  matchAzureNodePoolFromAzureNodePoolName(azureNodePoolName: string) {
    return this.pathTemplates.azureNodePoolPathTemplate.match(azureNodePoolName)
      .azure_node_pool;
  }

  /**
   * Return a fully-qualified azureServerConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  azureServerConfigPath(project: string, location: string) {
    return this.pathTemplates.azureServerConfigPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from AzureServerConfig resource.
   *
   * @param {string} azureServerConfigName
   *   A fully-qualified path representing AzureServerConfig resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAzureServerConfigName(azureServerConfigName: string) {
    return this.pathTemplates.azureServerConfigPathTemplate.match(
      azureServerConfigName
    ).project;
  }

  /**
   * Parse the location from AzureServerConfig resource.
   *
   * @param {string} azureServerConfigName
   *   A fully-qualified path representing AzureServerConfig resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromAzureServerConfigName(azureServerConfigName: string) {
    return this.pathTemplates.azureServerConfigPathTemplate.match(
      azureServerConfigName
    ).location;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.attachedClustersStub && !this._terminated) {
      return this.attachedClustersStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
