// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');

/**
 * Client JSON configuration object, loaded from
 * `src/v1/privileged_access_manager_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './privileged_access_manager_client_config.json';
const version = require('../../../package.json').version;

/**
 *  This API allows customers to manage temporary, request based privileged
 *  access to their resources.
 *
 *  It defines the following resource model:
 *
 *  * A collection of `Entitlement` resources. An entitlement allows configuring
 *    (among other things):
 *
 *    * Some kind of privileged access that users can request.
 *    * A set of users called _requesters_ who can request this access.
 *    * A maximum duration for which the access can be requested.
 *    * An optional approval workflow which must be satisfied before access is
 *      granted.
 *
 *  * A collection of `Grant` resources. A grant is a request by a requester to
 *    get the privileged access specified in an entitlement for some duration.
 *
 *    After the approval workflow as specified in the entitlement is satisfied,
 *    the specified access is given to the requester. The access is automatically
 *    taken back after the requested duration is over.
 * @class
 * @memberof v1
 */
export class PrivilegedAccessManagerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  privilegedAccessManagerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of PrivilegedAccessManagerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new PrivilegedAccessManagerClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this
      .constructor as typeof PrivilegedAccessManagerClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'privilegedaccessmanager.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      folderLocationEntitlementPathTemplate: new this._gaxModule.PathTemplate(
        'folders/{folder}/locations/{location}/entitlements/{entitlement}'
      ),
      folderLocationEntitlementGrantPathTemplate:
        new this._gaxModule.PathTemplate(
          'folders/{folder}/locations/{location}/entitlements/{entitlement}/grants/{grant}'
        ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      organizationLocationEntitlementPathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/locations/{location}/entitlements/{entitlement}'
        ),
      organizationLocationEntitlementGrantPathTemplate:
        new this._gaxModule.PathTemplate(
          'organizations/{organization}/locations/{location}/entitlements/{entitlement}/grants/{grant}'
        ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectLocationEntitlementPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/entitlements/{entitlement}'
      ),
      projectLocationEntitlementGrantPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/entitlements/{entitlement}/grants/{grant}'
        ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listEntitlements: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'entitlements'
      ),
      searchEntitlements: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'entitlements'
      ),
      listGrants: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'grants'
      ),
      searchGrants: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'grants'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback) {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
          additional_bindings: [
            {get: '/v1/{name=organizations/*/locations/*}'},
            {get: '/v1/{name=folders/*/locations/*}'},
          ],
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
          additional_bindings: [
            {get: '/v1/{name=organizations/*}/locations'},
            {get: '/v1/{name=folders/*}/locations'},
          ],
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
          additional_bindings: [
            {delete: '/v1/{name=organizations/*/locations/*/operations/*}'},
            {delete: '/v1/{name=folders/*/locations/*/operations/*}'},
          ],
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
          additional_bindings: [
            {get: '/v1/{name=organizations/*/locations/*/operations/*}'},
            {get: '/v1/{name=folders/*/locations/*/operations/*}'},
          ],
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
          additional_bindings: [
            {get: '/v1/{name=organizations/*/locations/*}/operations'},
            {get: '/v1/{name=folders/*/locations/*}/operations'},
          ],
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createEntitlementResponse = protoFilesRoot.lookup(
      '.google.cloud.privilegedaccessmanager.v1.Entitlement'
    ) as gax.protobuf.Type;
    const createEntitlementMetadata = protoFilesRoot.lookup(
      '.google.cloud.privilegedaccessmanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteEntitlementResponse = protoFilesRoot.lookup(
      '.google.cloud.privilegedaccessmanager.v1.Entitlement'
    ) as gax.protobuf.Type;
    const deleteEntitlementMetadata = protoFilesRoot.lookup(
      '.google.cloud.privilegedaccessmanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateEntitlementResponse = protoFilesRoot.lookup(
      '.google.cloud.privilegedaccessmanager.v1.Entitlement'
    ) as gax.protobuf.Type;
    const updateEntitlementMetadata = protoFilesRoot.lookup(
      '.google.cloud.privilegedaccessmanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const revokeGrantResponse = protoFilesRoot.lookup(
      '.google.cloud.privilegedaccessmanager.v1.Grant'
    ) as gax.protobuf.Type;
    const revokeGrantMetadata = protoFilesRoot.lookup(
      '.google.cloud.privilegedaccessmanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createEntitlement: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createEntitlementResponse.decode.bind(createEntitlementResponse),
        createEntitlementMetadata.decode.bind(createEntitlementMetadata)
      ),
      deleteEntitlement: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteEntitlementResponse.decode.bind(deleteEntitlementResponse),
        deleteEntitlementMetadata.decode.bind(deleteEntitlementMetadata)
      ),
      updateEntitlement: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateEntitlementResponse.decode.bind(updateEntitlementResponse),
        updateEntitlementMetadata.decode.bind(updateEntitlementMetadata)
      ),
      revokeGrant: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        revokeGrantResponse.decode.bind(revokeGrantResponse),
        revokeGrantMetadata.decode.bind(revokeGrantMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.privilegedaccessmanager.v1.PrivilegedAccessManager',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.privilegedAccessManagerStub) {
      return this.privilegedAccessManagerStub;
    }

    // Put together the "service stub" for
    // google.cloud.privilegedaccessmanager.v1.PrivilegedAccessManager.
    this.privilegedAccessManagerStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.privilegedaccessmanager.v1.PrivilegedAccessManager'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.privilegedaccessmanager.v1
            .PrivilegedAccessManager,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const privilegedAccessManagerStubMethods = [
      'checkOnboardingStatus',
      'listEntitlements',
      'searchEntitlements',
      'getEntitlement',
      'createEntitlement',
      'deleteEntitlement',
      'updateEntitlement',
      'listGrants',
      'searchGrants',
      'getGrant',
      'createGrant',
      'approveGrant',
      'denyGrant',
      'revokeGrant',
    ];
    for (const methodName of privilegedAccessManagerStubMethods) {
      const callPromise = this.privilegedAccessManagerStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.privilegedAccessManagerStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'privilegedaccessmanager.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'privilegedaccessmanager.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * CheckOnboardingStatus reports the onboarding status for a
   * project/folder/organization. Any findings reported by this API need to be
   * fixed before PAM can be used on the resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource for which the onboarding status should be checked.
   *   Should be in one of the following formats:
   *
   *   * `projects/{project-number|project-id}/locations/{region}`
   *   * `folders/{folder-number}/locations/{region}`
   *   * `organizations/{organization-number}/locations/{region}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.privilegedaccessmanager.v1.CheckOnboardingStatusResponse|CheckOnboardingStatusResponse}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.check_onboarding_status.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_CheckOnboardingStatus_async
   */
  checkOnboardingStatus(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusResponse,
      (
        | protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  checkOnboardingStatus(
    request: protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusResponse,
      | protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  checkOnboardingStatus(
    request: protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusRequest,
    callback: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusResponse,
      | protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  checkOnboardingStatus(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusResponse,
          | protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusResponse,
      | protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusResponse,
      (
        | protos.google.cloud.privilegedaccessmanager.v1.ICheckOnboardingStatusRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.checkOnboardingStatus(request, options, callback);
  }
  /**
   * Gets details of a single entitlement.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.privilegedaccessmanager.v1.Entitlement|Entitlement}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.get_entitlement.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_GetEntitlement_async
   */
  getEntitlement(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IGetEntitlementRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
      (
        | protos.google.cloud.privilegedaccessmanager.v1.IGetEntitlementRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getEntitlement(
    request: protos.google.cloud.privilegedaccessmanager.v1.IGetEntitlementRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
      | protos.google.cloud.privilegedaccessmanager.v1.IGetEntitlementRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getEntitlement(
    request: protos.google.cloud.privilegedaccessmanager.v1.IGetEntitlementRequest,
    callback: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
      | protos.google.cloud.privilegedaccessmanager.v1.IGetEntitlementRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getEntitlement(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IGetEntitlementRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
          | protos.google.cloud.privilegedaccessmanager.v1.IGetEntitlementRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
      | protos.google.cloud.privilegedaccessmanager.v1.IGetEntitlementRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
      (
        | protos.google.cloud.privilegedaccessmanager.v1.IGetEntitlementRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getEntitlement(request, options, callback);
  }
  /**
   * Get details of a single grant.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.privilegedaccessmanager.v1.Grant|Grant}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.get_grant.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_GetGrant_async
   */
  getGrant(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IGetGrantRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      (
        | protos.google.cloud.privilegedaccessmanager.v1.IGetGrantRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  getGrant(
    request: protos.google.cloud.privilegedaccessmanager.v1.IGetGrantRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      | protos.google.cloud.privilegedaccessmanager.v1.IGetGrantRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGrant(
    request: protos.google.cloud.privilegedaccessmanager.v1.IGetGrantRequest,
    callback: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      | protos.google.cloud.privilegedaccessmanager.v1.IGetGrantRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getGrant(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IGetGrantRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.privilegedaccessmanager.v1.IGrant,
          | protos.google.cloud.privilegedaccessmanager.v1.IGetGrantRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      | protos.google.cloud.privilegedaccessmanager.v1.IGetGrantRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      (
        | protos.google.cloud.privilegedaccessmanager.v1.IGetGrantRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getGrant(request, options, callback);
  }
  /**
   * Creates a new grant in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the parent entitlement for which this grant is being
   *   requested.
   * @param {google.cloud.privilegedaccessmanager.v1.Grant} request.grant
   *   Required. The resource being created.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server knows to
   *   ignore the request if it has already been completed. The server guarantees
   *   this for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, ignores the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.privilegedaccessmanager.v1.Grant|Grant}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.create_grant.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_CreateGrant_async
   */
  createGrant(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ICreateGrantRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      (
        | protos.google.cloud.privilegedaccessmanager.v1.ICreateGrantRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  createGrant(
    request: protos.google.cloud.privilegedaccessmanager.v1.ICreateGrantRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      | protos.google.cloud.privilegedaccessmanager.v1.ICreateGrantRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createGrant(
    request: protos.google.cloud.privilegedaccessmanager.v1.ICreateGrantRequest,
    callback: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      | protos.google.cloud.privilegedaccessmanager.v1.ICreateGrantRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createGrant(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ICreateGrantRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.privilegedaccessmanager.v1.IGrant,
          | protos.google.cloud.privilegedaccessmanager.v1.ICreateGrantRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      | protos.google.cloud.privilegedaccessmanager.v1.ICreateGrantRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      (
        | protos.google.cloud.privilegedaccessmanager.v1.ICreateGrantRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createGrant(request, options, callback);
  }
  /**
   * `ApproveGrant` is used to approve a grant. This method can only be called
   * on a grant when it's in the `APPROVAL_AWAITED` state. This operation can't
   * be undone.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the grant resource which is being approved.
   * @param {string} [request.reason]
   *   Optional. The reason for approving this grant. This is required if the
   *   `require_approver_justification` field of the `ManualApprovals` workflow
   *   used in this grant is true.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.privilegedaccessmanager.v1.Grant|Grant}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.approve_grant.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_ApproveGrant_async
   */
  approveGrant(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IApproveGrantRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      (
        | protos.google.cloud.privilegedaccessmanager.v1.IApproveGrantRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  approveGrant(
    request: protos.google.cloud.privilegedaccessmanager.v1.IApproveGrantRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      | protos.google.cloud.privilegedaccessmanager.v1.IApproveGrantRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  approveGrant(
    request: protos.google.cloud.privilegedaccessmanager.v1.IApproveGrantRequest,
    callback: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      | protos.google.cloud.privilegedaccessmanager.v1.IApproveGrantRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  approveGrant(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IApproveGrantRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.privilegedaccessmanager.v1.IGrant,
          | protos.google.cloud.privilegedaccessmanager.v1.IApproveGrantRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      | protos.google.cloud.privilegedaccessmanager.v1.IApproveGrantRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      (
        | protos.google.cloud.privilegedaccessmanager.v1.IApproveGrantRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.approveGrant(request, options, callback);
  }
  /**
   * `DenyGrant` is used to deny a grant. This method can only be called on a
   * grant when it's in the `APPROVAL_AWAITED` state. This operation can't be
   * undone.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the grant resource which is being denied.
   * @param {string} [request.reason]
   *   Optional. The reason for denying this grant. This is required if
   *   `require_approver_justification` field of the `ManualApprovals` workflow
   *   used in this grant is true.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.privilegedaccessmanager.v1.Grant|Grant}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.deny_grant.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_DenyGrant_async
   */
  denyGrant(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IDenyGrantRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      (
        | protos.google.cloud.privilegedaccessmanager.v1.IDenyGrantRequest
        | undefined
      ),
      {} | undefined,
    ]
  >;
  denyGrant(
    request: protos.google.cloud.privilegedaccessmanager.v1.IDenyGrantRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      | protos.google.cloud.privilegedaccessmanager.v1.IDenyGrantRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  denyGrant(
    request: protos.google.cloud.privilegedaccessmanager.v1.IDenyGrantRequest,
    callback: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      | protos.google.cloud.privilegedaccessmanager.v1.IDenyGrantRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  denyGrant(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IDenyGrantRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.privilegedaccessmanager.v1.IGrant,
          | protos.google.cloud.privilegedaccessmanager.v1.IDenyGrantRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      | protos.google.cloud.privilegedaccessmanager.v1.IDenyGrantRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IGrant,
      (
        | protos.google.cloud.privilegedaccessmanager.v1.IDenyGrantRequest
        | undefined
      ),
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.denyGrant(request, options, callback);
  }

  /**
   * Creates a new entitlement in a given project/folder/organization and
   * location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of the parent resource for the entitlement.
   *   Possible formats:
   *
   *   * `organizations/{organization-number}/locations/{region}`
   *   * `folders/{folder-number}/locations/{region}`
   *   * `projects/{project-id|project-number}/locations/{region}`
   * @param {string} request.entitlementId
   *   Required. The ID to use for this entitlement. This becomes the last part of
   *   the resource name.
   *
   *   This value should be 4-63 characters in length, and valid characters are
   *   "[a-z]", "[0-9]", and "-". The first character should be from [a-z].
   *
   *   This value should be unique among all other entitlements under the
   *   specified `parent`.
   * @param {google.cloud.privilegedaccessmanager.v1.Entitlement} request.entitlement
   *   Required. The resource being created
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server knows to
   *   ignore the request if it has already been completed. The server guarantees
   *   this for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, ignores the second request and returns the
   *   previous operation's response. This prevents clients from accidentally
   *   creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.create_entitlement.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_CreateEntitlement_async
   */
  createEntitlement(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ICreateEntitlementRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  createEntitlement(
    request: protos.google.cloud.privilegedaccessmanager.v1.ICreateEntitlementRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEntitlement(
    request: protos.google.cloud.privilegedaccessmanager.v1.ICreateEntitlementRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createEntitlement(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ICreateEntitlementRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
            protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createEntitlement(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createEntitlement()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.create_entitlement.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_CreateEntitlement_async
   */
  async checkCreateEntitlementProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.privilegedaccessmanager.v1.Entitlement,
      protos.google.cloud.privilegedaccessmanager.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createEntitlement,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.privilegedaccessmanager.v1.Entitlement,
      protos.google.cloud.privilegedaccessmanager.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single entitlement. This method can only be called when there
   * are no in-progress (ACTIVE/ACTIVATING/REVOKING) grants under the
   * entitlement.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the resource.
   * @param {string} [request.requestId]
   *   Optional. An optional request ID to identify requests. Specify a unique
   *   request ID so that if you must retry your request, the server knows to
   *   ignore the request if it has already been completed. The server guarantees
   *   this for at least 60 minutes after the first request.
   *
   *   For example, consider a situation where you make an initial request and the
   *   request times out. If you make the request again with the same request
   *   ID, the server can check if original operation with the same request ID
   *   was received, and if so, ignores the second request. This prevents
   *   clients from accidentally creating duplicate commitments.
   *
   *   The request ID must be a valid UUID with the exception that zero UUID is
   *   not supported (00000000-0000-0000-0000-000000000000).
   * @param {boolean} [request.force]
   *   Optional. If set to true, any child grant under this entitlement is also
   *   deleted. (Otherwise, the request only works if the entitlement has no child
   *   grant.)
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.delete_entitlement.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_DeleteEntitlement_async
   */
  deleteEntitlement(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IDeleteEntitlementRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  deleteEntitlement(
    request: protos.google.cloud.privilegedaccessmanager.v1.IDeleteEntitlementRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEntitlement(
    request: protos.google.cloud.privilegedaccessmanager.v1.IDeleteEntitlementRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteEntitlement(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IDeleteEntitlementRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
            protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteEntitlement(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteEntitlement()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.delete_entitlement.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_DeleteEntitlement_async
   */
  async checkDeleteEntitlementProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.privilegedaccessmanager.v1.Entitlement,
      protos.google.cloud.privilegedaccessmanager.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteEntitlement,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.privilegedaccessmanager.v1.Entitlement,
      protos.google.cloud.privilegedaccessmanager.v1.OperationMetadata
    >;
  }
  /**
   * Updates the entitlement specified in the request. Updated fields in the
   * entitlement need to be specified in an update mask. The changes made to an
   * entitlement are applicable only on future grants of the entitlement.
   * However, if new approvers are added or existing approvers are removed from
   * the approval workflow, the changes are effective on existing grants.
   *
   * The following fields are not supported for updates:
   *
   *  * All immutable fields
   *  * Entitlement name
   *  * Resource name
   *  * Resource type
   *  * Adding an approval workflow in an entitlement which previously had no
   *    approval workflow.
   *  * Deleting the approval workflow from an entitlement.
   *  * Adding or deleting a step in the approval workflow (only one step is
   *    supported)
   *
   * Note that updates are allowed on the list of approvers in an approval
   * workflow step.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.privilegedaccessmanager.v1.Entitlement} request.entitlement
   *   Required. The entitlement resource that is updated.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The list of fields to update. A field is overwritten if, and only
   *   if, it is in the mask. Any immutable fields set in the mask are ignored by
   *   the server. Repeated fields and map fields are only allowed in the last
   *   position of a `paths` string and overwrite the existing values. Hence an
   *   update to a repeated field or a map should contain the entire list of
   *   values. The fields specified in the update_mask are relative to the
   *   resource and not to the request.
   *   (e.g. `MaxRequestDuration`; *not* `entitlement.MaxRequestDuration`)
   *   A value of '*' for this field refers to full replacement of the resource.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.update_entitlement.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_UpdateEntitlement_async
   */
  updateEntitlement(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IUpdateEntitlementRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  updateEntitlement(
    request: protos.google.cloud.privilegedaccessmanager.v1.IUpdateEntitlementRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateEntitlement(
    request: protos.google.cloud.privilegedaccessmanager.v1.IUpdateEntitlementRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateEntitlement(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IUpdateEntitlementRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
            protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IEntitlement,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'entitlement.name': request.entitlement!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateEntitlement(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateEntitlement()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.update_entitlement.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_UpdateEntitlement_async
   */
  async checkUpdateEntitlementProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.privilegedaccessmanager.v1.Entitlement,
      protos.google.cloud.privilegedaccessmanager.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateEntitlement,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.privilegedaccessmanager.v1.Entitlement,
      protos.google.cloud.privilegedaccessmanager.v1.OperationMetadata
    >;
  }
  /**
   * `RevokeGrant` is used to immediately revoke access for a grant. This method
   * can be called when the grant is in a non-terminal state.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the grant resource which is being revoked.
   * @param {string} [request.reason]
   *   Optional. The reason for revoking this grant.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.revoke_grant.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_RevokeGrant_async
   */
  revokeGrant(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IRevokeGrantRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IGrant,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  >;
  revokeGrant(
    request: protos.google.cloud.privilegedaccessmanager.v1.IRevokeGrantRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IGrant,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  revokeGrant(
    request: protos.google.cloud.privilegedaccessmanager.v1.IRevokeGrantRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IGrant,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  revokeGrant(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IRevokeGrantRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.privilegedaccessmanager.v1.IGrant,
            protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IGrant,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.privilegedaccessmanager.v1.IGrant,
        protos.google.cloud.privilegedaccessmanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.revokeGrant(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `revokeGrant()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.revoke_grant.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_RevokeGrant_async
   */
  async checkRevokeGrantProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.privilegedaccessmanager.v1.Grant,
      protos.google.cloud.privilegedaccessmanager.v1.OperationMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.revokeGrant,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.privilegedaccessmanager.v1.Grant,
      protos.google.cloud.privilegedaccessmanager.v1.OperationMetadata
    >;
  }
  /**
   * Lists entitlements in a given project/folder/organization and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent which owns the entitlement resources.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results.
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.privilegedaccessmanager.v1.Entitlement|Entitlement}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listEntitlementsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEntitlements(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement[],
      protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsRequest | null,
      protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsResponse,
    ]
  >;
  listEntitlements(
    request: protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsRequest,
      | protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsResponse
      | null
      | undefined,
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement
    >
  ): void;
  listEntitlements(
    request: protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsRequest,
    callback: PaginationCallback<
      protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsRequest,
      | protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsResponse
      | null
      | undefined,
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement
    >
  ): void;
  listEntitlements(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsRequest,
          | protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsResponse
          | null
          | undefined,
          protos.google.cloud.privilegedaccessmanager.v1.IEntitlement
        >,
    callback?: PaginationCallback<
      protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsRequest,
      | protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsResponse
      | null
      | undefined,
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement
    >
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement[],
      protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsRequest | null,
      protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listEntitlements(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent which owns the entitlement resources.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results.
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.privilegedaccessmanager.v1.Entitlement|Entitlement} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listEntitlementsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listEntitlementsStream(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEntitlements'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEntitlements.createStream(
      this.innerApiCalls.listEntitlements as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listEntitlements`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent which owns the entitlement resources.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. Server may return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results.
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.privilegedaccessmanager.v1.Entitlement|Entitlement}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.list_entitlements.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_ListEntitlements_async
   */
  listEntitlementsAsync(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IListEntitlementsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.privilegedaccessmanager.v1.IEntitlement> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listEntitlements'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listEntitlements.asyncIterate(
      this.innerApiCalls['listEntitlements'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.privilegedaccessmanager.v1.IEntitlement>;
  }
  /**
   * `SearchEntitlements` returns entitlements on which the caller has the
   * specified access.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent which owns the entitlement resources.
   * @param {google.cloud.privilegedaccessmanager.v1.SearchEntitlementsRequest.CallerAccessType} request.callerAccessType
   *   Required. Only entitlements where the calling user has this access are
   *   returned.
   * @param {string} [request.filter]
   *   Optional. Only entitlements matching this filter are returned in the
   *   response.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server may return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.privilegedaccessmanager.v1.Entitlement|Entitlement}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `searchEntitlementsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  searchEntitlements(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement[],
      protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsRequest | null,
      protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsResponse,
    ]
  >;
  searchEntitlements(
    request: protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsRequest,
      | protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsResponse
      | null
      | undefined,
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement
    >
  ): void;
  searchEntitlements(
    request: protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsRequest,
    callback: PaginationCallback<
      protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsRequest,
      | protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsResponse
      | null
      | undefined,
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement
    >
  ): void;
  searchEntitlements(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsRequest,
          | protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsResponse
          | null
          | undefined,
          protos.google.cloud.privilegedaccessmanager.v1.IEntitlement
        >,
    callback?: PaginationCallback<
      protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsRequest,
      | protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsResponse
      | null
      | undefined,
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement
    >
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IEntitlement[],
      protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsRequest | null,
      protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.searchEntitlements(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent which owns the entitlement resources.
   * @param {google.cloud.privilegedaccessmanager.v1.SearchEntitlementsRequest.CallerAccessType} request.callerAccessType
   *   Required. Only entitlements where the calling user has this access are
   *   returned.
   * @param {string} [request.filter]
   *   Optional. Only entitlements matching this filter are returned in the
   *   response.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server may return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.privilegedaccessmanager.v1.Entitlement|Entitlement} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `searchEntitlementsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  searchEntitlementsStream(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['searchEntitlements'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchEntitlements.createStream(
      this.innerApiCalls.searchEntitlements as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `searchEntitlements`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent which owns the entitlement resources.
   * @param {google.cloud.privilegedaccessmanager.v1.SearchEntitlementsRequest.CallerAccessType} request.callerAccessType
   *   Required. Only entitlements where the calling user has this access are
   *   returned.
   * @param {string} [request.filter]
   *   Optional. Only entitlements matching this filter are returned in the
   *   response.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server may return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.privilegedaccessmanager.v1.Entitlement|Entitlement}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.search_entitlements.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_SearchEntitlements_async
   */
  searchEntitlementsAsync(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ISearchEntitlementsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.privilegedaccessmanager.v1.IEntitlement> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['searchEntitlements'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchEntitlements.asyncIterate(
      this.innerApiCalls['searchEntitlements'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.privilegedaccessmanager.v1.IEntitlement>;
  }
  /**
   * Lists grants for a given entitlement.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource which owns the grants.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server may return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results.
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.privilegedaccessmanager.v1.Grant|Grant}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listGrantsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listGrants(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IListGrantsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IGrant[],
      protos.google.cloud.privilegedaccessmanager.v1.IListGrantsRequest | null,
      protos.google.cloud.privilegedaccessmanager.v1.IListGrantsResponse,
    ]
  >;
  listGrants(
    request: protos.google.cloud.privilegedaccessmanager.v1.IListGrantsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.privilegedaccessmanager.v1.IListGrantsRequest,
      | protos.google.cloud.privilegedaccessmanager.v1.IListGrantsResponse
      | null
      | undefined,
      protos.google.cloud.privilegedaccessmanager.v1.IGrant
    >
  ): void;
  listGrants(
    request: protos.google.cloud.privilegedaccessmanager.v1.IListGrantsRequest,
    callback: PaginationCallback<
      protos.google.cloud.privilegedaccessmanager.v1.IListGrantsRequest,
      | protos.google.cloud.privilegedaccessmanager.v1.IListGrantsResponse
      | null
      | undefined,
      protos.google.cloud.privilegedaccessmanager.v1.IGrant
    >
  ): void;
  listGrants(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IListGrantsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.privilegedaccessmanager.v1.IListGrantsRequest,
          | protos.google.cloud.privilegedaccessmanager.v1.IListGrantsResponse
          | null
          | undefined,
          protos.google.cloud.privilegedaccessmanager.v1.IGrant
        >,
    callback?: PaginationCallback<
      protos.google.cloud.privilegedaccessmanager.v1.IListGrantsRequest,
      | protos.google.cloud.privilegedaccessmanager.v1.IListGrantsResponse
      | null
      | undefined,
      protos.google.cloud.privilegedaccessmanager.v1.IGrant
    >
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IGrant[],
      protos.google.cloud.privilegedaccessmanager.v1.IListGrantsRequest | null,
      protos.google.cloud.privilegedaccessmanager.v1.IListGrantsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listGrants(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource which owns the grants.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server may return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results.
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.privilegedaccessmanager.v1.Grant|Grant} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listGrantsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listGrantsStream(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IListGrantsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGrants'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGrants.createStream(
      this.innerApiCalls.listGrants as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listGrants`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource which owns the grants.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server may return fewer items than
   *   requested. If unspecified, the server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {string} [request.filter]
   *   Optional. Filtering results.
   * @param {string} [request.orderBy]
   *   Optional. Hint for how to order the results
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.privilegedaccessmanager.v1.Grant|Grant}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.list_grants.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_ListGrants_async
   */
  listGrantsAsync(
    request?: protos.google.cloud.privilegedaccessmanager.v1.IListGrantsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.privilegedaccessmanager.v1.IGrant> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listGrants'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listGrants.asyncIterate(
      this.innerApiCalls['listGrants'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.privilegedaccessmanager.v1.IGrant>;
  }
  /**
   * `SearchGrants` returns grants that are related to the calling user in the
   * specified way.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent which owns the grant resources.
   * @param {google.cloud.privilegedaccessmanager.v1.SearchGrantsRequest.CallerRelationshipType} request.callerRelationship
   *   Required. Only grants which the caller is related to by this relationship
   *   are returned in the response.
   * @param {string} [request.filter]
   *   Optional. Only grants matching this filter are returned in the response.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server may return fewer items than
   *   requested. If unspecified, server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.privilegedaccessmanager.v1.Grant|Grant}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `searchGrantsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  searchGrants(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IGrant[],
      protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsRequest | null,
      protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsResponse,
    ]
  >;
  searchGrants(
    request: protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsRequest,
      | protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsResponse
      | null
      | undefined,
      protos.google.cloud.privilegedaccessmanager.v1.IGrant
    >
  ): void;
  searchGrants(
    request: protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsRequest,
    callback: PaginationCallback<
      protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsRequest,
      | protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsResponse
      | null
      | undefined,
      protos.google.cloud.privilegedaccessmanager.v1.IGrant
    >
  ): void;
  searchGrants(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsRequest,
          | protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsResponse
          | null
          | undefined,
          protos.google.cloud.privilegedaccessmanager.v1.IGrant
        >,
    callback?: PaginationCallback<
      protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsRequest,
      | protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsResponse
      | null
      | undefined,
      protos.google.cloud.privilegedaccessmanager.v1.IGrant
    >
  ): Promise<
    [
      protos.google.cloud.privilegedaccessmanager.v1.IGrant[],
      protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsRequest | null,
      protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.searchGrants(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent which owns the grant resources.
   * @param {google.cloud.privilegedaccessmanager.v1.SearchGrantsRequest.CallerRelationshipType} request.callerRelationship
   *   Required. Only grants which the caller is related to by this relationship
   *   are returned in the response.
   * @param {string} [request.filter]
   *   Optional. Only grants matching this filter are returned in the response.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server may return fewer items than
   *   requested. If unspecified, server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.privilegedaccessmanager.v1.Grant|Grant} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `searchGrantsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  searchGrantsStream(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['searchGrants'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchGrants.createStream(
      this.innerApiCalls.searchGrants as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `searchGrants`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent which owns the grant resources.
   * @param {google.cloud.privilegedaccessmanager.v1.SearchGrantsRequest.CallerRelationshipType} request.callerRelationship
   *   Required. Only grants which the caller is related to by this relationship
   *   are returned in the response.
   * @param {string} [request.filter]
   *   Optional. Only grants matching this filter are returned in the response.
   * @param {number} [request.pageSize]
   *   Optional. Requested page size. The server may return fewer items than
   *   requested. If unspecified, server picks an appropriate default.
   * @param {string} [request.pageToken]
   *   Optional. A token identifying a page of results the server should return.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.privilegedaccessmanager.v1.Grant|Grant}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/privileged_access_manager.search_grants.js</caption>
   * region_tag:privilegedaccessmanager_v1_generated_PrivilegedAccessManager_SearchGrants_async
   */
  searchGrantsAsync(
    request?: protos.google.cloud.privilegedaccessmanager.v1.ISearchGrantsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.privilegedaccessmanager.v1.IGrant> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['searchGrants'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.searchGrants.asyncIterate(
      this.innerApiCalls['searchGrants'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.privilegedaccessmanager.v1.IGrant>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   *   for the details.
   * @param {function(?Error, ?Object)=} callback
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing
   *   {@link google.longrunning.Operation | google.longrunning.Operation}.
   * @return {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   * {@link google.longrunning.Operation | google.longrunning.Operation}.
   * The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * const name = '';
   * const [response] = await client.getOperation({name});
   * // doThingsWith(response)
   * ```
   */
  getOperation(
    request: protos.google.longrunning.GetOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.longrunning.Operation,
          protos.google.longrunning.GetOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.longrunning.Operation,
      protos.google.longrunning.GetOperationRequest,
      {} | null | undefined
    >
  ): Promise<[protos.google.longrunning.Operation]> {
    return this.operationsClient.getOperation(request, options, callback);
  }
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
   *
   * For-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation collection.
   * @param {string} request.filter - The standard list filter.
   * @param {number=} request.pageSize -
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   *   e.g, timeout, retries, paginations, etc. See {@link
   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   *   details.
   * @returns {Object}
   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * for await (const response of client.listOperationsAsync(request));
   * // doThingsWith(response)
   * ```
   */
  listOperationsAsync(
    request: protos.google.longrunning.ListOperationsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.longrunning.ListOperationsResponse> {
    return this.operationsClient.listOperationsAsync(request, options);
  }
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * {@link Operations.GetOperation} or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
   * 1, corresponding to `Code.CANCELLED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be cancelled.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
   * details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.cancelOperation({name: ''});
   * ```
   */
  cancelOperation(
    request: protos.google.longrunning.CancelOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.CancelOperationRequest,
          {} | undefined | null
        >,
    callback?: Callback<
      protos.google.longrunning.CancelOperationRequest,
      protos.google.protobuf.Empty,
      {} | undefined | null
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.cancelOperation(request, options, callback);
  }

  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   *
   * @param {Object} request - The request object that will be sent.
   * @param {string} request.name - The name of the operation resource to be deleted.
   * @param {Object=} options
   *   Optional parameters. You can override the default settings for this call,
   * e.g, timeout, retries, paginations, etc. See {@link
   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
   * for the details.
   * @param {function(?Error)=} callback
   *   The function which will be called with the result of the API call.
   * @return {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API
   * call.
   *
   * @example
   * ```
   * const client = longrunning.operationsClient();
   * await client.deleteOperation({name: ''});
   * ```
   */
  deleteOperation(
    request: protos.google.longrunning.DeleteOperationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.Empty,
          protos.google.longrunning.DeleteOperationRequest,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.Empty,
      protos.google.longrunning.DeleteOperationRequest,
      {} | null | undefined
    >
  ): Promise<protos.google.protobuf.Empty> {
    return this.operationsClient.deleteOperation(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified folderLocationEntitlement resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} entitlement
   * @returns {string} Resource name string.
   */
  folderLocationEntitlementPath(
    folder: string,
    location: string,
    entitlement: string
  ) {
    return this.pathTemplates.folderLocationEntitlementPathTemplate.render({
      folder: folder,
      location: location,
      entitlement: entitlement,
    });
  }

  /**
   * Parse the folder from FolderLocationEntitlement resource.
   *
   * @param {string} folderLocationEntitlementName
   *   A fully-qualified path representing folder_location_entitlement resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationEntitlementName(
    folderLocationEntitlementName: string
  ) {
    return this.pathTemplates.folderLocationEntitlementPathTemplate.match(
      folderLocationEntitlementName
    ).folder;
  }

  /**
   * Parse the location from FolderLocationEntitlement resource.
   *
   * @param {string} folderLocationEntitlementName
   *   A fully-qualified path representing folder_location_entitlement resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationEntitlementName(
    folderLocationEntitlementName: string
  ) {
    return this.pathTemplates.folderLocationEntitlementPathTemplate.match(
      folderLocationEntitlementName
    ).location;
  }

  /**
   * Parse the entitlement from FolderLocationEntitlement resource.
   *
   * @param {string} folderLocationEntitlementName
   *   A fully-qualified path representing folder_location_entitlement resource.
   * @returns {string} A string representing the entitlement.
   */
  matchEntitlementFromFolderLocationEntitlementName(
    folderLocationEntitlementName: string
  ) {
    return this.pathTemplates.folderLocationEntitlementPathTemplate.match(
      folderLocationEntitlementName
    ).entitlement;
  }

  /**
   * Return a fully-qualified folderLocationEntitlementGrant resource name string.
   *
   * @param {string} folder
   * @param {string} location
   * @param {string} entitlement
   * @param {string} grant
   * @returns {string} Resource name string.
   */
  folderLocationEntitlementGrantPath(
    folder: string,
    location: string,
    entitlement: string,
    grant: string
  ) {
    return this.pathTemplates.folderLocationEntitlementGrantPathTemplate.render(
      {
        folder: folder,
        location: location,
        entitlement: entitlement,
        grant: grant,
      }
    );
  }

  /**
   * Parse the folder from FolderLocationEntitlementGrant resource.
   *
   * @param {string} folderLocationEntitlementGrantName
   *   A fully-qualified path representing folder_location_entitlement_grant resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderLocationEntitlementGrantName(
    folderLocationEntitlementGrantName: string
  ) {
    return this.pathTemplates.folderLocationEntitlementGrantPathTemplate.match(
      folderLocationEntitlementGrantName
    ).folder;
  }

  /**
   * Parse the location from FolderLocationEntitlementGrant resource.
   *
   * @param {string} folderLocationEntitlementGrantName
   *   A fully-qualified path representing folder_location_entitlement_grant resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromFolderLocationEntitlementGrantName(
    folderLocationEntitlementGrantName: string
  ) {
    return this.pathTemplates.folderLocationEntitlementGrantPathTemplate.match(
      folderLocationEntitlementGrantName
    ).location;
  }

  /**
   * Parse the entitlement from FolderLocationEntitlementGrant resource.
   *
   * @param {string} folderLocationEntitlementGrantName
   *   A fully-qualified path representing folder_location_entitlement_grant resource.
   * @returns {string} A string representing the entitlement.
   */
  matchEntitlementFromFolderLocationEntitlementGrantName(
    folderLocationEntitlementGrantName: string
  ) {
    return this.pathTemplates.folderLocationEntitlementGrantPathTemplate.match(
      folderLocationEntitlementGrantName
    ).entitlement;
  }

  /**
   * Parse the grant from FolderLocationEntitlementGrant resource.
   *
   * @param {string} folderLocationEntitlementGrantName
   *   A fully-qualified path representing folder_location_entitlement_grant resource.
   * @returns {string} A string representing the grant.
   */
  matchGrantFromFolderLocationEntitlementGrantName(
    folderLocationEntitlementGrantName: string
  ) {
    return this.pathTemplates.folderLocationEntitlementGrantPathTemplate.match(
      folderLocationEntitlementGrantName
    ).grant;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified organizationLocationEntitlement resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} entitlement
   * @returns {string} Resource name string.
   */
  organizationLocationEntitlementPath(
    organization: string,
    location: string,
    entitlement: string
  ) {
    return this.pathTemplates.organizationLocationEntitlementPathTemplate.render(
      {
        organization: organization,
        location: location,
        entitlement: entitlement,
      }
    );
  }

  /**
   * Parse the organization from OrganizationLocationEntitlement resource.
   *
   * @param {string} organizationLocationEntitlementName
   *   A fully-qualified path representing organization_location_entitlement resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationEntitlementName(
    organizationLocationEntitlementName: string
  ) {
    return this.pathTemplates.organizationLocationEntitlementPathTemplate.match(
      organizationLocationEntitlementName
    ).organization;
  }

  /**
   * Parse the location from OrganizationLocationEntitlement resource.
   *
   * @param {string} organizationLocationEntitlementName
   *   A fully-qualified path representing organization_location_entitlement resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationEntitlementName(
    organizationLocationEntitlementName: string
  ) {
    return this.pathTemplates.organizationLocationEntitlementPathTemplate.match(
      organizationLocationEntitlementName
    ).location;
  }

  /**
   * Parse the entitlement from OrganizationLocationEntitlement resource.
   *
   * @param {string} organizationLocationEntitlementName
   *   A fully-qualified path representing organization_location_entitlement resource.
   * @returns {string} A string representing the entitlement.
   */
  matchEntitlementFromOrganizationLocationEntitlementName(
    organizationLocationEntitlementName: string
  ) {
    return this.pathTemplates.organizationLocationEntitlementPathTemplate.match(
      organizationLocationEntitlementName
    ).entitlement;
  }

  /**
   * Return a fully-qualified organizationLocationEntitlementGrant resource name string.
   *
   * @param {string} organization
   * @param {string} location
   * @param {string} entitlement
   * @param {string} grant
   * @returns {string} Resource name string.
   */
  organizationLocationEntitlementGrantPath(
    organization: string,
    location: string,
    entitlement: string,
    grant: string
  ) {
    return this.pathTemplates.organizationLocationEntitlementGrantPathTemplate.render(
      {
        organization: organization,
        location: location,
        entitlement: entitlement,
        grant: grant,
      }
    );
  }

  /**
   * Parse the organization from OrganizationLocationEntitlementGrant resource.
   *
   * @param {string} organizationLocationEntitlementGrantName
   *   A fully-qualified path representing organization_location_entitlement_grant resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationLocationEntitlementGrantName(
    organizationLocationEntitlementGrantName: string
  ) {
    return this.pathTemplates.organizationLocationEntitlementGrantPathTemplate.match(
      organizationLocationEntitlementGrantName
    ).organization;
  }

  /**
   * Parse the location from OrganizationLocationEntitlementGrant resource.
   *
   * @param {string} organizationLocationEntitlementGrantName
   *   A fully-qualified path representing organization_location_entitlement_grant resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromOrganizationLocationEntitlementGrantName(
    organizationLocationEntitlementGrantName: string
  ) {
    return this.pathTemplates.organizationLocationEntitlementGrantPathTemplate.match(
      organizationLocationEntitlementGrantName
    ).location;
  }

  /**
   * Parse the entitlement from OrganizationLocationEntitlementGrant resource.
   *
   * @param {string} organizationLocationEntitlementGrantName
   *   A fully-qualified path representing organization_location_entitlement_grant resource.
   * @returns {string} A string representing the entitlement.
   */
  matchEntitlementFromOrganizationLocationEntitlementGrantName(
    organizationLocationEntitlementGrantName: string
  ) {
    return this.pathTemplates.organizationLocationEntitlementGrantPathTemplate.match(
      organizationLocationEntitlementGrantName
    ).entitlement;
  }

  /**
   * Parse the grant from OrganizationLocationEntitlementGrant resource.
   *
   * @param {string} organizationLocationEntitlementGrantName
   *   A fully-qualified path representing organization_location_entitlement_grant resource.
   * @returns {string} A string representing the grant.
   */
  matchGrantFromOrganizationLocationEntitlementGrantName(
    organizationLocationEntitlementGrantName: string
  ) {
    return this.pathTemplates.organizationLocationEntitlementGrantPathTemplate.match(
      organizationLocationEntitlementGrantName
    ).grant;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectLocationEntitlement resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entitlement
   * @returns {string} Resource name string.
   */
  projectLocationEntitlementPath(
    project: string,
    location: string,
    entitlement: string
  ) {
    return this.pathTemplates.projectLocationEntitlementPathTemplate.render({
      project: project,
      location: location,
      entitlement: entitlement,
    });
  }

  /**
   * Parse the project from ProjectLocationEntitlement resource.
   *
   * @param {string} projectLocationEntitlementName
   *   A fully-qualified path representing project_location_entitlement resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationEntitlementName(
    projectLocationEntitlementName: string
  ) {
    return this.pathTemplates.projectLocationEntitlementPathTemplate.match(
      projectLocationEntitlementName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationEntitlement resource.
   *
   * @param {string} projectLocationEntitlementName
   *   A fully-qualified path representing project_location_entitlement resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationEntitlementName(
    projectLocationEntitlementName: string
  ) {
    return this.pathTemplates.projectLocationEntitlementPathTemplate.match(
      projectLocationEntitlementName
    ).location;
  }

  /**
   * Parse the entitlement from ProjectLocationEntitlement resource.
   *
   * @param {string} projectLocationEntitlementName
   *   A fully-qualified path representing project_location_entitlement resource.
   * @returns {string} A string representing the entitlement.
   */
  matchEntitlementFromProjectLocationEntitlementName(
    projectLocationEntitlementName: string
  ) {
    return this.pathTemplates.projectLocationEntitlementPathTemplate.match(
      projectLocationEntitlementName
    ).entitlement;
  }

  /**
   * Return a fully-qualified projectLocationEntitlementGrant resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} entitlement
   * @param {string} grant
   * @returns {string} Resource name string.
   */
  projectLocationEntitlementGrantPath(
    project: string,
    location: string,
    entitlement: string,
    grant: string
  ) {
    return this.pathTemplates.projectLocationEntitlementGrantPathTemplate.render(
      {
        project: project,
        location: location,
        entitlement: entitlement,
        grant: grant,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationEntitlementGrant resource.
   *
   * @param {string} projectLocationEntitlementGrantName
   *   A fully-qualified path representing project_location_entitlement_grant resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationEntitlementGrantName(
    projectLocationEntitlementGrantName: string
  ) {
    return this.pathTemplates.projectLocationEntitlementGrantPathTemplate.match(
      projectLocationEntitlementGrantName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationEntitlementGrant resource.
   *
   * @param {string} projectLocationEntitlementGrantName
   *   A fully-qualified path representing project_location_entitlement_grant resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationEntitlementGrantName(
    projectLocationEntitlementGrantName: string
  ) {
    return this.pathTemplates.projectLocationEntitlementGrantPathTemplate.match(
      projectLocationEntitlementGrantName
    ).location;
  }

  /**
   * Parse the entitlement from ProjectLocationEntitlementGrant resource.
   *
   * @param {string} projectLocationEntitlementGrantName
   *   A fully-qualified path representing project_location_entitlement_grant resource.
   * @returns {string} A string representing the entitlement.
   */
  matchEntitlementFromProjectLocationEntitlementGrantName(
    projectLocationEntitlementGrantName: string
  ) {
    return this.pathTemplates.projectLocationEntitlementGrantPathTemplate.match(
      projectLocationEntitlementGrantName
    ).entitlement;
  }

  /**
   * Parse the grant from ProjectLocationEntitlementGrant resource.
   *
   * @param {string} projectLocationEntitlementGrantName
   *   A fully-qualified path representing project_location_entitlement_grant resource.
   * @returns {string} A string representing the grant.
   */
  matchGrantFromProjectLocationEntitlementGrantName(
    projectLocationEntitlementGrantName: string
  ) {
    return this.pathTemplates.projectLocationEntitlementGrantPathTemplate.match(
      projectLocationEntitlementGrantName
    ).grant;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.privilegedAccessManagerStub && !this._terminated) {
      return this.privilegedAccessManagerStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
