// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main() {
  // [START datamigration_v1_generated_DataMigrationService_ConvertConversionWorkspace_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Name of the conversion workspace resource to convert in the form of:
   *  projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
   */
  // const name = 'abc123'
  /**
   *  Optional. Specifies whether the conversion workspace is to be committed
   *  automatically after the conversion.
   */
  // const autoCommit = true
  /**
   *  Optional. Filter the entities to convert. Leaving this field empty will
   *  convert all of the entities. Supports Google AIP-160 style filtering.
   */
  // const filter = 'abc123'
  /**
   *  Optional. Automatically convert the full entity path for each entity
   *  specified by the filter. For example, if the filter specifies a table, that
   *  table schema (and database if there is one) will also be converted.
   */
  // const convertFullPath = true

  // Imports the Clouddms library
  const {DataMigrationServiceClient} = require('@google-cloud/dms').v1;

  // Instantiates a client
  const clouddmsClient = new DataMigrationServiceClient();

  async function callConvertConversionWorkspace() {
    // Construct request
    const request = {
    };

    // Run request
    const [operation] = await clouddmsClient.convertConversionWorkspace(request);
    const [response] = await operation.promise();
    console.log(response);
  }

  callConvertConversionWorkspace();
  // [END datamigration_v1_generated_DataMigrationService_ConvertConversionWorkspace_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
