// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as datamigrationserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf, LROperation, operationsProtos} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.DataMigrationServiceClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        datamigrationserviceModule.v1.DataMigrationServiceClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        datamigrationserviceModule.v1.DataMigrationServiceClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port =
        datamigrationserviceModule.v1.DataMigrationServiceClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          fallback: true,
        });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.dataMigrationServiceStub, undefined);
      await client.initialize();
      assert(client.dataMigrationServiceStub);
    });

    it('has close method for the initialized client', done => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      assert(client.dataMigrationServiceStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      assert.strictEqual(client.dataMigrationServiceStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getMigrationJob', () => {
    it('invokes getMigrationJob without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.GetMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.GetMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.MigrationJob()
      );
      client.innerApiCalls.getMigrationJob = stubSimpleCall(expectedResponse);
      const [response] = await client.getMigrationJob(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMigrationJob without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.GetMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.GetMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.MigrationJob()
      );
      client.innerApiCalls.getMigrationJob =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getMigrationJob(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.clouddms.v1.IMigrationJob | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMigrationJob with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.GetMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.GetMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getMigrationJob = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getMigrationJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getMigrationJob with closed client', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.GetMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.GetMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getMigrationJob(request), expectedError);
    });
  });

  describe('generateSshScript', () => {
    it('invokes generateSshScript without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.GenerateSshScriptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.GenerateSshScriptRequest',
        ['migrationJob']
      );
      request.migrationJob = defaultValue1;
      const expectedHeaderRequestParams = `migration_job=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.SshScript()
      );
      client.innerApiCalls.generateSshScript = stubSimpleCall(expectedResponse);
      const [response] = await client.generateSshScript(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateSshScript as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateSshScript as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateSshScript without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.GenerateSshScriptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.GenerateSshScriptRequest',
        ['migrationJob']
      );
      request.migrationJob = defaultValue1;
      const expectedHeaderRequestParams = `migration_job=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.SshScript()
      );
      client.innerApiCalls.generateSshScript =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.generateSshScript(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.clouddms.v1.ISshScript | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.generateSshScript as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateSshScript as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateSshScript with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.GenerateSshScriptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.GenerateSshScriptRequest',
        ['migrationJob']
      );
      request.migrationJob = defaultValue1;
      const expectedHeaderRequestParams = `migration_job=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.generateSshScript = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.generateSshScript(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.generateSshScript as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.generateSshScript as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes generateSshScript with closed client', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.GenerateSshScriptRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.GenerateSshScriptRequest',
        ['migrationJob']
      );
      request.migrationJob = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.generateSshScript(request), expectedError);
    });
  });

  describe('getConnectionProfile', () => {
    it('invokes getConnectionProfile without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.GetConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.GetConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ConnectionProfile()
      );
      client.innerApiCalls.getConnectionProfile =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getConnectionProfile(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectionProfile without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.GetConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.GetConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ConnectionProfile()
      );
      client.innerApiCalls.getConnectionProfile =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getConnectionProfile(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.clouddms.v1.IConnectionProfile | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectionProfile with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.GetConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.GetConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getConnectionProfile = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getConnectionProfile(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectionProfile with closed client', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.GetConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.GetConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getConnectionProfile(request), expectedError);
    });
  });

  describe('createMigrationJob', () => {
    it('invokes createMigrationJob without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.CreateMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.CreateMigrationJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createMigrationJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createMigrationJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMigrationJob without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.CreateMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.CreateMigrationJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createMigrationJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createMigrationJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.clouddms.v1.IMigrationJob,
              protos.google.cloud.clouddms.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.clouddms.v1.IMigrationJob,
        protos.google.cloud.clouddms.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMigrationJob with call error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.CreateMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.CreateMigrationJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createMigrationJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createMigrationJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createMigrationJob with LRO error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.CreateMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.CreateMigrationJobRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createMigrationJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createMigrationJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateMigrationJobProgress without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateMigrationJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateMigrationJobProgress with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateMigrationJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateMigrationJob', () => {
    it('invokes updateMigrationJob without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.UpdateMigrationJobRequest()
      );
      request.migrationJob ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.UpdateMigrationJobRequest',
        ['migrationJob', 'name']
      );
      request.migrationJob.name = defaultValue1;
      const expectedHeaderRequestParams = `migration_job.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateMigrationJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateMigrationJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMigrationJob without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.UpdateMigrationJobRequest()
      );
      request.migrationJob ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.UpdateMigrationJobRequest',
        ['migrationJob', 'name']
      );
      request.migrationJob.name = defaultValue1;
      const expectedHeaderRequestParams = `migration_job.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateMigrationJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateMigrationJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.clouddms.v1.IMigrationJob,
              protos.google.cloud.clouddms.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.clouddms.v1.IMigrationJob,
        protos.google.cloud.clouddms.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMigrationJob with call error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.UpdateMigrationJobRequest()
      );
      request.migrationJob ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.UpdateMigrationJobRequest',
        ['migrationJob', 'name']
      );
      request.migrationJob.name = defaultValue1;
      const expectedHeaderRequestParams = `migration_job.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateMigrationJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateMigrationJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateMigrationJob with LRO error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.UpdateMigrationJobRequest()
      );
      request.migrationJob ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.UpdateMigrationJobRequest',
        ['migrationJob', 'name']
      );
      request.migrationJob.name = defaultValue1;
      const expectedHeaderRequestParams = `migration_job.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateMigrationJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateMigrationJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateMigrationJobProgress without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateMigrationJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateMigrationJobProgress with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateMigrationJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteMigrationJob', () => {
    it('invokes deleteMigrationJob without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.DeleteMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.DeleteMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteMigrationJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteMigrationJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMigrationJob without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.DeleteMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.DeleteMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteMigrationJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteMigrationJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.clouddms.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.clouddms.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMigrationJob with call error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.DeleteMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.DeleteMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteMigrationJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteMigrationJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteMigrationJob with LRO error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.DeleteMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.DeleteMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteMigrationJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteMigrationJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteMigrationJobProgress without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteMigrationJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteMigrationJobProgress with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteMigrationJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('startMigrationJob', () => {
    it('invokes startMigrationJob without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.StartMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.StartMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.startMigrationJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.startMigrationJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.startMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startMigrationJob without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.StartMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.StartMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.startMigrationJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.startMigrationJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.clouddms.v1.IMigrationJob,
              protos.google.cloud.clouddms.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.clouddms.v1.IMigrationJob,
        protos.google.cloud.clouddms.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.startMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startMigrationJob with call error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.StartMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.StartMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.startMigrationJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.startMigrationJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.startMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes startMigrationJob with LRO error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.StartMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.StartMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.startMigrationJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.startMigrationJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.startMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.startMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkStartMigrationJobProgress without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkStartMigrationJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkStartMigrationJobProgress with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkStartMigrationJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('stopMigrationJob', () => {
    it('invokes stopMigrationJob without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.StopMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.StopMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.stopMigrationJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.stopMigrationJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.stopMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopMigrationJob without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.StopMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.StopMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.stopMigrationJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.stopMigrationJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.clouddms.v1.IMigrationJob,
              protos.google.cloud.clouddms.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.clouddms.v1.IMigrationJob,
        protos.google.cloud.clouddms.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.stopMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopMigrationJob with call error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.StopMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.StopMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.stopMigrationJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.stopMigrationJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.stopMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes stopMigrationJob with LRO error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.StopMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.StopMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.stopMigrationJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.stopMigrationJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.stopMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.stopMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkStopMigrationJobProgress without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkStopMigrationJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkStopMigrationJobProgress with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkStopMigrationJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('resumeMigrationJob', () => {
    it('invokes resumeMigrationJob without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ResumeMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ResumeMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resumeMigrationJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.resumeMigrationJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resumeMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeMigrationJob without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ResumeMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ResumeMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.resumeMigrationJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.resumeMigrationJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.clouddms.v1.IMigrationJob,
              protos.google.cloud.clouddms.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.clouddms.v1.IMigrationJob,
        protos.google.cloud.clouddms.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.resumeMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeMigrationJob with call error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ResumeMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ResumeMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resumeMigrationJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.resumeMigrationJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.resumeMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes resumeMigrationJob with LRO error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ResumeMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ResumeMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.resumeMigrationJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.resumeMigrationJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.resumeMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.resumeMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkResumeMigrationJobProgress without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkResumeMigrationJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkResumeMigrationJobProgress with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkResumeMigrationJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('promoteMigrationJob', () => {
    it('invokes promoteMigrationJob without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.PromoteMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.PromoteMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.promoteMigrationJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.promoteMigrationJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.promoteMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.promoteMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes promoteMigrationJob without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.PromoteMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.PromoteMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.promoteMigrationJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.promoteMigrationJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.clouddms.v1.IMigrationJob,
              protos.google.cloud.clouddms.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.clouddms.v1.IMigrationJob,
        protos.google.cloud.clouddms.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.promoteMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.promoteMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes promoteMigrationJob with call error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.PromoteMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.PromoteMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.promoteMigrationJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.promoteMigrationJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.promoteMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.promoteMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes promoteMigrationJob with LRO error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.PromoteMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.PromoteMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.promoteMigrationJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.promoteMigrationJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.promoteMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.promoteMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkPromoteMigrationJobProgress without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkPromoteMigrationJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkPromoteMigrationJobProgress with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkPromoteMigrationJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('verifyMigrationJob', () => {
    it('invokes verifyMigrationJob without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.VerifyMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.VerifyMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.verifyMigrationJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.verifyMigrationJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.verifyMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.verifyMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes verifyMigrationJob without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.VerifyMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.VerifyMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.verifyMigrationJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.verifyMigrationJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.clouddms.v1.IMigrationJob,
              protos.google.cloud.clouddms.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.clouddms.v1.IMigrationJob,
        protos.google.cloud.clouddms.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.verifyMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.verifyMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes verifyMigrationJob with call error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.VerifyMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.VerifyMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.verifyMigrationJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.verifyMigrationJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.verifyMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.verifyMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes verifyMigrationJob with LRO error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.VerifyMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.VerifyMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.verifyMigrationJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.verifyMigrationJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.verifyMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.verifyMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkVerifyMigrationJobProgress without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkVerifyMigrationJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkVerifyMigrationJobProgress with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkVerifyMigrationJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('restartMigrationJob', () => {
    it('invokes restartMigrationJob without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.RestartMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.RestartMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.restartMigrationJob =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.restartMigrationJob(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.restartMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restartMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restartMigrationJob without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.RestartMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.RestartMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.restartMigrationJob =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.restartMigrationJob(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.clouddms.v1.IMigrationJob,
              protos.google.cloud.clouddms.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.clouddms.v1.IMigrationJob,
        protos.google.cloud.clouddms.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.restartMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restartMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restartMigrationJob with call error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.RestartMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.RestartMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.restartMigrationJob = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.restartMigrationJob(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.restartMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restartMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes restartMigrationJob with LRO error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.RestartMigrationJobRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.RestartMigrationJobRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.restartMigrationJob = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.restartMigrationJob(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.restartMigrationJob as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.restartMigrationJob as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkRestartMigrationJobProgress without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkRestartMigrationJobProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkRestartMigrationJobProgress with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkRestartMigrationJobProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createConnectionProfile', () => {
    it('invokes createConnectionProfile without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.CreateConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.CreateConnectionProfileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createConnectionProfile =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createConnectionProfile(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnectionProfile without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.CreateConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.CreateConnectionProfileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createConnectionProfile =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createConnectionProfile(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.clouddms.v1.IConnectionProfile,
              protos.google.cloud.clouddms.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.clouddms.v1.IConnectionProfile,
        protos.google.cloud.clouddms.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnectionProfile with call error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.CreateConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.CreateConnectionProfileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createConnectionProfile = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createConnectionProfile(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnectionProfile with LRO error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.CreateConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.CreateConnectionProfileRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createConnectionProfile = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createConnectionProfile(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateConnectionProfileProgress without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateConnectionProfileProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateConnectionProfileProgress with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateConnectionProfileProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateConnectionProfile', () => {
    it('invokes updateConnectionProfile without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.UpdateConnectionProfileRequest()
      );
      request.connectionProfile ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.UpdateConnectionProfileRequest',
        ['connectionProfile', 'name']
      );
      request.connectionProfile.name = defaultValue1;
      const expectedHeaderRequestParams = `connection_profile.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateConnectionProfile =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateConnectionProfile(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnectionProfile without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.UpdateConnectionProfileRequest()
      );
      request.connectionProfile ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.UpdateConnectionProfileRequest',
        ['connectionProfile', 'name']
      );
      request.connectionProfile.name = defaultValue1;
      const expectedHeaderRequestParams = `connection_profile.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateConnectionProfile =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateConnectionProfile(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.clouddms.v1.IConnectionProfile,
              protos.google.cloud.clouddms.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.clouddms.v1.IConnectionProfile,
        protos.google.cloud.clouddms.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnectionProfile with call error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.UpdateConnectionProfileRequest()
      );
      request.connectionProfile ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.UpdateConnectionProfileRequest',
        ['connectionProfile', 'name']
      );
      request.connectionProfile.name = defaultValue1;
      const expectedHeaderRequestParams = `connection_profile.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateConnectionProfile = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateConnectionProfile(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnectionProfile with LRO error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.UpdateConnectionProfileRequest()
      );
      request.connectionProfile ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.UpdateConnectionProfileRequest',
        ['connectionProfile', 'name']
      );
      request.connectionProfile.name = defaultValue1;
      const expectedHeaderRequestParams = `connection_profile.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateConnectionProfile = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateConnectionProfile(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateConnectionProfileProgress without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkUpdateConnectionProfileProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateConnectionProfileProgress with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateConnectionProfileProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteConnectionProfile', () => {
    it('invokes deleteConnectionProfile without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.DeleteConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.DeleteConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteConnectionProfile =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteConnectionProfile(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnectionProfile without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.DeleteConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.DeleteConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteConnectionProfile =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteConnectionProfile(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.clouddms.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.clouddms.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnectionProfile with call error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.DeleteConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.DeleteConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteConnectionProfile = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteConnectionProfile(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnectionProfile with LRO error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.DeleteConnectionProfileRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.DeleteConnectionProfileRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteConnectionProfile = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteConnectionProfile(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnectionProfile as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteConnectionProfileProgress without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteConnectionProfileProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteConnectionProfileProgress with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteConnectionProfileProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listMigrationJobs', () => {
    it('invokes listMigrationJobs without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListMigrationJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListMigrationJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.MigrationJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.MigrationJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.MigrationJob()
        ),
      ];
      client.innerApiCalls.listMigrationJobs = stubSimpleCall(expectedResponse);
      const [response] = await client.listMigrationJobs(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMigrationJobs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMigrationJobs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMigrationJobs without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListMigrationJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListMigrationJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.MigrationJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.MigrationJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.MigrationJob()
        ),
      ];
      client.innerApiCalls.listMigrationJobs =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listMigrationJobs(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.clouddms.v1.IMigrationJob[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listMigrationJobs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMigrationJobs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMigrationJobs with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListMigrationJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListMigrationJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listMigrationJobs = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listMigrationJobs(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listMigrationJobs as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listMigrationJobs as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listMigrationJobsStream without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListMigrationJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListMigrationJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.MigrationJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.MigrationJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.MigrationJob()
        ),
      ];
      client.descriptors.page.listMigrationJobs.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listMigrationJobsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.clouddms.v1.MigrationJob[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.clouddms.v1.MigrationJob) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listMigrationJobs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listMigrationJobs, request)
      );
      assert(
        (client.descriptors.page.listMigrationJobs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listMigrationJobsStream with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListMigrationJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListMigrationJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMigrationJobs.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listMigrationJobsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.clouddms.v1.MigrationJob[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.clouddms.v1.MigrationJob) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listMigrationJobs.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listMigrationJobs, request)
      );
      assert(
        (client.descriptors.page.listMigrationJobs.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMigrationJobs without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListMigrationJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListMigrationJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.MigrationJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.MigrationJob()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.MigrationJob()
        ),
      ];
      client.descriptors.page.listMigrationJobs.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.clouddms.v1.IMigrationJob[] = [];
      const iterable = client.listMigrationJobsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMigrationJobs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listMigrationJobs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listMigrationJobs with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListMigrationJobsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListMigrationJobsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listMigrationJobs.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listMigrationJobsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.clouddms.v1.IMigrationJob[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listMigrationJobs.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listMigrationJobs.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listConnectionProfiles', () => {
    it('invokes listConnectionProfiles without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.ConnectionProfile()
        ),
      ];
      client.innerApiCalls.listConnectionProfiles =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listConnectionProfiles(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnectionProfiles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectionProfiles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectionProfiles without error using callback', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.ConnectionProfile()
        ),
      ];
      client.innerApiCalls.listConnectionProfiles =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listConnectionProfiles(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.clouddms.v1.IConnectionProfile[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnectionProfiles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectionProfiles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectionProfiles with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listConnectionProfiles = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listConnectionProfiles(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listConnectionProfiles as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectionProfiles as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectionProfilesStream without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.ConnectionProfile()
        ),
      ];
      client.descriptors.page.listConnectionProfiles.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listConnectionProfilesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.clouddms.v1.ConnectionProfile[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.clouddms.v1.ConnectionProfile) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listConnectionProfiles
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnectionProfiles, request)
      );
      assert(
        (
          client.descriptors.page.listConnectionProfiles
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listConnectionProfilesStream with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnectionProfiles.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listConnectionProfilesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.clouddms.v1.ConnectionProfile[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.clouddms.v1.ConnectionProfile) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listConnectionProfiles
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnectionProfiles, request)
      );
      assert(
        (
          client.descriptors.page.listConnectionProfiles
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listConnectionProfiles without error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.ConnectionProfile()
        ),
        generateSampleMessage(
          new protos.google.cloud.clouddms.v1.ConnectionProfile()
        ),
      ];
      client.descriptors.page.listConnectionProfiles.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.clouddms.v1.IConnectionProfile[] =
        [];
      const iterable = client.listConnectionProfilesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnectionProfiles
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listConnectionProfiles
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listConnectionProfiles with error', async () => {
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.clouddms.v1.ListConnectionProfilesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.clouddms.v1.ListConnectionProfilesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnectionProfiles.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listConnectionProfilesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.clouddms.v1.IConnectionProfile[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnectionProfiles
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listConnectionProfiles
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('Path templates', () => {
    describe('connectionProfile', () => {
      const fakePath = '/rendered/path/connectionProfile';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        connection_profile: 'connectionProfileValue',
      };
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.connectionProfilePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.connectionProfilePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('connectionProfilePath', () => {
        const result = client.connectionProfilePath(
          'projectValue',
          'locationValue',
          'connectionProfileValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.connectionProfilePathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromConnectionProfileName', () => {
        const result = client.matchProjectFromConnectionProfileName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.connectionProfilePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromConnectionProfileName', () => {
        const result = client.matchLocationFromConnectionProfileName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.connectionProfilePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConnectionProfileFromConnectionProfileName', () => {
        const result =
          client.matchConnectionProfileFromConnectionProfileName(fakePath);
        assert.strictEqual(result, 'connectionProfileValue');
        assert(
          (
            client.pathTemplates.connectionProfilePathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('location', () => {
      const fakePath = '/rendered/path/location';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.locationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.locationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('locationPath', () => {
        const result = client.locationPath('projectValue', 'locationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.locationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromLocationName', () => {
        const result = client.matchProjectFromLocationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromLocationName', () => {
        const result = client.matchLocationFromLocationName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.locationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('migrationJob', () => {
      const fakePath = '/rendered/path/migrationJob';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        migration_job: 'migrationJobValue',
      };
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.migrationJobPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.migrationJobPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('migrationJobPath', () => {
        const result = client.migrationJobPath(
          'projectValue',
          'locationValue',
          'migrationJobValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.migrationJobPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromMigrationJobName', () => {
        const result = client.matchProjectFromMigrationJobName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.migrationJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromMigrationJobName', () => {
        const result = client.matchLocationFromMigrationJobName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.migrationJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchMigrationJobFromMigrationJobName', () => {
        const result = client.matchMigrationJobFromMigrationJobName(fakePath);
        assert.strictEqual(result, 'migrationJobValue');
        assert(
          (client.pathTemplates.migrationJobPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client =
        new datamigrationserviceModule.v1.DataMigrationServiceClient({
          credentials: {client_email: 'bogus', private_key: 'bogus'},
          projectId: 'bogus',
        });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
