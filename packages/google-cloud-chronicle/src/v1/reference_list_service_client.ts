// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
import {loggingUtils as logging} from 'google-gax';

/**
 * Client JSON configuration object, loaded from
 * `src/v1/reference_list_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './reference_list_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  ReferenceListService provides an interface for managing reference lists.
 * @class
 * @memberof v1
 */
export class ReferenceListServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  private _universeDomain: string;
  private _servicePath: string;
  private _log = logging.log('chronicle');

  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  referenceListServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ReferenceListServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://cloud.google.com/docs/authentication/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new ReferenceListServiceClient({fallback: true}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof ReferenceListServiceClient;
    if (
      opts?.universe_domain &&
      opts?.universeDomain &&
      opts?.universe_domain !== opts?.universeDomain
    ) {
      throw new Error(
        'Please set either universe_domain or universeDomain, but not both.'
      );
    }
    const universeDomainEnvVar =
      typeof process === 'object' && typeof process.env === 'object'
        ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
        : undefined;
    this._universeDomain =
      opts?.universeDomain ??
      opts?.universe_domain ??
      universeDomainEnvVar ??
      'googleapis.com';
    this._servicePath = 'chronicle.' + this._universeDomain;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || this._servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== this._servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = this._servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === this._servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process === 'object' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      dataAccessLabelPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instances/{instance}/dataAccessLabels/{data_access_label}'
      ),
      dataAccessScopePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instances/{instance}/dataAccessScopes/{data_access_scope}'
      ),
      instancePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instances/{instance}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      referenceListPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instances/{instance}/referenceLists/{reference_list}'
      ),
      retrohuntPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/retrohunts/{retrohunt}'
      ),
      rulePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instances/{instance}/rules/{rule}'
      ),
      ruleDeploymentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instances/{instance}/rules/{rule}/deployment'
      ),
      watchlistPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/instances/{instance}/watchlists/{watchlist}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listReferenceLists: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'referenceLists'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.chronicle.v1.ReferenceListService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.referenceListServiceStub) {
      return this.referenceListServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.chronicle.v1.ReferenceListService.
    this.referenceListServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.chronicle.v1.ReferenceListService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.chronicle.v1.ReferenceListService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const referenceListServiceStubMethods = [
      'getReferenceList',
      'listReferenceLists',
      'createReferenceList',
      'updateReferenceList',
    ];
    for (const methodName of referenceListServiceStubMethods) {
      const callPromise = this.referenceListServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.referenceListServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static servicePath is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'chronicle.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath.
   * @deprecated Use the apiEndpoint method of the client instance.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      process.emitWarning(
        'Static apiEndpoint is deprecated, please use the instance method instead.',
        'DeprecationWarning'
      );
    }
    return 'chronicle.googleapis.com';
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  get apiEndpoint() {
    return this._servicePath;
  }

  get universeDomain() {
    return this._universeDomain;
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets a single reference list.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of the reference list to retrieve.
   *   Format:
   *   `projects/{project}/locations/{locations}/instances/{instance}/referenceLists/{reference_list}`
   * @param {google.cloud.chronicle.v1.ReferenceListView} request.view
   *   How much of the ReferenceList to view. Defaults to
   *   REFERENCE_LIST_VIEW_FULL.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.chronicle.v1.ReferenceList|ReferenceList}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/reference_list_service.get_reference_list.js</caption>
   * region_tag:chronicle_v1_generated_ReferenceListService_GetReferenceList_async
   */
  getReferenceList(
    request?: protos.google.cloud.chronicle.v1.IGetReferenceListRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.chronicle.v1.IReferenceList,
      protos.google.cloud.chronicle.v1.IGetReferenceListRequest | undefined,
      {} | undefined,
    ]
  >;
  getReferenceList(
    request: protos.google.cloud.chronicle.v1.IGetReferenceListRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.chronicle.v1.IReferenceList,
      | protos.google.cloud.chronicle.v1.IGetReferenceListRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getReferenceList(
    request: protos.google.cloud.chronicle.v1.IGetReferenceListRequest,
    callback: Callback<
      protos.google.cloud.chronicle.v1.IReferenceList,
      | protos.google.cloud.chronicle.v1.IGetReferenceListRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getReferenceList(
    request?: protos.google.cloud.chronicle.v1.IGetReferenceListRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.chronicle.v1.IReferenceList,
          | protos.google.cloud.chronicle.v1.IGetReferenceListRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.chronicle.v1.IReferenceList,
      | protos.google.cloud.chronicle.v1.IGetReferenceListRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.chronicle.v1.IReferenceList,
      protos.google.cloud.chronicle.v1.IGetReferenceListRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('getReferenceList request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.cloud.chronicle.v1.IReferenceList,
          | protos.google.cloud.chronicle.v1.IGetReferenceListRequest
          | null
          | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('getReferenceList response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .getReferenceList(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.cloud.chronicle.v1.IReferenceList,
          protos.google.cloud.chronicle.v1.IGetReferenceListRequest | undefined,
          {} | undefined,
        ]) => {
          this._log.info('getReferenceList response %j', response);
          return [response, options, rawResponse];
        }
      );
  }
  /**
   * Creates a new reference list.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource where this reference list will be created.
   *   Format: `projects/{project}/locations/{location}/instances/{instance}`
   * @param {google.cloud.chronicle.v1.ReferenceList} request.referenceList
   *   Required. The reference list to create.
   * @param {string} request.referenceListId
   *   Required. The ID to use for the reference list. This is also the display
   *   name for the reference list. It must satisfy the following requirements:
   *   - Starts with letter.
   *   - Contains only letters, numbers and underscore.
   *   - Has length less than 256.
   *   - Must be unique.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.chronicle.v1.ReferenceList|ReferenceList}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/reference_list_service.create_reference_list.js</caption>
   * region_tag:chronicle_v1_generated_ReferenceListService_CreateReferenceList_async
   */
  createReferenceList(
    request?: protos.google.cloud.chronicle.v1.ICreateReferenceListRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.chronicle.v1.IReferenceList,
      protos.google.cloud.chronicle.v1.ICreateReferenceListRequest | undefined,
      {} | undefined,
    ]
  >;
  createReferenceList(
    request: protos.google.cloud.chronicle.v1.ICreateReferenceListRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.chronicle.v1.IReferenceList,
      | protos.google.cloud.chronicle.v1.ICreateReferenceListRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createReferenceList(
    request: protos.google.cloud.chronicle.v1.ICreateReferenceListRequest,
    callback: Callback<
      protos.google.cloud.chronicle.v1.IReferenceList,
      | protos.google.cloud.chronicle.v1.ICreateReferenceListRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createReferenceList(
    request?: protos.google.cloud.chronicle.v1.ICreateReferenceListRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.chronicle.v1.IReferenceList,
          | protos.google.cloud.chronicle.v1.ICreateReferenceListRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.chronicle.v1.IReferenceList,
      | protos.google.cloud.chronicle.v1.ICreateReferenceListRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.chronicle.v1.IReferenceList,
      protos.google.cloud.chronicle.v1.ICreateReferenceListRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('createReferenceList request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.cloud.chronicle.v1.IReferenceList,
          | protos.google.cloud.chronicle.v1.ICreateReferenceListRequest
          | null
          | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('createReferenceList response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .createReferenceList(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.cloud.chronicle.v1.IReferenceList,
          (
            | protos.google.cloud.chronicle.v1.ICreateReferenceListRequest
            | undefined
          ),
          {} | undefined,
        ]) => {
          this._log.info('createReferenceList response %j', response);
          return [response, options, rawResponse];
        }
      );
  }
  /**
   * Updates an existing reference list.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.chronicle.v1.ReferenceList} request.referenceList
   *   Required. The reference list to update.
   *
   *   The reference list's `name` field is used to identify the reference list to
   *   update.
   *   Format:
   *   `projects/{project}/locations/{locations}/instances/{instance}/referenceLists/{reference_list}`
   * @param {google.protobuf.FieldMask} request.updateMask
   *   The list of fields to update.
   *   When no field mask is supplied, all non-empty fields will be updated.
   *   A field mask of "*" will update all fields, whether empty or not.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing {@link protos.google.cloud.chronicle.v1.ReferenceList|ReferenceList}.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/reference_list_service.update_reference_list.js</caption>
   * region_tag:chronicle_v1_generated_ReferenceListService_UpdateReferenceList_async
   */
  updateReferenceList(
    request?: protos.google.cloud.chronicle.v1.IUpdateReferenceListRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.chronicle.v1.IReferenceList,
      protos.google.cloud.chronicle.v1.IUpdateReferenceListRequest | undefined,
      {} | undefined,
    ]
  >;
  updateReferenceList(
    request: protos.google.cloud.chronicle.v1.IUpdateReferenceListRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.chronicle.v1.IReferenceList,
      | protos.google.cloud.chronicle.v1.IUpdateReferenceListRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateReferenceList(
    request: protos.google.cloud.chronicle.v1.IUpdateReferenceListRequest,
    callback: Callback<
      protos.google.cloud.chronicle.v1.IReferenceList,
      | protos.google.cloud.chronicle.v1.IUpdateReferenceListRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateReferenceList(
    request?: protos.google.cloud.chronicle.v1.IUpdateReferenceListRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.chronicle.v1.IReferenceList,
          | protos.google.cloud.chronicle.v1.IUpdateReferenceListRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.chronicle.v1.IReferenceList,
      | protos.google.cloud.chronicle.v1.IUpdateReferenceListRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.chronicle.v1.IReferenceList,
      protos.google.cloud.chronicle.v1.IUpdateReferenceListRequest | undefined,
      {} | undefined,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'reference_list.name': request.referenceList!.name ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('updateReferenceList request %j', request);
    const wrappedCallback:
      | Callback<
          protos.google.cloud.chronicle.v1.IReferenceList,
          | protos.google.cloud.chronicle.v1.IUpdateReferenceListRequest
          | null
          | undefined,
          {} | null | undefined
        >
      | undefined = callback
      ? (error, response, options, rawResponse) => {
          this._log.info('updateReferenceList response %j', response);
          callback!(error, response, options, rawResponse); // We verified callback above.
        }
      : undefined;
    return this.innerApiCalls
      .updateReferenceList(request, options, wrappedCallback)
      ?.then(
        ([response, options, rawResponse]: [
          protos.google.cloud.chronicle.v1.IReferenceList,
          (
            | protos.google.cloud.chronicle.v1.IUpdateReferenceListRequest
            | undefined
          ),
          {} | undefined,
        ]) => {
          this._log.info('updateReferenceList response %j', response);
          return [response, options, rawResponse];
        }
      );
  }

  /**
   * Lists a collection of reference lists.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of reference lists.
   *   Format:
   *   `projects/{project}/locations/{location}/instances/{instance}`
   * @param {number} request.pageSize
   *   The maximum number of reference lists to return.
   *   The service may return fewer than this value.
   *   If unspecified, at most 100 reference lists will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListReferenceLists` call.
   *   Provide this to retrieve the subsequent page.
   *   When paginating, all other parameters provided to `ListReferenceLists` must
   *   match the call that provided the page token.
   * @param {google.cloud.chronicle.v1.ReferenceListView} request.view
   *   How much of each ReferenceList to view. Defaults to
   *   REFERENCE_LIST_VIEW_BASIC.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of {@link protos.google.cloud.chronicle.v1.ReferenceList|ReferenceList}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listReferenceListsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listReferenceLists(
    request?: protos.google.cloud.chronicle.v1.IListReferenceListsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.chronicle.v1.IReferenceList[],
      protos.google.cloud.chronicle.v1.IListReferenceListsRequest | null,
      protos.google.cloud.chronicle.v1.IListReferenceListsResponse,
    ]
  >;
  listReferenceLists(
    request: protos.google.cloud.chronicle.v1.IListReferenceListsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.chronicle.v1.IListReferenceListsRequest,
      | protos.google.cloud.chronicle.v1.IListReferenceListsResponse
      | null
      | undefined,
      protos.google.cloud.chronicle.v1.IReferenceList
    >
  ): void;
  listReferenceLists(
    request: protos.google.cloud.chronicle.v1.IListReferenceListsRequest,
    callback: PaginationCallback<
      protos.google.cloud.chronicle.v1.IListReferenceListsRequest,
      | protos.google.cloud.chronicle.v1.IListReferenceListsResponse
      | null
      | undefined,
      protos.google.cloud.chronicle.v1.IReferenceList
    >
  ): void;
  listReferenceLists(
    request?: protos.google.cloud.chronicle.v1.IListReferenceListsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.chronicle.v1.IListReferenceListsRequest,
          | protos.google.cloud.chronicle.v1.IListReferenceListsResponse
          | null
          | undefined,
          protos.google.cloud.chronicle.v1.IReferenceList
        >,
    callback?: PaginationCallback<
      protos.google.cloud.chronicle.v1.IListReferenceListsRequest,
      | protos.google.cloud.chronicle.v1.IListReferenceListsResponse
      | null
      | undefined,
      protos.google.cloud.chronicle.v1.IReferenceList
    >
  ): Promise<
    [
      protos.google.cloud.chronicle.v1.IReferenceList[],
      protos.google.cloud.chronicle.v1.IListReferenceListsRequest | null,
      protos.google.cloud.chronicle.v1.IListReferenceListsResponse,
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize().catch(err => {
      throw err;
    });
    const wrappedCallback:
      | PaginationCallback<
          protos.google.cloud.chronicle.v1.IListReferenceListsRequest,
          | protos.google.cloud.chronicle.v1.IListReferenceListsResponse
          | null
          | undefined,
          protos.google.cloud.chronicle.v1.IReferenceList
        >
      | undefined = callback
      ? (error, values, nextPageRequest, rawResponse) => {
          this._log.info('listReferenceLists values %j', values);
          callback!(error, values, nextPageRequest, rawResponse); // We verified callback above.
        }
      : undefined;
    this._log.info('listReferenceLists request %j', request);
    return this.innerApiCalls
      .listReferenceLists(request, options, wrappedCallback)
      ?.then(
        ([response, input, output]: [
          protos.google.cloud.chronicle.v1.IReferenceList[],
          protos.google.cloud.chronicle.v1.IListReferenceListsRequest | null,
          protos.google.cloud.chronicle.v1.IListReferenceListsResponse,
        ]) => {
          this._log.info('listReferenceLists values %j', response);
          return [response, input, output];
        }
      );
  }

  /**
   * Equivalent to `listReferenceLists`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of reference lists.
   *   Format:
   *   `projects/{project}/locations/{location}/instances/{instance}`
   * @param {number} request.pageSize
   *   The maximum number of reference lists to return.
   *   The service may return fewer than this value.
   *   If unspecified, at most 100 reference lists will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListReferenceLists` call.
   *   Provide this to retrieve the subsequent page.
   *   When paginating, all other parameters provided to `ListReferenceLists` must
   *   match the call that provided the page token.
   * @param {google.cloud.chronicle.v1.ReferenceListView} request.view
   *   How much of each ReferenceList to view. Defaults to
   *   REFERENCE_LIST_VIEW_BASIC.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing {@link protos.google.cloud.chronicle.v1.ReferenceList|ReferenceList} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listReferenceListsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   */
  listReferenceListsStream(
    request?: protos.google.cloud.chronicle.v1.IListReferenceListsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listReferenceLists'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('listReferenceLists stream %j', request);
    return this.descriptors.page.listReferenceLists.createStream(
      this.innerApiCalls.listReferenceLists as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listReferenceLists`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent, which owns this collection of reference lists.
   *   Format:
   *   `projects/{project}/locations/{location}/instances/{instance}`
   * @param {number} request.pageSize
   *   The maximum number of reference lists to return.
   *   The service may return fewer than this value.
   *   If unspecified, at most 100 reference lists will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   A page token, received from a previous `ListReferenceLists` call.
   *   Provide this to retrieve the subsequent page.
   *   When paginating, all other parameters provided to `ListReferenceLists` must
   *   match the call that provided the page token.
   * @param {google.cloud.chronicle.v1.ReferenceListView} request.view
   *   How much of each ReferenceList to view. Defaults to
   *   REFERENCE_LIST_VIEW_BASIC.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
   *   When you iterate the returned iterable, each element will be an object representing
   *   {@link protos.google.cloud.chronicle.v1.ReferenceList|ReferenceList}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/reference_list_service.list_reference_lists.js</caption>
   * region_tag:chronicle_v1_generated_ReferenceListService_ListReferenceLists_async
   */
  listReferenceListsAsync(
    request?: protos.google.cloud.chronicle.v1.IListReferenceListsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.chronicle.v1.IReferenceList> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listReferenceLists'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize().catch(err => {
      throw err;
    });
    this._log.info('listReferenceLists iterate %j', request);
    return this.descriptors.page.listReferenceLists.asyncIterate(
      this.innerApiCalls['listReferenceLists'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.chronicle.v1.IReferenceList>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified dataAccessLabel resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance
   * @param {string} data_access_label
   * @returns {string} Resource name string.
   */
  dataAccessLabelPath(
    project: string,
    location: string,
    instance: string,
    dataAccessLabel: string
  ) {
    return this.pathTemplates.dataAccessLabelPathTemplate.render({
      project: project,
      location: location,
      instance: instance,
      data_access_label: dataAccessLabel,
    });
  }

  /**
   * Parse the project from DataAccessLabel resource.
   *
   * @param {string} dataAccessLabelName
   *   A fully-qualified path representing DataAccessLabel resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataAccessLabelName(dataAccessLabelName: string) {
    return this.pathTemplates.dataAccessLabelPathTemplate.match(
      dataAccessLabelName
    ).project;
  }

  /**
   * Parse the location from DataAccessLabel resource.
   *
   * @param {string} dataAccessLabelName
   *   A fully-qualified path representing DataAccessLabel resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataAccessLabelName(dataAccessLabelName: string) {
    return this.pathTemplates.dataAccessLabelPathTemplate.match(
      dataAccessLabelName
    ).location;
  }

  /**
   * Parse the instance from DataAccessLabel resource.
   *
   * @param {string} dataAccessLabelName
   *   A fully-qualified path representing DataAccessLabel resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromDataAccessLabelName(dataAccessLabelName: string) {
    return this.pathTemplates.dataAccessLabelPathTemplate.match(
      dataAccessLabelName
    ).instance;
  }

  /**
   * Parse the data_access_label from DataAccessLabel resource.
   *
   * @param {string} dataAccessLabelName
   *   A fully-qualified path representing DataAccessLabel resource.
   * @returns {string} A string representing the data_access_label.
   */
  matchDataAccessLabelFromDataAccessLabelName(dataAccessLabelName: string) {
    return this.pathTemplates.dataAccessLabelPathTemplate.match(
      dataAccessLabelName
    ).data_access_label;
  }

  /**
   * Return a fully-qualified dataAccessScope resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance
   * @param {string} data_access_scope
   * @returns {string} Resource name string.
   */
  dataAccessScopePath(
    project: string,
    location: string,
    instance: string,
    dataAccessScope: string
  ) {
    return this.pathTemplates.dataAccessScopePathTemplate.render({
      project: project,
      location: location,
      instance: instance,
      data_access_scope: dataAccessScope,
    });
  }

  /**
   * Parse the project from DataAccessScope resource.
   *
   * @param {string} dataAccessScopeName
   *   A fully-qualified path representing DataAccessScope resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDataAccessScopeName(dataAccessScopeName: string) {
    return this.pathTemplates.dataAccessScopePathTemplate.match(
      dataAccessScopeName
    ).project;
  }

  /**
   * Parse the location from DataAccessScope resource.
   *
   * @param {string} dataAccessScopeName
   *   A fully-qualified path representing DataAccessScope resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDataAccessScopeName(dataAccessScopeName: string) {
    return this.pathTemplates.dataAccessScopePathTemplate.match(
      dataAccessScopeName
    ).location;
  }

  /**
   * Parse the instance from DataAccessScope resource.
   *
   * @param {string} dataAccessScopeName
   *   A fully-qualified path representing DataAccessScope resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromDataAccessScopeName(dataAccessScopeName: string) {
    return this.pathTemplates.dataAccessScopePathTemplate.match(
      dataAccessScopeName
    ).instance;
  }

  /**
   * Parse the data_access_scope from DataAccessScope resource.
   *
   * @param {string} dataAccessScopeName
   *   A fully-qualified path representing DataAccessScope resource.
   * @returns {string} A string representing the data_access_scope.
   */
  matchDataAccessScopeFromDataAccessScopeName(dataAccessScopeName: string) {
    return this.pathTemplates.dataAccessScopePathTemplate.match(
      dataAccessScopeName
    ).data_access_scope;
  }

  /**
   * Return a fully-qualified instance resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance
   * @returns {string} Resource name string.
   */
  instancePath(project: string, location: string, instance: string) {
    return this.pathTemplates.instancePathTemplate.render({
      project: project,
      location: location,
      instance: instance,
    });
  }

  /**
   * Parse the project from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).project;
  }

  /**
   * Parse the location from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).location;
  }

  /**
   * Parse the instance from Instance resource.
   *
   * @param {string} instanceName
   *   A fully-qualified path representing Instance resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromInstanceName(instanceName: string) {
    return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified referenceList resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance
   * @param {string} reference_list
   * @returns {string} Resource name string.
   */
  referenceListPath(
    project: string,
    location: string,
    instance: string,
    referenceList: string
  ) {
    return this.pathTemplates.referenceListPathTemplate.render({
      project: project,
      location: location,
      instance: instance,
      reference_list: referenceList,
    });
  }

  /**
   * Parse the project from ReferenceList resource.
   *
   * @param {string} referenceListName
   *   A fully-qualified path representing ReferenceList resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromReferenceListName(referenceListName: string) {
    return this.pathTemplates.referenceListPathTemplate.match(referenceListName)
      .project;
  }

  /**
   * Parse the location from ReferenceList resource.
   *
   * @param {string} referenceListName
   *   A fully-qualified path representing ReferenceList resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromReferenceListName(referenceListName: string) {
    return this.pathTemplates.referenceListPathTemplate.match(referenceListName)
      .location;
  }

  /**
   * Parse the instance from ReferenceList resource.
   *
   * @param {string} referenceListName
   *   A fully-qualified path representing ReferenceList resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromReferenceListName(referenceListName: string) {
    return this.pathTemplates.referenceListPathTemplate.match(referenceListName)
      .instance;
  }

  /**
   * Parse the reference_list from ReferenceList resource.
   *
   * @param {string} referenceListName
   *   A fully-qualified path representing ReferenceList resource.
   * @returns {string} A string representing the reference_list.
   */
  matchReferenceListFromReferenceListName(referenceListName: string) {
    return this.pathTemplates.referenceListPathTemplate.match(referenceListName)
      .reference_list;
  }

  /**
   * Return a fully-qualified retrohunt resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance
   * @param {string} rule
   * @param {string} retrohunt
   * @returns {string} Resource name string.
   */
  retrohuntPath(
    project: string,
    location: string,
    instance: string,
    rule: string,
    retrohunt: string
  ) {
    return this.pathTemplates.retrohuntPathTemplate.render({
      project: project,
      location: location,
      instance: instance,
      rule: rule,
      retrohunt: retrohunt,
    });
  }

  /**
   * Parse the project from Retrohunt resource.
   *
   * @param {string} retrohuntName
   *   A fully-qualified path representing Retrohunt resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRetrohuntName(retrohuntName: string) {
    return this.pathTemplates.retrohuntPathTemplate.match(retrohuntName)
      .project;
  }

  /**
   * Parse the location from Retrohunt resource.
   *
   * @param {string} retrohuntName
   *   A fully-qualified path representing Retrohunt resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRetrohuntName(retrohuntName: string) {
    return this.pathTemplates.retrohuntPathTemplate.match(retrohuntName)
      .location;
  }

  /**
   * Parse the instance from Retrohunt resource.
   *
   * @param {string} retrohuntName
   *   A fully-qualified path representing Retrohunt resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromRetrohuntName(retrohuntName: string) {
    return this.pathTemplates.retrohuntPathTemplate.match(retrohuntName)
      .instance;
  }

  /**
   * Parse the rule from Retrohunt resource.
   *
   * @param {string} retrohuntName
   *   A fully-qualified path representing Retrohunt resource.
   * @returns {string} A string representing the rule.
   */
  matchRuleFromRetrohuntName(retrohuntName: string) {
    return this.pathTemplates.retrohuntPathTemplate.match(retrohuntName).rule;
  }

  /**
   * Parse the retrohunt from Retrohunt resource.
   *
   * @param {string} retrohuntName
   *   A fully-qualified path representing Retrohunt resource.
   * @returns {string} A string representing the retrohunt.
   */
  matchRetrohuntFromRetrohuntName(retrohuntName: string) {
    return this.pathTemplates.retrohuntPathTemplate.match(retrohuntName)
      .retrohunt;
  }

  /**
   * Return a fully-qualified rule resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance
   * @param {string} rule
   * @returns {string} Resource name string.
   */
  rulePath(project: string, location: string, instance: string, rule: string) {
    return this.pathTemplates.rulePathTemplate.render({
      project: project,
      location: location,
      instance: instance,
      rule: rule,
    });
  }

  /**
   * Parse the project from Rule resource.
   *
   * @param {string} ruleName
   *   A fully-qualified path representing Rule resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRuleName(ruleName: string) {
    return this.pathTemplates.rulePathTemplate.match(ruleName).project;
  }

  /**
   * Parse the location from Rule resource.
   *
   * @param {string} ruleName
   *   A fully-qualified path representing Rule resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRuleName(ruleName: string) {
    return this.pathTemplates.rulePathTemplate.match(ruleName).location;
  }

  /**
   * Parse the instance from Rule resource.
   *
   * @param {string} ruleName
   *   A fully-qualified path representing Rule resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromRuleName(ruleName: string) {
    return this.pathTemplates.rulePathTemplate.match(ruleName).instance;
  }

  /**
   * Parse the rule from Rule resource.
   *
   * @param {string} ruleName
   *   A fully-qualified path representing Rule resource.
   * @returns {string} A string representing the rule.
   */
  matchRuleFromRuleName(ruleName: string) {
    return this.pathTemplates.rulePathTemplate.match(ruleName).rule;
  }

  /**
   * Return a fully-qualified ruleDeployment resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance
   * @param {string} rule
   * @returns {string} Resource name string.
   */
  ruleDeploymentPath(
    project: string,
    location: string,
    instance: string,
    rule: string
  ) {
    return this.pathTemplates.ruleDeploymentPathTemplate.render({
      project: project,
      location: location,
      instance: instance,
      rule: rule,
    });
  }

  /**
   * Parse the project from RuleDeployment resource.
   *
   * @param {string} ruleDeploymentName
   *   A fully-qualified path representing RuleDeployment resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromRuleDeploymentName(ruleDeploymentName: string) {
    return this.pathTemplates.ruleDeploymentPathTemplate.match(
      ruleDeploymentName
    ).project;
  }

  /**
   * Parse the location from RuleDeployment resource.
   *
   * @param {string} ruleDeploymentName
   *   A fully-qualified path representing RuleDeployment resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromRuleDeploymentName(ruleDeploymentName: string) {
    return this.pathTemplates.ruleDeploymentPathTemplate.match(
      ruleDeploymentName
    ).location;
  }

  /**
   * Parse the instance from RuleDeployment resource.
   *
   * @param {string} ruleDeploymentName
   *   A fully-qualified path representing RuleDeployment resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromRuleDeploymentName(ruleDeploymentName: string) {
    return this.pathTemplates.ruleDeploymentPathTemplate.match(
      ruleDeploymentName
    ).instance;
  }

  /**
   * Parse the rule from RuleDeployment resource.
   *
   * @param {string} ruleDeploymentName
   *   A fully-qualified path representing RuleDeployment resource.
   * @returns {string} A string representing the rule.
   */
  matchRuleFromRuleDeploymentName(ruleDeploymentName: string) {
    return this.pathTemplates.ruleDeploymentPathTemplate.match(
      ruleDeploymentName
    ).rule;
  }

  /**
   * Return a fully-qualified watchlist resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} instance
   * @param {string} watchlist
   * @returns {string} Resource name string.
   */
  watchlistPath(
    project: string,
    location: string,
    instance: string,
    watchlist: string
  ) {
    return this.pathTemplates.watchlistPathTemplate.render({
      project: project,
      location: location,
      instance: instance,
      watchlist: watchlist,
    });
  }

  /**
   * Parse the project from Watchlist resource.
   *
   * @param {string} watchlistName
   *   A fully-qualified path representing Watchlist resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromWatchlistName(watchlistName: string) {
    return this.pathTemplates.watchlistPathTemplate.match(watchlistName)
      .project;
  }

  /**
   * Parse the location from Watchlist resource.
   *
   * @param {string} watchlistName
   *   A fully-qualified path representing Watchlist resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromWatchlistName(watchlistName: string) {
    return this.pathTemplates.watchlistPathTemplate.match(watchlistName)
      .location;
  }

  /**
   * Parse the instance from Watchlist resource.
   *
   * @param {string} watchlistName
   *   A fully-qualified path representing Watchlist resource.
   * @returns {string} A string representing the instance.
   */
  matchInstanceFromWatchlistName(watchlistName: string) {
    return this.pathTemplates.watchlistPathTemplate.match(watchlistName)
      .instance;
  }

  /**
   * Parse the watchlist from Watchlist resource.
   *
   * @param {string} watchlistName
   *   A fully-qualified path representing Watchlist resource.
   * @returns {string} A string representing the watchlist.
   */
  matchWatchlistFromWatchlistName(watchlistName: string) {
    return this.pathTemplates.watchlistPathTemplate.match(watchlistName)
      .watchlist;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.referenceListServiceStub && !this._terminated) {
      return this.referenceListServiceStub.then(stub => {
        this._log.info('ending gRPC channel');
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
