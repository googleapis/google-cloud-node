// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
  LocationsClient,
  LocationProtos,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/data_transfer_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './data_transfer_service_client_config.json';
const version = require('../../../package.json').version;

/**
 *  This API allows users to manage their data transfers into BigQuery.
 * @class
 * @memberof v1
 */
export class DataTransferServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  locationsClient: LocationsClient;
  pathTemplates: {[name: string]: gax.PathTemplate};
  dataTransferServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of DataTransferServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new DataTransferServiceClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof DataTransferServiceClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }
    this.locationsClient = new this._gaxModule.LocationsClient(
      this._gaxGrpc,
      opts
    );

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectDataSourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/dataSources/{data_source}'
      ),
      projectLocationDataSourcePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dataSources/{data_source}'
      ),
      projectLocationTransferConfigPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/transferConfigs/{transfer_config}'
        ),
      projectLocationTransferConfigRunPathTemplate:
        new this._gaxModule.PathTemplate(
          'projects/{project}/locations/{location}/transferConfigs/{transfer_config}/runs/{run}'
        ),
      projectTransferConfigPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/transferConfigs/{transfer_config}'
      ),
      projectTransferConfigRunPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/transferConfigs/{transfer_config}/runs/{run}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listDataSources: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'dataSources'
      ),
      listTransferConfigs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'transferConfigs'
      ),
      listTransferRuns: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'transferRuns'
      ),
      listTransferLogs: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'transferMessages'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.bigquery.datatransfer.v1.DataTransferService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.dataTransferServiceStub) {
      return this.dataTransferServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.bigquery.datatransfer.v1.DataTransferService.
    this.dataTransferServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.bigquery.datatransfer.v1.DataTransferService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.bigquery.datatransfer.v1
            .DataTransferService,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const dataTransferServiceStubMethods = [
      'getDataSource',
      'listDataSources',
      'createTransferConfig',
      'updateTransferConfig',
      'deleteTransferConfig',
      'getTransferConfig',
      'listTransferConfigs',
      'scheduleTransferRuns',
      'startManualTransferRuns',
      'getTransferRun',
      'deleteTransferRun',
      'listTransferRuns',
      'listTransferLogs',
      'checkValidCreds',
      'enrollDataSources',
    ];
    for (const methodName of dataTransferServiceStubMethods) {
      const callPromise = this.dataTransferServiceStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor = this.descriptors.page[methodName] || undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.dataTransferServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'bigquerydatatransfer.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'bigquerydatatransfer.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Retrieves a supported data source and returns its settings.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The field will contain name of the resource requested, for
   *   example: `projects/{project_id}/dataSources/{data_source_id}` or
   *   `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DataSource]{@link google.cloud.bigquery.datatransfer.v1.DataSource}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.get_data_source.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_GetDataSource_async
   */
  getDataSource(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.IDataSource,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getDataSource(
    request: protos.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.IDataSource,
      | protos.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getDataSource(
    request: protos.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.IDataSource,
      | protos.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getDataSource(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.datatransfer.v1.IDataSource,
          | protos.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.IDataSource,
      | protos.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.IDataSource,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IGetDataSourceRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getDataSource(request, options, callback);
  }
  /**
   * Creates a new data transfer configuration.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BigQuery project id where the transfer configuration should
   *   be created. Must be in the format
   *   projects/{project_id}/locations/{location_id} or projects/{project_id}. If
   *   specified location and location of the destination bigquery dataset do not
   *   match - the request will fail.
   * @param {google.cloud.bigquery.datatransfer.v1.TransferConfig} request.transferConfig
   *   Required. Data transfer configuration to create.
   * @param {string} request.authorizationCode
   *   Optional OAuth2 authorization code to use with this transfer configuration.
   *   This is required only if `transferConfig.dataSourceId` is 'youtube_channel'
   *   and new credentials are needed, as indicated by `CheckValidCreds`. In order
   *   to obtain authorization_code, make a request to the following URL:
   *   <pre class="prettyprint" suppresswarning="true">
   *   https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=authorization_code&client_id=<var>client_id</var>&scope=<var>data_source_scopes</var>
   *   </pre>
   *   * The <var>client_id</var> is the OAuth client_id of the a data source as
   *   returned by ListDataSources method.
   *   * <var>data_source_scopes</var> are the scopes returned by ListDataSources
   *   method.
   *
   *   Note that this should not be set when `service_account_name` is used to
   *   create the transfer config.
   * @param {string} request.versionInfo
   *   Optional version info. This is required only if
   *   `transferConfig.dataSourceId` is not 'youtube_channel' and new credentials
   *   are needed, as indicated by `CheckValidCreds`. In order to obtain version
   *   info, make a request to the following URL:
   *   <pre class="prettyprint" suppresswarning="true">
   *   https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=version_info&client_id=<var>client_id</var>&scope=<var>data_source_scopes</var>
   *   </pre>
   *   * The <var>client_id</var> is the OAuth client_id of the a data source as
   *   returned by ListDataSources method.
   *   * <var>data_source_scopes</var> are the scopes returned by ListDataSources
   *   method.
   *
   *   Note that this should not be set when `service_account_name` is used to
   *   create the transfer config.
   * @param {string} request.serviceAccountName
   *   Optional service account name. If this field is set, the transfer config
   *   will be created with this service account's credentials. It requires that
   *   the requesting user calling this API has permissions to act as this service
   *   account.
   *
   *   Note that not all data sources support service account credentials when
   *   creating a transfer config. For the latest list of data sources, read about
   *   [using service
   *   accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TransferConfig]{@link google.cloud.bigquery.datatransfer.v1.TransferConfig}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.create_transfer_config.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_CreateTransferConfig_async
   */
  createTransferConfig(
    request?: protos.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createTransferConfig(
    request: protos.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protos.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTransferConfig(
    request: protos.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protos.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createTransferConfig(
    request?: protos.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
          | protos.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protos.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.ICreateTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.createTransferConfig(request, options, callback);
  }
  /**
   * Updates a data transfer configuration.
   * All fields must be set, even if they are not updated.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.bigquery.datatransfer.v1.TransferConfig} request.transferConfig
   *   Required. Data transfer configuration to create.
   * @param {string} request.authorizationCode
   *   Optional OAuth2 authorization code to use with this transfer configuration.
   *   This is required only if `transferConfig.dataSourceId` is 'youtube_channel'
   *   and new credentials are needed, as indicated by `CheckValidCreds`. In order
   *   to obtain authorization_code, make a request to the following URL:
   *   <pre class="prettyprint" suppresswarning="true">
   *   https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=authorization_code&client_id=<var>client_id</var>&scope=<var>data_source_scopes</var>
   *   </pre>
   *   * The <var>client_id</var> is the OAuth client_id of the a data source as
   *   returned by ListDataSources method.
   *   * <var>data_source_scopes</var> are the scopes returned by ListDataSources
   *   method.
   *
   *   Note that this should not be set when `service_account_name` is used to
   *   update the transfer config.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Required list of fields to be updated in this request.
   * @param {string} request.versionInfo
   *   Optional version info. This is required only if
   *   `transferConfig.dataSourceId` is not 'youtube_channel' and new credentials
   *   are needed, as indicated by `CheckValidCreds`. In order to obtain version
   *   info, make a request to the following URL:
   *   <pre class="prettyprint" suppresswarning="true">
   *   https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=version_info&client_id=<var>client_id</var>&scope=<var>data_source_scopes</var>
   *   </pre>
   *   * The <var>client_id</var> is the OAuth client_id of the a data source as
   *   returned by ListDataSources method.
   *   * <var>data_source_scopes</var> are the scopes returned by ListDataSources
   *   method.
   *
   *   Note that this should not be set when `service_account_name` is used to
   *   update the transfer config.
   * @param {string} request.serviceAccountName
   *   Optional service account name. If this field is set, the transfer config
   *   will be created with this service account's credentials. It requires that
   *   the requesting user calling this API has permissions to act as this service
   *   account.
   *
   *   Note that not all data sources support service account credentials when
   *   creating a transfer config. For the latest list of data sources, read about
   *   [using service
   *   accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TransferConfig]{@link google.cloud.bigquery.datatransfer.v1.TransferConfig}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.update_transfer_config.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_UpdateTransferConfig_async
   */
  updateTransferConfig(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateTransferConfig(
    request: protos.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protos.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTransferConfig(
    request: protos.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protos.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateTransferConfig(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
          | protos.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protos.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IUpdateTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'transfer_config.name': request.transferConfig!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTransferConfig(request, options, callback);
  }
  /**
   * Deletes a data transfer configuration, including any associated transfer
   * runs and logs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The field will contain name of the resource requested, for
   *   example: `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.delete_transfer_config.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_DeleteTransferConfig_async
   */
  deleteTransferConfig(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteTransferConfig(
    request: protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTransferConfig(
    request: protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTransferConfig(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTransferConfig(request, options, callback);
  }
  /**
   * Returns information about a data transfer config.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The field will contain name of the resource requested, for
   *   example: `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TransferConfig]{@link google.cloud.bigquery.datatransfer.v1.TransferConfig}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.get_transfer_config.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_GetTransferConfig_async
   */
  getTransferConfig(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getTransferConfig(
    request: protos.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protos.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTransferConfig(
    request: protos.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protos.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTransferConfig(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
          | protos.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      | protos.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IGetTransferConfigRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTransferConfig(request, options, callback);
  }
  /**
   * Creates transfer runs for a time range [start_time, end_time].
   * For each date - or whatever granularity the data source supports - in the
   * range, one transfer run is created.
   * Note that runs are created per UTC time in the time range.
   * DEPRECATED: use StartManualTransferRuns instead.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Transfer configuration name in the form:
   *   `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
   * @param {google.protobuf.Timestamp} request.startTime
   *   Required. Start time of the range of transfer runs. For example,
   *   `"2017-05-25T00:00:00+00:00"`.
   * @param {google.protobuf.Timestamp} request.endTime
   *   Required. End time of the range of transfer runs. For example,
   *   `"2017-05-30T00:00:00+00:00"`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [ScheduleTransferRunsResponse]{@link google.cloud.bigquery.datatransfer.v1.ScheduleTransferRunsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.schedule_transfer_runs.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_ScheduleTransferRuns_async
   * @deprecated ScheduleTransferRuns is deprecated and may be removed in a future version.
   */
  scheduleTransferRuns(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsResponse,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  scheduleTransferRuns(
    request: protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsResponse,
      | protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  scheduleTransferRuns(
    request: protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsResponse,
      | protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  scheduleTransferRuns(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsResponse,
          | protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsResponse,
      | protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsResponse,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IScheduleTransferRunsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    this.warn(
      'DEP$DataTransferService-$ScheduleTransferRuns',
      'ScheduleTransferRuns is deprecated and may be removed in a future version.',
      'DeprecationWarning'
    );
    return this.innerApiCalls.scheduleTransferRuns(request, options, callback);
  }
  /**
   * Start manual transfer runs to be executed now with schedule_time equal to
   * current time. The transfer runs can be created for a time range where the
   * run_time is between start_time (inclusive) and end_time (exclusive), or for
   * a specific run_time.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Transfer configuration name in the form:
   *   `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
   * @param {google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsRequest.TimeRange} request.requestedTimeRange
   *   Time range for the transfer runs that should be started.
   * @param {google.protobuf.Timestamp} request.requestedRunTime
   *   Specific run_time for a transfer run to be started. The
   *   requested_run_time must not be in the future.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [StartManualTransferRunsResponse]{@link google.cloud.bigquery.datatransfer.v1.StartManualTransferRunsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.start_manual_transfer_runs.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_StartManualTransferRuns_async
   */
  startManualTransferRuns(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsResponse,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  startManualTransferRuns(
    request: protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsResponse,
      | protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  startManualTransferRuns(
    request: protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsResponse,
      | protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  startManualTransferRuns(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsResponse,
          | protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsResponse,
      | protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsResponse,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IStartManualTransferRunsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.startManualTransferRuns(
      request,
      options,
      callback
    );
  }
  /**
   * Returns information about the particular transfer run.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The field will contain name of the resource requested, for
   *   example: `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
   *   or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TransferRun]{@link google.cloud.bigquery.datatransfer.v1.TransferRun}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.get_transfer_run.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_GetTransferRun_async
   */
  getTransferRun(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferRun,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getTransferRun(
    request: protos.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ITransferRun,
      | protos.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTransferRun(
    request: protos.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ITransferRun,
      | protos.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTransferRun(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.datatransfer.v1.ITransferRun,
          | protos.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ITransferRun,
      | protos.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferRun,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IGetTransferRunRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTransferRun(request, options, callback);
  }
  /**
   * Deletes the specified transfer run.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The field will contain name of the resource requested, for
   *   example: `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
   *   or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.delete_transfer_run.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_DeleteTransferRun_async
   */
  deleteTransferRun(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteTransferRun(
    request: protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTransferRun(
    request: protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTransferRun(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IDeleteTransferRunRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTransferRun(request, options, callback);
  }
  /**
   * Returns true if valid credentials exist for the given data source and
   * requesting user.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The data source in the form:
   *   `projects/{project_id}/dataSources/{data_source_id}` or
   *   `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CheckValidCredsResponse]{@link google.cloud.bigquery.datatransfer.v1.CheckValidCredsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.check_valid_creds.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_CheckValidCreds_async
   */
  checkValidCreds(
    request?: protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsResponse,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  checkValidCreds(
    request: protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsResponse,
      | protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  checkValidCreds(
    request: protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest,
    callback: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsResponse,
      | protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  checkValidCreds(
    request?: protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsResponse,
          | protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsResponse,
      | protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsResponse,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.ICheckValidCredsRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.checkValidCreds(request, options, callback);
  }
  /**
   * Enroll data sources in a user project. This allows users to create transfer
   * configurations for these data sources. They will also appear in the
   * ListDataSources RPC and as such, will appear in the
   * [BigQuery UI](https://console.cloud.google.com/bigquery), and the documents
   * can be found in the public guide for
   * [BigQuery Web UI](https://cloud.google.com/bigquery/bigquery-web-ui) and
   * [Data Transfer
   * Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the project resource in the form: `projects/{project_id}`
   * @param {string[]} request.dataSourceIds
   *   Data sources that are enrolled. It is required to provide at least one
   *   data source id.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.enroll_data_sources.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_EnrollDataSources_async
   */
  enrollDataSources(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IEnrollDataSourcesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IEnrollDataSourcesRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  enrollDataSources(
    request: protos.google.cloud.bigquery.datatransfer.v1.IEnrollDataSourcesRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.datatransfer.v1.IEnrollDataSourcesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  enrollDataSources(
    request: protos.google.cloud.bigquery.datatransfer.v1.IEnrollDataSourcesRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.datatransfer.v1.IEnrollDataSourcesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  enrollDataSources(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IEnrollDataSourcesRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.datatransfer.v1.IEnrollDataSourcesRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.datatransfer.v1.IEnrollDataSourcesRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.datatransfer.v1.IEnrollDataSourcesRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.enrollDataSources(request, options, callback);
  }

  /**
   * Lists supported data sources and returns their settings.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BigQuery project id for which data sources should be
   *   returned. Must be in the form: `projects/{project_id}` or
   *   `projects/{project_id}/locations/{location_id}`
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListDataSourcesRequest` list results. For multiple-page
   *   results, `ListDataSourcesResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [DataSource]{@link google.cloud.bigquery.datatransfer.v1.DataSource}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDataSourcesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDataSources(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.IDataSource[],
      protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest | null,
      protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesResponse
    ]
  >;
  listDataSources(
    request: protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
      | protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.datatransfer.v1.IDataSource
    >
  ): void;
  listDataSources(
    request: protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
      | protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.datatransfer.v1.IDataSource
    >
  ): void;
  listDataSources(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
          | protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesResponse
          | null
          | undefined,
          protos.google.cloud.bigquery.datatransfer.v1.IDataSource
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
      | protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.datatransfer.v1.IDataSource
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.IDataSource[],
      protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest | null,
      protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listDataSources(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BigQuery project id for which data sources should be
   *   returned. Must be in the form: `projects/{project_id}` or
   *   `projects/{project_id}/locations/{location_id}`
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListDataSourcesRequest` list results. For multiple-page
   *   results, `ListDataSourcesResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [DataSource]{@link google.cloud.bigquery.datatransfer.v1.DataSource} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDataSourcesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDataSourcesStream(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDataSources'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDataSources.createStream(
      this.innerApiCalls.listDataSources as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDataSources`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BigQuery project id for which data sources should be
   *   returned. Must be in the form: `projects/{project_id}` or
   *   `projects/{project_id}/locations/{location_id}`
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListDataSourcesRequest` list results. For multiple-page
   *   results, `ListDataSourcesResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [DataSource]{@link google.cloud.bigquery.datatransfer.v1.DataSource}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.list_data_sources.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_ListDataSources_async
   */
  listDataSourcesAsync(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListDataSourcesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.datatransfer.v1.IDataSource> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listDataSources'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDataSources.asyncIterate(
      this.innerApiCalls['listDataSources'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.bigquery.datatransfer.v1.IDataSource>;
  }
  /**
   * Returns information about all transfer configs owned by a project in the
   * specified location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BigQuery project id for which transfer configs
   *   should be returned: `projects/{project_id}` or
   *   `projects/{project_id}/locations/{location_id}`
   * @param {string[]} request.dataSourceIds
   *   When specified, only configurations of requested data sources are returned.
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransfersRequest` list results. For multiple-page
   *   results, `ListTransfersResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [TransferConfig]{@link google.cloud.bigquery.datatransfer.v1.TransferConfig}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTransferConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTransferConfigs(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig[],
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest | null,
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsResponse
    ]
  >;
  listTransferConfigs(
    request: protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
      | protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig
    >
  ): void;
  listTransferConfigs(
    request: protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
      | protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig
    >
  ): void;
  listTransferConfigs(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
          | protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsResponse
          | null
          | undefined,
          protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
      | protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig[],
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest | null,
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTransferConfigs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BigQuery project id for which transfer configs
   *   should be returned: `projects/{project_id}` or
   *   `projects/{project_id}/locations/{location_id}`
   * @param {string[]} request.dataSourceIds
   *   When specified, only configurations of requested data sources are returned.
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransfersRequest` list results. For multiple-page
   *   results, `ListTransfersResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [TransferConfig]{@link google.cloud.bigquery.datatransfer.v1.TransferConfig} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTransferConfigsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTransferConfigsStream(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTransferConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTransferConfigs.createStream(
      this.innerApiCalls.listTransferConfigs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTransferConfigs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The BigQuery project id for which transfer configs
   *   should be returned: `projects/{project_id}` or
   *   `projects/{project_id}/locations/{location_id}`
   * @param {string[]} request.dataSourceIds
   *   When specified, only configurations of requested data sources are returned.
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransfersRequest` list results. For multiple-page
   *   results, `ListTransfersResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [TransferConfig]{@link google.cloud.bigquery.datatransfer.v1.TransferConfig}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.list_transfer_configs.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_ListTransferConfigs_async
   */
  listTransferConfigsAsync(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListTransferConfigsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTransferConfigs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTransferConfigs.asyncIterate(
      this.innerApiCalls['listTransferConfigs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.bigquery.datatransfer.v1.ITransferConfig>;
  }
  /**
   * Returns information about running and completed transfer runs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of transfer configuration for which transfer runs should be
   *   retrieved. Format of transfer configuration resource name is:
   *   `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
   * @param {number[]} request.states
   *   When specified, only transfer runs with requested states are returned.
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransferRunsRequest` list results. For multiple-page
   *   results, `ListTransferRunsResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.RunAttempt} request.runAttempt
   *   Indicates how run attempts are to be pulled.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [TransferRun]{@link google.cloud.bigquery.datatransfer.v1.TransferRun}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTransferRunsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTransferRuns(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferRun[],
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest | null,
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsResponse
    ]
  >;
  listTransferRuns(
    request: protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
      | protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.datatransfer.v1.ITransferRun
    >
  ): void;
  listTransferRuns(
    request: protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
      | protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.datatransfer.v1.ITransferRun
    >
  ): void;
  listTransferRuns(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
          | protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsResponse
          | null
          | undefined,
          protos.google.cloud.bigquery.datatransfer.v1.ITransferRun
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
      | protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.datatransfer.v1.ITransferRun
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferRun[],
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest | null,
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTransferRuns(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of transfer configuration for which transfer runs should be
   *   retrieved. Format of transfer configuration resource name is:
   *   `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
   * @param {number[]} request.states
   *   When specified, only transfer runs with requested states are returned.
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransferRunsRequest` list results. For multiple-page
   *   results, `ListTransferRunsResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.RunAttempt} request.runAttempt
   *   Indicates how run attempts are to be pulled.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [TransferRun]{@link google.cloud.bigquery.datatransfer.v1.TransferRun} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTransferRunsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTransferRunsStream(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTransferRuns'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTransferRuns.createStream(
      this.innerApiCalls.listTransferRuns as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTransferRuns`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Name of transfer configuration for which transfer runs should be
   *   retrieved. Format of transfer configuration resource name is:
   *   `projects/{project_id}/transferConfigs/{config_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
   * @param {number[]} request.states
   *   When specified, only transfer runs with requested states are returned.
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransferRunsRequest` list results. For multiple-page
   *   results, `ListTransferRunsResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {google.cloud.bigquery.datatransfer.v1.ListTransferRunsRequest.RunAttempt} request.runAttempt
   *   Indicates how run attempts are to be pulled.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [TransferRun]{@link google.cloud.bigquery.datatransfer.v1.TransferRun}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.list_transfer_runs.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_ListTransferRuns_async
   */
  listTransferRunsAsync(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListTransferRunsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.datatransfer.v1.ITransferRun> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTransferRuns'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTransferRuns.asyncIterate(
      this.innerApiCalls['listTransferRuns'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.bigquery.datatransfer.v1.ITransferRun>;
  }
  /**
   * Returns log messages for the transfer run.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Transfer run name in the form:
   *   `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransferLogsRequest` list results. For multiple-page
   *   results, `ListTransferLogsResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {number[]} request.messageTypes
   *   Message types to return. If not populated - INFO, WARNING and ERROR
   *   messages are returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [TransferMessage]{@link google.cloud.bigquery.datatransfer.v1.TransferMessage}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTransferLogsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTransferLogs(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferMessage[],
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest | null,
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsResponse
    ]
  >;
  listTransferLogs(
    request: protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
      | protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.datatransfer.v1.ITransferMessage
    >
  ): void;
  listTransferLogs(
    request: protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
      | protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.datatransfer.v1.ITransferMessage
    >
  ): void;
  listTransferLogs(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
          | protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsResponse
          | null
          | undefined,
          protos.google.cloud.bigquery.datatransfer.v1.ITransferMessage
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
      | protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.datatransfer.v1.ITransferMessage
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.datatransfer.v1.ITransferMessage[],
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest | null,
      protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    this.initialize();
    return this.innerApiCalls.listTransferLogs(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Transfer run name in the form:
   *   `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransferLogsRequest` list results. For multiple-page
   *   results, `ListTransferLogsResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {number[]} request.messageTypes
   *   Message types to return. If not populated - INFO, WARNING and ERROR
   *   messages are returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [TransferMessage]{@link google.cloud.bigquery.datatransfer.v1.TransferMessage} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTransferLogsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTransferLogsStream(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTransferLogs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTransferLogs.createStream(
      this.innerApiCalls.listTransferLogs as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTransferLogs`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Transfer run name in the form:
   *   `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
   *   `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
   * @param {string} request.pageToken
   *   Pagination token, which can be used to request a specific page
   *   of `ListTransferLogsRequest` list results. For multiple-page
   *   results, `ListTransferLogsResponse` outputs
   *   a `next_page` token, which can be used as the
   *   `page_token` value to request the next page of list results.
   * @param {number} request.pageSize
   *   Page size. The default page size is the maximum value of 1000 results.
   * @param {number[]} request.messageTypes
   *   Message types to return. If not populated - INFO, WARNING and ERROR
   *   messages are returned.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [TransferMessage]{@link google.cloud.bigquery.datatransfer.v1.TransferMessage}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/data_transfer_service.list_transfer_logs.js</caption>
   * region_tag:bigquerydatatransfer_v1_generated_DataTransferService_ListTransferLogs_async
   */
  listTransferLogsAsync(
    request?: protos.google.cloud.bigquery.datatransfer.v1.IListTransferLogsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.datatransfer.v1.ITransferMessage> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        parent: request.parent ?? '',
      });
    const defaultCallSettings = this._defaults['listTransferLogs'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTransferLogs.asyncIterate(
      this.innerApiCalls['listTransferLogs'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.bigquery.datatransfer.v1.ITransferMessage>;
  }
  /**
   * Gets information about a location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Resource name for the location.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example
   * ```
   * const [response] = await client.getLocation(request);
   * ```
   */
  getLocation(
    request: LocationProtos.google.cloud.location.IGetLocationRequest,
    options?:
      | gax.CallOptions
      | Callback<
          LocationProtos.google.cloud.location.ILocation,
          | LocationProtos.google.cloud.location.IGetLocationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LocationProtos.google.cloud.location.ILocation,
      | LocationProtos.google.cloud.location.IGetLocationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.getLocation(request, options, callback);
  }

  /**
   * Lists information about the supported locations for this service. Returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The resource that owns the locations collection, if applicable.
   * @param {string} request.filter
   *   The standard list filter.
   * @param {number} request.pageSize
   *   The standard list page size.
   * @param {string} request.pageToken
   *   The standard list page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example
   * ```
   * const iterable = client.listLocationsAsync(request);
   * for await (const response of iterable) {
   *   // process response
   * }
   * ```
   */
  listLocationsAsync(
    request: LocationProtos.google.cloud.location.IListLocationsRequest,
    options?: CallOptions
  ): AsyncIterable<LocationProtos.google.cloud.location.ILocation> {
    return this.locationsClient.listLocationsAsync(request, options);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectDataSource resource name string.
   *
   * @param {string} project
   * @param {string} data_source
   * @returns {string} Resource name string.
   */
  projectDataSourcePath(project: string, dataSource: string) {
    return this.pathTemplates.projectDataSourcePathTemplate.render({
      project: project,
      data_source: dataSource,
    });
  }

  /**
   * Parse the project from ProjectDataSource resource.
   *
   * @param {string} projectDataSourceName
   *   A fully-qualified path representing project_data_source resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectDataSourceName(projectDataSourceName: string) {
    return this.pathTemplates.projectDataSourcePathTemplate.match(
      projectDataSourceName
    ).project;
  }

  /**
   * Parse the data_source from ProjectDataSource resource.
   *
   * @param {string} projectDataSourceName
   *   A fully-qualified path representing project_data_source resource.
   * @returns {string} A string representing the data_source.
   */
  matchDataSourceFromProjectDataSourceName(projectDataSourceName: string) {
    return this.pathTemplates.projectDataSourcePathTemplate.match(
      projectDataSourceName
    ).data_source;
  }

  /**
   * Return a fully-qualified projectLocationDataSource resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} data_source
   * @returns {string} Resource name string.
   */
  projectLocationDataSourcePath(
    project: string,
    location: string,
    dataSource: string
  ) {
    return this.pathTemplates.projectLocationDataSourcePathTemplate.render({
      project: project,
      location: location,
      data_source: dataSource,
    });
  }

  /**
   * Parse the project from ProjectLocationDataSource resource.
   *
   * @param {string} projectLocationDataSourceName
   *   A fully-qualified path representing project_location_data_source resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationDataSourceName(
    projectLocationDataSourceName: string
  ) {
    return this.pathTemplates.projectLocationDataSourcePathTemplate.match(
      projectLocationDataSourceName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationDataSource resource.
   *
   * @param {string} projectLocationDataSourceName
   *   A fully-qualified path representing project_location_data_source resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationDataSourceName(
    projectLocationDataSourceName: string
  ) {
    return this.pathTemplates.projectLocationDataSourcePathTemplate.match(
      projectLocationDataSourceName
    ).location;
  }

  /**
   * Parse the data_source from ProjectLocationDataSource resource.
   *
   * @param {string} projectLocationDataSourceName
   *   A fully-qualified path representing project_location_data_source resource.
   * @returns {string} A string representing the data_source.
   */
  matchDataSourceFromProjectLocationDataSourceName(
    projectLocationDataSourceName: string
  ) {
    return this.pathTemplates.projectLocationDataSourcePathTemplate.match(
      projectLocationDataSourceName
    ).data_source;
  }

  /**
   * Return a fully-qualified projectLocationTransferConfig resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} transfer_config
   * @returns {string} Resource name string.
   */
  projectLocationTransferConfigPath(
    project: string,
    location: string,
    transferConfig: string
  ) {
    return this.pathTemplates.projectLocationTransferConfigPathTemplate.render({
      project: project,
      location: location,
      transfer_config: transferConfig,
    });
  }

  /**
   * Parse the project from ProjectLocationTransferConfig resource.
   *
   * @param {string} projectLocationTransferConfigName
   *   A fully-qualified path representing project_location_transfer_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationTransferConfigName(
    projectLocationTransferConfigName: string
  ) {
    return this.pathTemplates.projectLocationTransferConfigPathTemplate.match(
      projectLocationTransferConfigName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationTransferConfig resource.
   *
   * @param {string} projectLocationTransferConfigName
   *   A fully-qualified path representing project_location_transfer_config resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationTransferConfigName(
    projectLocationTransferConfigName: string
  ) {
    return this.pathTemplates.projectLocationTransferConfigPathTemplate.match(
      projectLocationTransferConfigName
    ).location;
  }

  /**
   * Parse the transfer_config from ProjectLocationTransferConfig resource.
   *
   * @param {string} projectLocationTransferConfigName
   *   A fully-qualified path representing project_location_transfer_config resource.
   * @returns {string} A string representing the transfer_config.
   */
  matchTransferConfigFromProjectLocationTransferConfigName(
    projectLocationTransferConfigName: string
  ) {
    return this.pathTemplates.projectLocationTransferConfigPathTemplate.match(
      projectLocationTransferConfigName
    ).transfer_config;
  }

  /**
   * Return a fully-qualified projectLocationTransferConfigRun resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} transfer_config
   * @param {string} run
   * @returns {string} Resource name string.
   */
  projectLocationTransferConfigRunPath(
    project: string,
    location: string,
    transferConfig: string,
    run: string
  ) {
    return this.pathTemplates.projectLocationTransferConfigRunPathTemplate.render(
      {
        project: project,
        location: location,
        transfer_config: transferConfig,
        run: run,
      }
    );
  }

  /**
   * Parse the project from ProjectLocationTransferConfigRun resource.
   *
   * @param {string} projectLocationTransferConfigRunName
   *   A fully-qualified path representing project_location_transfer_config_run resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationTransferConfigRunName(
    projectLocationTransferConfigRunName: string
  ) {
    return this.pathTemplates.projectLocationTransferConfigRunPathTemplate.match(
      projectLocationTransferConfigRunName
    ).project;
  }

  /**
   * Parse the location from ProjectLocationTransferConfigRun resource.
   *
   * @param {string} projectLocationTransferConfigRunName
   *   A fully-qualified path representing project_location_transfer_config_run resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationTransferConfigRunName(
    projectLocationTransferConfigRunName: string
  ) {
    return this.pathTemplates.projectLocationTransferConfigRunPathTemplate.match(
      projectLocationTransferConfigRunName
    ).location;
  }

  /**
   * Parse the transfer_config from ProjectLocationTransferConfigRun resource.
   *
   * @param {string} projectLocationTransferConfigRunName
   *   A fully-qualified path representing project_location_transfer_config_run resource.
   * @returns {string} A string representing the transfer_config.
   */
  matchTransferConfigFromProjectLocationTransferConfigRunName(
    projectLocationTransferConfigRunName: string
  ) {
    return this.pathTemplates.projectLocationTransferConfigRunPathTemplate.match(
      projectLocationTransferConfigRunName
    ).transfer_config;
  }

  /**
   * Parse the run from ProjectLocationTransferConfigRun resource.
   *
   * @param {string} projectLocationTransferConfigRunName
   *   A fully-qualified path representing project_location_transfer_config_run resource.
   * @returns {string} A string representing the run.
   */
  matchRunFromProjectLocationTransferConfigRunName(
    projectLocationTransferConfigRunName: string
  ) {
    return this.pathTemplates.projectLocationTransferConfigRunPathTemplate.match(
      projectLocationTransferConfigRunName
    ).run;
  }

  /**
   * Return a fully-qualified projectTransferConfig resource name string.
   *
   * @param {string} project
   * @param {string} transfer_config
   * @returns {string} Resource name string.
   */
  projectTransferConfigPath(project: string, transferConfig: string) {
    return this.pathTemplates.projectTransferConfigPathTemplate.render({
      project: project,
      transfer_config: transferConfig,
    });
  }

  /**
   * Parse the project from ProjectTransferConfig resource.
   *
   * @param {string} projectTransferConfigName
   *   A fully-qualified path representing project_transfer_config resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectTransferConfigName(projectTransferConfigName: string) {
    return this.pathTemplates.projectTransferConfigPathTemplate.match(
      projectTransferConfigName
    ).project;
  }

  /**
   * Parse the transfer_config from ProjectTransferConfig resource.
   *
   * @param {string} projectTransferConfigName
   *   A fully-qualified path representing project_transfer_config resource.
   * @returns {string} A string representing the transfer_config.
   */
  matchTransferConfigFromProjectTransferConfigName(
    projectTransferConfigName: string
  ) {
    return this.pathTemplates.projectTransferConfigPathTemplate.match(
      projectTransferConfigName
    ).transfer_config;
  }

  /**
   * Return a fully-qualified projectTransferConfigRun resource name string.
   *
   * @param {string} project
   * @param {string} transfer_config
   * @param {string} run
   * @returns {string} Resource name string.
   */
  projectTransferConfigRunPath(
    project: string,
    transferConfig: string,
    run: string
  ) {
    return this.pathTemplates.projectTransferConfigRunPathTemplate.render({
      project: project,
      transfer_config: transferConfig,
      run: run,
    });
  }

  /**
   * Parse the project from ProjectTransferConfigRun resource.
   *
   * @param {string} projectTransferConfigRunName
   *   A fully-qualified path representing project_transfer_config_run resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectTransferConfigRunName(
    projectTransferConfigRunName: string
  ) {
    return this.pathTemplates.projectTransferConfigRunPathTemplate.match(
      projectTransferConfigRunName
    ).project;
  }

  /**
   * Parse the transfer_config from ProjectTransferConfigRun resource.
   *
   * @param {string} projectTransferConfigRunName
   *   A fully-qualified path representing project_transfer_config_run resource.
   * @returns {string} A string representing the transfer_config.
   */
  matchTransferConfigFromProjectTransferConfigRunName(
    projectTransferConfigRunName: string
  ) {
    return this.pathTemplates.projectTransferConfigRunPathTemplate.match(
      projectTransferConfigRunName
    ).transfer_config;
  }

  /**
   * Parse the run from ProjectTransferConfigRun resource.
   *
   * @param {string} projectTransferConfigRunName
   *   A fully-qualified path representing project_transfer_config_run resource.
   * @returns {string} A string representing the run.
   */
  matchRunFromProjectTransferConfigRunName(
    projectTransferConfigRunName: string
  ) {
    return this.pathTemplates.projectTransferConfigRunPathTemplate.match(
      projectTransferConfigRunName
    ).run;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.dataTransferServiceStub && !this._terminated) {
      return this.dataTransferServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.locationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
