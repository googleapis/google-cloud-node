// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as networksecurityModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  IamProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1beta1.NetworkSecurityClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        networksecurityModule.v1beta1.NetworkSecurityClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        networksecurityModule.v1beta1.NetworkSecurityClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = networksecurityModule.v1beta1.NetworkSecurityClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.networkSecurityStub, undefined);
      await client.initialize();
      assert(client.networkSecurityStub);
    });

    it('has close method for the initialized client', done => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.networkSecurityStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.networkSecurityStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getAuthorizationPolicy', () => {
    it('invokes getAuthorizationPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.GetAuthorizationPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.GetAuthorizationPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
      );
      client.innerApiCalls.getAuthorizationPolicy =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getAuthorizationPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAuthorizationPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.GetAuthorizationPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.GetAuthorizationPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
      );
      client.innerApiCalls.getAuthorizationPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getAuthorizationPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAuthorizationPolicy with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.GetAuthorizationPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.GetAuthorizationPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getAuthorizationPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getAuthorizationPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getAuthorizationPolicy with closed client', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.GetAuthorizationPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.GetAuthorizationPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getAuthorizationPolicy(request),
        expectedError
      );
    });
  });

  describe('getServerTlsPolicy', () => {
    it('invokes getServerTlsPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.GetServerTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.GetServerTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
      );
      client.innerApiCalls.getServerTlsPolicy =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getServerTlsPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServerTlsPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.GetServerTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.GetServerTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
      );
      client.innerApiCalls.getServerTlsPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getServerTlsPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServerTlsPolicy with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.GetServerTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.GetServerTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getServerTlsPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getServerTlsPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getServerTlsPolicy with closed client', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.GetServerTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.GetServerTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getServerTlsPolicy(request), expectedError);
    });
  });

  describe('getClientTlsPolicy', () => {
    it('invokes getClientTlsPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.GetClientTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.GetClientTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
      );
      client.innerApiCalls.getClientTlsPolicy =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getClientTlsPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getClientTlsPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.GetClientTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.GetClientTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
      );
      client.innerApiCalls.getClientTlsPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getClientTlsPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getClientTlsPolicy with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.GetClientTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.GetClientTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getClientTlsPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getClientTlsPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getClientTlsPolicy with closed client', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.GetClientTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.GetClientTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getClientTlsPolicy(request), expectedError);
    });
  });

  describe('createAuthorizationPolicy', () => {
    it('invokes createAuthorizationPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.CreateAuthorizationPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.CreateAuthorizationPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAuthorizationPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createAuthorizationPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAuthorizationPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.CreateAuthorizationPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.CreateAuthorizationPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createAuthorizationPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createAuthorizationPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy,
              protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy,
        protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAuthorizationPolicy with call error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.CreateAuthorizationPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.CreateAuthorizationPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAuthorizationPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createAuthorizationPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createAuthorizationPolicy with LRO error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.CreateAuthorizationPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.CreateAuthorizationPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createAuthorizationPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createAuthorizationPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateAuthorizationPolicyProgress without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkCreateAuthorizationPolicyProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateAuthorizationPolicyProgress with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateAuthorizationPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateAuthorizationPolicy', () => {
    it('invokes updateAuthorizationPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.UpdateAuthorizationPolicyRequest()
      );
      request.authorizationPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.UpdateAuthorizationPolicyRequest',
        ['authorizationPolicy', 'name']
      );
      request.authorizationPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `authorization_policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAuthorizationPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateAuthorizationPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAuthorizationPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.UpdateAuthorizationPolicyRequest()
      );
      request.authorizationPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.UpdateAuthorizationPolicyRequest',
        ['authorizationPolicy', 'name']
      );
      request.authorizationPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `authorization_policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateAuthorizationPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateAuthorizationPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy,
              protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy,
        protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAuthorizationPolicy with call error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.UpdateAuthorizationPolicyRequest()
      );
      request.authorizationPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.UpdateAuthorizationPolicyRequest',
        ['authorizationPolicy', 'name']
      );
      request.authorizationPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `authorization_policy.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAuthorizationPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateAuthorizationPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateAuthorizationPolicy with LRO error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.UpdateAuthorizationPolicyRequest()
      );
      request.authorizationPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.UpdateAuthorizationPolicyRequest',
        ['authorizationPolicy', 'name']
      );
      request.authorizationPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `authorization_policy.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateAuthorizationPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateAuthorizationPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateAuthorizationPolicyProgress without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkUpdateAuthorizationPolicyProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateAuthorizationPolicyProgress with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateAuthorizationPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteAuthorizationPolicy', () => {
    it('invokes deleteAuthorizationPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.DeleteAuthorizationPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.DeleteAuthorizationPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAuthorizationPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteAuthorizationPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAuthorizationPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.DeleteAuthorizationPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.DeleteAuthorizationPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteAuthorizationPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteAuthorizationPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAuthorizationPolicy with call error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.DeleteAuthorizationPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.DeleteAuthorizationPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAuthorizationPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteAuthorizationPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteAuthorizationPolicy with LRO error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.DeleteAuthorizationPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.DeleteAuthorizationPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteAuthorizationPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteAuthorizationPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteAuthorizationPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteAuthorizationPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteAuthorizationPolicyProgress without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkDeleteAuthorizationPolicyProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteAuthorizationPolicyProgress with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteAuthorizationPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createServerTlsPolicy', () => {
    it('invokes createServerTlsPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.CreateServerTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.CreateServerTlsPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createServerTlsPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createServerTlsPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServerTlsPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.CreateServerTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.CreateServerTlsPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createServerTlsPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createServerTlsPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy,
              protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy,
        protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServerTlsPolicy with call error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.CreateServerTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.CreateServerTlsPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createServerTlsPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createServerTlsPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createServerTlsPolicy with LRO error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.CreateServerTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.CreateServerTlsPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createServerTlsPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createServerTlsPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateServerTlsPolicyProgress without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateServerTlsPolicyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateServerTlsPolicyProgress with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateServerTlsPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateServerTlsPolicy', () => {
    it('invokes updateServerTlsPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.UpdateServerTlsPolicyRequest()
      );
      request.serverTlsPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.UpdateServerTlsPolicyRequest',
        ['serverTlsPolicy', 'name']
      );
      request.serverTlsPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `server_tls_policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateServerTlsPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateServerTlsPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateServerTlsPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.UpdateServerTlsPolicyRequest()
      );
      request.serverTlsPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.UpdateServerTlsPolicyRequest',
        ['serverTlsPolicy', 'name']
      );
      request.serverTlsPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `server_tls_policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateServerTlsPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateServerTlsPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy,
              protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy,
        protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateServerTlsPolicy with call error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.UpdateServerTlsPolicyRequest()
      );
      request.serverTlsPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.UpdateServerTlsPolicyRequest',
        ['serverTlsPolicy', 'name']
      );
      request.serverTlsPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `server_tls_policy.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateServerTlsPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateServerTlsPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateServerTlsPolicy with LRO error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.UpdateServerTlsPolicyRequest()
      );
      request.serverTlsPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.UpdateServerTlsPolicyRequest',
        ['serverTlsPolicy', 'name']
      );
      request.serverTlsPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `server_tls_policy.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateServerTlsPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateServerTlsPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateServerTlsPolicyProgress without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateServerTlsPolicyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateServerTlsPolicyProgress with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateServerTlsPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteServerTlsPolicy', () => {
    it('invokes deleteServerTlsPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.DeleteServerTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.DeleteServerTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteServerTlsPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteServerTlsPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServerTlsPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.DeleteServerTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.DeleteServerTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteServerTlsPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteServerTlsPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServerTlsPolicy with call error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.DeleteServerTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.DeleteServerTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteServerTlsPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteServerTlsPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteServerTlsPolicy with LRO error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.DeleteServerTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.DeleteServerTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteServerTlsPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteServerTlsPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteServerTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteServerTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteServerTlsPolicyProgress without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteServerTlsPolicyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteServerTlsPolicyProgress with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteServerTlsPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('createClientTlsPolicy', () => {
    it('invokes createClientTlsPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.CreateClientTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.CreateClientTlsPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createClientTlsPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createClientTlsPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createClientTlsPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.CreateClientTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.CreateClientTlsPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createClientTlsPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createClientTlsPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy,
              protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy,
        protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createClientTlsPolicy with call error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.CreateClientTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.CreateClientTlsPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createClientTlsPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.createClientTlsPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.createClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createClientTlsPolicy with LRO error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.CreateClientTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.CreateClientTlsPolicyRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createClientTlsPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createClientTlsPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateClientTlsPolicyProgress without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateClientTlsPolicyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateClientTlsPolicyProgress with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateClientTlsPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateClientTlsPolicy', () => {
    it('invokes updateClientTlsPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.UpdateClientTlsPolicyRequest()
      );
      request.clientTlsPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.UpdateClientTlsPolicyRequest',
        ['clientTlsPolicy', 'name']
      );
      request.clientTlsPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `client_tls_policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateClientTlsPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateClientTlsPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateClientTlsPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.UpdateClientTlsPolicyRequest()
      );
      request.clientTlsPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.UpdateClientTlsPolicyRequest',
        ['clientTlsPolicy', 'name']
      );
      request.clientTlsPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `client_tls_policy.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateClientTlsPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateClientTlsPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy,
              protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy,
        protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateClientTlsPolicy with call error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.UpdateClientTlsPolicyRequest()
      );
      request.clientTlsPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.UpdateClientTlsPolicyRequest',
        ['clientTlsPolicy', 'name']
      );
      request.clientTlsPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `client_tls_policy.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateClientTlsPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.updateClientTlsPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.updateClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateClientTlsPolicy with LRO error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.UpdateClientTlsPolicyRequest()
      );
      request.clientTlsPolicy ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.UpdateClientTlsPolicyRequest',
        ['clientTlsPolicy', 'name']
      );
      request.clientTlsPolicy.name = defaultValue1;
      const expectedHeaderRequestParams = `client_tls_policy.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateClientTlsPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateClientTlsPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateClientTlsPolicyProgress without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateClientTlsPolicyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateClientTlsPolicyProgress with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateClientTlsPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteClientTlsPolicy', () => {
    it('invokes deleteClientTlsPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.DeleteClientTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.DeleteClientTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteClientTlsPolicy =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteClientTlsPolicy(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteClientTlsPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.DeleteClientTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.DeleteClientTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteClientTlsPolicy =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteClientTlsPolicy(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.networksecurity.v1beta1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteClientTlsPolicy with call error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.DeleteClientTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.DeleteClientTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteClientTlsPolicy = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.deleteClientTlsPolicy(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.deleteClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteClientTlsPolicy with LRO error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.DeleteClientTlsPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.DeleteClientTlsPolicyRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteClientTlsPolicy = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteClientTlsPolicy(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteClientTlsPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteClientTlsPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteClientTlsPolicyProgress without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteClientTlsPolicyProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteClientTlsPolicyProgress with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteClientTlsPolicyProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listAuthorizationPolicies', () => {
    it('invokes listAuthorizationPolicies without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
        ),
      ];
      client.innerApiCalls.listAuthorizationPolicies =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listAuthorizationPolicies(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAuthorizationPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAuthorizationPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAuthorizationPolicies without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
        ),
      ];
      client.innerApiCalls.listAuthorizationPolicies =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listAuthorizationPolicies(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listAuthorizationPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAuthorizationPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAuthorizationPolicies with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listAuthorizationPolicies = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listAuthorizationPolicies(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listAuthorizationPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listAuthorizationPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listAuthorizationPoliciesStream without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
        ),
      ];
      client.descriptors.page.listAuthorizationPolicies.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listAuthorizationPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listAuthorizationPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAuthorizationPolicies, request)
      );
      assert(
        (
          client.descriptors.page.listAuthorizationPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listAuthorizationPoliciesStream with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAuthorizationPolicies.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listAuthorizationPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listAuthorizationPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listAuthorizationPolicies, request)
      );
      assert(
        (
          client.descriptors.page.listAuthorizationPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAuthorizationPolicies without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.AuthorizationPolicy()
        ),
      ];
      client.descriptors.page.listAuthorizationPolicies.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy[] =
        [];
      const iterable = client.listAuthorizationPoliciesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAuthorizationPolicies
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAuthorizationPolicies
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listAuthorizationPolicies with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListAuthorizationPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listAuthorizationPolicies.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listAuthorizationPoliciesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.networksecurity.v1beta1.IAuthorizationPolicy[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listAuthorizationPolicies
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listAuthorizationPolicies
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listServerTlsPolicies', () => {
    it('invokes listServerTlsPolicies without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
        ),
      ];
      client.innerApiCalls.listServerTlsPolicies =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listServerTlsPolicies(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServerTlsPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServerTlsPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServerTlsPolicies without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
        ),
      ];
      client.innerApiCalls.listServerTlsPolicies =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listServerTlsPolicies(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listServerTlsPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServerTlsPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServerTlsPolicies with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listServerTlsPolicies = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listServerTlsPolicies(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listServerTlsPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listServerTlsPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listServerTlsPoliciesStream without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
        ),
      ];
      client.descriptors.page.listServerTlsPolicies.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listServerTlsPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listServerTlsPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listServerTlsPolicies, request)
      );
      assert(
        (
          client.descriptors.page.listServerTlsPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listServerTlsPoliciesStream with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServerTlsPolicies.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listServerTlsPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listServerTlsPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listServerTlsPolicies, request)
      );
      assert(
        (
          client.descriptors.page.listServerTlsPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listServerTlsPolicies without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ServerTlsPolicy()
        ),
      ];
      client.descriptors.page.listServerTlsPolicies.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy[] =
        [];
      const iterable = client.listServerTlsPoliciesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServerTlsPolicies
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listServerTlsPolicies
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listServerTlsPolicies with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListServerTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listServerTlsPolicies.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listServerTlsPoliciesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.networksecurity.v1beta1.IServerTlsPolicy[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listServerTlsPolicies
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listServerTlsPolicies
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listClientTlsPolicies', () => {
    it('invokes listClientTlsPolicies without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
        ),
      ];
      client.innerApiCalls.listClientTlsPolicies =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listClientTlsPolicies(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listClientTlsPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listClientTlsPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listClientTlsPolicies without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
        ),
      ];
      client.innerApiCalls.listClientTlsPolicies =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listClientTlsPolicies(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listClientTlsPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listClientTlsPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listClientTlsPolicies with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listClientTlsPolicies = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listClientTlsPolicies(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listClientTlsPolicies as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listClientTlsPolicies as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listClientTlsPoliciesStream without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
        ),
      ];
      client.descriptors.page.listClientTlsPolicies.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listClientTlsPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listClientTlsPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listClientTlsPolicies, request)
      );
      assert(
        (
          client.descriptors.page.listClientTlsPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listClientTlsPoliciesStream with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listClientTlsPolicies.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listClientTlsPoliciesStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy[] =
          [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listClientTlsPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listClientTlsPolicies, request)
      );
      assert(
        (
          client.descriptors.page.listClientTlsPolicies
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listClientTlsPolicies without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
        ),
        generateSampleMessage(
          new protos.google.cloud.networksecurity.v1beta1.ClientTlsPolicy()
        ),
      ];
      client.descriptors.page.listClientTlsPolicies.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy[] =
        [];
      const iterable = client.listClientTlsPoliciesAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listClientTlsPolicies
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listClientTlsPolicies
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listClientTlsPolicies with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.networksecurity.v1beta1.ListClientTlsPoliciesRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listClientTlsPolicies.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listClientTlsPoliciesAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.networksecurity.v1beta1.IClientTlsPolicy[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listClientTlsPolicies
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listClientTlsPolicies
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('authorizationPolicy', () => {
      const fakePath = '/rendered/path/authorizationPolicy';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        authorization_policy: 'authorizationPolicyValue',
      };
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.authorizationPolicyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.authorizationPolicyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('authorizationPolicyPath', () => {
        const result = client.authorizationPolicyPath(
          'projectValue',
          'locationValue',
          'authorizationPolicyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.authorizationPolicyPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAuthorizationPolicyName', () => {
        const result = client.matchProjectFromAuthorizationPolicyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.authorizationPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromAuthorizationPolicyName', () => {
        const result =
          client.matchLocationFromAuthorizationPolicyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.authorizationPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAuthorizationPolicyFromAuthorizationPolicyName', () => {
        const result =
          client.matchAuthorizationPolicyFromAuthorizationPolicyName(fakePath);
        assert.strictEqual(result, 'authorizationPolicyValue');
        assert(
          (
            client.pathTemplates.authorizationPolicyPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('clientTlsPolicy', () => {
      const fakePath = '/rendered/path/clientTlsPolicy';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        client_tls_policy: 'clientTlsPolicyValue',
      };
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.clientTlsPolicyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.clientTlsPolicyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('clientTlsPolicyPath', () => {
        const result = client.clientTlsPolicyPath(
          'projectValue',
          'locationValue',
          'clientTlsPolicyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.clientTlsPolicyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromClientTlsPolicyName', () => {
        const result = client.matchProjectFromClientTlsPolicyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.clientTlsPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromClientTlsPolicyName', () => {
        const result = client.matchLocationFromClientTlsPolicyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.clientTlsPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchClientTlsPolicyFromClientTlsPolicyName', () => {
        const result =
          client.matchClientTlsPolicyFromClientTlsPolicyName(fakePath);
        assert.strictEqual(result, 'clientTlsPolicyValue');
        assert(
          (client.pathTemplates.clientTlsPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('serverTlsPolicy', () => {
      const fakePath = '/rendered/path/serverTlsPolicy';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        server_tls_policy: 'serverTlsPolicyValue',
      };
      const client = new networksecurityModule.v1beta1.NetworkSecurityClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.serverTlsPolicyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.serverTlsPolicyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('serverTlsPolicyPath', () => {
        const result = client.serverTlsPolicyPath(
          'projectValue',
          'locationValue',
          'serverTlsPolicyValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.serverTlsPolicyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromServerTlsPolicyName', () => {
        const result = client.matchProjectFromServerTlsPolicyName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.serverTlsPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromServerTlsPolicyName', () => {
        const result = client.matchLocationFromServerTlsPolicyName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.serverTlsPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchServerTlsPolicyFromServerTlsPolicyName', () => {
        const result =
          client.matchServerTlsPolicyFromServerTlsPolicyName(fakePath);
        assert.strictEqual(result, 'serverTlsPolicyValue');
        assert(
          (client.pathTemplates.serverTlsPolicyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
