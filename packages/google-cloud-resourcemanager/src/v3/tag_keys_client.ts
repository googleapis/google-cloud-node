// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import type * as gax from 'google-gax';
import type {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import {Transform} from 'stream';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v3/tag_keys_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './tag_keys_client_config.json';
const version = require('../../../package.json').version;

/**
 *  Allow users to create and manage tag keys.
 * @class
 * @memberof v3
 */
export class TagKeysClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  tagKeysStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of TagKeysClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
   *     need to avoid loading the default gRPC version and want to use the fallback
   *     HTTP implementation. Load only fallback version and pass it to the constructor:
   *     ```
   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
   *     const client = new TagKeysClient({fallback: 'rest'}, gax);
   *     ```
   */
  constructor(
    opts?: ClientOptions,
    gaxInstance?: typeof gax | typeof gax.fallback
  ) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof TagKeysClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // Request numeric enum values if REST transport is used.
    opts.numericEnums = true;

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Load google-gax module synchronously if needed
    if (!gaxInstance) {
      gaxInstance = require('google-gax') as typeof gax;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      folderPathTemplate: new this._gaxModule.PathTemplate('folders/{folder}'),
      organizationPathTemplate: new this._gaxModule.PathTemplate(
        'organizations/{organization}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      tagBindingPathTemplate: new this._gaxModule.PathTemplate(
        'tagBindings/{tag_binding}'
      ),
      tagKeyPathTemplate: new this._gaxModule.PathTemplate('tagKeys/{tag_key}'),
      tagValuePathTemplate: new this._gaxModule.PathTemplate(
        'tagValues/{tag_value}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listTagKeys: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tagKeys'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v3/{name=operations/**}',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createTagKeyResponse = protoFilesRoot.lookup(
      '.google.cloud.resourcemanager.v3.TagKey'
    ) as gax.protobuf.Type;
    const createTagKeyMetadata = protoFilesRoot.lookup(
      '.google.cloud.resourcemanager.v3.CreateTagKeyMetadata'
    ) as gax.protobuf.Type;
    const updateTagKeyResponse = protoFilesRoot.lookup(
      '.google.cloud.resourcemanager.v3.TagKey'
    ) as gax.protobuf.Type;
    const updateTagKeyMetadata = protoFilesRoot.lookup(
      '.google.cloud.resourcemanager.v3.UpdateTagKeyMetadata'
    ) as gax.protobuf.Type;
    const deleteTagKeyResponse = protoFilesRoot.lookup(
      '.google.cloud.resourcemanager.v3.TagKey'
    ) as gax.protobuf.Type;
    const deleteTagKeyMetadata = protoFilesRoot.lookup(
      '.google.cloud.resourcemanager.v3.DeleteTagKeyMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createTagKey: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createTagKeyResponse.decode.bind(createTagKeyResponse),
        createTagKeyMetadata.decode.bind(createTagKeyMetadata)
      ),
      updateTagKey: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateTagKeyResponse.decode.bind(updateTagKeyResponse),
        updateTagKeyMetadata.decode.bind(updateTagKeyMetadata)
      ),
      deleteTagKey: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteTagKeyResponse.decode.bind(deleteTagKeyResponse),
        deleteTagKeyMetadata.decode.bind(deleteTagKeyMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.resourcemanager.v3.TagKeys',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = this._gaxModule.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.tagKeysStub) {
      return this.tagKeysStub;
    }

    // Put together the "service stub" for
    // google.cloud.resourcemanager.v3.TagKeys.
    this.tagKeysStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.resourcemanager.v3.TagKeys'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.resourcemanager.v3.TagKeys,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const tagKeysStubMethods = [
      'listTagKeys',
      'getTagKey',
      'createTagKey',
      'updateTagKey',
      'deleteTagKey',
      'getIamPolicy',
      'setIamPolicy',
      'testIamPermissions',
    ];
    for (const methodName of tagKeysStubMethods) {
      const callPromise = this.tagKeysStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor,
        this._opts.fallback
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.tagKeysStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'cloudresourcemanager.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'cloudresourcemanager.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/cloud-platform.read-only',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Retrieves a TagKey. This method will return `PERMISSION_DENIED` if the
   * key does not exist or the user does not have permission to view it.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A resource name in the format `tagKeys/{id}`, such as
   *   `tagKeys/123`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TagKey]{@link google.cloud.resourcemanager.v3.TagKey}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3/tag_keys.get_tag_key.js</caption>
   * region_tag:cloudresourcemanager_v3_generated_TagKeys_GetTagKey_async
   */
  getTagKey(
    request?: protos.google.cloud.resourcemanager.v3.IGetTagKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.resourcemanager.v3.ITagKey,
      protos.google.cloud.resourcemanager.v3.IGetTagKeyRequest | undefined,
      {} | undefined
    ]
  >;
  getTagKey(
    request: protos.google.cloud.resourcemanager.v3.IGetTagKeyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.resourcemanager.v3.ITagKey,
      | protos.google.cloud.resourcemanager.v3.IGetTagKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTagKey(
    request: protos.google.cloud.resourcemanager.v3.IGetTagKeyRequest,
    callback: Callback<
      protos.google.cloud.resourcemanager.v3.ITagKey,
      | protos.google.cloud.resourcemanager.v3.IGetTagKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getTagKey(
    request?: protos.google.cloud.resourcemanager.v3.IGetTagKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.resourcemanager.v3.ITagKey,
          | protos.google.cloud.resourcemanager.v3.IGetTagKeyRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.resourcemanager.v3.ITagKey,
      | protos.google.cloud.resourcemanager.v3.IGetTagKeyRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.resourcemanager.v3.ITagKey,
      protos.google.cloud.resourcemanager.v3.IGetTagKeyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getTagKey(request, options, callback);
  }
  /**
   * Gets the access control policy for a TagKey. The returned policy may be
   * empty if no such policy or resource exists. The `resource` field should
   * be the TagKey's resource name. For example, "tagKeys/1234".
   * The caller must have
   * `cloudresourcemanager.googleapis.com/tagKeys.getIamPolicy` permission on
   * the specified TagKey.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.GetPolicyOptions} request.options
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3/tag_keys.get_iam_policy.js</caption>
   * region_tag:cloudresourcemanager_v3_generated_TagKeys_GetIamPolicy_async
   */
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request?: protos.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  /**
   * Sets the access control policy on a TagKey, replacing any existing
   * policy. The `resource` field should be the TagKey's resource name.
   * For example, "tagKeys/1234".
   * The caller must have `resourcemanager.tagKeys.setIamPolicy` permission
   * on the identified tagValue.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being specified.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.Policy} request.policy
   *   REQUIRED: The complete policy to be applied to the `resource`. The size of
   *   the policy is limited to a few 10s of KB. An empty policy is a
   *   valid policy but certain Cloud Platform services (such as Projects)
   *   might reject them.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
   *   the fields in the mask will be modified. If no mask is provided, the
   *   following default mask is used:
   *
   *   `paths: "bindings, etag"`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3/tag_keys.set_iam_policy.js</caption>
   * region_tag:cloudresourcemanager_v3_generated_TagKeys_SetIamPolicy_async
   */
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request?: protos.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  /**
   * Returns permissions that a caller has on the specified TagKey.
   * The `resource` field should be the TagKey's resource name.
   * For example, "tagKeys/1234".
   *
   * There are no permissions required for making this API call.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3/tag_keys.test_iam_permissions.js</caption>
   * region_tag:cloudresourcemanager_v3_generated_TagKeys_TestIamPermissions_async
   */
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request?: protos.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        resource: request.resource ?? '',
      });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }

  /**
   * Creates a new TagKey. If another request with the same parameters is
   * sent while the original request is in process, the second request
   * will receive an error. A maximum of 300 TagKeys can exist under a parent at
   * any given time.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.resourcemanager.v3.TagKey} request.tagKey
   *   Required. The TagKey to be created. Only fields `short_name`, `description`,
   *   and `parent` are considered during the creation request.
   * @param {boolean} [request.validateOnly]
   *   Optional. Set to true to perform validations necessary for creating the resource, but
   *   not actually perform the action.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3/tag_keys.create_tag_key.js</caption>
   * region_tag:cloudresourcemanager_v3_generated_TagKeys_CreateTagKey_async
   */
  createTagKey(
    request?: protos.google.cloud.resourcemanager.v3.ICreateTagKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.ICreateTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createTagKey(
    request: protos.google.cloud.resourcemanager.v3.ICreateTagKeyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.ICreateTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTagKey(
    request: protos.google.cloud.resourcemanager.v3.ICreateTagKeyRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.ICreateTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createTagKey(
    request?: protos.google.cloud.resourcemanager.v3.ICreateTagKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.resourcemanager.v3.ITagKey,
            protos.google.cloud.resourcemanager.v3.ICreateTagKeyMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.ICreateTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.ICreateTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.createTagKey(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createTagKey()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3/tag_keys.create_tag_key.js</caption>
   * region_tag:cloudresourcemanager_v3_generated_TagKeys_CreateTagKey_async
   */
  async checkCreateTagKeyProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.resourcemanager.v3.TagKey,
      protos.google.cloud.resourcemanager.v3.CreateTagKeyMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.createTagKey,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.resourcemanager.v3.TagKey,
      protos.google.cloud.resourcemanager.v3.CreateTagKeyMetadata
    >;
  }
  /**
   * Updates the attributes of the TagKey resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.resourcemanager.v3.TagKey} request.tagKey
   *   Required. The new definition of the TagKey. Only the `description` and `etag` fields
   *   can be updated by this request. If the `etag` field is not empty, it
   *   must match the `etag` field of the existing tag key. Otherwise,
   *   `FAILED_PRECONDITION` will be returned.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Fields to be updated. The mask may only contain `description` or
   *   `etag`. If omitted entirely, both `description` and `etag` are assumed to
   *   be significant.
   * @param {boolean} request.validateOnly
   *   Set as true to perform validations necessary for updating the resource, but
   *   not actually perform the action.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3/tag_keys.update_tag_key.js</caption>
   * region_tag:cloudresourcemanager_v3_generated_TagKeys_UpdateTagKey_async
   */
  updateTagKey(
    request?: protos.google.cloud.resourcemanager.v3.IUpdateTagKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.IUpdateTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateTagKey(
    request: protos.google.cloud.resourcemanager.v3.IUpdateTagKeyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.IUpdateTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTagKey(
    request: protos.google.cloud.resourcemanager.v3.IUpdateTagKeyRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.IUpdateTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateTagKey(
    request?: protos.google.cloud.resourcemanager.v3.IUpdateTagKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.resourcemanager.v3.ITagKey,
            protos.google.cloud.resourcemanager.v3.IUpdateTagKeyMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.IUpdateTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.IUpdateTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        'tag_key.name': request.tagKey!.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.updateTagKey(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateTagKey()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3/tag_keys.update_tag_key.js</caption>
   * region_tag:cloudresourcemanager_v3_generated_TagKeys_UpdateTagKey_async
   */
  async checkUpdateTagKeyProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.resourcemanager.v3.TagKey,
      protos.google.cloud.resourcemanager.v3.UpdateTagKeyMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.updateTagKey,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.resourcemanager.v3.TagKey,
      protos.google.cloud.resourcemanager.v3.UpdateTagKeyMetadata
    >;
  }
  /**
   * Deletes a TagKey. The TagKey cannot be deleted if it has any child
   * TagValues.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The resource name of a TagKey to be deleted in the format `tagKeys/123`.
   *   The TagKey cannot be a parent of any existing TagValues or it will not be
   *   deleted successfully.
   * @param {boolean} [request.validateOnly]
   *   Optional. Set as true to perform validations necessary for deletion, but not actually
   *   perform the action.
   * @param {string} [request.etag]
   *   Optional. The etag known to the client for the expected state of the TagKey. This is
   *   to be used for optimistic concurrency.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3/tag_keys.delete_tag_key.js</caption>
   * region_tag:cloudresourcemanager_v3_generated_TagKeys_DeleteTagKey_async
   */
  deleteTagKey(
    request?: protos.google.cloud.resourcemanager.v3.IDeleteTagKeyRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.IDeleteTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteTagKey(
    request: protos.google.cloud.resourcemanager.v3.IDeleteTagKeyRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.IDeleteTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTagKey(
    request: protos.google.cloud.resourcemanager.v3.IDeleteTagKeyRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.IDeleteTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteTagKey(
    request?: protos.google.cloud.resourcemanager.v3.IDeleteTagKeyRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.resourcemanager.v3.ITagKey,
            protos.google.cloud.resourcemanager.v3.IDeleteTagKeyMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.IDeleteTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.resourcemanager.v3.ITagKey,
        protos.google.cloud.resourcemanager.v3.IDeleteTagKeyMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      this._gaxModule.routingHeader.fromParams({
        name: request.name ?? '',
      });
    this.initialize();
    return this.innerApiCalls.deleteTagKey(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteTagKey()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3/tag_keys.delete_tag_key.js</caption>
   * region_tag:cloudresourcemanager_v3_generated_TagKeys_DeleteTagKey_async
   */
  async checkDeleteTagKeyProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.resourcemanager.v3.TagKey,
      protos.google.cloud.resourcemanager.v3.DeleteTagKeyMetadata
    >
  > {
    const request =
      new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest(
        {name}
      );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new this._gaxModule.Operation(
      operation,
      this.descriptors.longrunning.deleteTagKey,
      this._gaxModule.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.resourcemanager.v3.TagKey,
      protos.google.cloud.resourcemanager.v3.DeleteTagKeyMetadata
    >;
  }
  /**
   * Lists all TagKeys for a parent resource.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the new TagKey's parent.
   *   Must be of the form `folders/{folder_id}` or `organizations/{org_id}`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of TagKeys to return in the response. The server allows
   *   a maximum of 300 TagKeys to return. If unspecified, the server will use 100
   *   as the default.
   * @param {string} [request.pageToken]
   *   Optional. A pagination token returned from a previous call to `ListTagKey`
   *   that indicates where this listing should continue from.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [TagKey]{@link google.cloud.resourcemanager.v3.TagKey}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listTagKeysAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTagKeys(
    request?: protos.google.cloud.resourcemanager.v3.IListTagKeysRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.resourcemanager.v3.ITagKey[],
      protos.google.cloud.resourcemanager.v3.IListTagKeysRequest | null,
      protos.google.cloud.resourcemanager.v3.IListTagKeysResponse
    ]
  >;
  listTagKeys(
    request: protos.google.cloud.resourcemanager.v3.IListTagKeysRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.resourcemanager.v3.IListTagKeysRequest,
      | protos.google.cloud.resourcemanager.v3.IListTagKeysResponse
      | null
      | undefined,
      protos.google.cloud.resourcemanager.v3.ITagKey
    >
  ): void;
  listTagKeys(
    request: protos.google.cloud.resourcemanager.v3.IListTagKeysRequest,
    callback: PaginationCallback<
      protos.google.cloud.resourcemanager.v3.IListTagKeysRequest,
      | protos.google.cloud.resourcemanager.v3.IListTagKeysResponse
      | null
      | undefined,
      protos.google.cloud.resourcemanager.v3.ITagKey
    >
  ): void;
  listTagKeys(
    request?: protos.google.cloud.resourcemanager.v3.IListTagKeysRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.resourcemanager.v3.IListTagKeysRequest,
          | protos.google.cloud.resourcemanager.v3.IListTagKeysResponse
          | null
          | undefined,
          protos.google.cloud.resourcemanager.v3.ITagKey
        >,
    callback?: PaginationCallback<
      protos.google.cloud.resourcemanager.v3.IListTagKeysRequest,
      | protos.google.cloud.resourcemanager.v3.IListTagKeysResponse
      | null
      | undefined,
      protos.google.cloud.resourcemanager.v3.ITagKey
    >
  ): Promise<
    [
      protos.google.cloud.resourcemanager.v3.ITagKey[],
      protos.google.cloud.resourcemanager.v3.IListTagKeysRequest | null,
      protos.google.cloud.resourcemanager.v3.IListTagKeysResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    this.initialize();
    return this.innerApiCalls.listTagKeys(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the new TagKey's parent.
   *   Must be of the form `folders/{folder_id}` or `organizations/{org_id}`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of TagKeys to return in the response. The server allows
   *   a maximum of 300 TagKeys to return. If unspecified, the server will use 100
   *   as the default.
   * @param {string} [request.pageToken]
   *   Optional. A pagination token returned from a previous call to `ListTagKey`
   *   that indicates where this listing should continue from.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [TagKey]{@link google.cloud.resourcemanager.v3.TagKey} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listTagKeysAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listTagKeysStream(
    request?: protos.google.cloud.resourcemanager.v3.IListTagKeysRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listTagKeys'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTagKeys.createStream(
      this.innerApiCalls.listTagKeys as GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listTagKeys`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the new TagKey's parent.
   *   Must be of the form `folders/{folder_id}` or `organizations/{org_id}`.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of TagKeys to return in the response. The server allows
   *   a maximum of 300 TagKeys to return. If unspecified, the server will use 100
   *   as the default.
   * @param {string} [request.pageToken]
   *   Optional. A pagination token returned from a previous call to `ListTagKey`
   *   that indicates where this listing should continue from.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [TagKey]{@link google.cloud.resourcemanager.v3.TagKey}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v3/tag_keys.list_tag_keys.js</caption>
   * region_tag:cloudresourcemanager_v3_generated_TagKeys_ListTagKeys_async
   */
  listTagKeysAsync(
    request?: protos.google.cloud.resourcemanager.v3.IListTagKeysRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.resourcemanager.v3.ITagKey> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    const defaultCallSettings = this._defaults['listTagKeys'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listTagKeys.asyncIterate(
      this.innerApiCalls['listTagKeys'] as GaxCall,
      request as {},
      callSettings
    ) as AsyncIterable<protos.google.cloud.resourcemanager.v3.ITagKey>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified folder resource name string.
   *
   * @param {string} folder
   * @returns {string} Resource name string.
   */
  folderPath(folder: string) {
    return this.pathTemplates.folderPathTemplate.render({
      folder: folder,
    });
  }

  /**
   * Parse the folder from Folder resource.
   *
   * @param {string} folderName
   *   A fully-qualified path representing Folder resource.
   * @returns {string} A string representing the folder.
   */
  matchFolderFromFolderName(folderName: string) {
    return this.pathTemplates.folderPathTemplate.match(folderName).folder;
  }

  /**
   * Return a fully-qualified organization resource name string.
   *
   * @param {string} organization
   * @returns {string} Resource name string.
   */
  organizationPath(organization: string) {
    return this.pathTemplates.organizationPathTemplate.render({
      organization: organization,
    });
  }

  /**
   * Parse the organization from Organization resource.
   *
   * @param {string} organizationName
   *   A fully-qualified path representing Organization resource.
   * @returns {string} A string representing the organization.
   */
  matchOrganizationFromOrganizationName(organizationName: string) {
    return this.pathTemplates.organizationPathTemplate.match(organizationName)
      .organization;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified tagBinding resource name string.
   *
   * @param {string} tag_binding
   * @returns {string} Resource name string.
   */
  tagBindingPath(tagBinding: string) {
    return this.pathTemplates.tagBindingPathTemplate.render({
      tag_binding: tagBinding,
    });
  }

  /**
   * Parse the tag_binding from TagBinding resource.
   *
   * @param {string} tagBindingName
   *   A fully-qualified path representing TagBinding resource.
   * @returns {string} A string representing the tag_binding.
   */
  matchTagBindingFromTagBindingName(tagBindingName: string) {
    return this.pathTemplates.tagBindingPathTemplate.match(tagBindingName)
      .tag_binding;
  }

  /**
   * Return a fully-qualified tagKey resource name string.
   *
   * @param {string} tag_key
   * @returns {string} Resource name string.
   */
  tagKeyPath(tagKey: string) {
    return this.pathTemplates.tagKeyPathTemplate.render({
      tag_key: tagKey,
    });
  }

  /**
   * Parse the tag_key from TagKey resource.
   *
   * @param {string} tagKeyName
   *   A fully-qualified path representing TagKey resource.
   * @returns {string} A string representing the tag_key.
   */
  matchTagKeyFromTagKeyName(tagKeyName: string) {
    return this.pathTemplates.tagKeyPathTemplate.match(tagKeyName).tag_key;
  }

  /**
   * Return a fully-qualified tagValue resource name string.
   *
   * @param {string} tag_value
   * @returns {string} Resource name string.
   */
  tagValuePath(tagValue: string) {
    return this.pathTemplates.tagValuePathTemplate.render({
      tag_value: tagValue,
    });
  }

  /**
   * Parse the tag_value from TagValue resource.
   *
   * @param {string} tagValueName
   *   A fully-qualified path representing TagValue resource.
   * @returns {string} A string representing the tag_value.
   */
  matchTagValueFromTagValueName(tagValueName: string) {
    return this.pathTemplates.tagValuePathTemplate.match(tagValueName)
      .tag_value;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.tagKeysStub && !this._terminated) {
      return this.tagKeysStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
