// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as organizationsModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v3.OrganizationsClient', () => {
  describe('Common methods', () => {
    it('has servicePath', () => {
      const servicePath =
        organizationsModule.v3.OrganizationsClient.servicePath;
      assert(servicePath);
    });

    it('has apiEndpoint', () => {
      const apiEndpoint =
        organizationsModule.v3.OrganizationsClient.apiEndpoint;
      assert(apiEndpoint);
    });

    it('has port', () => {
      const port = organizationsModule.v3.OrganizationsClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new organizationsModule.v3.OrganizationsClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.organizationsStub, undefined);
      await client.initialize();
      assert(client.organizationsStub);
    });

    it('has close method for the initialized client', done => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.organizationsStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.organizationsStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getOrganization', () => {
    it('invokes getOrganization without error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.GetOrganizationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.resourcemanager.v3.GetOrganizationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.Organization()
      );
      client.innerApiCalls.getOrganization = stubSimpleCall(expectedResponse);
      const [response] = await client.getOrganization(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getOrganization as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getOrganization as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getOrganization without error using callback', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.GetOrganizationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.resourcemanager.v3.GetOrganizationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.Organization()
      );
      client.innerApiCalls.getOrganization =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getOrganization(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.resourcemanager.v3.IOrganization | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getOrganization as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getOrganization as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getOrganization with error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.GetOrganizationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.resourcemanager.v3.GetOrganizationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getOrganization = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getOrganization(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getOrganization as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getOrganization as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getOrganization with closed client', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.GetOrganizationRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.resourcemanager.v3.GetOrganizationRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getOrganization(request), expectedError);
    });
  });

  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.getIamPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.getIamPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy without error using callback', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.getIamPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy with error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getIamPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getIamPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getIamPolicy with closed client', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.GetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.GetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getIamPolicy(request), expectedError);
    });
  });

  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.setIamPolicy = stubSimpleCall(expectedResponse);
      const [response] = await client.setIamPolicy(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy without error using callback', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.Policy()
      );
      client.innerApiCalls.setIamPolicy =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.IPolicy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy with error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.setIamPolicy = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.setIamPolicy(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.setIamPolicy as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes setIamPolicy with closed client', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.SetIamPolicyRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.SetIamPolicyRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.setIamPolicy(request), expectedError);
    });
  });

  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.innerApiCalls.testIamPermissions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.testIamPermissions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions without error using callback', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.innerApiCalls.testIamPermissions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          (
            err?: Error | null,
            result?: protos.google.iam.v1.ITestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions with error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedHeaderRequestParams = `resource=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.testIamPermissions(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.testIamPermissions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes testIamPermissions with closed client', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.iam.v1.TestIamPermissionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.iam.v1.TestIamPermissionsRequest',
        ['resource']
      );
      request.resource = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.testIamPermissions(request), expectedError);
    });
  });

  describe('searchOrganizations', () => {
    it('invokes searchOrganizations without error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.SearchOrganizationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.resourcemanager.v3.Organization()
        ),
        generateSampleMessage(
          new protos.google.cloud.resourcemanager.v3.Organization()
        ),
        generateSampleMessage(
          new protos.google.cloud.resourcemanager.v3.Organization()
        ),
      ];
      client.innerApiCalls.searchOrganizations =
        stubSimpleCall(expectedResponse);
      const [response] = await client.searchOrganizations(request);
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes searchOrganizations without error using callback', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.SearchOrganizationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.resourcemanager.v3.Organization()
        ),
        generateSampleMessage(
          new protos.google.cloud.resourcemanager.v3.Organization()
        ),
        generateSampleMessage(
          new protos.google.cloud.resourcemanager.v3.Organization()
        ),
      ];
      client.innerApiCalls.searchOrganizations =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.searchOrganizations(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.resourcemanager.v3.IOrganization[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
    });

    it('invokes searchOrganizations with error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.SearchOrganizationsRequest()
      );
      const expectedError = new Error('expected');
      client.innerApiCalls.searchOrganizations = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.searchOrganizations(request), expectedError);
    });

    it('invokes searchOrganizationsStream without error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.SearchOrganizationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.resourcemanager.v3.Organization()
        ),
        generateSampleMessage(
          new protos.google.cloud.resourcemanager.v3.Organization()
        ),
        generateSampleMessage(
          new protos.google.cloud.resourcemanager.v3.Organization()
        ),
      ];
      client.descriptors.page.searchOrganizations.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.searchOrganizationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.resourcemanager.v3.Organization[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.resourcemanager.v3.Organization) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.searchOrganizations.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.searchOrganizations, request)
      );
    });

    it('invokes searchOrganizationsStream with error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.SearchOrganizationsRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.searchOrganizations.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.searchOrganizationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.resourcemanager.v3.Organization[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.resourcemanager.v3.Organization) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.searchOrganizations.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.searchOrganizations, request)
      );
    });

    it('uses async iteration with searchOrganizations without error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.SearchOrganizationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.resourcemanager.v3.Organization()
        ),
        generateSampleMessage(
          new protos.google.cloud.resourcemanager.v3.Organization()
        ),
        generateSampleMessage(
          new protos.google.cloud.resourcemanager.v3.Organization()
        ),
      ];
      client.descriptors.page.searchOrganizations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.resourcemanager.v3.IOrganization[] =
        [];
      const iterable = client.searchOrganizationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.searchOrganizations.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });

    it('uses async iteration with searchOrganizations with error', async () => {
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.resourcemanager.v3.SearchOrganizationsRequest()
      );
      const expectedError = new Error('expected');
      client.descriptors.page.searchOrganizations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.searchOrganizationsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.resourcemanager.v3.IOrganization[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.searchOrganizations.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('folder', () => {
      const fakePath = '/rendered/path/folder';
      const expectedParameters = {
        folder: 'folderValue',
      };
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.folderPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.folderPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('folderPath', () => {
        const result = client.folderPath('folderValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.folderPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchFolderFromFolderName', () => {
        const result = client.matchFolderFromFolderName(fakePath);
        assert.strictEqual(result, 'folderValue');
        assert(
          (client.pathTemplates.folderPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('organization', () => {
      const fakePath = '/rendered/path/organization';
      const expectedParameters = {
        organization: 'organizationValue',
      };
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.organizationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.organizationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('organizationPath', () => {
        const result = client.organizationPath('organizationValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.organizationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchOrganizationFromOrganizationName', () => {
        const result = client.matchOrganizationFromOrganizationName(fakePath);
        assert.strictEqual(result, 'organizationValue');
        assert(
          (client.pathTemplates.organizationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tagBinding', () => {
      const fakePath = '/rendered/path/tagBinding';
      const expectedParameters = {
        tag_binding: 'tagBindingValue',
      };
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tagBindingPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tagBindingPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tagBindingPath', () => {
        const result = client.tagBindingPath('tagBindingValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tagBindingPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchTagBindingFromTagBindingName', () => {
        const result = client.matchTagBindingFromTagBindingName(fakePath);
        assert.strictEqual(result, 'tagBindingValue');
        assert(
          (client.pathTemplates.tagBindingPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tagKey', () => {
      const fakePath = '/rendered/path/tagKey';
      const expectedParameters = {
        tag_key: 'tagKeyValue',
      };
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tagKeyPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tagKeyPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tagKeyPath', () => {
        const result = client.tagKeyPath('tagKeyValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tagKeyPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchTagKeyFromTagKeyName', () => {
        const result = client.matchTagKeyFromTagKeyName(fakePath);
        assert.strictEqual(result, 'tagKeyValue');
        assert(
          (client.pathTemplates.tagKeyPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tagValue', () => {
      const fakePath = '/rendered/path/tagValue';
      const expectedParameters = {
        tag_value: 'tagValueValue',
      };
      const client = new organizationsModule.v3.OrganizationsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tagValuePathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tagValuePathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tagValuePath', () => {
        const result = client.tagValuePath('tagValueValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tagValuePathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchTagValueFromTagValueName', () => {
        const result = client.matchTagValueFromTagValueName(fakePath);
        assert.strictEqual(result, 'tagValueValue');
        assert(
          (client.pathTemplates.tagValuePathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
