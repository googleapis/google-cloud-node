// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(messageBus) {
  // [START eventarcpublishing_v1_generated_Publisher_Publish_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The full name of the message bus to publish events to. Format:
   *  `projects/{project}/locations/{location}/messageBuses/{messageBus}`.
   */
  // const messageBus = 'abc123'
  /**
   *  The Protobuf format of the CloudEvent being published. Specification can
   *  be found here:
   *  https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/protobuf-format.md
   */
  // const protoMessage = {}
  /**
   *  The JSON format of the CloudEvent being published. Specification can be
   *  found here:
   *  https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/json-format.md
   */
  // const jsonMessage = 'abc123'
  /**
   *  The Avro format of the CloudEvent being published. Specification can
   *  be found here:
   *  https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/formats/avro-format.md
   */
  // const avroMessage = Buffer.from('string')

  // Imports the Publishing library
  const {PublisherClient} = require('@google-cloud/eventarc-publishing').v1;

  // Instantiates a client
  const publishingClient = new PublisherClient();

  async function callPublish() {
    // Construct request
    const request = {
      messageBus,
    };

    // Run request
    const response = await publishingClient.publish(request);
    console.log(response);
  }

  callPublish();
  // [END eventarcpublishing_v1_generated_Publisher_Publish_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
