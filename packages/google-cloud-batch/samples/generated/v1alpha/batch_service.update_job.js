// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(job, updateMask) {
  // [START batch_v1alpha_generated_BatchService_UpdateJob_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The Job to update.
   *  Only fields specified in `updateMask` are updated.
   */
  // const job = {}
  /**
   *  Required. Mask of fields to update.
   *  The `jobs.patch` method can only be used while a job is in the `QUEUED`,
   *  `SCHEDULED`, or `RUNNING` state and currently only supports increasing the
   *  value of the first `taskCount` field in the job's `taskGroups` field.
   *  Therefore, you must set the value of `updateMask` to `taskGroups`. Any
   *  other job fields in the update request will be ignored.
   *  For example, to update a job's `taskCount` to `2`, set `updateMask` to
   *  `taskGroups` and use the following request body:
   *  ```
   *  {
   *    "taskGroups":{
   *      "taskCount": 2
   *    } 
   *  }
   *  ```
   */
  // const updateMask = {}
  /**
   *  Optional. An optional request ID to identify requests. Specify a unique
   *  request ID so that if you must retry your request, the server will know to
   *  ignore the request if it has already been completed. The server will
   *  guarantee that for at least 60 minutes after the first request.
   *  For example, consider a situation where you make an initial request and
   *  the request times out. If you make the request again with the same request
   *  ID, the server can check if original operation with the same request ID
   *  was received, and if so, will ignore the second request. This prevents
   *  clients from accidentally creating duplicate commitments.
   *  The request ID must be a valid UUID with the exception that zero UUID is
   *  not supported (00000000-0000-0000-0000-000000000000).
   */
  // const requestId = 'abc123'

  // Imports the Batch library
  const {BatchServiceClient} = require('@google-cloud/batch').v1alpha;

  // Instantiates a client
  const batchClient = new BatchServiceClient();

  async function callUpdateJob() {
    // Construct request
    const request = {
      job,
      updateMask,
    };

    // Run request
    const response = await batchClient.updateJob(request);
    console.log(response);
  }

  callUpdateJob();
  // [END batch_v1alpha_generated_BatchService_UpdateJob_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
