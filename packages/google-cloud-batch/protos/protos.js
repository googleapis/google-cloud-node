// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax/build/src/protobuf").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_cloud_batch_protos || ($protobuf.roots._google_cloud_batch_protos = {});
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.cloud = (function() {
    
            /**
             * Namespace cloud.
             * @memberof google
             * @namespace
             */
            var cloud = {};
    
            cloud.batch = (function() {
    
                /**
                 * Namespace batch.
                 * @memberof google.cloud
                 * @namespace
                 */
                var batch = {};
    
                batch.v1 = (function() {
    
                    /**
                     * Namespace v1.
                     * @memberof google.cloud.batch
                     * @namespace
                     */
                    var v1 = {};
    
                    v1.BatchService = (function() {
    
                        /**
                         * Constructs a new BatchService service.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a BatchService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function BatchService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (BatchService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = BatchService;
    
                        /**
                         * Creates new BatchService service using the specified rpc implementation.
                         * @function create
                         * @memberof google.cloud.batch.v1.BatchService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {BatchService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        BatchService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.cloud.batch.v1.BatchService|createJob}.
                         * @memberof google.cloud.batch.v1.BatchService
                         * @typedef CreateJobCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.batch.v1.Job} [response] Job
                         */
    
                        /**
                         * Calls CreateJob.
                         * @function createJob
                         * @memberof google.cloud.batch.v1.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1.ICreateJobRequest} request CreateJobRequest message or plain object
                         * @param {google.cloud.batch.v1.BatchService.CreateJobCallback} callback Node-style callback called with the error, if any, and Job
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BatchService.prototype.createJob = function createJob(request, callback) {
                            return this.rpcCall(createJob, $root.google.cloud.batch.v1.CreateJobRequest, $root.google.cloud.batch.v1.Job, request, callback);
                        }, "name", { value: "CreateJob" });
    
                        /**
                         * Calls CreateJob.
                         * @function createJob
                         * @memberof google.cloud.batch.v1.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1.ICreateJobRequest} request CreateJobRequest message or plain object
                         * @returns {Promise<google.cloud.batch.v1.Job>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.batch.v1.BatchService|getJob}.
                         * @memberof google.cloud.batch.v1.BatchService
                         * @typedef GetJobCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.batch.v1.Job} [response] Job
                         */
    
                        /**
                         * Calls GetJob.
                         * @function getJob
                         * @memberof google.cloud.batch.v1.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1.IGetJobRequest} request GetJobRequest message or plain object
                         * @param {google.cloud.batch.v1.BatchService.GetJobCallback} callback Node-style callback called with the error, if any, and Job
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BatchService.prototype.getJob = function getJob(request, callback) {
                            return this.rpcCall(getJob, $root.google.cloud.batch.v1.GetJobRequest, $root.google.cloud.batch.v1.Job, request, callback);
                        }, "name", { value: "GetJob" });
    
                        /**
                         * Calls GetJob.
                         * @function getJob
                         * @memberof google.cloud.batch.v1.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1.IGetJobRequest} request GetJobRequest message or plain object
                         * @returns {Promise<google.cloud.batch.v1.Job>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.batch.v1.BatchService|deleteJob}.
                         * @memberof google.cloud.batch.v1.BatchService
                         * @typedef DeleteJobCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls DeleteJob.
                         * @function deleteJob
                         * @memberof google.cloud.batch.v1.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1.IDeleteJobRequest} request DeleteJobRequest message or plain object
                         * @param {google.cloud.batch.v1.BatchService.DeleteJobCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BatchService.prototype.deleteJob = function deleteJob(request, callback) {
                            return this.rpcCall(deleteJob, $root.google.cloud.batch.v1.DeleteJobRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "DeleteJob" });
    
                        /**
                         * Calls DeleteJob.
                         * @function deleteJob
                         * @memberof google.cloud.batch.v1.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1.IDeleteJobRequest} request DeleteJobRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.batch.v1.BatchService|listJobs}.
                         * @memberof google.cloud.batch.v1.BatchService
                         * @typedef ListJobsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.batch.v1.ListJobsResponse} [response] ListJobsResponse
                         */
    
                        /**
                         * Calls ListJobs.
                         * @function listJobs
                         * @memberof google.cloud.batch.v1.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1.IListJobsRequest} request ListJobsRequest message or plain object
                         * @param {google.cloud.batch.v1.BatchService.ListJobsCallback} callback Node-style callback called with the error, if any, and ListJobsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BatchService.prototype.listJobs = function listJobs(request, callback) {
                            return this.rpcCall(listJobs, $root.google.cloud.batch.v1.ListJobsRequest, $root.google.cloud.batch.v1.ListJobsResponse, request, callback);
                        }, "name", { value: "ListJobs" });
    
                        /**
                         * Calls ListJobs.
                         * @function listJobs
                         * @memberof google.cloud.batch.v1.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1.IListJobsRequest} request ListJobsRequest message or plain object
                         * @returns {Promise<google.cloud.batch.v1.ListJobsResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.batch.v1.BatchService|getTask}.
                         * @memberof google.cloud.batch.v1.BatchService
                         * @typedef GetTaskCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.batch.v1.Task} [response] Task
                         */
    
                        /**
                         * Calls GetTask.
                         * @function getTask
                         * @memberof google.cloud.batch.v1.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1.IGetTaskRequest} request GetTaskRequest message or plain object
                         * @param {google.cloud.batch.v1.BatchService.GetTaskCallback} callback Node-style callback called with the error, if any, and Task
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BatchService.prototype.getTask = function getTask(request, callback) {
                            return this.rpcCall(getTask, $root.google.cloud.batch.v1.GetTaskRequest, $root.google.cloud.batch.v1.Task, request, callback);
                        }, "name", { value: "GetTask" });
    
                        /**
                         * Calls GetTask.
                         * @function getTask
                         * @memberof google.cloud.batch.v1.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1.IGetTaskRequest} request GetTaskRequest message or plain object
                         * @returns {Promise<google.cloud.batch.v1.Task>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.batch.v1.BatchService|listTasks}.
                         * @memberof google.cloud.batch.v1.BatchService
                         * @typedef ListTasksCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.batch.v1.ListTasksResponse} [response] ListTasksResponse
                         */
    
                        /**
                         * Calls ListTasks.
                         * @function listTasks
                         * @memberof google.cloud.batch.v1.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1.IListTasksRequest} request ListTasksRequest message or plain object
                         * @param {google.cloud.batch.v1.BatchService.ListTasksCallback} callback Node-style callback called with the error, if any, and ListTasksResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BatchService.prototype.listTasks = function listTasks(request, callback) {
                            return this.rpcCall(listTasks, $root.google.cloud.batch.v1.ListTasksRequest, $root.google.cloud.batch.v1.ListTasksResponse, request, callback);
                        }, "name", { value: "ListTasks" });
    
                        /**
                         * Calls ListTasks.
                         * @function listTasks
                         * @memberof google.cloud.batch.v1.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1.IListTasksRequest} request ListTasksRequest message or plain object
                         * @returns {Promise<google.cloud.batch.v1.ListTasksResponse>} Promise
                         * @variation 2
                         */
    
                        return BatchService;
                    })();
    
                    v1.CreateJobRequest = (function() {
    
                        /**
                         * Properties of a CreateJobRequest.
                         * @memberof google.cloud.batch.v1
                         * @interface ICreateJobRequest
                         * @property {string|null} [parent] CreateJobRequest parent
                         * @property {string|null} [jobId] CreateJobRequest jobId
                         * @property {google.cloud.batch.v1.IJob|null} [job] CreateJobRequest job
                         * @property {string|null} [requestId] CreateJobRequest requestId
                         */
    
                        /**
                         * Constructs a new CreateJobRequest.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a CreateJobRequest.
                         * @implements ICreateJobRequest
                         * @constructor
                         * @param {google.cloud.batch.v1.ICreateJobRequest=} [properties] Properties to set
                         */
                        function CreateJobRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateJobRequest parent.
                         * @member {string} parent
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @instance
                         */
                        CreateJobRequest.prototype.parent = "";
    
                        /**
                         * CreateJobRequest jobId.
                         * @member {string} jobId
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @instance
                         */
                        CreateJobRequest.prototype.jobId = "";
    
                        /**
                         * CreateJobRequest job.
                         * @member {google.cloud.batch.v1.IJob|null|undefined} job
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @instance
                         */
                        CreateJobRequest.prototype.job = null;
    
                        /**
                         * CreateJobRequest requestId.
                         * @member {string} requestId
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @instance
                         */
                        CreateJobRequest.prototype.requestId = "";
    
                        /**
                         * Creates a new CreateJobRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @static
                         * @param {google.cloud.batch.v1.ICreateJobRequest=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.CreateJobRequest} CreateJobRequest instance
                         */
                        CreateJobRequest.create = function create(properties) {
                            return new CreateJobRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateJobRequest message. Does not implicitly {@link google.cloud.batch.v1.CreateJobRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @static
                         * @param {google.cloud.batch.v1.ICreateJobRequest} message CreateJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateJobRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.jobId != null && Object.hasOwnProperty.call(message, "jobId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.jobId);
                            if (message.job != null && Object.hasOwnProperty.call(message, "job"))
                                $root.google.cloud.batch.v1.Job.encode(message.job, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.requestId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateJobRequest message, length delimited. Does not implicitly {@link google.cloud.batch.v1.CreateJobRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @static
                         * @param {google.cloud.batch.v1.ICreateJobRequest} message CreateJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateJobRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateJobRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.CreateJobRequest} CreateJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateJobRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.CreateJobRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.parent = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.jobId = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.job = $root.google.cloud.batch.v1.Job.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.requestId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateJobRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.CreateJobRequest} CreateJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateJobRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateJobRequest message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateJobRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.jobId != null && message.hasOwnProperty("jobId"))
                                if (!$util.isString(message.jobId))
                                    return "jobId: string expected";
                            if (message.job != null && message.hasOwnProperty("job")) {
                                var error = $root.google.cloud.batch.v1.Job.verify(message.job);
                                if (error)
                                    return "job." + error;
                            }
                            if (message.requestId != null && message.hasOwnProperty("requestId"))
                                if (!$util.isString(message.requestId))
                                    return "requestId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CreateJobRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.CreateJobRequest} CreateJobRequest
                         */
                        CreateJobRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.CreateJobRequest)
                                return object;
                            var message = new $root.google.cloud.batch.v1.CreateJobRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.jobId != null)
                                message.jobId = String(object.jobId);
                            if (object.job != null) {
                                if (typeof object.job !== "object")
                                    throw TypeError(".google.cloud.batch.v1.CreateJobRequest.job: object expected");
                                message.job = $root.google.cloud.batch.v1.Job.fromObject(object.job);
                            }
                            if (object.requestId != null)
                                message.requestId = String(object.requestId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateJobRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @static
                         * @param {google.cloud.batch.v1.CreateJobRequest} message CreateJobRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateJobRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.jobId = "";
                                object.job = null;
                                object.requestId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.jobId != null && message.hasOwnProperty("jobId"))
                                object.jobId = message.jobId;
                            if (message.job != null && message.hasOwnProperty("job"))
                                object.job = $root.google.cloud.batch.v1.Job.toObject(message.job, options);
                            if (message.requestId != null && message.hasOwnProperty("requestId"))
                                object.requestId = message.requestId;
                            return object;
                        };
    
                        /**
                         * Converts this CreateJobRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateJobRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for CreateJobRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.CreateJobRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CreateJobRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.CreateJobRequest";
                        };
    
                        return CreateJobRequest;
                    })();
    
                    v1.GetJobRequest = (function() {
    
                        /**
                         * Properties of a GetJobRequest.
                         * @memberof google.cloud.batch.v1
                         * @interface IGetJobRequest
                         * @property {string|null} [name] GetJobRequest name
                         */
    
                        /**
                         * Constructs a new GetJobRequest.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a GetJobRequest.
                         * @implements IGetJobRequest
                         * @constructor
                         * @param {google.cloud.batch.v1.IGetJobRequest=} [properties] Properties to set
                         */
                        function GetJobRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetJobRequest name.
                         * @member {string} name
                         * @memberof google.cloud.batch.v1.GetJobRequest
                         * @instance
                         */
                        GetJobRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetJobRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.GetJobRequest
                         * @static
                         * @param {google.cloud.batch.v1.IGetJobRequest=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.GetJobRequest} GetJobRequest instance
                         */
                        GetJobRequest.create = function create(properties) {
                            return new GetJobRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetJobRequest message. Does not implicitly {@link google.cloud.batch.v1.GetJobRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.GetJobRequest
                         * @static
                         * @param {google.cloud.batch.v1.IGetJobRequest} message GetJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetJobRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetJobRequest message, length delimited. Does not implicitly {@link google.cloud.batch.v1.GetJobRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.GetJobRequest
                         * @static
                         * @param {google.cloud.batch.v1.IGetJobRequest} message GetJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetJobRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetJobRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.GetJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.GetJobRequest} GetJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetJobRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.GetJobRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetJobRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.GetJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.GetJobRequest} GetJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetJobRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetJobRequest message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.GetJobRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetJobRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetJobRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.GetJobRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.GetJobRequest} GetJobRequest
                         */
                        GetJobRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.GetJobRequest)
                                return object;
                            var message = new $root.google.cloud.batch.v1.GetJobRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetJobRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.GetJobRequest
                         * @static
                         * @param {google.cloud.batch.v1.GetJobRequest} message GetJobRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetJobRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetJobRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.GetJobRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetJobRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for GetJobRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.GetJobRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        GetJobRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.GetJobRequest";
                        };
    
                        return GetJobRequest;
                    })();
    
                    v1.DeleteJobRequest = (function() {
    
                        /**
                         * Properties of a DeleteJobRequest.
                         * @memberof google.cloud.batch.v1
                         * @interface IDeleteJobRequest
                         * @property {string|null} [name] DeleteJobRequest name
                         * @property {string|null} [reason] DeleteJobRequest reason
                         * @property {string|null} [requestId] DeleteJobRequest requestId
                         */
    
                        /**
                         * Constructs a new DeleteJobRequest.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a DeleteJobRequest.
                         * @implements IDeleteJobRequest
                         * @constructor
                         * @param {google.cloud.batch.v1.IDeleteJobRequest=} [properties] Properties to set
                         */
                        function DeleteJobRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteJobRequest name.
                         * @member {string} name
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @instance
                         */
                        DeleteJobRequest.prototype.name = "";
    
                        /**
                         * DeleteJobRequest reason.
                         * @member {string} reason
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @instance
                         */
                        DeleteJobRequest.prototype.reason = "";
    
                        /**
                         * DeleteJobRequest requestId.
                         * @member {string} requestId
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @instance
                         */
                        DeleteJobRequest.prototype.requestId = "";
    
                        /**
                         * Creates a new DeleteJobRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @static
                         * @param {google.cloud.batch.v1.IDeleteJobRequest=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.DeleteJobRequest} DeleteJobRequest instance
                         */
                        DeleteJobRequest.create = function create(properties) {
                            return new DeleteJobRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteJobRequest message. Does not implicitly {@link google.cloud.batch.v1.DeleteJobRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @static
                         * @param {google.cloud.batch.v1.IDeleteJobRequest} message DeleteJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteJobRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
                            if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.requestId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteJobRequest message, length delimited. Does not implicitly {@link google.cloud.batch.v1.DeleteJobRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @static
                         * @param {google.cloud.batch.v1.IDeleteJobRequest} message DeleteJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteJobRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteJobRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.DeleteJobRequest} DeleteJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteJobRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.DeleteJobRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.reason = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.requestId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteJobRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.DeleteJobRequest} DeleteJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteJobRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteJobRequest message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteJobRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.reason != null && message.hasOwnProperty("reason"))
                                if (!$util.isString(message.reason))
                                    return "reason: string expected";
                            if (message.requestId != null && message.hasOwnProperty("requestId"))
                                if (!$util.isString(message.requestId))
                                    return "requestId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteJobRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.DeleteJobRequest} DeleteJobRequest
                         */
                        DeleteJobRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.DeleteJobRequest)
                                return object;
                            var message = new $root.google.cloud.batch.v1.DeleteJobRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.reason != null)
                                message.reason = String(object.reason);
                            if (object.requestId != null)
                                message.requestId = String(object.requestId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteJobRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @static
                         * @param {google.cloud.batch.v1.DeleteJobRequest} message DeleteJobRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteJobRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.reason = "";
                                object.requestId = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.reason != null && message.hasOwnProperty("reason"))
                                object.reason = message.reason;
                            if (message.requestId != null && message.hasOwnProperty("requestId"))
                                object.requestId = message.requestId;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteJobRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteJobRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for DeleteJobRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.DeleteJobRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DeleteJobRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.DeleteJobRequest";
                        };
    
                        return DeleteJobRequest;
                    })();
    
                    v1.ListJobsRequest = (function() {
    
                        /**
                         * Properties of a ListJobsRequest.
                         * @memberof google.cloud.batch.v1
                         * @interface IListJobsRequest
                         * @property {string|null} [parent] ListJobsRequest parent
                         * @property {string|null} [filter] ListJobsRequest filter
                         * @property {string|null} [orderBy] ListJobsRequest orderBy
                         * @property {number|null} [pageSize] ListJobsRequest pageSize
                         * @property {string|null} [pageToken] ListJobsRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListJobsRequest.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a ListJobsRequest.
                         * @implements IListJobsRequest
                         * @constructor
                         * @param {google.cloud.batch.v1.IListJobsRequest=} [properties] Properties to set
                         */
                        function ListJobsRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListJobsRequest parent.
                         * @member {string} parent
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @instance
                         */
                        ListJobsRequest.prototype.parent = "";
    
                        /**
                         * ListJobsRequest filter.
                         * @member {string} filter
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @instance
                         */
                        ListJobsRequest.prototype.filter = "";
    
                        /**
                         * ListJobsRequest orderBy.
                         * @member {string} orderBy
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @instance
                         */
                        ListJobsRequest.prototype.orderBy = "";
    
                        /**
                         * ListJobsRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @instance
                         */
                        ListJobsRequest.prototype.pageSize = 0;
    
                        /**
                         * ListJobsRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @instance
                         */
                        ListJobsRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListJobsRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @static
                         * @param {google.cloud.batch.v1.IListJobsRequest=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.ListJobsRequest} ListJobsRequest instance
                         */
                        ListJobsRequest.create = function create(properties) {
                            return new ListJobsRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListJobsRequest message. Does not implicitly {@link google.cloud.batch.v1.ListJobsRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @static
                         * @param {google.cloud.batch.v1.IListJobsRequest} message ListJobsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListJobsRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                            if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.filter);
                            if (message.orderBy != null && Object.hasOwnProperty.call(message, "orderBy"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.orderBy);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListJobsRequest message, length delimited. Does not implicitly {@link google.cloud.batch.v1.ListJobsRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @static
                         * @param {google.cloud.batch.v1.IListJobsRequest} message ListJobsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListJobsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListJobsRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.ListJobsRequest} ListJobsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListJobsRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.ListJobsRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.parent = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.filter = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.orderBy = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.pageSize = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.pageToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListJobsRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.ListJobsRequest} ListJobsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListJobsRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListJobsRequest message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListJobsRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                if (!$util.isString(message.filter))
                                    return "filter: string expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListJobsRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.ListJobsRequest} ListJobsRequest
                         */
                        ListJobsRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.ListJobsRequest)
                                return object;
                            var message = new $root.google.cloud.batch.v1.ListJobsRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.filter != null)
                                message.filter = String(object.filter);
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListJobsRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @static
                         * @param {google.cloud.batch.v1.ListJobsRequest} message ListJobsRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListJobsRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageSize = 0;
                                object.pageToken = "";
                                object.filter = "";
                                object.orderBy = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                object.filter = message.filter;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            return object;
                        };
    
                        /**
                         * Converts this ListJobsRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListJobsRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListJobsRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.ListJobsRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListJobsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.ListJobsRequest";
                        };
    
                        return ListJobsRequest;
                    })();
    
                    v1.ListJobsResponse = (function() {
    
                        /**
                         * Properties of a ListJobsResponse.
                         * @memberof google.cloud.batch.v1
                         * @interface IListJobsResponse
                         * @property {Array.<google.cloud.batch.v1.IJob>|null} [jobs] ListJobsResponse jobs
                         * @property {string|null} [nextPageToken] ListJobsResponse nextPageToken
                         * @property {Array.<string>|null} [unreachable] ListJobsResponse unreachable
                         */
    
                        /**
                         * Constructs a new ListJobsResponse.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a ListJobsResponse.
                         * @implements IListJobsResponse
                         * @constructor
                         * @param {google.cloud.batch.v1.IListJobsResponse=} [properties] Properties to set
                         */
                        function ListJobsResponse(properties) {
                            this.jobs = [];
                            this.unreachable = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListJobsResponse jobs.
                         * @member {Array.<google.cloud.batch.v1.IJob>} jobs
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @instance
                         */
                        ListJobsResponse.prototype.jobs = $util.emptyArray;
    
                        /**
                         * ListJobsResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @instance
                         */
                        ListJobsResponse.prototype.nextPageToken = "";
    
                        /**
                         * ListJobsResponse unreachable.
                         * @member {Array.<string>} unreachable
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @instance
                         */
                        ListJobsResponse.prototype.unreachable = $util.emptyArray;
    
                        /**
                         * Creates a new ListJobsResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @static
                         * @param {google.cloud.batch.v1.IListJobsResponse=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.ListJobsResponse} ListJobsResponse instance
                         */
                        ListJobsResponse.create = function create(properties) {
                            return new ListJobsResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListJobsResponse message. Does not implicitly {@link google.cloud.batch.v1.ListJobsResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @static
                         * @param {google.cloud.batch.v1.IListJobsResponse} message ListJobsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListJobsResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.jobs != null && message.jobs.length)
                                for (var i = 0; i < message.jobs.length; ++i)
                                    $root.google.cloud.batch.v1.Job.encode(message.jobs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            if (message.unreachable != null && message.unreachable.length)
                                for (var i = 0; i < message.unreachable.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.unreachable[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListJobsResponse message, length delimited. Does not implicitly {@link google.cloud.batch.v1.ListJobsResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @static
                         * @param {google.cloud.batch.v1.IListJobsResponse} message ListJobsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListJobsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListJobsResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.ListJobsResponse} ListJobsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListJobsResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.ListJobsResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.jobs && message.jobs.length))
                                            message.jobs = [];
                                        message.jobs.push($root.google.cloud.batch.v1.Job.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.nextPageToken = reader.string();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.unreachable && message.unreachable.length))
                                            message.unreachable = [];
                                        message.unreachable.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListJobsResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.ListJobsResponse} ListJobsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListJobsResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListJobsResponse message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListJobsResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.jobs != null && message.hasOwnProperty("jobs")) {
                                if (!Array.isArray(message.jobs))
                                    return "jobs: array expected";
                                for (var i = 0; i < message.jobs.length; ++i) {
                                    var error = $root.google.cloud.batch.v1.Job.verify(message.jobs[i]);
                                    if (error)
                                        return "jobs." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            if (message.unreachable != null && message.hasOwnProperty("unreachable")) {
                                if (!Array.isArray(message.unreachable))
                                    return "unreachable: array expected";
                                for (var i = 0; i < message.unreachable.length; ++i)
                                    if (!$util.isString(message.unreachable[i]))
                                        return "unreachable: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ListJobsResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.ListJobsResponse} ListJobsResponse
                         */
                        ListJobsResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.ListJobsResponse)
                                return object;
                            var message = new $root.google.cloud.batch.v1.ListJobsResponse();
                            if (object.jobs) {
                                if (!Array.isArray(object.jobs))
                                    throw TypeError(".google.cloud.batch.v1.ListJobsResponse.jobs: array expected");
                                message.jobs = [];
                                for (var i = 0; i < object.jobs.length; ++i) {
                                    if (typeof object.jobs[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1.ListJobsResponse.jobs: object expected");
                                    message.jobs[i] = $root.google.cloud.batch.v1.Job.fromObject(object.jobs[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            if (object.unreachable) {
                                if (!Array.isArray(object.unreachable))
                                    throw TypeError(".google.cloud.batch.v1.ListJobsResponse.unreachable: array expected");
                                message.unreachable = [];
                                for (var i = 0; i < object.unreachable.length; ++i)
                                    message.unreachable[i] = String(object.unreachable[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListJobsResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @static
                         * @param {google.cloud.batch.v1.ListJobsResponse} message ListJobsResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListJobsResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.jobs = [];
                                object.unreachable = [];
                            }
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.jobs && message.jobs.length) {
                                object.jobs = [];
                                for (var j = 0; j < message.jobs.length; ++j)
                                    object.jobs[j] = $root.google.cloud.batch.v1.Job.toObject(message.jobs[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            if (message.unreachable && message.unreachable.length) {
                                object.unreachable = [];
                                for (var j = 0; j < message.unreachable.length; ++j)
                                    object.unreachable[j] = message.unreachable[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ListJobsResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListJobsResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListJobsResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.ListJobsResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListJobsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.ListJobsResponse";
                        };
    
                        return ListJobsResponse;
                    })();
    
                    v1.ListTasksRequest = (function() {
    
                        /**
                         * Properties of a ListTasksRequest.
                         * @memberof google.cloud.batch.v1
                         * @interface IListTasksRequest
                         * @property {string|null} [parent] ListTasksRequest parent
                         * @property {string|null} [filter] ListTasksRequest filter
                         * @property {number|null} [pageSize] ListTasksRequest pageSize
                         * @property {string|null} [pageToken] ListTasksRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListTasksRequest.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a ListTasksRequest.
                         * @implements IListTasksRequest
                         * @constructor
                         * @param {google.cloud.batch.v1.IListTasksRequest=} [properties] Properties to set
                         */
                        function ListTasksRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListTasksRequest parent.
                         * @member {string} parent
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @instance
                         */
                        ListTasksRequest.prototype.parent = "";
    
                        /**
                         * ListTasksRequest filter.
                         * @member {string} filter
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @instance
                         */
                        ListTasksRequest.prototype.filter = "";
    
                        /**
                         * ListTasksRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @instance
                         */
                        ListTasksRequest.prototype.pageSize = 0;
    
                        /**
                         * ListTasksRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @instance
                         */
                        ListTasksRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListTasksRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @static
                         * @param {google.cloud.batch.v1.IListTasksRequest=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.ListTasksRequest} ListTasksRequest instance
                         */
                        ListTasksRequest.create = function create(properties) {
                            return new ListTasksRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListTasksRequest message. Does not implicitly {@link google.cloud.batch.v1.ListTasksRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @static
                         * @param {google.cloud.batch.v1.IListTasksRequest} message ListTasksRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListTasksRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListTasksRequest message, length delimited. Does not implicitly {@link google.cloud.batch.v1.ListTasksRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @static
                         * @param {google.cloud.batch.v1.IListTasksRequest} message ListTasksRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListTasksRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListTasksRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.ListTasksRequest} ListTasksRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListTasksRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.ListTasksRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.parent = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.filter = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.pageSize = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.pageToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListTasksRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.ListTasksRequest} ListTasksRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListTasksRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListTasksRequest message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListTasksRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                if (!$util.isString(message.filter))
                                    return "filter: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListTasksRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.ListTasksRequest} ListTasksRequest
                         */
                        ListTasksRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.ListTasksRequest)
                                return object;
                            var message = new $root.google.cloud.batch.v1.ListTasksRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.filter != null)
                                message.filter = String(object.filter);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListTasksRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @static
                         * @param {google.cloud.batch.v1.ListTasksRequest} message ListTasksRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListTasksRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.filter = "";
                                object.pageSize = 0;
                                object.pageToken = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                object.filter = message.filter;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            return object;
                        };
    
                        /**
                         * Converts this ListTasksRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListTasksRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListTasksRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.ListTasksRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListTasksRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.ListTasksRequest";
                        };
    
                        return ListTasksRequest;
                    })();
    
                    v1.ListTasksResponse = (function() {
    
                        /**
                         * Properties of a ListTasksResponse.
                         * @memberof google.cloud.batch.v1
                         * @interface IListTasksResponse
                         * @property {Array.<google.cloud.batch.v1.ITask>|null} [tasks] ListTasksResponse tasks
                         * @property {string|null} [nextPageToken] ListTasksResponse nextPageToken
                         * @property {Array.<string>|null} [unreachable] ListTasksResponse unreachable
                         */
    
                        /**
                         * Constructs a new ListTasksResponse.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a ListTasksResponse.
                         * @implements IListTasksResponse
                         * @constructor
                         * @param {google.cloud.batch.v1.IListTasksResponse=} [properties] Properties to set
                         */
                        function ListTasksResponse(properties) {
                            this.tasks = [];
                            this.unreachable = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListTasksResponse tasks.
                         * @member {Array.<google.cloud.batch.v1.ITask>} tasks
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @instance
                         */
                        ListTasksResponse.prototype.tasks = $util.emptyArray;
    
                        /**
                         * ListTasksResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @instance
                         */
                        ListTasksResponse.prototype.nextPageToken = "";
    
                        /**
                         * ListTasksResponse unreachable.
                         * @member {Array.<string>} unreachable
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @instance
                         */
                        ListTasksResponse.prototype.unreachable = $util.emptyArray;
    
                        /**
                         * Creates a new ListTasksResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @static
                         * @param {google.cloud.batch.v1.IListTasksResponse=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.ListTasksResponse} ListTasksResponse instance
                         */
                        ListTasksResponse.create = function create(properties) {
                            return new ListTasksResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListTasksResponse message. Does not implicitly {@link google.cloud.batch.v1.ListTasksResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @static
                         * @param {google.cloud.batch.v1.IListTasksResponse} message ListTasksResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListTasksResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tasks != null && message.tasks.length)
                                for (var i = 0; i < message.tasks.length; ++i)
                                    $root.google.cloud.batch.v1.Task.encode(message.tasks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            if (message.unreachable != null && message.unreachable.length)
                                for (var i = 0; i < message.unreachable.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.unreachable[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListTasksResponse message, length delimited. Does not implicitly {@link google.cloud.batch.v1.ListTasksResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @static
                         * @param {google.cloud.batch.v1.IListTasksResponse} message ListTasksResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListTasksResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListTasksResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.ListTasksResponse} ListTasksResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListTasksResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.ListTasksResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.tasks && message.tasks.length))
                                            message.tasks = [];
                                        message.tasks.push($root.google.cloud.batch.v1.Task.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.nextPageToken = reader.string();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.unreachable && message.unreachable.length))
                                            message.unreachable = [];
                                        message.unreachable.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListTasksResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.ListTasksResponse} ListTasksResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListTasksResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListTasksResponse message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListTasksResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                                if (!Array.isArray(message.tasks))
                                    return "tasks: array expected";
                                for (var i = 0; i < message.tasks.length; ++i) {
                                    var error = $root.google.cloud.batch.v1.Task.verify(message.tasks[i]);
                                    if (error)
                                        return "tasks." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            if (message.unreachable != null && message.hasOwnProperty("unreachable")) {
                                if (!Array.isArray(message.unreachable))
                                    return "unreachable: array expected";
                                for (var i = 0; i < message.unreachable.length; ++i)
                                    if (!$util.isString(message.unreachable[i]))
                                        return "unreachable: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ListTasksResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.ListTasksResponse} ListTasksResponse
                         */
                        ListTasksResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.ListTasksResponse)
                                return object;
                            var message = new $root.google.cloud.batch.v1.ListTasksResponse();
                            if (object.tasks) {
                                if (!Array.isArray(object.tasks))
                                    throw TypeError(".google.cloud.batch.v1.ListTasksResponse.tasks: array expected");
                                message.tasks = [];
                                for (var i = 0; i < object.tasks.length; ++i) {
                                    if (typeof object.tasks[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1.ListTasksResponse.tasks: object expected");
                                    message.tasks[i] = $root.google.cloud.batch.v1.Task.fromObject(object.tasks[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            if (object.unreachable) {
                                if (!Array.isArray(object.unreachable))
                                    throw TypeError(".google.cloud.batch.v1.ListTasksResponse.unreachable: array expected");
                                message.unreachable = [];
                                for (var i = 0; i < object.unreachable.length; ++i)
                                    message.unreachable[i] = String(object.unreachable[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListTasksResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @static
                         * @param {google.cloud.batch.v1.ListTasksResponse} message ListTasksResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListTasksResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.tasks = [];
                                object.unreachable = [];
                            }
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.tasks && message.tasks.length) {
                                object.tasks = [];
                                for (var j = 0; j < message.tasks.length; ++j)
                                    object.tasks[j] = $root.google.cloud.batch.v1.Task.toObject(message.tasks[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            if (message.unreachable && message.unreachable.length) {
                                object.unreachable = [];
                                for (var j = 0; j < message.unreachable.length; ++j)
                                    object.unreachable[j] = message.unreachable[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ListTasksResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListTasksResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListTasksResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.ListTasksResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListTasksResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.ListTasksResponse";
                        };
    
                        return ListTasksResponse;
                    })();
    
                    v1.GetTaskRequest = (function() {
    
                        /**
                         * Properties of a GetTaskRequest.
                         * @memberof google.cloud.batch.v1
                         * @interface IGetTaskRequest
                         * @property {string|null} [name] GetTaskRequest name
                         */
    
                        /**
                         * Constructs a new GetTaskRequest.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a GetTaskRequest.
                         * @implements IGetTaskRequest
                         * @constructor
                         * @param {google.cloud.batch.v1.IGetTaskRequest=} [properties] Properties to set
                         */
                        function GetTaskRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetTaskRequest name.
                         * @member {string} name
                         * @memberof google.cloud.batch.v1.GetTaskRequest
                         * @instance
                         */
                        GetTaskRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetTaskRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.GetTaskRequest
                         * @static
                         * @param {google.cloud.batch.v1.IGetTaskRequest=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.GetTaskRequest} GetTaskRequest instance
                         */
                        GetTaskRequest.create = function create(properties) {
                            return new GetTaskRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetTaskRequest message. Does not implicitly {@link google.cloud.batch.v1.GetTaskRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.GetTaskRequest
                         * @static
                         * @param {google.cloud.batch.v1.IGetTaskRequest} message GetTaskRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetTaskRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetTaskRequest message, length delimited. Does not implicitly {@link google.cloud.batch.v1.GetTaskRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.GetTaskRequest
                         * @static
                         * @param {google.cloud.batch.v1.IGetTaskRequest} message GetTaskRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetTaskRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetTaskRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.GetTaskRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.GetTaskRequest} GetTaskRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetTaskRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.GetTaskRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetTaskRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.GetTaskRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.GetTaskRequest} GetTaskRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetTaskRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetTaskRequest message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.GetTaskRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetTaskRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetTaskRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.GetTaskRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.GetTaskRequest} GetTaskRequest
                         */
                        GetTaskRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.GetTaskRequest)
                                return object;
                            var message = new $root.google.cloud.batch.v1.GetTaskRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetTaskRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.GetTaskRequest
                         * @static
                         * @param {google.cloud.batch.v1.GetTaskRequest} message GetTaskRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetTaskRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetTaskRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.GetTaskRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetTaskRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for GetTaskRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.GetTaskRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        GetTaskRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.GetTaskRequest";
                        };
    
                        return GetTaskRequest;
                    })();
    
                    v1.OperationMetadata = (function() {
    
                        /**
                         * Properties of an OperationMetadata.
                         * @memberof google.cloud.batch.v1
                         * @interface IOperationMetadata
                         * @property {google.protobuf.ITimestamp|null} [createTime] OperationMetadata createTime
                         * @property {google.protobuf.ITimestamp|null} [endTime] OperationMetadata endTime
                         * @property {string|null} [target] OperationMetadata target
                         * @property {string|null} [verb] OperationMetadata verb
                         * @property {string|null} [statusMessage] OperationMetadata statusMessage
                         * @property {boolean|null} [requestedCancellation] OperationMetadata requestedCancellation
                         * @property {string|null} [apiVersion] OperationMetadata apiVersion
                         */
    
                        /**
                         * Constructs a new OperationMetadata.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents an OperationMetadata.
                         * @implements IOperationMetadata
                         * @constructor
                         * @param {google.cloud.batch.v1.IOperationMetadata=} [properties] Properties to set
                         */
                        function OperationMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * OperationMetadata createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.createTime = null;
    
                        /**
                         * OperationMetadata endTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} endTime
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.endTime = null;
    
                        /**
                         * OperationMetadata target.
                         * @member {string} target
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.target = "";
    
                        /**
                         * OperationMetadata verb.
                         * @member {string} verb
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.verb = "";
    
                        /**
                         * OperationMetadata statusMessage.
                         * @member {string} statusMessage
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.statusMessage = "";
    
                        /**
                         * OperationMetadata requestedCancellation.
                         * @member {boolean} requestedCancellation
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.requestedCancellation = false;
    
                        /**
                         * OperationMetadata apiVersion.
                         * @member {string} apiVersion
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.apiVersion = "";
    
                        /**
                         * Creates a new OperationMetadata instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @static
                         * @param {google.cloud.batch.v1.IOperationMetadata=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.OperationMetadata} OperationMetadata instance
                         */
                        OperationMetadata.create = function create(properties) {
                            return new OperationMetadata(properties);
                        };
    
                        /**
                         * Encodes the specified OperationMetadata message. Does not implicitly {@link google.cloud.batch.v1.OperationMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @static
                         * @param {google.cloud.batch.v1.IOperationMetadata} message OperationMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OperationMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                                $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.target != null && Object.hasOwnProperty.call(message, "target"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.target);
                            if (message.verb != null && Object.hasOwnProperty.call(message, "verb"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.verb);
                            if (message.statusMessage != null && Object.hasOwnProperty.call(message, "statusMessage"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.statusMessage);
                            if (message.requestedCancellation != null && Object.hasOwnProperty.call(message, "requestedCancellation"))
                                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.requestedCancellation);
                            if (message.apiVersion != null && Object.hasOwnProperty.call(message, "apiVersion"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.apiVersion);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified OperationMetadata message, length delimited. Does not implicitly {@link google.cloud.batch.v1.OperationMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @static
                         * @param {google.cloud.batch.v1.IOperationMetadata} message OperationMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OperationMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an OperationMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.OperationMetadata} OperationMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OperationMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.OperationMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.target = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.verb = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.statusMessage = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.requestedCancellation = reader.bool();
                                        break;
                                    }
                                case 7: {
                                        message.apiVersion = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an OperationMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.OperationMetadata} OperationMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OperationMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an OperationMetadata message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        OperationMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                            if (message.target != null && message.hasOwnProperty("target"))
                                if (!$util.isString(message.target))
                                    return "target: string expected";
                            if (message.verb != null && message.hasOwnProperty("verb"))
                                if (!$util.isString(message.verb))
                                    return "verb: string expected";
                            if (message.statusMessage != null && message.hasOwnProperty("statusMessage"))
                                if (!$util.isString(message.statusMessage))
                                    return "statusMessage: string expected";
                            if (message.requestedCancellation != null && message.hasOwnProperty("requestedCancellation"))
                                if (typeof message.requestedCancellation !== "boolean")
                                    return "requestedCancellation: boolean expected";
                            if (message.apiVersion != null && message.hasOwnProperty("apiVersion"))
                                if (!$util.isString(message.apiVersion))
                                    return "apiVersion: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an OperationMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.OperationMetadata} OperationMetadata
                         */
                        OperationMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.OperationMetadata)
                                return object;
                            var message = new $root.google.cloud.batch.v1.OperationMetadata();
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.cloud.batch.v1.OperationMetadata.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.endTime != null) {
                                if (typeof object.endTime !== "object")
                                    throw TypeError(".google.cloud.batch.v1.OperationMetadata.endTime: object expected");
                                message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                            }
                            if (object.target != null)
                                message.target = String(object.target);
                            if (object.verb != null)
                                message.verb = String(object.verb);
                            if (object.statusMessage != null)
                                message.statusMessage = String(object.statusMessage);
                            if (object.requestedCancellation != null)
                                message.requestedCancellation = Boolean(object.requestedCancellation);
                            if (object.apiVersion != null)
                                message.apiVersion = String(object.apiVersion);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an OperationMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @static
                         * @param {google.cloud.batch.v1.OperationMetadata} message OperationMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        OperationMetadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.createTime = null;
                                object.endTime = null;
                                object.target = "";
                                object.verb = "";
                                object.statusMessage = "";
                                object.requestedCancellation = false;
                                object.apiVersion = "";
                            }
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                            if (message.target != null && message.hasOwnProperty("target"))
                                object.target = message.target;
                            if (message.verb != null && message.hasOwnProperty("verb"))
                                object.verb = message.verb;
                            if (message.statusMessage != null && message.hasOwnProperty("statusMessage"))
                                object.statusMessage = message.statusMessage;
                            if (message.requestedCancellation != null && message.hasOwnProperty("requestedCancellation"))
                                object.requestedCancellation = message.requestedCancellation;
                            if (message.apiVersion != null && message.hasOwnProperty("apiVersion"))
                                object.apiVersion = message.apiVersion;
                            return object;
                        };
    
                        /**
                         * Converts this OperationMetadata to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        OperationMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for OperationMetadata
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.OperationMetadata
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        OperationMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.OperationMetadata";
                        };
    
                        return OperationMetadata;
                    })();
    
                    v1.Job = (function() {
    
                        /**
                         * Properties of a Job.
                         * @memberof google.cloud.batch.v1
                         * @interface IJob
                         * @property {string|null} [name] Job name
                         * @property {string|null} [uid] Job uid
                         * @property {number|Long|null} [priority] Job priority
                         * @property {Array.<google.cloud.batch.v1.ITaskGroup>|null} [taskGroups] Job taskGroups
                         * @property {google.cloud.batch.v1.IAllocationPolicy|null} [allocationPolicy] Job allocationPolicy
                         * @property {Object.<string,string>|null} [labels] Job labels
                         * @property {google.cloud.batch.v1.IJobStatus|null} [status] Job status
                         * @property {google.protobuf.ITimestamp|null} [createTime] Job createTime
                         * @property {google.protobuf.ITimestamp|null} [updateTime] Job updateTime
                         * @property {google.cloud.batch.v1.ILogsPolicy|null} [logsPolicy] Job logsPolicy
                         * @property {Array.<google.cloud.batch.v1.IJobNotification>|null} [notifications] Job notifications
                         */
    
                        /**
                         * Constructs a new Job.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a Job.
                         * @implements IJob
                         * @constructor
                         * @param {google.cloud.batch.v1.IJob=} [properties] Properties to set
                         */
                        function Job(properties) {
                            this.taskGroups = [];
                            this.labels = {};
                            this.notifications = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Job name.
                         * @member {string} name
                         * @memberof google.cloud.batch.v1.Job
                         * @instance
                         */
                        Job.prototype.name = "";
    
                        /**
                         * Job uid.
                         * @member {string} uid
                         * @memberof google.cloud.batch.v1.Job
                         * @instance
                         */
                        Job.prototype.uid = "";
    
                        /**
                         * Job priority.
                         * @member {number|Long} priority
                         * @memberof google.cloud.batch.v1.Job
                         * @instance
                         */
                        Job.prototype.priority = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Job taskGroups.
                         * @member {Array.<google.cloud.batch.v1.ITaskGroup>} taskGroups
                         * @memberof google.cloud.batch.v1.Job
                         * @instance
                         */
                        Job.prototype.taskGroups = $util.emptyArray;
    
                        /**
                         * Job allocationPolicy.
                         * @member {google.cloud.batch.v1.IAllocationPolicy|null|undefined} allocationPolicy
                         * @memberof google.cloud.batch.v1.Job
                         * @instance
                         */
                        Job.prototype.allocationPolicy = null;
    
                        /**
                         * Job labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.cloud.batch.v1.Job
                         * @instance
                         */
                        Job.prototype.labels = $util.emptyObject;
    
                        /**
                         * Job status.
                         * @member {google.cloud.batch.v1.IJobStatus|null|undefined} status
                         * @memberof google.cloud.batch.v1.Job
                         * @instance
                         */
                        Job.prototype.status = null;
    
                        /**
                         * Job createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.cloud.batch.v1.Job
                         * @instance
                         */
                        Job.prototype.createTime = null;
    
                        /**
                         * Job updateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                         * @memberof google.cloud.batch.v1.Job
                         * @instance
                         */
                        Job.prototype.updateTime = null;
    
                        /**
                         * Job logsPolicy.
                         * @member {google.cloud.batch.v1.ILogsPolicy|null|undefined} logsPolicy
                         * @memberof google.cloud.batch.v1.Job
                         * @instance
                         */
                        Job.prototype.logsPolicy = null;
    
                        /**
                         * Job notifications.
                         * @member {Array.<google.cloud.batch.v1.IJobNotification>} notifications
                         * @memberof google.cloud.batch.v1.Job
                         * @instance
                         */
                        Job.prototype.notifications = $util.emptyArray;
    
                        /**
                         * Creates a new Job instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.Job
                         * @static
                         * @param {google.cloud.batch.v1.IJob=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.Job} Job instance
                         */
                        Job.create = function create(properties) {
                            return new Job(properties);
                        };
    
                        /**
                         * Encodes the specified Job message. Does not implicitly {@link google.cloud.batch.v1.Job.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.Job
                         * @static
                         * @param {google.cloud.batch.v1.IJob} message Job message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Job.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.uid);
                            if (message.priority != null && Object.hasOwnProperty.call(message, "priority"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.priority);
                            if (message.taskGroups != null && message.taskGroups.length)
                                for (var i = 0; i < message.taskGroups.length; ++i)
                                    $root.google.cloud.batch.v1.TaskGroup.encode(message.taskGroups[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.allocationPolicy != null && Object.hasOwnProperty.call(message, "allocationPolicy"))
                                $root.google.cloud.batch.v1.AllocationPolicy.encode(message.allocationPolicy, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 8, wireType 2 =*/66).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                                $root.google.cloud.batch.v1.JobStatus.encode(message.status, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                                $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                            if (message.logsPolicy != null && Object.hasOwnProperty.call(message, "logsPolicy"))
                                $root.google.cloud.batch.v1.LogsPolicy.encode(message.logsPolicy, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            if (message.notifications != null && message.notifications.length)
                                for (var i = 0; i < message.notifications.length; ++i)
                                    $root.google.cloud.batch.v1.JobNotification.encode(message.notifications[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Job message, length delimited. Does not implicitly {@link google.cloud.batch.v1.Job.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.Job
                         * @static
                         * @param {google.cloud.batch.v1.IJob} message Job message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Job.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Job message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.Job
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.Job} Job
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Job.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.Job(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.uid = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.priority = reader.int64();
                                        break;
                                    }
                                case 4: {
                                        if (!(message.taskGroups && message.taskGroups.length))
                                            message.taskGroups = [];
                                        message.taskGroups.push($root.google.cloud.batch.v1.TaskGroup.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 7: {
                                        message.allocationPolicy = $root.google.cloud.batch.v1.AllocationPolicy.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                case 9: {
                                        message.status = $root.google.cloud.batch.v1.JobStatus.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 12: {
                                        message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 13: {
                                        message.logsPolicy = $root.google.cloud.batch.v1.LogsPolicy.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 14: {
                                        if (!(message.notifications && message.notifications.length))
                                            message.notifications = [];
                                        message.notifications.push($root.google.cloud.batch.v1.JobNotification.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Job message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.Job
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.Job} Job
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Job.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Job message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.Job
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Job.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.uid != null && message.hasOwnProperty("uid"))
                                if (!$util.isString(message.uid))
                                    return "uid: string expected";
                            if (message.priority != null && message.hasOwnProperty("priority"))
                                if (!$util.isInteger(message.priority) && !(message.priority && $util.isInteger(message.priority.low) && $util.isInteger(message.priority.high)))
                                    return "priority: integer|Long expected";
                            if (message.taskGroups != null && message.hasOwnProperty("taskGroups")) {
                                if (!Array.isArray(message.taskGroups))
                                    return "taskGroups: array expected";
                                for (var i = 0; i < message.taskGroups.length; ++i) {
                                    var error = $root.google.cloud.batch.v1.TaskGroup.verify(message.taskGroups[i]);
                                    if (error)
                                        return "taskGroups." + error;
                                }
                            }
                            if (message.allocationPolicy != null && message.hasOwnProperty("allocationPolicy")) {
                                var error = $root.google.cloud.batch.v1.AllocationPolicy.verify(message.allocationPolicy);
                                if (error)
                                    return "allocationPolicy." + error;
                            }
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.status != null && message.hasOwnProperty("status")) {
                                var error = $root.google.cloud.batch.v1.JobStatus.verify(message.status);
                                if (error)
                                    return "status." + error;
                            }
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                                if (error)
                                    return "updateTime." + error;
                            }
                            if (message.logsPolicy != null && message.hasOwnProperty("logsPolicy")) {
                                var error = $root.google.cloud.batch.v1.LogsPolicy.verify(message.logsPolicy);
                                if (error)
                                    return "logsPolicy." + error;
                            }
                            if (message.notifications != null && message.hasOwnProperty("notifications")) {
                                if (!Array.isArray(message.notifications))
                                    return "notifications: array expected";
                                for (var i = 0; i < message.notifications.length; ++i) {
                                    var error = $root.google.cloud.batch.v1.JobNotification.verify(message.notifications[i]);
                                    if (error)
                                        return "notifications." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Job message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.Job
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.Job} Job
                         */
                        Job.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.Job)
                                return object;
                            var message = new $root.google.cloud.batch.v1.Job();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.uid != null)
                                message.uid = String(object.uid);
                            if (object.priority != null)
                                if ($util.Long)
                                    (message.priority = $util.Long.fromValue(object.priority)).unsigned = false;
                                else if (typeof object.priority === "string")
                                    message.priority = parseInt(object.priority, 10);
                                else if (typeof object.priority === "number")
                                    message.priority = object.priority;
                                else if (typeof object.priority === "object")
                                    message.priority = new $util.LongBits(object.priority.low >>> 0, object.priority.high >>> 0).toNumber();
                            if (object.taskGroups) {
                                if (!Array.isArray(object.taskGroups))
                                    throw TypeError(".google.cloud.batch.v1.Job.taskGroups: array expected");
                                message.taskGroups = [];
                                for (var i = 0; i < object.taskGroups.length; ++i) {
                                    if (typeof object.taskGroups[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1.Job.taskGroups: object expected");
                                    message.taskGroups[i] = $root.google.cloud.batch.v1.TaskGroup.fromObject(object.taskGroups[i]);
                                }
                            }
                            if (object.allocationPolicy != null) {
                                if (typeof object.allocationPolicy !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Job.allocationPolicy: object expected");
                                message.allocationPolicy = $root.google.cloud.batch.v1.AllocationPolicy.fromObject(object.allocationPolicy);
                            }
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Job.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.status != null) {
                                if (typeof object.status !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Job.status: object expected");
                                message.status = $root.google.cloud.batch.v1.JobStatus.fromObject(object.status);
                            }
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Job.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.updateTime != null) {
                                if (typeof object.updateTime !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Job.updateTime: object expected");
                                message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                            }
                            if (object.logsPolicy != null) {
                                if (typeof object.logsPolicy !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Job.logsPolicy: object expected");
                                message.logsPolicy = $root.google.cloud.batch.v1.LogsPolicy.fromObject(object.logsPolicy);
                            }
                            if (object.notifications) {
                                if (!Array.isArray(object.notifications))
                                    throw TypeError(".google.cloud.batch.v1.Job.notifications: array expected");
                                message.notifications = [];
                                for (var i = 0; i < object.notifications.length; ++i) {
                                    if (typeof object.notifications[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1.Job.notifications: object expected");
                                    message.notifications[i] = $root.google.cloud.batch.v1.JobNotification.fromObject(object.notifications[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Job message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.Job
                         * @static
                         * @param {google.cloud.batch.v1.Job} message Job
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Job.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.taskGroups = [];
                                object.notifications = [];
                            }
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.name = "";
                                object.uid = "";
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.priority = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.priority = options.longs === String ? "0" : 0;
                                object.allocationPolicy = null;
                                object.status = null;
                                object.createTime = null;
                                object.updateTime = null;
                                object.logsPolicy = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.uid != null && message.hasOwnProperty("uid"))
                                object.uid = message.uid;
                            if (message.priority != null && message.hasOwnProperty("priority"))
                                if (typeof message.priority === "number")
                                    object.priority = options.longs === String ? String(message.priority) : message.priority;
                                else
                                    object.priority = options.longs === String ? $util.Long.prototype.toString.call(message.priority) : options.longs === Number ? new $util.LongBits(message.priority.low >>> 0, message.priority.high >>> 0).toNumber() : message.priority;
                            if (message.taskGroups && message.taskGroups.length) {
                                object.taskGroups = [];
                                for (var j = 0; j < message.taskGroups.length; ++j)
                                    object.taskGroups[j] = $root.google.cloud.batch.v1.TaskGroup.toObject(message.taskGroups[j], options);
                            }
                            if (message.allocationPolicy != null && message.hasOwnProperty("allocationPolicy"))
                                object.allocationPolicy = $root.google.cloud.batch.v1.AllocationPolicy.toObject(message.allocationPolicy, options);
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.status != null && message.hasOwnProperty("status"))
                                object.status = $root.google.cloud.batch.v1.JobStatus.toObject(message.status, options);
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                                object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                            if (message.logsPolicy != null && message.hasOwnProperty("logsPolicy"))
                                object.logsPolicy = $root.google.cloud.batch.v1.LogsPolicy.toObject(message.logsPolicy, options);
                            if (message.notifications && message.notifications.length) {
                                object.notifications = [];
                                for (var j = 0; j < message.notifications.length; ++j)
                                    object.notifications[j] = $root.google.cloud.batch.v1.JobNotification.toObject(message.notifications[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Job to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.Job
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Job.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Job
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.Job
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Job.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.Job";
                        };
    
                        return Job;
                    })();
    
                    v1.LogsPolicy = (function() {
    
                        /**
                         * Properties of a LogsPolicy.
                         * @memberof google.cloud.batch.v1
                         * @interface ILogsPolicy
                         * @property {google.cloud.batch.v1.LogsPolicy.Destination|null} [destination] LogsPolicy destination
                         * @property {string|null} [logsPath] LogsPolicy logsPath
                         */
    
                        /**
                         * Constructs a new LogsPolicy.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a LogsPolicy.
                         * @implements ILogsPolicy
                         * @constructor
                         * @param {google.cloud.batch.v1.ILogsPolicy=} [properties] Properties to set
                         */
                        function LogsPolicy(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LogsPolicy destination.
                         * @member {google.cloud.batch.v1.LogsPolicy.Destination} destination
                         * @memberof google.cloud.batch.v1.LogsPolicy
                         * @instance
                         */
                        LogsPolicy.prototype.destination = 0;
    
                        /**
                         * LogsPolicy logsPath.
                         * @member {string} logsPath
                         * @memberof google.cloud.batch.v1.LogsPolicy
                         * @instance
                         */
                        LogsPolicy.prototype.logsPath = "";
    
                        /**
                         * Creates a new LogsPolicy instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.LogsPolicy
                         * @static
                         * @param {google.cloud.batch.v1.ILogsPolicy=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.LogsPolicy} LogsPolicy instance
                         */
                        LogsPolicy.create = function create(properties) {
                            return new LogsPolicy(properties);
                        };
    
                        /**
                         * Encodes the specified LogsPolicy message. Does not implicitly {@link google.cloud.batch.v1.LogsPolicy.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.LogsPolicy
                         * @static
                         * @param {google.cloud.batch.v1.ILogsPolicy} message LogsPolicy message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogsPolicy.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.destination != null && Object.hasOwnProperty.call(message, "destination"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.destination);
                            if (message.logsPath != null && Object.hasOwnProperty.call(message, "logsPath"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.logsPath);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LogsPolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1.LogsPolicy.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.LogsPolicy
                         * @static
                         * @param {google.cloud.batch.v1.ILogsPolicy} message LogsPolicy message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogsPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LogsPolicy message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.LogsPolicy
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.LogsPolicy} LogsPolicy
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogsPolicy.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.LogsPolicy();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.destination = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.logsPath = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LogsPolicy message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.LogsPolicy
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.LogsPolicy} LogsPolicy
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogsPolicy.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LogsPolicy message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.LogsPolicy
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LogsPolicy.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.destination != null && message.hasOwnProperty("destination"))
                                switch (message.destination) {
                                default:
                                    return "destination: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.logsPath != null && message.hasOwnProperty("logsPath"))
                                if (!$util.isString(message.logsPath))
                                    return "logsPath: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a LogsPolicy message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.LogsPolicy
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.LogsPolicy} LogsPolicy
                         */
                        LogsPolicy.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.LogsPolicy)
                                return object;
                            var message = new $root.google.cloud.batch.v1.LogsPolicy();
                            switch (object.destination) {
                            default:
                                if (typeof object.destination === "number") {
                                    message.destination = object.destination;
                                    break;
                                }
                                break;
                            case "DESTINATION_UNSPECIFIED":
                            case 0:
                                message.destination = 0;
                                break;
                            case "CLOUD_LOGGING":
                            case 1:
                                message.destination = 1;
                                break;
                            case "PATH":
                            case 2:
                                message.destination = 2;
                                break;
                            }
                            if (object.logsPath != null)
                                message.logsPath = String(object.logsPath);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LogsPolicy message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.LogsPolicy
                         * @static
                         * @param {google.cloud.batch.v1.LogsPolicy} message LogsPolicy
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LogsPolicy.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.destination = options.enums === String ? "DESTINATION_UNSPECIFIED" : 0;
                                object.logsPath = "";
                            }
                            if (message.destination != null && message.hasOwnProperty("destination"))
                                object.destination = options.enums === String ? $root.google.cloud.batch.v1.LogsPolicy.Destination[message.destination] === undefined ? message.destination : $root.google.cloud.batch.v1.LogsPolicy.Destination[message.destination] : message.destination;
                            if (message.logsPath != null && message.hasOwnProperty("logsPath"))
                                object.logsPath = message.logsPath;
                            return object;
                        };
    
                        /**
                         * Converts this LogsPolicy to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.LogsPolicy
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LogsPolicy.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LogsPolicy
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.LogsPolicy
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LogsPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.LogsPolicy";
                        };
    
                        /**
                         * Destination enum.
                         * @name google.cloud.batch.v1.LogsPolicy.Destination
                         * @enum {number}
                         * @property {number} DESTINATION_UNSPECIFIED=0 DESTINATION_UNSPECIFIED value
                         * @property {number} CLOUD_LOGGING=1 CLOUD_LOGGING value
                         * @property {number} PATH=2 PATH value
                         */
                        LogsPolicy.Destination = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "DESTINATION_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "CLOUD_LOGGING"] = 1;
                            values[valuesById[2] = "PATH"] = 2;
                            return values;
                        })();
    
                        return LogsPolicy;
                    })();
    
                    v1.JobStatus = (function() {
    
                        /**
                         * Properties of a JobStatus.
                         * @memberof google.cloud.batch.v1
                         * @interface IJobStatus
                         * @property {google.cloud.batch.v1.JobStatus.State|null} [state] JobStatus state
                         * @property {Array.<google.cloud.batch.v1.IStatusEvent>|null} [statusEvents] JobStatus statusEvents
                         * @property {Object.<string,google.cloud.batch.v1.JobStatus.ITaskGroupStatus>|null} [taskGroups] JobStatus taskGroups
                         * @property {google.protobuf.IDuration|null} [runDuration] JobStatus runDuration
                         */
    
                        /**
                         * Constructs a new JobStatus.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a JobStatus.
                         * @implements IJobStatus
                         * @constructor
                         * @param {google.cloud.batch.v1.IJobStatus=} [properties] Properties to set
                         */
                        function JobStatus(properties) {
                            this.statusEvents = [];
                            this.taskGroups = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * JobStatus state.
                         * @member {google.cloud.batch.v1.JobStatus.State} state
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @instance
                         */
                        JobStatus.prototype.state = 0;
    
                        /**
                         * JobStatus statusEvents.
                         * @member {Array.<google.cloud.batch.v1.IStatusEvent>} statusEvents
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @instance
                         */
                        JobStatus.prototype.statusEvents = $util.emptyArray;
    
                        /**
                         * JobStatus taskGroups.
                         * @member {Object.<string,google.cloud.batch.v1.JobStatus.ITaskGroupStatus>} taskGroups
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @instance
                         */
                        JobStatus.prototype.taskGroups = $util.emptyObject;
    
                        /**
                         * JobStatus runDuration.
                         * @member {google.protobuf.IDuration|null|undefined} runDuration
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @instance
                         */
                        JobStatus.prototype.runDuration = null;
    
                        /**
                         * Creates a new JobStatus instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @static
                         * @param {google.cloud.batch.v1.IJobStatus=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.JobStatus} JobStatus instance
                         */
                        JobStatus.create = function create(properties) {
                            return new JobStatus(properties);
                        };
    
                        /**
                         * Encodes the specified JobStatus message. Does not implicitly {@link google.cloud.batch.v1.JobStatus.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @static
                         * @param {google.cloud.batch.v1.IJobStatus} message JobStatus message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        JobStatus.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                            if (message.statusEvents != null && message.statusEvents.length)
                                for (var i = 0; i < message.statusEvents.length; ++i)
                                    $root.google.cloud.batch.v1.StatusEvent.encode(message.statusEvents[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.taskGroups != null && Object.hasOwnProperty.call(message, "taskGroups"))
                                for (var keys = Object.keys(message.taskGroups), i = 0; i < keys.length; ++i) {
                                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                    $root.google.cloud.batch.v1.JobStatus.TaskGroupStatus.encode(message.taskGroups[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                }
                            if (message.runDuration != null && Object.hasOwnProperty.call(message, "runDuration"))
                                $root.google.protobuf.Duration.encode(message.runDuration, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified JobStatus message, length delimited. Does not implicitly {@link google.cloud.batch.v1.JobStatus.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @static
                         * @param {google.cloud.batch.v1.IJobStatus} message JobStatus message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        JobStatus.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a JobStatus message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.JobStatus} JobStatus
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        JobStatus.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.JobStatus(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.state = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.statusEvents && message.statusEvents.length))
                                            message.statusEvents = [];
                                        message.statusEvents.push($root.google.cloud.batch.v1.StatusEvent.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (message.taskGroups === $util.emptyObject)
                                            message.taskGroups = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = null;
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = $root.google.cloud.batch.v1.JobStatus.TaskGroupStatus.decode(reader, reader.uint32());
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.taskGroups[key] = value;
                                        break;
                                    }
                                case 5: {
                                        message.runDuration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a JobStatus message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.JobStatus} JobStatus
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        JobStatus.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a JobStatus message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        JobStatus.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                switch (message.state) {
                                default:
                                    return "state: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            if (message.statusEvents != null && message.hasOwnProperty("statusEvents")) {
                                if (!Array.isArray(message.statusEvents))
                                    return "statusEvents: array expected";
                                for (var i = 0; i < message.statusEvents.length; ++i) {
                                    var error = $root.google.cloud.batch.v1.StatusEvent.verify(message.statusEvents[i]);
                                    if (error)
                                        return "statusEvents." + error;
                                }
                            }
                            if (message.taskGroups != null && message.hasOwnProperty("taskGroups")) {
                                if (!$util.isObject(message.taskGroups))
                                    return "taskGroups: object expected";
                                var key = Object.keys(message.taskGroups);
                                for (var i = 0; i < key.length; ++i) {
                                    var error = $root.google.cloud.batch.v1.JobStatus.TaskGroupStatus.verify(message.taskGroups[key[i]]);
                                    if (error)
                                        return "taskGroups." + error;
                                }
                            }
                            if (message.runDuration != null && message.hasOwnProperty("runDuration")) {
                                var error = $root.google.protobuf.Duration.verify(message.runDuration);
                                if (error)
                                    return "runDuration." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a JobStatus message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.JobStatus} JobStatus
                         */
                        JobStatus.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.JobStatus)
                                return object;
                            var message = new $root.google.cloud.batch.v1.JobStatus();
                            switch (object.state) {
                            default:
                                if (typeof object.state === "number") {
                                    message.state = object.state;
                                    break;
                                }
                                break;
                            case "STATE_UNSPECIFIED":
                            case 0:
                                message.state = 0;
                                break;
                            case "QUEUED":
                            case 1:
                                message.state = 1;
                                break;
                            case "SCHEDULED":
                            case 2:
                                message.state = 2;
                                break;
                            case "RUNNING":
                            case 3:
                                message.state = 3;
                                break;
                            case "SUCCEEDED":
                            case 4:
                                message.state = 4;
                                break;
                            case "FAILED":
                            case 5:
                                message.state = 5;
                                break;
                            case "DELETION_IN_PROGRESS":
                            case 6:
                                message.state = 6;
                                break;
                            }
                            if (object.statusEvents) {
                                if (!Array.isArray(object.statusEvents))
                                    throw TypeError(".google.cloud.batch.v1.JobStatus.statusEvents: array expected");
                                message.statusEvents = [];
                                for (var i = 0; i < object.statusEvents.length; ++i) {
                                    if (typeof object.statusEvents[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1.JobStatus.statusEvents: object expected");
                                    message.statusEvents[i] = $root.google.cloud.batch.v1.StatusEvent.fromObject(object.statusEvents[i]);
                                }
                            }
                            if (object.taskGroups) {
                                if (typeof object.taskGroups !== "object")
                                    throw TypeError(".google.cloud.batch.v1.JobStatus.taskGroups: object expected");
                                message.taskGroups = {};
                                for (var keys = Object.keys(object.taskGroups), i = 0; i < keys.length; ++i) {
                                    if (typeof object.taskGroups[keys[i]] !== "object")
                                        throw TypeError(".google.cloud.batch.v1.JobStatus.taskGroups: object expected");
                                    message.taskGroups[keys[i]] = $root.google.cloud.batch.v1.JobStatus.TaskGroupStatus.fromObject(object.taskGroups[keys[i]]);
                                }
                            }
                            if (object.runDuration != null) {
                                if (typeof object.runDuration !== "object")
                                    throw TypeError(".google.cloud.batch.v1.JobStatus.runDuration: object expected");
                                message.runDuration = $root.google.protobuf.Duration.fromObject(object.runDuration);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a JobStatus message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @static
                         * @param {google.cloud.batch.v1.JobStatus} message JobStatus
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        JobStatus.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.statusEvents = [];
                            if (options.objects || options.defaults)
                                object.taskGroups = {};
                            if (options.defaults) {
                                object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                                object.runDuration = null;
                            }
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = options.enums === String ? $root.google.cloud.batch.v1.JobStatus.State[message.state] === undefined ? message.state : $root.google.cloud.batch.v1.JobStatus.State[message.state] : message.state;
                            if (message.statusEvents && message.statusEvents.length) {
                                object.statusEvents = [];
                                for (var j = 0; j < message.statusEvents.length; ++j)
                                    object.statusEvents[j] = $root.google.cloud.batch.v1.StatusEvent.toObject(message.statusEvents[j], options);
                            }
                            var keys2;
                            if (message.taskGroups && (keys2 = Object.keys(message.taskGroups)).length) {
                                object.taskGroups = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.taskGroups[keys2[j]] = $root.google.cloud.batch.v1.JobStatus.TaskGroupStatus.toObject(message.taskGroups[keys2[j]], options);
                            }
                            if (message.runDuration != null && message.hasOwnProperty("runDuration"))
                                object.runDuration = $root.google.protobuf.Duration.toObject(message.runDuration, options);
                            return object;
                        };
    
                        /**
                         * Converts this JobStatus to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        JobStatus.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for JobStatus
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.JobStatus
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        JobStatus.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.JobStatus";
                        };
    
                        JobStatus.InstanceStatus = (function() {
    
                            /**
                             * Properties of an InstanceStatus.
                             * @memberof google.cloud.batch.v1.JobStatus
                             * @interface IInstanceStatus
                             * @property {string|null} [machineType] InstanceStatus machineType
                             * @property {google.cloud.batch.v1.AllocationPolicy.ProvisioningModel|null} [provisioningModel] InstanceStatus provisioningModel
                             * @property {number|Long|null} [taskPack] InstanceStatus taskPack
                             * @property {google.cloud.batch.v1.AllocationPolicy.IDisk|null} [bootDisk] InstanceStatus bootDisk
                             */
    
                            /**
                             * Constructs a new InstanceStatus.
                             * @memberof google.cloud.batch.v1.JobStatus
                             * @classdesc Represents an InstanceStatus.
                             * @implements IInstanceStatus
                             * @constructor
                             * @param {google.cloud.batch.v1.JobStatus.IInstanceStatus=} [properties] Properties to set
                             */
                            function InstanceStatus(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * InstanceStatus machineType.
                             * @member {string} machineType
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @instance
                             */
                            InstanceStatus.prototype.machineType = "";
    
                            /**
                             * InstanceStatus provisioningModel.
                             * @member {google.cloud.batch.v1.AllocationPolicy.ProvisioningModel} provisioningModel
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @instance
                             */
                            InstanceStatus.prototype.provisioningModel = 0;
    
                            /**
                             * InstanceStatus taskPack.
                             * @member {number|Long} taskPack
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @instance
                             */
                            InstanceStatus.prototype.taskPack = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * InstanceStatus bootDisk.
                             * @member {google.cloud.batch.v1.AllocationPolicy.IDisk|null|undefined} bootDisk
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @instance
                             */
                            InstanceStatus.prototype.bootDisk = null;
    
                            /**
                             * Creates a new InstanceStatus instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @static
                             * @param {google.cloud.batch.v1.JobStatus.IInstanceStatus=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.JobStatus.InstanceStatus} InstanceStatus instance
                             */
                            InstanceStatus.create = function create(properties) {
                                return new InstanceStatus(properties);
                            };
    
                            /**
                             * Encodes the specified InstanceStatus message. Does not implicitly {@link google.cloud.batch.v1.JobStatus.InstanceStatus.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @static
                             * @param {google.cloud.batch.v1.JobStatus.IInstanceStatus} message InstanceStatus message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstanceStatus.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.machineType != null && Object.hasOwnProperty.call(message, "machineType"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.machineType);
                                if (message.provisioningModel != null && Object.hasOwnProperty.call(message, "provisioningModel"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.provisioningModel);
                                if (message.taskPack != null && Object.hasOwnProperty.call(message, "taskPack"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.taskPack);
                                if (message.bootDisk != null && Object.hasOwnProperty.call(message, "bootDisk"))
                                    $root.google.cloud.batch.v1.AllocationPolicy.Disk.encode(message.bootDisk, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified InstanceStatus message, length delimited. Does not implicitly {@link google.cloud.batch.v1.JobStatus.InstanceStatus.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @static
                             * @param {google.cloud.batch.v1.JobStatus.IInstanceStatus} message InstanceStatus message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstanceStatus.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an InstanceStatus message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.JobStatus.InstanceStatus} InstanceStatus
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstanceStatus.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.JobStatus.InstanceStatus();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.machineType = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.provisioningModel = reader.int32();
                                            break;
                                        }
                                    case 3: {
                                            message.taskPack = reader.int64();
                                            break;
                                        }
                                    case 4: {
                                            message.bootDisk = $root.google.cloud.batch.v1.AllocationPolicy.Disk.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an InstanceStatus message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.JobStatus.InstanceStatus} InstanceStatus
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstanceStatus.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an InstanceStatus message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            InstanceStatus.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.machineType != null && message.hasOwnProperty("machineType"))
                                    if (!$util.isString(message.machineType))
                                        return "machineType: string expected";
                                if (message.provisioningModel != null && message.hasOwnProperty("provisioningModel"))
                                    switch (message.provisioningModel) {
                                    default:
                                        return "provisioningModel: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                                if (message.taskPack != null && message.hasOwnProperty("taskPack"))
                                    if (!$util.isInteger(message.taskPack) && !(message.taskPack && $util.isInteger(message.taskPack.low) && $util.isInteger(message.taskPack.high)))
                                        return "taskPack: integer|Long expected";
                                if (message.bootDisk != null && message.hasOwnProperty("bootDisk")) {
                                    var error = $root.google.cloud.batch.v1.AllocationPolicy.Disk.verify(message.bootDisk);
                                    if (error)
                                        return "bootDisk." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an InstanceStatus message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.JobStatus.InstanceStatus} InstanceStatus
                             */
                            InstanceStatus.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.JobStatus.InstanceStatus)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.JobStatus.InstanceStatus();
                                if (object.machineType != null)
                                    message.machineType = String(object.machineType);
                                switch (object.provisioningModel) {
                                default:
                                    if (typeof object.provisioningModel === "number") {
                                        message.provisioningModel = object.provisioningModel;
                                        break;
                                    }
                                    break;
                                case "PROVISIONING_MODEL_UNSPECIFIED":
                                case 0:
                                    message.provisioningModel = 0;
                                    break;
                                case "STANDARD":
                                case 1:
                                    message.provisioningModel = 1;
                                    break;
                                case "SPOT":
                                case 2:
                                    message.provisioningModel = 2;
                                    break;
                                case "PREEMPTIBLE":
                                case 3:
                                    message.provisioningModel = 3;
                                    break;
                                }
                                if (object.taskPack != null)
                                    if ($util.Long)
                                        (message.taskPack = $util.Long.fromValue(object.taskPack)).unsigned = false;
                                    else if (typeof object.taskPack === "string")
                                        message.taskPack = parseInt(object.taskPack, 10);
                                    else if (typeof object.taskPack === "number")
                                        message.taskPack = object.taskPack;
                                    else if (typeof object.taskPack === "object")
                                        message.taskPack = new $util.LongBits(object.taskPack.low >>> 0, object.taskPack.high >>> 0).toNumber();
                                if (object.bootDisk != null) {
                                    if (typeof object.bootDisk !== "object")
                                        throw TypeError(".google.cloud.batch.v1.JobStatus.InstanceStatus.bootDisk: object expected");
                                    message.bootDisk = $root.google.cloud.batch.v1.AllocationPolicy.Disk.fromObject(object.bootDisk);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an InstanceStatus message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @static
                             * @param {google.cloud.batch.v1.JobStatus.InstanceStatus} message InstanceStatus
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            InstanceStatus.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.machineType = "";
                                    object.provisioningModel = options.enums === String ? "PROVISIONING_MODEL_UNSPECIFIED" : 0;
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.taskPack = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.taskPack = options.longs === String ? "0" : 0;
                                    object.bootDisk = null;
                                }
                                if (message.machineType != null && message.hasOwnProperty("machineType"))
                                    object.machineType = message.machineType;
                                if (message.provisioningModel != null && message.hasOwnProperty("provisioningModel"))
                                    object.provisioningModel = options.enums === String ? $root.google.cloud.batch.v1.AllocationPolicy.ProvisioningModel[message.provisioningModel] === undefined ? message.provisioningModel : $root.google.cloud.batch.v1.AllocationPolicy.ProvisioningModel[message.provisioningModel] : message.provisioningModel;
                                if (message.taskPack != null && message.hasOwnProperty("taskPack"))
                                    if (typeof message.taskPack === "number")
                                        object.taskPack = options.longs === String ? String(message.taskPack) : message.taskPack;
                                    else
                                        object.taskPack = options.longs === String ? $util.Long.prototype.toString.call(message.taskPack) : options.longs === Number ? new $util.LongBits(message.taskPack.low >>> 0, message.taskPack.high >>> 0).toNumber() : message.taskPack;
                                if (message.bootDisk != null && message.hasOwnProperty("bootDisk"))
                                    object.bootDisk = $root.google.cloud.batch.v1.AllocationPolicy.Disk.toObject(message.bootDisk, options);
                                return object;
                            };
    
                            /**
                             * Converts this InstanceStatus to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            InstanceStatus.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for InstanceStatus
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.JobStatus.InstanceStatus
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            InstanceStatus.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.JobStatus.InstanceStatus";
                            };
    
                            return InstanceStatus;
                        })();
    
                        JobStatus.TaskGroupStatus = (function() {
    
                            /**
                             * Properties of a TaskGroupStatus.
                             * @memberof google.cloud.batch.v1.JobStatus
                             * @interface ITaskGroupStatus
                             * @property {Object.<string,number|Long>|null} [counts] TaskGroupStatus counts
                             * @property {Array.<google.cloud.batch.v1.JobStatus.IInstanceStatus>|null} [instances] TaskGroupStatus instances
                             */
    
                            /**
                             * Constructs a new TaskGroupStatus.
                             * @memberof google.cloud.batch.v1.JobStatus
                             * @classdesc Represents a TaskGroupStatus.
                             * @implements ITaskGroupStatus
                             * @constructor
                             * @param {google.cloud.batch.v1.JobStatus.ITaskGroupStatus=} [properties] Properties to set
                             */
                            function TaskGroupStatus(properties) {
                                this.counts = {};
                                this.instances = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * TaskGroupStatus counts.
                             * @member {Object.<string,number|Long>} counts
                             * @memberof google.cloud.batch.v1.JobStatus.TaskGroupStatus
                             * @instance
                             */
                            TaskGroupStatus.prototype.counts = $util.emptyObject;
    
                            /**
                             * TaskGroupStatus instances.
                             * @member {Array.<google.cloud.batch.v1.JobStatus.IInstanceStatus>} instances
                             * @memberof google.cloud.batch.v1.JobStatus.TaskGroupStatus
                             * @instance
                             */
                            TaskGroupStatus.prototype.instances = $util.emptyArray;
    
                            /**
                             * Creates a new TaskGroupStatus instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.JobStatus.TaskGroupStatus
                             * @static
                             * @param {google.cloud.batch.v1.JobStatus.ITaskGroupStatus=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.JobStatus.TaskGroupStatus} TaskGroupStatus instance
                             */
                            TaskGroupStatus.create = function create(properties) {
                                return new TaskGroupStatus(properties);
                            };
    
                            /**
                             * Encodes the specified TaskGroupStatus message. Does not implicitly {@link google.cloud.batch.v1.JobStatus.TaskGroupStatus.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.JobStatus.TaskGroupStatus
                             * @static
                             * @param {google.cloud.batch.v1.JobStatus.ITaskGroupStatus} message TaskGroupStatus message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TaskGroupStatus.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.counts != null && Object.hasOwnProperty.call(message, "counts"))
                                    for (var keys = Object.keys(message.counts), i = 0; i < keys.length; ++i)
                                        writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int64(message.counts[keys[i]]).ldelim();
                                if (message.instances != null && message.instances.length)
                                    for (var i = 0; i < message.instances.length; ++i)
                                        $root.google.cloud.batch.v1.JobStatus.InstanceStatus.encode(message.instances[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified TaskGroupStatus message, length delimited. Does not implicitly {@link google.cloud.batch.v1.JobStatus.TaskGroupStatus.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.JobStatus.TaskGroupStatus
                             * @static
                             * @param {google.cloud.batch.v1.JobStatus.ITaskGroupStatus} message TaskGroupStatus message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TaskGroupStatus.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a TaskGroupStatus message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.JobStatus.TaskGroupStatus
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.JobStatus.TaskGroupStatus} TaskGroupStatus
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TaskGroupStatus.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.JobStatus.TaskGroupStatus(), key, value;
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            if (message.counts === $util.emptyObject)
                                                message.counts = {};
                                            var end2 = reader.uint32() + reader.pos;
                                            key = "";
                                            value = 0;
                                            while (reader.pos < end2) {
                                                var tag2 = reader.uint32();
                                                switch (tag2 >>> 3) {
                                                case 1:
                                                    key = reader.string();
                                                    break;
                                                case 2:
                                                    value = reader.int64();
                                                    break;
                                                default:
                                                    reader.skipType(tag2 & 7);
                                                    break;
                                                }
                                            }
                                            message.counts[key] = value;
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.instances && message.instances.length))
                                                message.instances = [];
                                            message.instances.push($root.google.cloud.batch.v1.JobStatus.InstanceStatus.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a TaskGroupStatus message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.JobStatus.TaskGroupStatus
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.JobStatus.TaskGroupStatus} TaskGroupStatus
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TaskGroupStatus.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a TaskGroupStatus message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.JobStatus.TaskGroupStatus
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            TaskGroupStatus.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.counts != null && message.hasOwnProperty("counts")) {
                                    if (!$util.isObject(message.counts))
                                        return "counts: object expected";
                                    var key = Object.keys(message.counts);
                                    for (var i = 0; i < key.length; ++i)
                                        if (!$util.isInteger(message.counts[key[i]]) && !(message.counts[key[i]] && $util.isInteger(message.counts[key[i]].low) && $util.isInteger(message.counts[key[i]].high)))
                                            return "counts: integer|Long{k:string} expected";
                                }
                                if (message.instances != null && message.hasOwnProperty("instances")) {
                                    if (!Array.isArray(message.instances))
                                        return "instances: array expected";
                                    for (var i = 0; i < message.instances.length; ++i) {
                                        var error = $root.google.cloud.batch.v1.JobStatus.InstanceStatus.verify(message.instances[i]);
                                        if (error)
                                            return "instances." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a TaskGroupStatus message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.JobStatus.TaskGroupStatus
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.JobStatus.TaskGroupStatus} TaskGroupStatus
                             */
                            TaskGroupStatus.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.JobStatus.TaskGroupStatus)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.JobStatus.TaskGroupStatus();
                                if (object.counts) {
                                    if (typeof object.counts !== "object")
                                        throw TypeError(".google.cloud.batch.v1.JobStatus.TaskGroupStatus.counts: object expected");
                                    message.counts = {};
                                    for (var keys = Object.keys(object.counts), i = 0; i < keys.length; ++i)
                                        if ($util.Long)
                                            (message.counts[keys[i]] = $util.Long.fromValue(object.counts[keys[i]])).unsigned = false;
                                        else if (typeof object.counts[keys[i]] === "string")
                                            message.counts[keys[i]] = parseInt(object.counts[keys[i]], 10);
                                        else if (typeof object.counts[keys[i]] === "number")
                                            message.counts[keys[i]] = object.counts[keys[i]];
                                        else if (typeof object.counts[keys[i]] === "object")
                                            message.counts[keys[i]] = new $util.LongBits(object.counts[keys[i]].low >>> 0, object.counts[keys[i]].high >>> 0).toNumber();
                                }
                                if (object.instances) {
                                    if (!Array.isArray(object.instances))
                                        throw TypeError(".google.cloud.batch.v1.JobStatus.TaskGroupStatus.instances: array expected");
                                    message.instances = [];
                                    for (var i = 0; i < object.instances.length; ++i) {
                                        if (typeof object.instances[i] !== "object")
                                            throw TypeError(".google.cloud.batch.v1.JobStatus.TaskGroupStatus.instances: object expected");
                                        message.instances[i] = $root.google.cloud.batch.v1.JobStatus.InstanceStatus.fromObject(object.instances[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a TaskGroupStatus message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.JobStatus.TaskGroupStatus
                             * @static
                             * @param {google.cloud.batch.v1.JobStatus.TaskGroupStatus} message TaskGroupStatus
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            TaskGroupStatus.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.instances = [];
                                if (options.objects || options.defaults)
                                    object.counts = {};
                                var keys2;
                                if (message.counts && (keys2 = Object.keys(message.counts)).length) {
                                    object.counts = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        if (typeof message.counts[keys2[j]] === "number")
                                            object.counts[keys2[j]] = options.longs === String ? String(message.counts[keys2[j]]) : message.counts[keys2[j]];
                                        else
                                            object.counts[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.counts[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.counts[keys2[j]].low >>> 0, message.counts[keys2[j]].high >>> 0).toNumber() : message.counts[keys2[j]];
                                }
                                if (message.instances && message.instances.length) {
                                    object.instances = [];
                                    for (var j = 0; j < message.instances.length; ++j)
                                        object.instances[j] = $root.google.cloud.batch.v1.JobStatus.InstanceStatus.toObject(message.instances[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this TaskGroupStatus to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.JobStatus.TaskGroupStatus
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            TaskGroupStatus.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for TaskGroupStatus
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.JobStatus.TaskGroupStatus
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            TaskGroupStatus.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.JobStatus.TaskGroupStatus";
                            };
    
                            return TaskGroupStatus;
                        })();
    
                        /**
                         * State enum.
                         * @name google.cloud.batch.v1.JobStatus.State
                         * @enum {number}
                         * @property {number} STATE_UNSPECIFIED=0 STATE_UNSPECIFIED value
                         * @property {number} QUEUED=1 QUEUED value
                         * @property {number} SCHEDULED=2 SCHEDULED value
                         * @property {number} RUNNING=3 RUNNING value
                         * @property {number} SUCCEEDED=4 SUCCEEDED value
                         * @property {number} FAILED=5 FAILED value
                         * @property {number} DELETION_IN_PROGRESS=6 DELETION_IN_PROGRESS value
                         */
                        JobStatus.State = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "QUEUED"] = 1;
                            values[valuesById[2] = "SCHEDULED"] = 2;
                            values[valuesById[3] = "RUNNING"] = 3;
                            values[valuesById[4] = "SUCCEEDED"] = 4;
                            values[valuesById[5] = "FAILED"] = 5;
                            values[valuesById[6] = "DELETION_IN_PROGRESS"] = 6;
                            return values;
                        })();
    
                        return JobStatus;
                    })();
    
                    v1.JobNotification = (function() {
    
                        /**
                         * Properties of a JobNotification.
                         * @memberof google.cloud.batch.v1
                         * @interface IJobNotification
                         * @property {string|null} [pubsubTopic] JobNotification pubsubTopic
                         * @property {google.cloud.batch.v1.JobNotification.IMessage|null} [message] JobNotification message
                         */
    
                        /**
                         * Constructs a new JobNotification.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a JobNotification.
                         * @implements IJobNotification
                         * @constructor
                         * @param {google.cloud.batch.v1.IJobNotification=} [properties] Properties to set
                         */
                        function JobNotification(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * JobNotification pubsubTopic.
                         * @member {string} pubsubTopic
                         * @memberof google.cloud.batch.v1.JobNotification
                         * @instance
                         */
                        JobNotification.prototype.pubsubTopic = "";
    
                        /**
                         * JobNotification message.
                         * @member {google.cloud.batch.v1.JobNotification.IMessage|null|undefined} message
                         * @memberof google.cloud.batch.v1.JobNotification
                         * @instance
                         */
                        JobNotification.prototype.message = null;
    
                        /**
                         * Creates a new JobNotification instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.JobNotification
                         * @static
                         * @param {google.cloud.batch.v1.IJobNotification=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.JobNotification} JobNotification instance
                         */
                        JobNotification.create = function create(properties) {
                            return new JobNotification(properties);
                        };
    
                        /**
                         * Encodes the specified JobNotification message. Does not implicitly {@link google.cloud.batch.v1.JobNotification.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.JobNotification
                         * @static
                         * @param {google.cloud.batch.v1.IJobNotification} message JobNotification message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        JobNotification.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.pubsubTopic != null && Object.hasOwnProperty.call(message, "pubsubTopic"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.pubsubTopic);
                            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                                $root.google.cloud.batch.v1.JobNotification.Message.encode(message.message, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified JobNotification message, length delimited. Does not implicitly {@link google.cloud.batch.v1.JobNotification.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.JobNotification
                         * @static
                         * @param {google.cloud.batch.v1.IJobNotification} message JobNotification message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        JobNotification.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a JobNotification message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.JobNotification
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.JobNotification} JobNotification
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        JobNotification.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.JobNotification();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.pubsubTopic = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.message = $root.google.cloud.batch.v1.JobNotification.Message.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a JobNotification message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.JobNotification
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.JobNotification} JobNotification
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        JobNotification.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a JobNotification message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.JobNotification
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        JobNotification.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.pubsubTopic != null && message.hasOwnProperty("pubsubTopic"))
                                if (!$util.isString(message.pubsubTopic))
                                    return "pubsubTopic: string expected";
                            if (message.message != null && message.hasOwnProperty("message")) {
                                var error = $root.google.cloud.batch.v1.JobNotification.Message.verify(message.message);
                                if (error)
                                    return "message." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a JobNotification message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.JobNotification
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.JobNotification} JobNotification
                         */
                        JobNotification.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.JobNotification)
                                return object;
                            var message = new $root.google.cloud.batch.v1.JobNotification();
                            if (object.pubsubTopic != null)
                                message.pubsubTopic = String(object.pubsubTopic);
                            if (object.message != null) {
                                if (typeof object.message !== "object")
                                    throw TypeError(".google.cloud.batch.v1.JobNotification.message: object expected");
                                message.message = $root.google.cloud.batch.v1.JobNotification.Message.fromObject(object.message);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a JobNotification message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.JobNotification
                         * @static
                         * @param {google.cloud.batch.v1.JobNotification} message JobNotification
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        JobNotification.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.pubsubTopic = "";
                                object.message = null;
                            }
                            if (message.pubsubTopic != null && message.hasOwnProperty("pubsubTopic"))
                                object.pubsubTopic = message.pubsubTopic;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = $root.google.cloud.batch.v1.JobNotification.Message.toObject(message.message, options);
                            return object;
                        };
    
                        /**
                         * Converts this JobNotification to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.JobNotification
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        JobNotification.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for JobNotification
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.JobNotification
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        JobNotification.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.JobNotification";
                        };
    
                        JobNotification.Message = (function() {
    
                            /**
                             * Properties of a Message.
                             * @memberof google.cloud.batch.v1.JobNotification
                             * @interface IMessage
                             * @property {google.cloud.batch.v1.JobNotification.Type|null} [type] Message type
                             * @property {google.cloud.batch.v1.JobStatus.State|null} [newJobState] Message newJobState
                             * @property {google.cloud.batch.v1.TaskStatus.State|null} [newTaskState] Message newTaskState
                             */
    
                            /**
                             * Constructs a new Message.
                             * @memberof google.cloud.batch.v1.JobNotification
                             * @classdesc Represents a Message.
                             * @implements IMessage
                             * @constructor
                             * @param {google.cloud.batch.v1.JobNotification.IMessage=} [properties] Properties to set
                             */
                            function Message(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Message type.
                             * @member {google.cloud.batch.v1.JobNotification.Type} type
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @instance
                             */
                            Message.prototype.type = 0;
    
                            /**
                             * Message newJobState.
                             * @member {google.cloud.batch.v1.JobStatus.State} newJobState
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @instance
                             */
                            Message.prototype.newJobState = 0;
    
                            /**
                             * Message newTaskState.
                             * @member {google.cloud.batch.v1.TaskStatus.State} newTaskState
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @instance
                             */
                            Message.prototype.newTaskState = 0;
    
                            /**
                             * Creates a new Message instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @static
                             * @param {google.cloud.batch.v1.JobNotification.IMessage=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.JobNotification.Message} Message instance
                             */
                            Message.create = function create(properties) {
                                return new Message(properties);
                            };
    
                            /**
                             * Encodes the specified Message message. Does not implicitly {@link google.cloud.batch.v1.JobNotification.Message.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @static
                             * @param {google.cloud.batch.v1.JobNotification.IMessage} message Message message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Message.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                if (message.newJobState != null && Object.hasOwnProperty.call(message, "newJobState"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.newJobState);
                                if (message.newTaskState != null && Object.hasOwnProperty.call(message, "newTaskState"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.newTaskState);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Message message, length delimited. Does not implicitly {@link google.cloud.batch.v1.JobNotification.Message.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @static
                             * @param {google.cloud.batch.v1.JobNotification.IMessage} message Message message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Message.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Message message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.JobNotification.Message} Message
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Message.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.JobNotification.Message();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.type = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.newJobState = reader.int32();
                                            break;
                                        }
                                    case 3: {
                                            message.newTaskState = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Message message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.JobNotification.Message} Message
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Message.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Message message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Message.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.type != null && message.hasOwnProperty("type"))
                                    switch (message.type) {
                                    default:
                                        return "type: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.newJobState != null && message.hasOwnProperty("newJobState"))
                                    switch (message.newJobState) {
                                    default:
                                        return "newJobState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                    case 6:
                                        break;
                                    }
                                if (message.newTaskState != null && message.hasOwnProperty("newTaskState"))
                                    switch (message.newTaskState) {
                                    default:
                                        return "newTaskState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                    case 6:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates a Message message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.JobNotification.Message} Message
                             */
                            Message.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.JobNotification.Message)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.JobNotification.Message();
                                switch (object.type) {
                                default:
                                    if (typeof object.type === "number") {
                                        message.type = object.type;
                                        break;
                                    }
                                    break;
                                case "TYPE_UNSPECIFIED":
                                case 0:
                                    message.type = 0;
                                    break;
                                case "JOB_STATE_CHANGED":
                                case 1:
                                    message.type = 1;
                                    break;
                                case "TASK_STATE_CHANGED":
                                case 2:
                                    message.type = 2;
                                    break;
                                }
                                switch (object.newJobState) {
                                default:
                                    if (typeof object.newJobState === "number") {
                                        message.newJobState = object.newJobState;
                                        break;
                                    }
                                    break;
                                case "STATE_UNSPECIFIED":
                                case 0:
                                    message.newJobState = 0;
                                    break;
                                case "QUEUED":
                                case 1:
                                    message.newJobState = 1;
                                    break;
                                case "SCHEDULED":
                                case 2:
                                    message.newJobState = 2;
                                    break;
                                case "RUNNING":
                                case 3:
                                    message.newJobState = 3;
                                    break;
                                case "SUCCEEDED":
                                case 4:
                                    message.newJobState = 4;
                                    break;
                                case "FAILED":
                                case 5:
                                    message.newJobState = 5;
                                    break;
                                case "DELETION_IN_PROGRESS":
                                case 6:
                                    message.newJobState = 6;
                                    break;
                                }
                                switch (object.newTaskState) {
                                default:
                                    if (typeof object.newTaskState === "number") {
                                        message.newTaskState = object.newTaskState;
                                        break;
                                    }
                                    break;
                                case "STATE_UNSPECIFIED":
                                case 0:
                                    message.newTaskState = 0;
                                    break;
                                case "PENDING":
                                case 1:
                                    message.newTaskState = 1;
                                    break;
                                case "ASSIGNED":
                                case 2:
                                    message.newTaskState = 2;
                                    break;
                                case "RUNNING":
                                case 3:
                                    message.newTaskState = 3;
                                    break;
                                case "FAILED":
                                case 4:
                                    message.newTaskState = 4;
                                    break;
                                case "SUCCEEDED":
                                case 5:
                                    message.newTaskState = 5;
                                    break;
                                case "UNEXECUTED":
                                case 6:
                                    message.newTaskState = 6;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Message message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @static
                             * @param {google.cloud.batch.v1.JobNotification.Message} message Message
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Message.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.type = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                                    object.newJobState = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                                    object.newTaskState = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                                }
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = options.enums === String ? $root.google.cloud.batch.v1.JobNotification.Type[message.type] === undefined ? message.type : $root.google.cloud.batch.v1.JobNotification.Type[message.type] : message.type;
                                if (message.newJobState != null && message.hasOwnProperty("newJobState"))
                                    object.newJobState = options.enums === String ? $root.google.cloud.batch.v1.JobStatus.State[message.newJobState] === undefined ? message.newJobState : $root.google.cloud.batch.v1.JobStatus.State[message.newJobState] : message.newJobState;
                                if (message.newTaskState != null && message.hasOwnProperty("newTaskState"))
                                    object.newTaskState = options.enums === String ? $root.google.cloud.batch.v1.TaskStatus.State[message.newTaskState] === undefined ? message.newTaskState : $root.google.cloud.batch.v1.TaskStatus.State[message.newTaskState] : message.newTaskState;
                                return object;
                            };
    
                            /**
                             * Converts this Message to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Message.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Message
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.JobNotification.Message
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Message.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.JobNotification.Message";
                            };
    
                            return Message;
                        })();
    
                        /**
                         * Type enum.
                         * @name google.cloud.batch.v1.JobNotification.Type
                         * @enum {number}
                         * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                         * @property {number} JOB_STATE_CHANGED=1 JOB_STATE_CHANGED value
                         * @property {number} TASK_STATE_CHANGED=2 TASK_STATE_CHANGED value
                         */
                        JobNotification.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "JOB_STATE_CHANGED"] = 1;
                            values[valuesById[2] = "TASK_STATE_CHANGED"] = 2;
                            return values;
                        })();
    
                        return JobNotification;
                    })();
    
                    v1.AllocationPolicy = (function() {
    
                        /**
                         * Properties of an AllocationPolicy.
                         * @memberof google.cloud.batch.v1
                         * @interface IAllocationPolicy
                         * @property {google.cloud.batch.v1.AllocationPolicy.ILocationPolicy|null} [location] AllocationPolicy location
                         * @property {Array.<google.cloud.batch.v1.AllocationPolicy.IInstancePolicyOrTemplate>|null} [instances] AllocationPolicy instances
                         * @property {google.cloud.batch.v1.IServiceAccount|null} [serviceAccount] AllocationPolicy serviceAccount
                         * @property {Object.<string,string>|null} [labels] AllocationPolicy labels
                         * @property {google.cloud.batch.v1.AllocationPolicy.INetworkPolicy|null} [network] AllocationPolicy network
                         * @property {google.cloud.batch.v1.AllocationPolicy.IPlacementPolicy|null} [placement] AllocationPolicy placement
                         */
    
                        /**
                         * Constructs a new AllocationPolicy.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents an AllocationPolicy.
                         * @implements IAllocationPolicy
                         * @constructor
                         * @param {google.cloud.batch.v1.IAllocationPolicy=} [properties] Properties to set
                         */
                        function AllocationPolicy(properties) {
                            this.instances = [];
                            this.labels = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AllocationPolicy location.
                         * @member {google.cloud.batch.v1.AllocationPolicy.ILocationPolicy|null|undefined} location
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.location = null;
    
                        /**
                         * AllocationPolicy instances.
                         * @member {Array.<google.cloud.batch.v1.AllocationPolicy.IInstancePolicyOrTemplate>} instances
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.instances = $util.emptyArray;
    
                        /**
                         * AllocationPolicy serviceAccount.
                         * @member {google.cloud.batch.v1.IServiceAccount|null|undefined} serviceAccount
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.serviceAccount = null;
    
                        /**
                         * AllocationPolicy labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.labels = $util.emptyObject;
    
                        /**
                         * AllocationPolicy network.
                         * @member {google.cloud.batch.v1.AllocationPolicy.INetworkPolicy|null|undefined} network
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.network = null;
    
                        /**
                         * AllocationPolicy placement.
                         * @member {google.cloud.batch.v1.AllocationPolicy.IPlacementPolicy|null|undefined} placement
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.placement = null;
    
                        /**
                         * Creates a new AllocationPolicy instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @static
                         * @param {google.cloud.batch.v1.IAllocationPolicy=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.AllocationPolicy} AllocationPolicy instance
                         */
                        AllocationPolicy.create = function create(properties) {
                            return new AllocationPolicy(properties);
                        };
    
                        /**
                         * Encodes the specified AllocationPolicy message. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @static
                         * @param {google.cloud.batch.v1.IAllocationPolicy} message AllocationPolicy message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AllocationPolicy.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                                $root.google.cloud.batch.v1.AllocationPolicy.LocationPolicy.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.network != null && Object.hasOwnProperty.call(message, "network"))
                                $root.google.cloud.batch.v1.AllocationPolicy.NetworkPolicy.encode(message.network, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.instances != null && message.instances.length)
                                for (var i = 0; i < message.instances.length; ++i)
                                    $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate.encode(message.instances[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.serviceAccount != null && Object.hasOwnProperty.call(message, "serviceAccount"))
                                $root.google.cloud.batch.v1.ServiceAccount.encode(message.serviceAccount, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.placement != null && Object.hasOwnProperty.call(message, "placement"))
                                $root.google.cloud.batch.v1.AllocationPolicy.PlacementPolicy.encode(message.placement, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AllocationPolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @static
                         * @param {google.cloud.batch.v1.IAllocationPolicy} message AllocationPolicy message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AllocationPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AllocationPolicy message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.AllocationPolicy} AllocationPolicy
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AllocationPolicy.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.AllocationPolicy(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.location = $root.google.cloud.batch.v1.AllocationPolicy.LocationPolicy.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        if (!(message.instances && message.instances.length))
                                            message.instances = [];
                                        message.instances.push($root.google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 9: {
                                        message.serviceAccount = $root.google.cloud.batch.v1.ServiceAccount.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                case 7: {
                                        message.network = $root.google.cloud.batch.v1.AllocationPolicy.NetworkPolicy.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 10: {
                                        message.placement = $root.google.cloud.batch.v1.AllocationPolicy.PlacementPolicy.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AllocationPolicy message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.AllocationPolicy} AllocationPolicy
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AllocationPolicy.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AllocationPolicy message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AllocationPolicy.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.location != null && message.hasOwnProperty("location")) {
                                var error = $root.google.cloud.batch.v1.AllocationPolicy.LocationPolicy.verify(message.location);
                                if (error)
                                    return "location." + error;
                            }
                            if (message.instances != null && message.hasOwnProperty("instances")) {
                                if (!Array.isArray(message.instances))
                                    return "instances: array expected";
                                for (var i = 0; i < message.instances.length; ++i) {
                                    var error = $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate.verify(message.instances[i]);
                                    if (error)
                                        return "instances." + error;
                                }
                            }
                            if (message.serviceAccount != null && message.hasOwnProperty("serviceAccount")) {
                                var error = $root.google.cloud.batch.v1.ServiceAccount.verify(message.serviceAccount);
                                if (error)
                                    return "serviceAccount." + error;
                            }
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.network != null && message.hasOwnProperty("network")) {
                                var error = $root.google.cloud.batch.v1.AllocationPolicy.NetworkPolicy.verify(message.network);
                                if (error)
                                    return "network." + error;
                            }
                            if (message.placement != null && message.hasOwnProperty("placement")) {
                                var error = $root.google.cloud.batch.v1.AllocationPolicy.PlacementPolicy.verify(message.placement);
                                if (error)
                                    return "placement." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AllocationPolicy message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.AllocationPolicy} AllocationPolicy
                         */
                        AllocationPolicy.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.AllocationPolicy)
                                return object;
                            var message = new $root.google.cloud.batch.v1.AllocationPolicy();
                            if (object.location != null) {
                                if (typeof object.location !== "object")
                                    throw TypeError(".google.cloud.batch.v1.AllocationPolicy.location: object expected");
                                message.location = $root.google.cloud.batch.v1.AllocationPolicy.LocationPolicy.fromObject(object.location);
                            }
                            if (object.instances) {
                                if (!Array.isArray(object.instances))
                                    throw TypeError(".google.cloud.batch.v1.AllocationPolicy.instances: array expected");
                                message.instances = [];
                                for (var i = 0; i < object.instances.length; ++i) {
                                    if (typeof object.instances[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1.AllocationPolicy.instances: object expected");
                                    message.instances[i] = $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate.fromObject(object.instances[i]);
                                }
                            }
                            if (object.serviceAccount != null) {
                                if (typeof object.serviceAccount !== "object")
                                    throw TypeError(".google.cloud.batch.v1.AllocationPolicy.serviceAccount: object expected");
                                message.serviceAccount = $root.google.cloud.batch.v1.ServiceAccount.fromObject(object.serviceAccount);
                            }
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.cloud.batch.v1.AllocationPolicy.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.network != null) {
                                if (typeof object.network !== "object")
                                    throw TypeError(".google.cloud.batch.v1.AllocationPolicy.network: object expected");
                                message.network = $root.google.cloud.batch.v1.AllocationPolicy.NetworkPolicy.fromObject(object.network);
                            }
                            if (object.placement != null) {
                                if (typeof object.placement !== "object")
                                    throw TypeError(".google.cloud.batch.v1.AllocationPolicy.placement: object expected");
                                message.placement = $root.google.cloud.batch.v1.AllocationPolicy.PlacementPolicy.fromObject(object.placement);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AllocationPolicy message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @static
                         * @param {google.cloud.batch.v1.AllocationPolicy} message AllocationPolicy
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AllocationPolicy.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.instances = [];
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.location = null;
                                object.network = null;
                                object.serviceAccount = null;
                                object.placement = null;
                            }
                            if (message.location != null && message.hasOwnProperty("location"))
                                object.location = $root.google.cloud.batch.v1.AllocationPolicy.LocationPolicy.toObject(message.location, options);
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.network != null && message.hasOwnProperty("network"))
                                object.network = $root.google.cloud.batch.v1.AllocationPolicy.NetworkPolicy.toObject(message.network, options);
                            if (message.instances && message.instances.length) {
                                object.instances = [];
                                for (var j = 0; j < message.instances.length; ++j)
                                    object.instances[j] = $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate.toObject(message.instances[j], options);
                            }
                            if (message.serviceAccount != null && message.hasOwnProperty("serviceAccount"))
                                object.serviceAccount = $root.google.cloud.batch.v1.ServiceAccount.toObject(message.serviceAccount, options);
                            if (message.placement != null && message.hasOwnProperty("placement"))
                                object.placement = $root.google.cloud.batch.v1.AllocationPolicy.PlacementPolicy.toObject(message.placement, options);
                            return object;
                        };
    
                        /**
                         * Converts this AllocationPolicy to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AllocationPolicy.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AllocationPolicy
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.AllocationPolicy
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AllocationPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.AllocationPolicy";
                        };
    
                        AllocationPolicy.LocationPolicy = (function() {
    
                            /**
                             * Properties of a LocationPolicy.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @interface ILocationPolicy
                             * @property {Array.<string>|null} [allowedLocations] LocationPolicy allowedLocations
                             */
    
                            /**
                             * Constructs a new LocationPolicy.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @classdesc Represents a LocationPolicy.
                             * @implements ILocationPolicy
                             * @constructor
                             * @param {google.cloud.batch.v1.AllocationPolicy.ILocationPolicy=} [properties] Properties to set
                             */
                            function LocationPolicy(properties) {
                                this.allowedLocations = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * LocationPolicy allowedLocations.
                             * @member {Array.<string>} allowedLocations
                             * @memberof google.cloud.batch.v1.AllocationPolicy.LocationPolicy
                             * @instance
                             */
                            LocationPolicy.prototype.allowedLocations = $util.emptyArray;
    
                            /**
                             * Creates a new LocationPolicy instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.ILocationPolicy=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.AllocationPolicy.LocationPolicy} LocationPolicy instance
                             */
                            LocationPolicy.create = function create(properties) {
                                return new LocationPolicy(properties);
                            };
    
                            /**
                             * Encodes the specified LocationPolicy message. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.LocationPolicy.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.ILocationPolicy} message LocationPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LocationPolicy.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.allowedLocations != null && message.allowedLocations.length)
                                    for (var i = 0; i < message.allowedLocations.length; ++i)
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.allowedLocations[i]);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified LocationPolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.LocationPolicy.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.ILocationPolicy} message LocationPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LocationPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a LocationPolicy message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.AllocationPolicy.LocationPolicy} LocationPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LocationPolicy.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.AllocationPolicy.LocationPolicy();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            if (!(message.allowedLocations && message.allowedLocations.length))
                                                message.allowedLocations = [];
                                            message.allowedLocations.push(reader.string());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a LocationPolicy message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.AllocationPolicy.LocationPolicy} LocationPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LocationPolicy.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a LocationPolicy message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            LocationPolicy.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.allowedLocations != null && message.hasOwnProperty("allowedLocations")) {
                                    if (!Array.isArray(message.allowedLocations))
                                        return "allowedLocations: array expected";
                                    for (var i = 0; i < message.allowedLocations.length; ++i)
                                        if (!$util.isString(message.allowedLocations[i]))
                                            return "allowedLocations: string[] expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates a LocationPolicy message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.AllocationPolicy.LocationPolicy} LocationPolicy
                             */
                            LocationPolicy.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.AllocationPolicy.LocationPolicy)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.AllocationPolicy.LocationPolicy();
                                if (object.allowedLocations) {
                                    if (!Array.isArray(object.allowedLocations))
                                        throw TypeError(".google.cloud.batch.v1.AllocationPolicy.LocationPolicy.allowedLocations: array expected");
                                    message.allowedLocations = [];
                                    for (var i = 0; i < object.allowedLocations.length; ++i)
                                        message.allowedLocations[i] = String(object.allowedLocations[i]);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a LocationPolicy message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.LocationPolicy} message LocationPolicy
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            LocationPolicy.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.allowedLocations = [];
                                if (message.allowedLocations && message.allowedLocations.length) {
                                    object.allowedLocations = [];
                                    for (var j = 0; j < message.allowedLocations.length; ++j)
                                        object.allowedLocations[j] = message.allowedLocations[j];
                                }
                                return object;
                            };
    
                            /**
                             * Converts this LocationPolicy to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.AllocationPolicy.LocationPolicy
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            LocationPolicy.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for LocationPolicy
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            LocationPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.AllocationPolicy.LocationPolicy";
                            };
    
                            return LocationPolicy;
                        })();
    
                        AllocationPolicy.Disk = (function() {
    
                            /**
                             * Properties of a Disk.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @interface IDisk
                             * @property {string|null} [image] Disk image
                             * @property {string|null} [snapshot] Disk snapshot
                             * @property {string|null} [type] Disk type
                             * @property {number|Long|null} [sizeGb] Disk sizeGb
                             * @property {string|null} [diskInterface] Disk diskInterface
                             */
    
                            /**
                             * Constructs a new Disk.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @classdesc Represents a Disk.
                             * @implements IDisk
                             * @constructor
                             * @param {google.cloud.batch.v1.AllocationPolicy.IDisk=} [properties] Properties to set
                             */
                            function Disk(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Disk image.
                             * @member {string|null|undefined} image
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @instance
                             */
                            Disk.prototype.image = null;
    
                            /**
                             * Disk snapshot.
                             * @member {string|null|undefined} snapshot
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @instance
                             */
                            Disk.prototype.snapshot = null;
    
                            /**
                             * Disk type.
                             * @member {string} type
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @instance
                             */
                            Disk.prototype.type = "";
    
                            /**
                             * Disk sizeGb.
                             * @member {number|Long} sizeGb
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @instance
                             */
                            Disk.prototype.sizeGb = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Disk diskInterface.
                             * @member {string} diskInterface
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @instance
                             */
                            Disk.prototype.diskInterface = "";
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * Disk dataSource.
                             * @member {"image"|"snapshot"|undefined} dataSource
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @instance
                             */
                            Object.defineProperty(Disk.prototype, "dataSource", {
                                get: $util.oneOfGetter($oneOfFields = ["image", "snapshot"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new Disk instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IDisk=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.AllocationPolicy.Disk} Disk instance
                             */
                            Disk.create = function create(properties) {
                                return new Disk(properties);
                            };
    
                            /**
                             * Encodes the specified Disk message. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.Disk.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IDisk} message Disk message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Disk.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                                if (message.sizeGb != null && Object.hasOwnProperty.call(message, "sizeGb"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.sizeGb);
                                if (message.image != null && Object.hasOwnProperty.call(message, "image"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.image);
                                if (message.snapshot != null && Object.hasOwnProperty.call(message, "snapshot"))
                                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.snapshot);
                                if (message.diskInterface != null && Object.hasOwnProperty.call(message, "diskInterface"))
                                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.diskInterface);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Disk message, length delimited. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.Disk.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IDisk} message Disk message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Disk.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Disk message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.AllocationPolicy.Disk} Disk
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Disk.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.AllocationPolicy.Disk();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 4: {
                                            message.image = reader.string();
                                            break;
                                        }
                                    case 5: {
                                            message.snapshot = reader.string();
                                            break;
                                        }
                                    case 1: {
                                            message.type = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.sizeGb = reader.int64();
                                            break;
                                        }
                                    case 6: {
                                            message.diskInterface = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Disk message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.AllocationPolicy.Disk} Disk
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Disk.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Disk message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Disk.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.image != null && message.hasOwnProperty("image")) {
                                    properties.dataSource = 1;
                                    if (!$util.isString(message.image))
                                        return "image: string expected";
                                }
                                if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                                    if (properties.dataSource === 1)
                                        return "dataSource: multiple values";
                                    properties.dataSource = 1;
                                    if (!$util.isString(message.snapshot))
                                        return "snapshot: string expected";
                                }
                                if (message.type != null && message.hasOwnProperty("type"))
                                    if (!$util.isString(message.type))
                                        return "type: string expected";
                                if (message.sizeGb != null && message.hasOwnProperty("sizeGb"))
                                    if (!$util.isInteger(message.sizeGb) && !(message.sizeGb && $util.isInteger(message.sizeGb.low) && $util.isInteger(message.sizeGb.high)))
                                        return "sizeGb: integer|Long expected";
                                if (message.diskInterface != null && message.hasOwnProperty("diskInterface"))
                                    if (!$util.isString(message.diskInterface))
                                        return "diskInterface: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a Disk message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.AllocationPolicy.Disk} Disk
                             */
                            Disk.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.AllocationPolicy.Disk)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.AllocationPolicy.Disk();
                                if (object.image != null)
                                    message.image = String(object.image);
                                if (object.snapshot != null)
                                    message.snapshot = String(object.snapshot);
                                if (object.type != null)
                                    message.type = String(object.type);
                                if (object.sizeGb != null)
                                    if ($util.Long)
                                        (message.sizeGb = $util.Long.fromValue(object.sizeGb)).unsigned = false;
                                    else if (typeof object.sizeGb === "string")
                                        message.sizeGb = parseInt(object.sizeGb, 10);
                                    else if (typeof object.sizeGb === "number")
                                        message.sizeGb = object.sizeGb;
                                    else if (typeof object.sizeGb === "object")
                                        message.sizeGb = new $util.LongBits(object.sizeGb.low >>> 0, object.sizeGb.high >>> 0).toNumber();
                                if (object.diskInterface != null)
                                    message.diskInterface = String(object.diskInterface);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Disk message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.Disk} message Disk
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Disk.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.type = "";
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.sizeGb = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.sizeGb = options.longs === String ? "0" : 0;
                                    object.diskInterface = "";
                                }
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = message.type;
                                if (message.sizeGb != null && message.hasOwnProperty("sizeGb"))
                                    if (typeof message.sizeGb === "number")
                                        object.sizeGb = options.longs === String ? String(message.sizeGb) : message.sizeGb;
                                    else
                                        object.sizeGb = options.longs === String ? $util.Long.prototype.toString.call(message.sizeGb) : options.longs === Number ? new $util.LongBits(message.sizeGb.low >>> 0, message.sizeGb.high >>> 0).toNumber() : message.sizeGb;
                                if (message.image != null && message.hasOwnProperty("image")) {
                                    object.image = message.image;
                                    if (options.oneofs)
                                        object.dataSource = "image";
                                }
                                if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                                    object.snapshot = message.snapshot;
                                    if (options.oneofs)
                                        object.dataSource = "snapshot";
                                }
                                if (message.diskInterface != null && message.hasOwnProperty("diskInterface"))
                                    object.diskInterface = message.diskInterface;
                                return object;
                            };
    
                            /**
                             * Converts this Disk to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Disk.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Disk
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Disk
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Disk.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.AllocationPolicy.Disk";
                            };
    
                            return Disk;
                        })();
    
                        AllocationPolicy.AttachedDisk = (function() {
    
                            /**
                             * Properties of an AttachedDisk.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @interface IAttachedDisk
                             * @property {google.cloud.batch.v1.AllocationPolicy.IDisk|null} [newDisk] AttachedDisk newDisk
                             * @property {string|null} [existingDisk] AttachedDisk existingDisk
                             * @property {string|null} [deviceName] AttachedDisk deviceName
                             */
    
                            /**
                             * Constructs a new AttachedDisk.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @classdesc Represents an AttachedDisk.
                             * @implements IAttachedDisk
                             * @constructor
                             * @param {google.cloud.batch.v1.AllocationPolicy.IAttachedDisk=} [properties] Properties to set
                             */
                            function AttachedDisk(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * AttachedDisk newDisk.
                             * @member {google.cloud.batch.v1.AllocationPolicy.IDisk|null|undefined} newDisk
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @instance
                             */
                            AttachedDisk.prototype.newDisk = null;
    
                            /**
                             * AttachedDisk existingDisk.
                             * @member {string|null|undefined} existingDisk
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @instance
                             */
                            AttachedDisk.prototype.existingDisk = null;
    
                            /**
                             * AttachedDisk deviceName.
                             * @member {string} deviceName
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @instance
                             */
                            AttachedDisk.prototype.deviceName = "";
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * AttachedDisk attached.
                             * @member {"newDisk"|"existingDisk"|undefined} attached
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @instance
                             */
                            Object.defineProperty(AttachedDisk.prototype, "attached", {
                                get: $util.oneOfGetter($oneOfFields = ["newDisk", "existingDisk"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new AttachedDisk instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IAttachedDisk=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.AllocationPolicy.AttachedDisk} AttachedDisk instance
                             */
                            AttachedDisk.create = function create(properties) {
                                return new AttachedDisk(properties);
                            };
    
                            /**
                             * Encodes the specified AttachedDisk message. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.AttachedDisk.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IAttachedDisk} message AttachedDisk message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AttachedDisk.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.newDisk != null && Object.hasOwnProperty.call(message, "newDisk"))
                                    $root.google.cloud.batch.v1.AllocationPolicy.Disk.encode(message.newDisk, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.existingDisk != null && Object.hasOwnProperty.call(message, "existingDisk"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.existingDisk);
                                if (message.deviceName != null && Object.hasOwnProperty.call(message, "deviceName"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.deviceName);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified AttachedDisk message, length delimited. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.AttachedDisk.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IAttachedDisk} message AttachedDisk message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AttachedDisk.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an AttachedDisk message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.AllocationPolicy.AttachedDisk} AttachedDisk
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AttachedDisk.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.AllocationPolicy.AttachedDisk();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.newDisk = $root.google.cloud.batch.v1.AllocationPolicy.Disk.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 2: {
                                            message.existingDisk = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.deviceName = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an AttachedDisk message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.AllocationPolicy.AttachedDisk} AttachedDisk
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AttachedDisk.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an AttachedDisk message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            AttachedDisk.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.newDisk != null && message.hasOwnProperty("newDisk")) {
                                    properties.attached = 1;
                                    {
                                        var error = $root.google.cloud.batch.v1.AllocationPolicy.Disk.verify(message.newDisk);
                                        if (error)
                                            return "newDisk." + error;
                                    }
                                }
                                if (message.existingDisk != null && message.hasOwnProperty("existingDisk")) {
                                    if (properties.attached === 1)
                                        return "attached: multiple values";
                                    properties.attached = 1;
                                    if (!$util.isString(message.existingDisk))
                                        return "existingDisk: string expected";
                                }
                                if (message.deviceName != null && message.hasOwnProperty("deviceName"))
                                    if (!$util.isString(message.deviceName))
                                        return "deviceName: string expected";
                                return null;
                            };
    
                            /**
                             * Creates an AttachedDisk message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.AllocationPolicy.AttachedDisk} AttachedDisk
                             */
                            AttachedDisk.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.AllocationPolicy.AttachedDisk)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.AllocationPolicy.AttachedDisk();
                                if (object.newDisk != null) {
                                    if (typeof object.newDisk !== "object")
                                        throw TypeError(".google.cloud.batch.v1.AllocationPolicy.AttachedDisk.newDisk: object expected");
                                    message.newDisk = $root.google.cloud.batch.v1.AllocationPolicy.Disk.fromObject(object.newDisk);
                                }
                                if (object.existingDisk != null)
                                    message.existingDisk = String(object.existingDisk);
                                if (object.deviceName != null)
                                    message.deviceName = String(object.deviceName);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an AttachedDisk message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.AttachedDisk} message AttachedDisk
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            AttachedDisk.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.deviceName = "";
                                if (message.newDisk != null && message.hasOwnProperty("newDisk")) {
                                    object.newDisk = $root.google.cloud.batch.v1.AllocationPolicy.Disk.toObject(message.newDisk, options);
                                    if (options.oneofs)
                                        object.attached = "newDisk";
                                }
                                if (message.existingDisk != null && message.hasOwnProperty("existingDisk")) {
                                    object.existingDisk = message.existingDisk;
                                    if (options.oneofs)
                                        object.attached = "existingDisk";
                                }
                                if (message.deviceName != null && message.hasOwnProperty("deviceName"))
                                    object.deviceName = message.deviceName;
                                return object;
                            };
    
                            /**
                             * Converts this AttachedDisk to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            AttachedDisk.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for AttachedDisk
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            AttachedDisk.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.AllocationPolicy.AttachedDisk";
                            };
    
                            return AttachedDisk;
                        })();
    
                        AllocationPolicy.Accelerator = (function() {
    
                            /**
                             * Properties of an Accelerator.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @interface IAccelerator
                             * @property {string|null} [type] Accelerator type
                             * @property {number|Long|null} [count] Accelerator count
                             * @property {boolean|null} [installGpuDrivers] Accelerator installGpuDrivers
                             * @property {string|null} [driverVersion] Accelerator driverVersion
                             */
    
                            /**
                             * Constructs a new Accelerator.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @classdesc Represents an Accelerator.
                             * @implements IAccelerator
                             * @constructor
                             * @param {google.cloud.batch.v1.AllocationPolicy.IAccelerator=} [properties] Properties to set
                             */
                            function Accelerator(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Accelerator type.
                             * @member {string} type
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @instance
                             */
                            Accelerator.prototype.type = "";
    
                            /**
                             * Accelerator count.
                             * @member {number|Long} count
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @instance
                             */
                            Accelerator.prototype.count = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Accelerator installGpuDrivers.
                             * @member {boolean} installGpuDrivers
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @instance
                             */
                            Accelerator.prototype.installGpuDrivers = false;
    
                            /**
                             * Accelerator driverVersion.
                             * @member {string} driverVersion
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @instance
                             */
                            Accelerator.prototype.driverVersion = "";
    
                            /**
                             * Creates a new Accelerator instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IAccelerator=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.AllocationPolicy.Accelerator} Accelerator instance
                             */
                            Accelerator.create = function create(properties) {
                                return new Accelerator(properties);
                            };
    
                            /**
                             * Encodes the specified Accelerator message. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.Accelerator.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IAccelerator} message Accelerator message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Accelerator.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                                if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.count);
                                if (message.installGpuDrivers != null && Object.hasOwnProperty.call(message, "installGpuDrivers"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.installGpuDrivers);
                                if (message.driverVersion != null && Object.hasOwnProperty.call(message, "driverVersion"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.driverVersion);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Accelerator message, length delimited. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.Accelerator.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IAccelerator} message Accelerator message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Accelerator.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an Accelerator message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.AllocationPolicy.Accelerator} Accelerator
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Accelerator.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.AllocationPolicy.Accelerator();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.type = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.count = reader.int64();
                                            break;
                                        }
                                    case 3: {
                                            message.installGpuDrivers = reader.bool();
                                            break;
                                        }
                                    case 4: {
                                            message.driverVersion = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an Accelerator message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.AllocationPolicy.Accelerator} Accelerator
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Accelerator.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an Accelerator message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Accelerator.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.type != null && message.hasOwnProperty("type"))
                                    if (!$util.isString(message.type))
                                        return "type: string expected";
                                if (message.count != null && message.hasOwnProperty("count"))
                                    if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))
                                        return "count: integer|Long expected";
                                if (message.installGpuDrivers != null && message.hasOwnProperty("installGpuDrivers"))
                                    if (typeof message.installGpuDrivers !== "boolean")
                                        return "installGpuDrivers: boolean expected";
                                if (message.driverVersion != null && message.hasOwnProperty("driverVersion"))
                                    if (!$util.isString(message.driverVersion))
                                        return "driverVersion: string expected";
                                return null;
                            };
    
                            /**
                             * Creates an Accelerator message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.AllocationPolicy.Accelerator} Accelerator
                             */
                            Accelerator.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.AllocationPolicy.Accelerator)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.AllocationPolicy.Accelerator();
                                if (object.type != null)
                                    message.type = String(object.type);
                                if (object.count != null)
                                    if ($util.Long)
                                        (message.count = $util.Long.fromValue(object.count)).unsigned = false;
                                    else if (typeof object.count === "string")
                                        message.count = parseInt(object.count, 10);
                                    else if (typeof object.count === "number")
                                        message.count = object.count;
                                    else if (typeof object.count === "object")
                                        message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();
                                if (object.installGpuDrivers != null)
                                    message.installGpuDrivers = Boolean(object.installGpuDrivers);
                                if (object.driverVersion != null)
                                    message.driverVersion = String(object.driverVersion);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an Accelerator message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.Accelerator} message Accelerator
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Accelerator.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.type = "";
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.count = options.longs === String ? "0" : 0;
                                    object.installGpuDrivers = false;
                                    object.driverVersion = "";
                                }
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = message.type;
                                if (message.count != null && message.hasOwnProperty("count"))
                                    if (typeof message.count === "number")
                                        object.count = options.longs === String ? String(message.count) : message.count;
                                    else
                                        object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;
                                if (message.installGpuDrivers != null && message.hasOwnProperty("installGpuDrivers"))
                                    object.installGpuDrivers = message.installGpuDrivers;
                                if (message.driverVersion != null && message.hasOwnProperty("driverVersion"))
                                    object.driverVersion = message.driverVersion;
                                return object;
                            };
    
                            /**
                             * Converts this Accelerator to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Accelerator.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Accelerator
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.AllocationPolicy.Accelerator
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Accelerator.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.AllocationPolicy.Accelerator";
                            };
    
                            return Accelerator;
                        })();
    
                        AllocationPolicy.InstancePolicy = (function() {
    
                            /**
                             * Properties of an InstancePolicy.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @interface IInstancePolicy
                             * @property {string|null} [machineType] InstancePolicy machineType
                             * @property {string|null} [minCpuPlatform] InstancePolicy minCpuPlatform
                             * @property {google.cloud.batch.v1.AllocationPolicy.ProvisioningModel|null} [provisioningModel] InstancePolicy provisioningModel
                             * @property {Array.<google.cloud.batch.v1.AllocationPolicy.IAccelerator>|null} [accelerators] InstancePolicy accelerators
                             * @property {google.cloud.batch.v1.AllocationPolicy.IDisk|null} [bootDisk] InstancePolicy bootDisk
                             * @property {Array.<google.cloud.batch.v1.AllocationPolicy.IAttachedDisk>|null} [disks] InstancePolicy disks
                             */
    
                            /**
                             * Constructs a new InstancePolicy.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @classdesc Represents an InstancePolicy.
                             * @implements IInstancePolicy
                             * @constructor
                             * @param {google.cloud.batch.v1.AllocationPolicy.IInstancePolicy=} [properties] Properties to set
                             */
                            function InstancePolicy(properties) {
                                this.accelerators = [];
                                this.disks = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * InstancePolicy machineType.
                             * @member {string} machineType
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.machineType = "";
    
                            /**
                             * InstancePolicy minCpuPlatform.
                             * @member {string} minCpuPlatform
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.minCpuPlatform = "";
    
                            /**
                             * InstancePolicy provisioningModel.
                             * @member {google.cloud.batch.v1.AllocationPolicy.ProvisioningModel} provisioningModel
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.provisioningModel = 0;
    
                            /**
                             * InstancePolicy accelerators.
                             * @member {Array.<google.cloud.batch.v1.AllocationPolicy.IAccelerator>} accelerators
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.accelerators = $util.emptyArray;
    
                            /**
                             * InstancePolicy bootDisk.
                             * @member {google.cloud.batch.v1.AllocationPolicy.IDisk|null|undefined} bootDisk
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.bootDisk = null;
    
                            /**
                             * InstancePolicy disks.
                             * @member {Array.<google.cloud.batch.v1.AllocationPolicy.IAttachedDisk>} disks
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.disks = $util.emptyArray;
    
                            /**
                             * Creates a new InstancePolicy instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IInstancePolicy=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.AllocationPolicy.InstancePolicy} InstancePolicy instance
                             */
                            InstancePolicy.create = function create(properties) {
                                return new InstancePolicy(properties);
                            };
    
                            /**
                             * Encodes the specified InstancePolicy message. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.InstancePolicy.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IInstancePolicy} message InstancePolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstancePolicy.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.machineType != null && Object.hasOwnProperty.call(message, "machineType"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.machineType);
                                if (message.minCpuPlatform != null && Object.hasOwnProperty.call(message, "minCpuPlatform"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.minCpuPlatform);
                                if (message.provisioningModel != null && Object.hasOwnProperty.call(message, "provisioningModel"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.provisioningModel);
                                if (message.accelerators != null && message.accelerators.length)
                                    for (var i = 0; i < message.accelerators.length; ++i)
                                        $root.google.cloud.batch.v1.AllocationPolicy.Accelerator.encode(message.accelerators[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                if (message.disks != null && message.disks.length)
                                    for (var i = 0; i < message.disks.length; ++i)
                                        $root.google.cloud.batch.v1.AllocationPolicy.AttachedDisk.encode(message.disks[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                                if (message.bootDisk != null && Object.hasOwnProperty.call(message, "bootDisk"))
                                    $root.google.cloud.batch.v1.AllocationPolicy.Disk.encode(message.bootDisk, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified InstancePolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.InstancePolicy.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IInstancePolicy} message InstancePolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstancePolicy.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an InstancePolicy message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.AllocationPolicy.InstancePolicy} InstancePolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstancePolicy.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicy();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 2: {
                                            message.machineType = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.minCpuPlatform = reader.string();
                                            break;
                                        }
                                    case 4: {
                                            message.provisioningModel = reader.int32();
                                            break;
                                        }
                                    case 5: {
                                            if (!(message.accelerators && message.accelerators.length))
                                                message.accelerators = [];
                                            message.accelerators.push($root.google.cloud.batch.v1.AllocationPolicy.Accelerator.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 8: {
                                            message.bootDisk = $root.google.cloud.batch.v1.AllocationPolicy.Disk.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 6: {
                                            if (!(message.disks && message.disks.length))
                                                message.disks = [];
                                            message.disks.push($root.google.cloud.batch.v1.AllocationPolicy.AttachedDisk.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an InstancePolicy message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.AllocationPolicy.InstancePolicy} InstancePolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstancePolicy.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an InstancePolicy message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            InstancePolicy.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.machineType != null && message.hasOwnProperty("machineType"))
                                    if (!$util.isString(message.machineType))
                                        return "machineType: string expected";
                                if (message.minCpuPlatform != null && message.hasOwnProperty("minCpuPlatform"))
                                    if (!$util.isString(message.minCpuPlatform))
                                        return "minCpuPlatform: string expected";
                                if (message.provisioningModel != null && message.hasOwnProperty("provisioningModel"))
                                    switch (message.provisioningModel) {
                                    default:
                                        return "provisioningModel: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                                if (message.accelerators != null && message.hasOwnProperty("accelerators")) {
                                    if (!Array.isArray(message.accelerators))
                                        return "accelerators: array expected";
                                    for (var i = 0; i < message.accelerators.length; ++i) {
                                        var error = $root.google.cloud.batch.v1.AllocationPolicy.Accelerator.verify(message.accelerators[i]);
                                        if (error)
                                            return "accelerators." + error;
                                    }
                                }
                                if (message.bootDisk != null && message.hasOwnProperty("bootDisk")) {
                                    var error = $root.google.cloud.batch.v1.AllocationPolicy.Disk.verify(message.bootDisk);
                                    if (error)
                                        return "bootDisk." + error;
                                }
                                if (message.disks != null && message.hasOwnProperty("disks")) {
                                    if (!Array.isArray(message.disks))
                                        return "disks: array expected";
                                    for (var i = 0; i < message.disks.length; ++i) {
                                        var error = $root.google.cloud.batch.v1.AllocationPolicy.AttachedDisk.verify(message.disks[i]);
                                        if (error)
                                            return "disks." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates an InstancePolicy message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.AllocationPolicy.InstancePolicy} InstancePolicy
                             */
                            InstancePolicy.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicy)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicy();
                                if (object.machineType != null)
                                    message.machineType = String(object.machineType);
                                if (object.minCpuPlatform != null)
                                    message.minCpuPlatform = String(object.minCpuPlatform);
                                switch (object.provisioningModel) {
                                default:
                                    if (typeof object.provisioningModel === "number") {
                                        message.provisioningModel = object.provisioningModel;
                                        break;
                                    }
                                    break;
                                case "PROVISIONING_MODEL_UNSPECIFIED":
                                case 0:
                                    message.provisioningModel = 0;
                                    break;
                                case "STANDARD":
                                case 1:
                                    message.provisioningModel = 1;
                                    break;
                                case "SPOT":
                                case 2:
                                    message.provisioningModel = 2;
                                    break;
                                case "PREEMPTIBLE":
                                case 3:
                                    message.provisioningModel = 3;
                                    break;
                                }
                                if (object.accelerators) {
                                    if (!Array.isArray(object.accelerators))
                                        throw TypeError(".google.cloud.batch.v1.AllocationPolicy.InstancePolicy.accelerators: array expected");
                                    message.accelerators = [];
                                    for (var i = 0; i < object.accelerators.length; ++i) {
                                        if (typeof object.accelerators[i] !== "object")
                                            throw TypeError(".google.cloud.batch.v1.AllocationPolicy.InstancePolicy.accelerators: object expected");
                                        message.accelerators[i] = $root.google.cloud.batch.v1.AllocationPolicy.Accelerator.fromObject(object.accelerators[i]);
                                    }
                                }
                                if (object.bootDisk != null) {
                                    if (typeof object.bootDisk !== "object")
                                        throw TypeError(".google.cloud.batch.v1.AllocationPolicy.InstancePolicy.bootDisk: object expected");
                                    message.bootDisk = $root.google.cloud.batch.v1.AllocationPolicy.Disk.fromObject(object.bootDisk);
                                }
                                if (object.disks) {
                                    if (!Array.isArray(object.disks))
                                        throw TypeError(".google.cloud.batch.v1.AllocationPolicy.InstancePolicy.disks: array expected");
                                    message.disks = [];
                                    for (var i = 0; i < object.disks.length; ++i) {
                                        if (typeof object.disks[i] !== "object")
                                            throw TypeError(".google.cloud.batch.v1.AllocationPolicy.InstancePolicy.disks: object expected");
                                        message.disks[i] = $root.google.cloud.batch.v1.AllocationPolicy.AttachedDisk.fromObject(object.disks[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an InstancePolicy message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.InstancePolicy} message InstancePolicy
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            InstancePolicy.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults) {
                                    object.accelerators = [];
                                    object.disks = [];
                                }
                                if (options.defaults) {
                                    object.machineType = "";
                                    object.minCpuPlatform = "";
                                    object.provisioningModel = options.enums === String ? "PROVISIONING_MODEL_UNSPECIFIED" : 0;
                                    object.bootDisk = null;
                                }
                                if (message.machineType != null && message.hasOwnProperty("machineType"))
                                    object.machineType = message.machineType;
                                if (message.minCpuPlatform != null && message.hasOwnProperty("minCpuPlatform"))
                                    object.minCpuPlatform = message.minCpuPlatform;
                                if (message.provisioningModel != null && message.hasOwnProperty("provisioningModel"))
                                    object.provisioningModel = options.enums === String ? $root.google.cloud.batch.v1.AllocationPolicy.ProvisioningModel[message.provisioningModel] === undefined ? message.provisioningModel : $root.google.cloud.batch.v1.AllocationPolicy.ProvisioningModel[message.provisioningModel] : message.provisioningModel;
                                if (message.accelerators && message.accelerators.length) {
                                    object.accelerators = [];
                                    for (var j = 0; j < message.accelerators.length; ++j)
                                        object.accelerators[j] = $root.google.cloud.batch.v1.AllocationPolicy.Accelerator.toObject(message.accelerators[j], options);
                                }
                                if (message.disks && message.disks.length) {
                                    object.disks = [];
                                    for (var j = 0; j < message.disks.length; ++j)
                                        object.disks[j] = $root.google.cloud.batch.v1.AllocationPolicy.AttachedDisk.toObject(message.disks[j], options);
                                }
                                if (message.bootDisk != null && message.hasOwnProperty("bootDisk"))
                                    object.bootDisk = $root.google.cloud.batch.v1.AllocationPolicy.Disk.toObject(message.bootDisk, options);
                                return object;
                            };
    
                            /**
                             * Converts this InstancePolicy to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            InstancePolicy.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for InstancePolicy
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            InstancePolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.AllocationPolicy.InstancePolicy";
                            };
    
                            return InstancePolicy;
                        })();
    
                        AllocationPolicy.InstancePolicyOrTemplate = (function() {
    
                            /**
                             * Properties of an InstancePolicyOrTemplate.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @interface IInstancePolicyOrTemplate
                             * @property {google.cloud.batch.v1.AllocationPolicy.IInstancePolicy|null} [policy] InstancePolicyOrTemplate policy
                             * @property {string|null} [instanceTemplate] InstancePolicyOrTemplate instanceTemplate
                             * @property {boolean|null} [installGpuDrivers] InstancePolicyOrTemplate installGpuDrivers
                             */
    
                            /**
                             * Constructs a new InstancePolicyOrTemplate.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @classdesc Represents an InstancePolicyOrTemplate.
                             * @implements IInstancePolicyOrTemplate
                             * @constructor
                             * @param {google.cloud.batch.v1.AllocationPolicy.IInstancePolicyOrTemplate=} [properties] Properties to set
                             */
                            function InstancePolicyOrTemplate(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * InstancePolicyOrTemplate policy.
                             * @member {google.cloud.batch.v1.AllocationPolicy.IInstancePolicy|null|undefined} policy
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @instance
                             */
                            InstancePolicyOrTemplate.prototype.policy = null;
    
                            /**
                             * InstancePolicyOrTemplate instanceTemplate.
                             * @member {string|null|undefined} instanceTemplate
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @instance
                             */
                            InstancePolicyOrTemplate.prototype.instanceTemplate = null;
    
                            /**
                             * InstancePolicyOrTemplate installGpuDrivers.
                             * @member {boolean} installGpuDrivers
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @instance
                             */
                            InstancePolicyOrTemplate.prototype.installGpuDrivers = false;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * InstancePolicyOrTemplate policyTemplate.
                             * @member {"policy"|"instanceTemplate"|undefined} policyTemplate
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @instance
                             */
                            Object.defineProperty(InstancePolicyOrTemplate.prototype, "policyTemplate", {
                                get: $util.oneOfGetter($oneOfFields = ["policy", "instanceTemplate"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new InstancePolicyOrTemplate instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IInstancePolicyOrTemplate=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate} InstancePolicyOrTemplate instance
                             */
                            InstancePolicyOrTemplate.create = function create(properties) {
                                return new InstancePolicyOrTemplate(properties);
                            };
    
                            /**
                             * Encodes the specified InstancePolicyOrTemplate message. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IInstancePolicyOrTemplate} message InstancePolicyOrTemplate message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstancePolicyOrTemplate.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.policy != null && Object.hasOwnProperty.call(message, "policy"))
                                    $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicy.encode(message.policy, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.instanceTemplate != null && Object.hasOwnProperty.call(message, "instanceTemplate"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.instanceTemplate);
                                if (message.installGpuDrivers != null && Object.hasOwnProperty.call(message, "installGpuDrivers"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.installGpuDrivers);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified InstancePolicyOrTemplate message, length delimited. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IInstancePolicyOrTemplate} message InstancePolicyOrTemplate message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstancePolicyOrTemplate.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an InstancePolicyOrTemplate message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate} InstancePolicyOrTemplate
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstancePolicyOrTemplate.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.policy = $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicy.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 2: {
                                            message.instanceTemplate = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.installGpuDrivers = reader.bool();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an InstancePolicyOrTemplate message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate} InstancePolicyOrTemplate
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstancePolicyOrTemplate.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an InstancePolicyOrTemplate message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            InstancePolicyOrTemplate.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.policy != null && message.hasOwnProperty("policy")) {
                                    properties.policyTemplate = 1;
                                    {
                                        var error = $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicy.verify(message.policy);
                                        if (error)
                                            return "policy." + error;
                                    }
                                }
                                if (message.instanceTemplate != null && message.hasOwnProperty("instanceTemplate")) {
                                    if (properties.policyTemplate === 1)
                                        return "policyTemplate: multiple values";
                                    properties.policyTemplate = 1;
                                    if (!$util.isString(message.instanceTemplate))
                                        return "instanceTemplate: string expected";
                                }
                                if (message.installGpuDrivers != null && message.hasOwnProperty("installGpuDrivers"))
                                    if (typeof message.installGpuDrivers !== "boolean")
                                        return "installGpuDrivers: boolean expected";
                                return null;
                            };
    
                            /**
                             * Creates an InstancePolicyOrTemplate message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate} InstancePolicyOrTemplate
                             */
                            InstancePolicyOrTemplate.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate();
                                if (object.policy != null) {
                                    if (typeof object.policy !== "object")
                                        throw TypeError(".google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate.policy: object expected");
                                    message.policy = $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicy.fromObject(object.policy);
                                }
                                if (object.instanceTemplate != null)
                                    message.instanceTemplate = String(object.instanceTemplate);
                                if (object.installGpuDrivers != null)
                                    message.installGpuDrivers = Boolean(object.installGpuDrivers);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an InstancePolicyOrTemplate message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate} message InstancePolicyOrTemplate
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            InstancePolicyOrTemplate.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.installGpuDrivers = false;
                                if (message.policy != null && message.hasOwnProperty("policy")) {
                                    object.policy = $root.google.cloud.batch.v1.AllocationPolicy.InstancePolicy.toObject(message.policy, options);
                                    if (options.oneofs)
                                        object.policyTemplate = "policy";
                                }
                                if (message.instanceTemplate != null && message.hasOwnProperty("instanceTemplate")) {
                                    object.instanceTemplate = message.instanceTemplate;
                                    if (options.oneofs)
                                        object.policyTemplate = "instanceTemplate";
                                }
                                if (message.installGpuDrivers != null && message.hasOwnProperty("installGpuDrivers"))
                                    object.installGpuDrivers = message.installGpuDrivers;
                                return object;
                            };
    
                            /**
                             * Converts this InstancePolicyOrTemplate to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            InstancePolicyOrTemplate.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for InstancePolicyOrTemplate
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            InstancePolicyOrTemplate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.AllocationPolicy.InstancePolicyOrTemplate";
                            };
    
                            return InstancePolicyOrTemplate;
                        })();
    
                        AllocationPolicy.NetworkInterface = (function() {
    
                            /**
                             * Properties of a NetworkInterface.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @interface INetworkInterface
                             * @property {string|null} [network] NetworkInterface network
                             * @property {string|null} [subnetwork] NetworkInterface subnetwork
                             * @property {boolean|null} [noExternalIpAddress] NetworkInterface noExternalIpAddress
                             */
    
                            /**
                             * Constructs a new NetworkInterface.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @classdesc Represents a NetworkInterface.
                             * @implements INetworkInterface
                             * @constructor
                             * @param {google.cloud.batch.v1.AllocationPolicy.INetworkInterface=} [properties] Properties to set
                             */
                            function NetworkInterface(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * NetworkInterface network.
                             * @member {string} network
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @instance
                             */
                            NetworkInterface.prototype.network = "";
    
                            /**
                             * NetworkInterface subnetwork.
                             * @member {string} subnetwork
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @instance
                             */
                            NetworkInterface.prototype.subnetwork = "";
    
                            /**
                             * NetworkInterface noExternalIpAddress.
                             * @member {boolean} noExternalIpAddress
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @instance
                             */
                            NetworkInterface.prototype.noExternalIpAddress = false;
    
                            /**
                             * Creates a new NetworkInterface instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.INetworkInterface=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.AllocationPolicy.NetworkInterface} NetworkInterface instance
                             */
                            NetworkInterface.create = function create(properties) {
                                return new NetworkInterface(properties);
                            };
    
                            /**
                             * Encodes the specified NetworkInterface message. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.NetworkInterface.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.INetworkInterface} message NetworkInterface message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NetworkInterface.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.network != null && Object.hasOwnProperty.call(message, "network"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.network);
                                if (message.subnetwork != null && Object.hasOwnProperty.call(message, "subnetwork"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.subnetwork);
                                if (message.noExternalIpAddress != null && Object.hasOwnProperty.call(message, "noExternalIpAddress"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.noExternalIpAddress);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified NetworkInterface message, length delimited. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.NetworkInterface.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.INetworkInterface} message NetworkInterface message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NetworkInterface.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a NetworkInterface message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.AllocationPolicy.NetworkInterface} NetworkInterface
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NetworkInterface.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.AllocationPolicy.NetworkInterface();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.network = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.subnetwork = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.noExternalIpAddress = reader.bool();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a NetworkInterface message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.AllocationPolicy.NetworkInterface} NetworkInterface
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NetworkInterface.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a NetworkInterface message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            NetworkInterface.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.network != null && message.hasOwnProperty("network"))
                                    if (!$util.isString(message.network))
                                        return "network: string expected";
                                if (message.subnetwork != null && message.hasOwnProperty("subnetwork"))
                                    if (!$util.isString(message.subnetwork))
                                        return "subnetwork: string expected";
                                if (message.noExternalIpAddress != null && message.hasOwnProperty("noExternalIpAddress"))
                                    if (typeof message.noExternalIpAddress !== "boolean")
                                        return "noExternalIpAddress: boolean expected";
                                return null;
                            };
    
                            /**
                             * Creates a NetworkInterface message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.AllocationPolicy.NetworkInterface} NetworkInterface
                             */
                            NetworkInterface.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.AllocationPolicy.NetworkInterface)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.AllocationPolicy.NetworkInterface();
                                if (object.network != null)
                                    message.network = String(object.network);
                                if (object.subnetwork != null)
                                    message.subnetwork = String(object.subnetwork);
                                if (object.noExternalIpAddress != null)
                                    message.noExternalIpAddress = Boolean(object.noExternalIpAddress);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a NetworkInterface message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.NetworkInterface} message NetworkInterface
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            NetworkInterface.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.network = "";
                                    object.subnetwork = "";
                                    object.noExternalIpAddress = false;
                                }
                                if (message.network != null && message.hasOwnProperty("network"))
                                    object.network = message.network;
                                if (message.subnetwork != null && message.hasOwnProperty("subnetwork"))
                                    object.subnetwork = message.subnetwork;
                                if (message.noExternalIpAddress != null && message.hasOwnProperty("noExternalIpAddress"))
                                    object.noExternalIpAddress = message.noExternalIpAddress;
                                return object;
                            };
    
                            /**
                             * Converts this NetworkInterface to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            NetworkInterface.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for NetworkInterface
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            NetworkInterface.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.AllocationPolicy.NetworkInterface";
                            };
    
                            return NetworkInterface;
                        })();
    
                        AllocationPolicy.NetworkPolicy = (function() {
    
                            /**
                             * Properties of a NetworkPolicy.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @interface INetworkPolicy
                             * @property {Array.<google.cloud.batch.v1.AllocationPolicy.INetworkInterface>|null} [networkInterfaces] NetworkPolicy networkInterfaces
                             */
    
                            /**
                             * Constructs a new NetworkPolicy.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @classdesc Represents a NetworkPolicy.
                             * @implements INetworkPolicy
                             * @constructor
                             * @param {google.cloud.batch.v1.AllocationPolicy.INetworkPolicy=} [properties] Properties to set
                             */
                            function NetworkPolicy(properties) {
                                this.networkInterfaces = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * NetworkPolicy networkInterfaces.
                             * @member {Array.<google.cloud.batch.v1.AllocationPolicy.INetworkInterface>} networkInterfaces
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkPolicy
                             * @instance
                             */
                            NetworkPolicy.prototype.networkInterfaces = $util.emptyArray;
    
                            /**
                             * Creates a new NetworkPolicy instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.INetworkPolicy=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.AllocationPolicy.NetworkPolicy} NetworkPolicy instance
                             */
                            NetworkPolicy.create = function create(properties) {
                                return new NetworkPolicy(properties);
                            };
    
                            /**
                             * Encodes the specified NetworkPolicy message. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.NetworkPolicy.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.INetworkPolicy} message NetworkPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NetworkPolicy.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.networkInterfaces != null && message.networkInterfaces.length)
                                    for (var i = 0; i < message.networkInterfaces.length; ++i)
                                        $root.google.cloud.batch.v1.AllocationPolicy.NetworkInterface.encode(message.networkInterfaces[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified NetworkPolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.NetworkPolicy.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.INetworkPolicy} message NetworkPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NetworkPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a NetworkPolicy message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.AllocationPolicy.NetworkPolicy} NetworkPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NetworkPolicy.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.AllocationPolicy.NetworkPolicy();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            if (!(message.networkInterfaces && message.networkInterfaces.length))
                                                message.networkInterfaces = [];
                                            message.networkInterfaces.push($root.google.cloud.batch.v1.AllocationPolicy.NetworkInterface.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a NetworkPolicy message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.AllocationPolicy.NetworkPolicy} NetworkPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NetworkPolicy.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a NetworkPolicy message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            NetworkPolicy.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.networkInterfaces != null && message.hasOwnProperty("networkInterfaces")) {
                                    if (!Array.isArray(message.networkInterfaces))
                                        return "networkInterfaces: array expected";
                                    for (var i = 0; i < message.networkInterfaces.length; ++i) {
                                        var error = $root.google.cloud.batch.v1.AllocationPolicy.NetworkInterface.verify(message.networkInterfaces[i]);
                                        if (error)
                                            return "networkInterfaces." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a NetworkPolicy message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.AllocationPolicy.NetworkPolicy} NetworkPolicy
                             */
                            NetworkPolicy.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.AllocationPolicy.NetworkPolicy)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.AllocationPolicy.NetworkPolicy();
                                if (object.networkInterfaces) {
                                    if (!Array.isArray(object.networkInterfaces))
                                        throw TypeError(".google.cloud.batch.v1.AllocationPolicy.NetworkPolicy.networkInterfaces: array expected");
                                    message.networkInterfaces = [];
                                    for (var i = 0; i < object.networkInterfaces.length; ++i) {
                                        if (typeof object.networkInterfaces[i] !== "object")
                                            throw TypeError(".google.cloud.batch.v1.AllocationPolicy.NetworkPolicy.networkInterfaces: object expected");
                                        message.networkInterfaces[i] = $root.google.cloud.batch.v1.AllocationPolicy.NetworkInterface.fromObject(object.networkInterfaces[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a NetworkPolicy message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.NetworkPolicy} message NetworkPolicy
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            NetworkPolicy.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.networkInterfaces = [];
                                if (message.networkInterfaces && message.networkInterfaces.length) {
                                    object.networkInterfaces = [];
                                    for (var j = 0; j < message.networkInterfaces.length; ++j)
                                        object.networkInterfaces[j] = $root.google.cloud.batch.v1.AllocationPolicy.NetworkInterface.toObject(message.networkInterfaces[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this NetworkPolicy to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkPolicy
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            NetworkPolicy.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for NetworkPolicy
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            NetworkPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.AllocationPolicy.NetworkPolicy";
                            };
    
                            return NetworkPolicy;
                        })();
    
                        AllocationPolicy.PlacementPolicy = (function() {
    
                            /**
                             * Properties of a PlacementPolicy.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @interface IPlacementPolicy
                             * @property {string|null} [collocation] PlacementPolicy collocation
                             * @property {number|Long|null} [maxDistance] PlacementPolicy maxDistance
                             */
    
                            /**
                             * Constructs a new PlacementPolicy.
                             * @memberof google.cloud.batch.v1.AllocationPolicy
                             * @classdesc Represents a PlacementPolicy.
                             * @implements IPlacementPolicy
                             * @constructor
                             * @param {google.cloud.batch.v1.AllocationPolicy.IPlacementPolicy=} [properties] Properties to set
                             */
                            function PlacementPolicy(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * PlacementPolicy collocation.
                             * @member {string} collocation
                             * @memberof google.cloud.batch.v1.AllocationPolicy.PlacementPolicy
                             * @instance
                             */
                            PlacementPolicy.prototype.collocation = "";
    
                            /**
                             * PlacementPolicy maxDistance.
                             * @member {number|Long} maxDistance
                             * @memberof google.cloud.batch.v1.AllocationPolicy.PlacementPolicy
                             * @instance
                             */
                            PlacementPolicy.prototype.maxDistance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Creates a new PlacementPolicy instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IPlacementPolicy=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.AllocationPolicy.PlacementPolicy} PlacementPolicy instance
                             */
                            PlacementPolicy.create = function create(properties) {
                                return new PlacementPolicy(properties);
                            };
    
                            /**
                             * Encodes the specified PlacementPolicy message. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.PlacementPolicy.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IPlacementPolicy} message PlacementPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PlacementPolicy.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.collocation != null && Object.hasOwnProperty.call(message, "collocation"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.collocation);
                                if (message.maxDistance != null && Object.hasOwnProperty.call(message, "maxDistance"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.maxDistance);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified PlacementPolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1.AllocationPolicy.PlacementPolicy.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.IPlacementPolicy} message PlacementPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PlacementPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a PlacementPolicy message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.AllocationPolicy.PlacementPolicy} PlacementPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PlacementPolicy.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.AllocationPolicy.PlacementPolicy();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.collocation = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.maxDistance = reader.int64();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a PlacementPolicy message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.AllocationPolicy.PlacementPolicy} PlacementPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PlacementPolicy.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a PlacementPolicy message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            PlacementPolicy.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.collocation != null && message.hasOwnProperty("collocation"))
                                    if (!$util.isString(message.collocation))
                                        return "collocation: string expected";
                                if (message.maxDistance != null && message.hasOwnProperty("maxDistance"))
                                    if (!$util.isInteger(message.maxDistance) && !(message.maxDistance && $util.isInteger(message.maxDistance.low) && $util.isInteger(message.maxDistance.high)))
                                        return "maxDistance: integer|Long expected";
                                return null;
                            };
    
                            /**
                             * Creates a PlacementPolicy message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.AllocationPolicy.PlacementPolicy} PlacementPolicy
                             */
                            PlacementPolicy.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.AllocationPolicy.PlacementPolicy)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.AllocationPolicy.PlacementPolicy();
                                if (object.collocation != null)
                                    message.collocation = String(object.collocation);
                                if (object.maxDistance != null)
                                    if ($util.Long)
                                        (message.maxDistance = $util.Long.fromValue(object.maxDistance)).unsigned = false;
                                    else if (typeof object.maxDistance === "string")
                                        message.maxDistance = parseInt(object.maxDistance, 10);
                                    else if (typeof object.maxDistance === "number")
                                        message.maxDistance = object.maxDistance;
                                    else if (typeof object.maxDistance === "object")
                                        message.maxDistance = new $util.LongBits(object.maxDistance.low >>> 0, object.maxDistance.high >>> 0).toNumber();
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a PlacementPolicy message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {google.cloud.batch.v1.AllocationPolicy.PlacementPolicy} message PlacementPolicy
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            PlacementPolicy.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.collocation = "";
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.maxDistance = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.maxDistance = options.longs === String ? "0" : 0;
                                }
                                if (message.collocation != null && message.hasOwnProperty("collocation"))
                                    object.collocation = message.collocation;
                                if (message.maxDistance != null && message.hasOwnProperty("maxDistance"))
                                    if (typeof message.maxDistance === "number")
                                        object.maxDistance = options.longs === String ? String(message.maxDistance) : message.maxDistance;
                                    else
                                        object.maxDistance = options.longs === String ? $util.Long.prototype.toString.call(message.maxDistance) : options.longs === Number ? new $util.LongBits(message.maxDistance.low >>> 0, message.maxDistance.high >>> 0).toNumber() : message.maxDistance;
                                return object;
                            };
    
                            /**
                             * Converts this PlacementPolicy to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.AllocationPolicy.PlacementPolicy
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            PlacementPolicy.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for PlacementPolicy
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            PlacementPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.AllocationPolicy.PlacementPolicy";
                            };
    
                            return PlacementPolicy;
                        })();
    
                        /**
                         * ProvisioningModel enum.
                         * @name google.cloud.batch.v1.AllocationPolicy.ProvisioningModel
                         * @enum {number}
                         * @property {number} PROVISIONING_MODEL_UNSPECIFIED=0 PROVISIONING_MODEL_UNSPECIFIED value
                         * @property {number} STANDARD=1 STANDARD value
                         * @property {number} SPOT=2 SPOT value
                         * @property {number} PREEMPTIBLE=3 PREEMPTIBLE value
                         */
                        AllocationPolicy.ProvisioningModel = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "PROVISIONING_MODEL_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "STANDARD"] = 1;
                            values[valuesById[2] = "SPOT"] = 2;
                            values[valuesById[3] = "PREEMPTIBLE"] = 3;
                            return values;
                        })();
    
                        return AllocationPolicy;
                    })();
    
                    v1.TaskGroup = (function() {
    
                        /**
                         * Properties of a TaskGroup.
                         * @memberof google.cloud.batch.v1
                         * @interface ITaskGroup
                         * @property {string|null} [name] TaskGroup name
                         * @property {google.cloud.batch.v1.ITaskSpec|null} [taskSpec] TaskGroup taskSpec
                         * @property {number|Long|null} [taskCount] TaskGroup taskCount
                         * @property {number|Long|null} [parallelism] TaskGroup parallelism
                         * @property {google.cloud.batch.v1.TaskGroup.SchedulingPolicy|null} [schedulingPolicy] TaskGroup schedulingPolicy
                         * @property {Array.<google.cloud.batch.v1.IEnvironment>|null} [taskEnvironments] TaskGroup taskEnvironments
                         * @property {number|Long|null} [taskCountPerNode] TaskGroup taskCountPerNode
                         * @property {boolean|null} [requireHostsFile] TaskGroup requireHostsFile
                         * @property {boolean|null} [permissiveSsh] TaskGroup permissiveSsh
                         */
    
                        /**
                         * Constructs a new TaskGroup.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a TaskGroup.
                         * @implements ITaskGroup
                         * @constructor
                         * @param {google.cloud.batch.v1.ITaskGroup=} [properties] Properties to set
                         */
                        function TaskGroup(properties) {
                            this.taskEnvironments = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TaskGroup name.
                         * @member {string} name
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.name = "";
    
                        /**
                         * TaskGroup taskSpec.
                         * @member {google.cloud.batch.v1.ITaskSpec|null|undefined} taskSpec
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.taskSpec = null;
    
                        /**
                         * TaskGroup taskCount.
                         * @member {number|Long} taskCount
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.taskCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * TaskGroup parallelism.
                         * @member {number|Long} parallelism
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.parallelism = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * TaskGroup schedulingPolicy.
                         * @member {google.cloud.batch.v1.TaskGroup.SchedulingPolicy} schedulingPolicy
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.schedulingPolicy = 0;
    
                        /**
                         * TaskGroup taskEnvironments.
                         * @member {Array.<google.cloud.batch.v1.IEnvironment>} taskEnvironments
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.taskEnvironments = $util.emptyArray;
    
                        /**
                         * TaskGroup taskCountPerNode.
                         * @member {number|Long} taskCountPerNode
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.taskCountPerNode = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * TaskGroup requireHostsFile.
                         * @member {boolean} requireHostsFile
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.requireHostsFile = false;
    
                        /**
                         * TaskGroup permissiveSsh.
                         * @member {boolean} permissiveSsh
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.permissiveSsh = false;
    
                        /**
                         * Creates a new TaskGroup instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @static
                         * @param {google.cloud.batch.v1.ITaskGroup=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.TaskGroup} TaskGroup instance
                         */
                        TaskGroup.create = function create(properties) {
                            return new TaskGroup(properties);
                        };
    
                        /**
                         * Encodes the specified TaskGroup message. Does not implicitly {@link google.cloud.batch.v1.TaskGroup.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @static
                         * @param {google.cloud.batch.v1.ITaskGroup} message TaskGroup message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskGroup.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.taskSpec != null && Object.hasOwnProperty.call(message, "taskSpec"))
                                $root.google.cloud.batch.v1.TaskSpec.encode(message.taskSpec, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.taskCount != null && Object.hasOwnProperty.call(message, "taskCount"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.taskCount);
                            if (message.parallelism != null && Object.hasOwnProperty.call(message, "parallelism"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.parallelism);
                            if (message.schedulingPolicy != null && Object.hasOwnProperty.call(message, "schedulingPolicy"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.schedulingPolicy);
                            if (message.taskEnvironments != null && message.taskEnvironments.length)
                                for (var i = 0; i < message.taskEnvironments.length; ++i)
                                    $root.google.cloud.batch.v1.Environment.encode(message.taskEnvironments[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.taskCountPerNode != null && Object.hasOwnProperty.call(message, "taskCountPerNode"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.taskCountPerNode);
                            if (message.requireHostsFile != null && Object.hasOwnProperty.call(message, "requireHostsFile"))
                                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.requireHostsFile);
                            if (message.permissiveSsh != null && Object.hasOwnProperty.call(message, "permissiveSsh"))
                                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.permissiveSsh);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TaskGroup message, length delimited. Does not implicitly {@link google.cloud.batch.v1.TaskGroup.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @static
                         * @param {google.cloud.batch.v1.ITaskGroup} message TaskGroup message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskGroup.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TaskGroup message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.TaskGroup} TaskGroup
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskGroup.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.TaskGroup();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.taskSpec = $root.google.cloud.batch.v1.TaskSpec.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.taskCount = reader.int64();
                                        break;
                                    }
                                case 5: {
                                        message.parallelism = reader.int64();
                                        break;
                                    }
                                case 6: {
                                        message.schedulingPolicy = reader.int32();
                                        break;
                                    }
                                case 9: {
                                        if (!(message.taskEnvironments && message.taskEnvironments.length))
                                            message.taskEnvironments = [];
                                        message.taskEnvironments.push($root.google.cloud.batch.v1.Environment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 10: {
                                        message.taskCountPerNode = reader.int64();
                                        break;
                                    }
                                case 11: {
                                        message.requireHostsFile = reader.bool();
                                        break;
                                    }
                                case 12: {
                                        message.permissiveSsh = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TaskGroup message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.TaskGroup} TaskGroup
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskGroup.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TaskGroup message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TaskGroup.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.taskSpec != null && message.hasOwnProperty("taskSpec")) {
                                var error = $root.google.cloud.batch.v1.TaskSpec.verify(message.taskSpec);
                                if (error)
                                    return "taskSpec." + error;
                            }
                            if (message.taskCount != null && message.hasOwnProperty("taskCount"))
                                if (!$util.isInteger(message.taskCount) && !(message.taskCount && $util.isInteger(message.taskCount.low) && $util.isInteger(message.taskCount.high)))
                                    return "taskCount: integer|Long expected";
                            if (message.parallelism != null && message.hasOwnProperty("parallelism"))
                                if (!$util.isInteger(message.parallelism) && !(message.parallelism && $util.isInteger(message.parallelism.low) && $util.isInteger(message.parallelism.high)))
                                    return "parallelism: integer|Long expected";
                            if (message.schedulingPolicy != null && message.hasOwnProperty("schedulingPolicy"))
                                switch (message.schedulingPolicy) {
                                default:
                                    return "schedulingPolicy: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.taskEnvironments != null && message.hasOwnProperty("taskEnvironments")) {
                                if (!Array.isArray(message.taskEnvironments))
                                    return "taskEnvironments: array expected";
                                for (var i = 0; i < message.taskEnvironments.length; ++i) {
                                    var error = $root.google.cloud.batch.v1.Environment.verify(message.taskEnvironments[i]);
                                    if (error)
                                        return "taskEnvironments." + error;
                                }
                            }
                            if (message.taskCountPerNode != null && message.hasOwnProperty("taskCountPerNode"))
                                if (!$util.isInteger(message.taskCountPerNode) && !(message.taskCountPerNode && $util.isInteger(message.taskCountPerNode.low) && $util.isInteger(message.taskCountPerNode.high)))
                                    return "taskCountPerNode: integer|Long expected";
                            if (message.requireHostsFile != null && message.hasOwnProperty("requireHostsFile"))
                                if (typeof message.requireHostsFile !== "boolean")
                                    return "requireHostsFile: boolean expected";
                            if (message.permissiveSsh != null && message.hasOwnProperty("permissiveSsh"))
                                if (typeof message.permissiveSsh !== "boolean")
                                    return "permissiveSsh: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a TaskGroup message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.TaskGroup} TaskGroup
                         */
                        TaskGroup.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.TaskGroup)
                                return object;
                            var message = new $root.google.cloud.batch.v1.TaskGroup();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.taskSpec != null) {
                                if (typeof object.taskSpec !== "object")
                                    throw TypeError(".google.cloud.batch.v1.TaskGroup.taskSpec: object expected");
                                message.taskSpec = $root.google.cloud.batch.v1.TaskSpec.fromObject(object.taskSpec);
                            }
                            if (object.taskCount != null)
                                if ($util.Long)
                                    (message.taskCount = $util.Long.fromValue(object.taskCount)).unsigned = false;
                                else if (typeof object.taskCount === "string")
                                    message.taskCount = parseInt(object.taskCount, 10);
                                else if (typeof object.taskCount === "number")
                                    message.taskCount = object.taskCount;
                                else if (typeof object.taskCount === "object")
                                    message.taskCount = new $util.LongBits(object.taskCount.low >>> 0, object.taskCount.high >>> 0).toNumber();
                            if (object.parallelism != null)
                                if ($util.Long)
                                    (message.parallelism = $util.Long.fromValue(object.parallelism)).unsigned = false;
                                else if (typeof object.parallelism === "string")
                                    message.parallelism = parseInt(object.parallelism, 10);
                                else if (typeof object.parallelism === "number")
                                    message.parallelism = object.parallelism;
                                else if (typeof object.parallelism === "object")
                                    message.parallelism = new $util.LongBits(object.parallelism.low >>> 0, object.parallelism.high >>> 0).toNumber();
                            switch (object.schedulingPolicy) {
                            default:
                                if (typeof object.schedulingPolicy === "number") {
                                    message.schedulingPolicy = object.schedulingPolicy;
                                    break;
                                }
                                break;
                            case "SCHEDULING_POLICY_UNSPECIFIED":
                            case 0:
                                message.schedulingPolicy = 0;
                                break;
                            case "AS_SOON_AS_POSSIBLE":
                            case 1:
                                message.schedulingPolicy = 1;
                                break;
                            case "IN_ORDER":
                            case 2:
                                message.schedulingPolicy = 2;
                                break;
                            }
                            if (object.taskEnvironments) {
                                if (!Array.isArray(object.taskEnvironments))
                                    throw TypeError(".google.cloud.batch.v1.TaskGroup.taskEnvironments: array expected");
                                message.taskEnvironments = [];
                                for (var i = 0; i < object.taskEnvironments.length; ++i) {
                                    if (typeof object.taskEnvironments[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1.TaskGroup.taskEnvironments: object expected");
                                    message.taskEnvironments[i] = $root.google.cloud.batch.v1.Environment.fromObject(object.taskEnvironments[i]);
                                }
                            }
                            if (object.taskCountPerNode != null)
                                if ($util.Long)
                                    (message.taskCountPerNode = $util.Long.fromValue(object.taskCountPerNode)).unsigned = false;
                                else if (typeof object.taskCountPerNode === "string")
                                    message.taskCountPerNode = parseInt(object.taskCountPerNode, 10);
                                else if (typeof object.taskCountPerNode === "number")
                                    message.taskCountPerNode = object.taskCountPerNode;
                                else if (typeof object.taskCountPerNode === "object")
                                    message.taskCountPerNode = new $util.LongBits(object.taskCountPerNode.low >>> 0, object.taskCountPerNode.high >>> 0).toNumber();
                            if (object.requireHostsFile != null)
                                message.requireHostsFile = Boolean(object.requireHostsFile);
                            if (object.permissiveSsh != null)
                                message.permissiveSsh = Boolean(object.permissiveSsh);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TaskGroup message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @static
                         * @param {google.cloud.batch.v1.TaskGroup} message TaskGroup
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TaskGroup.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.taskEnvironments = [];
                            if (options.defaults) {
                                object.name = "";
                                object.taskSpec = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.taskCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.taskCount = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.parallelism = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.parallelism = options.longs === String ? "0" : 0;
                                object.schedulingPolicy = options.enums === String ? "SCHEDULING_POLICY_UNSPECIFIED" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.taskCountPerNode = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.taskCountPerNode = options.longs === String ? "0" : 0;
                                object.requireHostsFile = false;
                                object.permissiveSsh = false;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.taskSpec != null && message.hasOwnProperty("taskSpec"))
                                object.taskSpec = $root.google.cloud.batch.v1.TaskSpec.toObject(message.taskSpec, options);
                            if (message.taskCount != null && message.hasOwnProperty("taskCount"))
                                if (typeof message.taskCount === "number")
                                    object.taskCount = options.longs === String ? String(message.taskCount) : message.taskCount;
                                else
                                    object.taskCount = options.longs === String ? $util.Long.prototype.toString.call(message.taskCount) : options.longs === Number ? new $util.LongBits(message.taskCount.low >>> 0, message.taskCount.high >>> 0).toNumber() : message.taskCount;
                            if (message.parallelism != null && message.hasOwnProperty("parallelism"))
                                if (typeof message.parallelism === "number")
                                    object.parallelism = options.longs === String ? String(message.parallelism) : message.parallelism;
                                else
                                    object.parallelism = options.longs === String ? $util.Long.prototype.toString.call(message.parallelism) : options.longs === Number ? new $util.LongBits(message.parallelism.low >>> 0, message.parallelism.high >>> 0).toNumber() : message.parallelism;
                            if (message.schedulingPolicy != null && message.hasOwnProperty("schedulingPolicy"))
                                object.schedulingPolicy = options.enums === String ? $root.google.cloud.batch.v1.TaskGroup.SchedulingPolicy[message.schedulingPolicy] === undefined ? message.schedulingPolicy : $root.google.cloud.batch.v1.TaskGroup.SchedulingPolicy[message.schedulingPolicy] : message.schedulingPolicy;
                            if (message.taskEnvironments && message.taskEnvironments.length) {
                                object.taskEnvironments = [];
                                for (var j = 0; j < message.taskEnvironments.length; ++j)
                                    object.taskEnvironments[j] = $root.google.cloud.batch.v1.Environment.toObject(message.taskEnvironments[j], options);
                            }
                            if (message.taskCountPerNode != null && message.hasOwnProperty("taskCountPerNode"))
                                if (typeof message.taskCountPerNode === "number")
                                    object.taskCountPerNode = options.longs === String ? String(message.taskCountPerNode) : message.taskCountPerNode;
                                else
                                    object.taskCountPerNode = options.longs === String ? $util.Long.prototype.toString.call(message.taskCountPerNode) : options.longs === Number ? new $util.LongBits(message.taskCountPerNode.low >>> 0, message.taskCountPerNode.high >>> 0).toNumber() : message.taskCountPerNode;
                            if (message.requireHostsFile != null && message.hasOwnProperty("requireHostsFile"))
                                object.requireHostsFile = message.requireHostsFile;
                            if (message.permissiveSsh != null && message.hasOwnProperty("permissiveSsh"))
                                object.permissiveSsh = message.permissiveSsh;
                            return object;
                        };
    
                        /**
                         * Converts this TaskGroup to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TaskGroup.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TaskGroup
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.TaskGroup
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TaskGroup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.TaskGroup";
                        };
    
                        /**
                         * SchedulingPolicy enum.
                         * @name google.cloud.batch.v1.TaskGroup.SchedulingPolicy
                         * @enum {number}
                         * @property {number} SCHEDULING_POLICY_UNSPECIFIED=0 SCHEDULING_POLICY_UNSPECIFIED value
                         * @property {number} AS_SOON_AS_POSSIBLE=1 AS_SOON_AS_POSSIBLE value
                         * @property {number} IN_ORDER=2 IN_ORDER value
                         */
                        TaskGroup.SchedulingPolicy = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "SCHEDULING_POLICY_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "AS_SOON_AS_POSSIBLE"] = 1;
                            values[valuesById[2] = "IN_ORDER"] = 2;
                            return values;
                        })();
    
                        return TaskGroup;
                    })();
    
                    v1.ServiceAccount = (function() {
    
                        /**
                         * Properties of a ServiceAccount.
                         * @memberof google.cloud.batch.v1
                         * @interface IServiceAccount
                         * @property {string|null} [email] ServiceAccount email
                         * @property {Array.<string>|null} [scopes] ServiceAccount scopes
                         */
    
                        /**
                         * Constructs a new ServiceAccount.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a ServiceAccount.
                         * @implements IServiceAccount
                         * @constructor
                         * @param {google.cloud.batch.v1.IServiceAccount=} [properties] Properties to set
                         */
                        function ServiceAccount(properties) {
                            this.scopes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ServiceAccount email.
                         * @member {string} email
                         * @memberof google.cloud.batch.v1.ServiceAccount
                         * @instance
                         */
                        ServiceAccount.prototype.email = "";
    
                        /**
                         * ServiceAccount scopes.
                         * @member {Array.<string>} scopes
                         * @memberof google.cloud.batch.v1.ServiceAccount
                         * @instance
                         */
                        ServiceAccount.prototype.scopes = $util.emptyArray;
    
                        /**
                         * Creates a new ServiceAccount instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.ServiceAccount
                         * @static
                         * @param {google.cloud.batch.v1.IServiceAccount=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.ServiceAccount} ServiceAccount instance
                         */
                        ServiceAccount.create = function create(properties) {
                            return new ServiceAccount(properties);
                        };
    
                        /**
                         * Encodes the specified ServiceAccount message. Does not implicitly {@link google.cloud.batch.v1.ServiceAccount.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.ServiceAccount
                         * @static
                         * @param {google.cloud.batch.v1.IServiceAccount} message ServiceAccount message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ServiceAccount.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.email != null && Object.hasOwnProperty.call(message, "email"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.email);
                            if (message.scopes != null && message.scopes.length)
                                for (var i = 0; i < message.scopes.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.scopes[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ServiceAccount message, length delimited. Does not implicitly {@link google.cloud.batch.v1.ServiceAccount.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.ServiceAccount
                         * @static
                         * @param {google.cloud.batch.v1.IServiceAccount} message ServiceAccount message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ServiceAccount.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ServiceAccount message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.ServiceAccount
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.ServiceAccount} ServiceAccount
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ServiceAccount.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.ServiceAccount();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.email = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.scopes && message.scopes.length))
                                            message.scopes = [];
                                        message.scopes.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ServiceAccount message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.ServiceAccount
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.ServiceAccount} ServiceAccount
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ServiceAccount.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ServiceAccount message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.ServiceAccount
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ServiceAccount.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.email != null && message.hasOwnProperty("email"))
                                if (!$util.isString(message.email))
                                    return "email: string expected";
                            if (message.scopes != null && message.hasOwnProperty("scopes")) {
                                if (!Array.isArray(message.scopes))
                                    return "scopes: array expected";
                                for (var i = 0; i < message.scopes.length; ++i)
                                    if (!$util.isString(message.scopes[i]))
                                        return "scopes: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ServiceAccount message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.ServiceAccount
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.ServiceAccount} ServiceAccount
                         */
                        ServiceAccount.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.ServiceAccount)
                                return object;
                            var message = new $root.google.cloud.batch.v1.ServiceAccount();
                            if (object.email != null)
                                message.email = String(object.email);
                            if (object.scopes) {
                                if (!Array.isArray(object.scopes))
                                    throw TypeError(".google.cloud.batch.v1.ServiceAccount.scopes: array expected");
                                message.scopes = [];
                                for (var i = 0; i < object.scopes.length; ++i)
                                    message.scopes[i] = String(object.scopes[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ServiceAccount message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.ServiceAccount
                         * @static
                         * @param {google.cloud.batch.v1.ServiceAccount} message ServiceAccount
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ServiceAccount.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.scopes = [];
                            if (options.defaults)
                                object.email = "";
                            if (message.email != null && message.hasOwnProperty("email"))
                                object.email = message.email;
                            if (message.scopes && message.scopes.length) {
                                object.scopes = [];
                                for (var j = 0; j < message.scopes.length; ++j)
                                    object.scopes[j] = message.scopes[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ServiceAccount to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.ServiceAccount
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ServiceAccount.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ServiceAccount
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.ServiceAccount
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ServiceAccount.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.ServiceAccount";
                        };
    
                        return ServiceAccount;
                    })();
    
                    v1.ComputeResource = (function() {
    
                        /**
                         * Properties of a ComputeResource.
                         * @memberof google.cloud.batch.v1
                         * @interface IComputeResource
                         * @property {number|Long|null} [cpuMilli] ComputeResource cpuMilli
                         * @property {number|Long|null} [memoryMib] ComputeResource memoryMib
                         * @property {number|Long|null} [bootDiskMib] ComputeResource bootDiskMib
                         */
    
                        /**
                         * Constructs a new ComputeResource.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a ComputeResource.
                         * @implements IComputeResource
                         * @constructor
                         * @param {google.cloud.batch.v1.IComputeResource=} [properties] Properties to set
                         */
                        function ComputeResource(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ComputeResource cpuMilli.
                         * @member {number|Long} cpuMilli
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @instance
                         */
                        ComputeResource.prototype.cpuMilli = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * ComputeResource memoryMib.
                         * @member {number|Long} memoryMib
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @instance
                         */
                        ComputeResource.prototype.memoryMib = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * ComputeResource bootDiskMib.
                         * @member {number|Long} bootDiskMib
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @instance
                         */
                        ComputeResource.prototype.bootDiskMib = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Creates a new ComputeResource instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @static
                         * @param {google.cloud.batch.v1.IComputeResource=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.ComputeResource} ComputeResource instance
                         */
                        ComputeResource.create = function create(properties) {
                            return new ComputeResource(properties);
                        };
    
                        /**
                         * Encodes the specified ComputeResource message. Does not implicitly {@link google.cloud.batch.v1.ComputeResource.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @static
                         * @param {google.cloud.batch.v1.IComputeResource} message ComputeResource message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ComputeResource.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.cpuMilli != null && Object.hasOwnProperty.call(message, "cpuMilli"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.cpuMilli);
                            if (message.memoryMib != null && Object.hasOwnProperty.call(message, "memoryMib"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.memoryMib);
                            if (message.bootDiskMib != null && Object.hasOwnProperty.call(message, "bootDiskMib"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.bootDiskMib);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ComputeResource message, length delimited. Does not implicitly {@link google.cloud.batch.v1.ComputeResource.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @static
                         * @param {google.cloud.batch.v1.IComputeResource} message ComputeResource message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ComputeResource.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ComputeResource message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.ComputeResource} ComputeResource
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ComputeResource.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.ComputeResource();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.cpuMilli = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.memoryMib = reader.int64();
                                        break;
                                    }
                                case 4: {
                                        message.bootDiskMib = reader.int64();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ComputeResource message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.ComputeResource} ComputeResource
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ComputeResource.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ComputeResource message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ComputeResource.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.cpuMilli != null && message.hasOwnProperty("cpuMilli"))
                                if (!$util.isInteger(message.cpuMilli) && !(message.cpuMilli && $util.isInteger(message.cpuMilli.low) && $util.isInteger(message.cpuMilli.high)))
                                    return "cpuMilli: integer|Long expected";
                            if (message.memoryMib != null && message.hasOwnProperty("memoryMib"))
                                if (!$util.isInteger(message.memoryMib) && !(message.memoryMib && $util.isInteger(message.memoryMib.low) && $util.isInteger(message.memoryMib.high)))
                                    return "memoryMib: integer|Long expected";
                            if (message.bootDiskMib != null && message.hasOwnProperty("bootDiskMib"))
                                if (!$util.isInteger(message.bootDiskMib) && !(message.bootDiskMib && $util.isInteger(message.bootDiskMib.low) && $util.isInteger(message.bootDiskMib.high)))
                                    return "bootDiskMib: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a ComputeResource message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.ComputeResource} ComputeResource
                         */
                        ComputeResource.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.ComputeResource)
                                return object;
                            var message = new $root.google.cloud.batch.v1.ComputeResource();
                            if (object.cpuMilli != null)
                                if ($util.Long)
                                    (message.cpuMilli = $util.Long.fromValue(object.cpuMilli)).unsigned = false;
                                else if (typeof object.cpuMilli === "string")
                                    message.cpuMilli = parseInt(object.cpuMilli, 10);
                                else if (typeof object.cpuMilli === "number")
                                    message.cpuMilli = object.cpuMilli;
                                else if (typeof object.cpuMilli === "object")
                                    message.cpuMilli = new $util.LongBits(object.cpuMilli.low >>> 0, object.cpuMilli.high >>> 0).toNumber();
                            if (object.memoryMib != null)
                                if ($util.Long)
                                    (message.memoryMib = $util.Long.fromValue(object.memoryMib)).unsigned = false;
                                else if (typeof object.memoryMib === "string")
                                    message.memoryMib = parseInt(object.memoryMib, 10);
                                else if (typeof object.memoryMib === "number")
                                    message.memoryMib = object.memoryMib;
                                else if (typeof object.memoryMib === "object")
                                    message.memoryMib = new $util.LongBits(object.memoryMib.low >>> 0, object.memoryMib.high >>> 0).toNumber();
                            if (object.bootDiskMib != null)
                                if ($util.Long)
                                    (message.bootDiskMib = $util.Long.fromValue(object.bootDiskMib)).unsigned = false;
                                else if (typeof object.bootDiskMib === "string")
                                    message.bootDiskMib = parseInt(object.bootDiskMib, 10);
                                else if (typeof object.bootDiskMib === "number")
                                    message.bootDiskMib = object.bootDiskMib;
                                else if (typeof object.bootDiskMib === "object")
                                    message.bootDiskMib = new $util.LongBits(object.bootDiskMib.low >>> 0, object.bootDiskMib.high >>> 0).toNumber();
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ComputeResource message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @static
                         * @param {google.cloud.batch.v1.ComputeResource} message ComputeResource
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ComputeResource.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.cpuMilli = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.cpuMilli = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.memoryMib = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.memoryMib = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.bootDiskMib = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.bootDiskMib = options.longs === String ? "0" : 0;
                            }
                            if (message.cpuMilli != null && message.hasOwnProperty("cpuMilli"))
                                if (typeof message.cpuMilli === "number")
                                    object.cpuMilli = options.longs === String ? String(message.cpuMilli) : message.cpuMilli;
                                else
                                    object.cpuMilli = options.longs === String ? $util.Long.prototype.toString.call(message.cpuMilli) : options.longs === Number ? new $util.LongBits(message.cpuMilli.low >>> 0, message.cpuMilli.high >>> 0).toNumber() : message.cpuMilli;
                            if (message.memoryMib != null && message.hasOwnProperty("memoryMib"))
                                if (typeof message.memoryMib === "number")
                                    object.memoryMib = options.longs === String ? String(message.memoryMib) : message.memoryMib;
                                else
                                    object.memoryMib = options.longs === String ? $util.Long.prototype.toString.call(message.memoryMib) : options.longs === Number ? new $util.LongBits(message.memoryMib.low >>> 0, message.memoryMib.high >>> 0).toNumber() : message.memoryMib;
                            if (message.bootDiskMib != null && message.hasOwnProperty("bootDiskMib"))
                                if (typeof message.bootDiskMib === "number")
                                    object.bootDiskMib = options.longs === String ? String(message.bootDiskMib) : message.bootDiskMib;
                                else
                                    object.bootDiskMib = options.longs === String ? $util.Long.prototype.toString.call(message.bootDiskMib) : options.longs === Number ? new $util.LongBits(message.bootDiskMib.low >>> 0, message.bootDiskMib.high >>> 0).toNumber() : message.bootDiskMib;
                            return object;
                        };
    
                        /**
                         * Converts this ComputeResource to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ComputeResource.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ComputeResource
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.ComputeResource
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ComputeResource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.ComputeResource";
                        };
    
                        return ComputeResource;
                    })();
    
                    v1.StatusEvent = (function() {
    
                        /**
                         * Properties of a StatusEvent.
                         * @memberof google.cloud.batch.v1
                         * @interface IStatusEvent
                         * @property {string|null} [type] StatusEvent type
                         * @property {string|null} [description] StatusEvent description
                         * @property {google.protobuf.ITimestamp|null} [eventTime] StatusEvent eventTime
                         * @property {google.cloud.batch.v1.ITaskExecution|null} [taskExecution] StatusEvent taskExecution
                         * @property {google.cloud.batch.v1.TaskStatus.State|null} [taskState] StatusEvent taskState
                         */
    
                        /**
                         * Constructs a new StatusEvent.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a StatusEvent.
                         * @implements IStatusEvent
                         * @constructor
                         * @param {google.cloud.batch.v1.IStatusEvent=} [properties] Properties to set
                         */
                        function StatusEvent(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StatusEvent type.
                         * @member {string} type
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @instance
                         */
                        StatusEvent.prototype.type = "";
    
                        /**
                         * StatusEvent description.
                         * @member {string} description
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @instance
                         */
                        StatusEvent.prototype.description = "";
    
                        /**
                         * StatusEvent eventTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} eventTime
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @instance
                         */
                        StatusEvent.prototype.eventTime = null;
    
                        /**
                         * StatusEvent taskExecution.
                         * @member {google.cloud.batch.v1.ITaskExecution|null|undefined} taskExecution
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @instance
                         */
                        StatusEvent.prototype.taskExecution = null;
    
                        /**
                         * StatusEvent taskState.
                         * @member {google.cloud.batch.v1.TaskStatus.State} taskState
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @instance
                         */
                        StatusEvent.prototype.taskState = 0;
    
                        /**
                         * Creates a new StatusEvent instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @static
                         * @param {google.cloud.batch.v1.IStatusEvent=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.StatusEvent} StatusEvent instance
                         */
                        StatusEvent.create = function create(properties) {
                            return new StatusEvent(properties);
                        };
    
                        /**
                         * Encodes the specified StatusEvent message. Does not implicitly {@link google.cloud.batch.v1.StatusEvent.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @static
                         * @param {google.cloud.batch.v1.IStatusEvent} message StatusEvent message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StatusEvent.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.description);
                            if (message.eventTime != null && Object.hasOwnProperty.call(message, "eventTime"))
                                $root.google.protobuf.Timestamp.encode(message.eventTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);
                            if (message.taskExecution != null && Object.hasOwnProperty.call(message, "taskExecution"))
                                $root.google.cloud.batch.v1.TaskExecution.encode(message.taskExecution, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.taskState != null && Object.hasOwnProperty.call(message, "taskState"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.taskState);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StatusEvent message, length delimited. Does not implicitly {@link google.cloud.batch.v1.StatusEvent.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @static
                         * @param {google.cloud.batch.v1.IStatusEvent} message StatusEvent message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StatusEvent.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StatusEvent message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.StatusEvent} StatusEvent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StatusEvent.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.StatusEvent();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 3: {
                                        message.type = reader.string();
                                        break;
                                    }
                                case 1: {
                                        message.description = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.eventTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.taskExecution = $root.google.cloud.batch.v1.TaskExecution.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.taskState = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StatusEvent message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.StatusEvent} StatusEvent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StatusEvent.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StatusEvent message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StatusEvent.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.eventTime != null && message.hasOwnProperty("eventTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.eventTime);
                                if (error)
                                    return "eventTime." + error;
                            }
                            if (message.taskExecution != null && message.hasOwnProperty("taskExecution")) {
                                var error = $root.google.cloud.batch.v1.TaskExecution.verify(message.taskExecution);
                                if (error)
                                    return "taskExecution." + error;
                            }
                            if (message.taskState != null && message.hasOwnProperty("taskState"))
                                switch (message.taskState) {
                                default:
                                    return "taskState: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a StatusEvent message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.StatusEvent} StatusEvent
                         */
                        StatusEvent.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.StatusEvent)
                                return object;
                            var message = new $root.google.cloud.batch.v1.StatusEvent();
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.eventTime != null) {
                                if (typeof object.eventTime !== "object")
                                    throw TypeError(".google.cloud.batch.v1.StatusEvent.eventTime: object expected");
                                message.eventTime = $root.google.protobuf.Timestamp.fromObject(object.eventTime);
                            }
                            if (object.taskExecution != null) {
                                if (typeof object.taskExecution !== "object")
                                    throw TypeError(".google.cloud.batch.v1.StatusEvent.taskExecution: object expected");
                                message.taskExecution = $root.google.cloud.batch.v1.TaskExecution.fromObject(object.taskExecution);
                            }
                            switch (object.taskState) {
                            default:
                                if (typeof object.taskState === "number") {
                                    message.taskState = object.taskState;
                                    break;
                                }
                                break;
                            case "STATE_UNSPECIFIED":
                            case 0:
                                message.taskState = 0;
                                break;
                            case "PENDING":
                            case 1:
                                message.taskState = 1;
                                break;
                            case "ASSIGNED":
                            case 2:
                                message.taskState = 2;
                                break;
                            case "RUNNING":
                            case 3:
                                message.taskState = 3;
                                break;
                            case "FAILED":
                            case 4:
                                message.taskState = 4;
                                break;
                            case "SUCCEEDED":
                            case 5:
                                message.taskState = 5;
                                break;
                            case "UNEXECUTED":
                            case 6:
                                message.taskState = 6;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StatusEvent message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @static
                         * @param {google.cloud.batch.v1.StatusEvent} message StatusEvent
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StatusEvent.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.description = "";
                                object.eventTime = null;
                                object.type = "";
                                object.taskExecution = null;
                                object.taskState = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                            }
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.eventTime != null && message.hasOwnProperty("eventTime"))
                                object.eventTime = $root.google.protobuf.Timestamp.toObject(message.eventTime, options);
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.taskExecution != null && message.hasOwnProperty("taskExecution"))
                                object.taskExecution = $root.google.cloud.batch.v1.TaskExecution.toObject(message.taskExecution, options);
                            if (message.taskState != null && message.hasOwnProperty("taskState"))
                                object.taskState = options.enums === String ? $root.google.cloud.batch.v1.TaskStatus.State[message.taskState] === undefined ? message.taskState : $root.google.cloud.batch.v1.TaskStatus.State[message.taskState] : message.taskState;
                            return object;
                        };
    
                        /**
                         * Converts this StatusEvent to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StatusEvent.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StatusEvent
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.StatusEvent
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StatusEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.StatusEvent";
                        };
    
                        return StatusEvent;
                    })();
    
                    v1.TaskExecution = (function() {
    
                        /**
                         * Properties of a TaskExecution.
                         * @memberof google.cloud.batch.v1
                         * @interface ITaskExecution
                         * @property {number|null} [exitCode] TaskExecution exitCode
                         */
    
                        /**
                         * Constructs a new TaskExecution.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a TaskExecution.
                         * @implements ITaskExecution
                         * @constructor
                         * @param {google.cloud.batch.v1.ITaskExecution=} [properties] Properties to set
                         */
                        function TaskExecution(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TaskExecution exitCode.
                         * @member {number} exitCode
                         * @memberof google.cloud.batch.v1.TaskExecution
                         * @instance
                         */
                        TaskExecution.prototype.exitCode = 0;
    
                        /**
                         * Creates a new TaskExecution instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.TaskExecution
                         * @static
                         * @param {google.cloud.batch.v1.ITaskExecution=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.TaskExecution} TaskExecution instance
                         */
                        TaskExecution.create = function create(properties) {
                            return new TaskExecution(properties);
                        };
    
                        /**
                         * Encodes the specified TaskExecution message. Does not implicitly {@link google.cloud.batch.v1.TaskExecution.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.TaskExecution
                         * @static
                         * @param {google.cloud.batch.v1.ITaskExecution} message TaskExecution message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskExecution.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.exitCode != null && Object.hasOwnProperty.call(message, "exitCode"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.exitCode);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TaskExecution message, length delimited. Does not implicitly {@link google.cloud.batch.v1.TaskExecution.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.TaskExecution
                         * @static
                         * @param {google.cloud.batch.v1.ITaskExecution} message TaskExecution message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskExecution.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TaskExecution message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.TaskExecution
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.TaskExecution} TaskExecution
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskExecution.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.TaskExecution();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.exitCode = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TaskExecution message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.TaskExecution
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.TaskExecution} TaskExecution
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskExecution.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TaskExecution message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.TaskExecution
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TaskExecution.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.exitCode != null && message.hasOwnProperty("exitCode"))
                                if (!$util.isInteger(message.exitCode))
                                    return "exitCode: integer expected";
                            return null;
                        };
    
                        /**
                         * Creates a TaskExecution message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.TaskExecution
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.TaskExecution} TaskExecution
                         */
                        TaskExecution.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.TaskExecution)
                                return object;
                            var message = new $root.google.cloud.batch.v1.TaskExecution();
                            if (object.exitCode != null)
                                message.exitCode = object.exitCode | 0;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TaskExecution message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.TaskExecution
                         * @static
                         * @param {google.cloud.batch.v1.TaskExecution} message TaskExecution
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TaskExecution.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.exitCode = 0;
                            if (message.exitCode != null && message.hasOwnProperty("exitCode"))
                                object.exitCode = message.exitCode;
                            return object;
                        };
    
                        /**
                         * Converts this TaskExecution to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.TaskExecution
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TaskExecution.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TaskExecution
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.TaskExecution
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TaskExecution.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.TaskExecution";
                        };
    
                        return TaskExecution;
                    })();
    
                    v1.TaskStatus = (function() {
    
                        /**
                         * Properties of a TaskStatus.
                         * @memberof google.cloud.batch.v1
                         * @interface ITaskStatus
                         * @property {google.cloud.batch.v1.TaskStatus.State|null} [state] TaskStatus state
                         * @property {Array.<google.cloud.batch.v1.IStatusEvent>|null} [statusEvents] TaskStatus statusEvents
                         */
    
                        /**
                         * Constructs a new TaskStatus.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a TaskStatus.
                         * @implements ITaskStatus
                         * @constructor
                         * @param {google.cloud.batch.v1.ITaskStatus=} [properties] Properties to set
                         */
                        function TaskStatus(properties) {
                            this.statusEvents = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TaskStatus state.
                         * @member {google.cloud.batch.v1.TaskStatus.State} state
                         * @memberof google.cloud.batch.v1.TaskStatus
                         * @instance
                         */
                        TaskStatus.prototype.state = 0;
    
                        /**
                         * TaskStatus statusEvents.
                         * @member {Array.<google.cloud.batch.v1.IStatusEvent>} statusEvents
                         * @memberof google.cloud.batch.v1.TaskStatus
                         * @instance
                         */
                        TaskStatus.prototype.statusEvents = $util.emptyArray;
    
                        /**
                         * Creates a new TaskStatus instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.TaskStatus
                         * @static
                         * @param {google.cloud.batch.v1.ITaskStatus=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.TaskStatus} TaskStatus instance
                         */
                        TaskStatus.create = function create(properties) {
                            return new TaskStatus(properties);
                        };
    
                        /**
                         * Encodes the specified TaskStatus message. Does not implicitly {@link google.cloud.batch.v1.TaskStatus.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.TaskStatus
                         * @static
                         * @param {google.cloud.batch.v1.ITaskStatus} message TaskStatus message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskStatus.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                            if (message.statusEvents != null && message.statusEvents.length)
                                for (var i = 0; i < message.statusEvents.length; ++i)
                                    $root.google.cloud.batch.v1.StatusEvent.encode(message.statusEvents[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TaskStatus message, length delimited. Does not implicitly {@link google.cloud.batch.v1.TaskStatus.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.TaskStatus
                         * @static
                         * @param {google.cloud.batch.v1.ITaskStatus} message TaskStatus message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskStatus.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TaskStatus message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.TaskStatus
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.TaskStatus} TaskStatus
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskStatus.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.TaskStatus();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.state = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.statusEvents && message.statusEvents.length))
                                            message.statusEvents = [];
                                        message.statusEvents.push($root.google.cloud.batch.v1.StatusEvent.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TaskStatus message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.TaskStatus
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.TaskStatus} TaskStatus
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskStatus.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TaskStatus message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.TaskStatus
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TaskStatus.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                switch (message.state) {
                                default:
                                    return "state: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            if (message.statusEvents != null && message.hasOwnProperty("statusEvents")) {
                                if (!Array.isArray(message.statusEvents))
                                    return "statusEvents: array expected";
                                for (var i = 0; i < message.statusEvents.length; ++i) {
                                    var error = $root.google.cloud.batch.v1.StatusEvent.verify(message.statusEvents[i]);
                                    if (error)
                                        return "statusEvents." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TaskStatus message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.TaskStatus
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.TaskStatus} TaskStatus
                         */
                        TaskStatus.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.TaskStatus)
                                return object;
                            var message = new $root.google.cloud.batch.v1.TaskStatus();
                            switch (object.state) {
                            default:
                                if (typeof object.state === "number") {
                                    message.state = object.state;
                                    break;
                                }
                                break;
                            case "STATE_UNSPECIFIED":
                            case 0:
                                message.state = 0;
                                break;
                            case "PENDING":
                            case 1:
                                message.state = 1;
                                break;
                            case "ASSIGNED":
                            case 2:
                                message.state = 2;
                                break;
                            case "RUNNING":
                            case 3:
                                message.state = 3;
                                break;
                            case "FAILED":
                            case 4:
                                message.state = 4;
                                break;
                            case "SUCCEEDED":
                            case 5:
                                message.state = 5;
                                break;
                            case "UNEXECUTED":
                            case 6:
                                message.state = 6;
                                break;
                            }
                            if (object.statusEvents) {
                                if (!Array.isArray(object.statusEvents))
                                    throw TypeError(".google.cloud.batch.v1.TaskStatus.statusEvents: array expected");
                                message.statusEvents = [];
                                for (var i = 0; i < object.statusEvents.length; ++i) {
                                    if (typeof object.statusEvents[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1.TaskStatus.statusEvents: object expected");
                                    message.statusEvents[i] = $root.google.cloud.batch.v1.StatusEvent.fromObject(object.statusEvents[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TaskStatus message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.TaskStatus
                         * @static
                         * @param {google.cloud.batch.v1.TaskStatus} message TaskStatus
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TaskStatus.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.statusEvents = [];
                            if (options.defaults)
                                object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = options.enums === String ? $root.google.cloud.batch.v1.TaskStatus.State[message.state] === undefined ? message.state : $root.google.cloud.batch.v1.TaskStatus.State[message.state] : message.state;
                            if (message.statusEvents && message.statusEvents.length) {
                                object.statusEvents = [];
                                for (var j = 0; j < message.statusEvents.length; ++j)
                                    object.statusEvents[j] = $root.google.cloud.batch.v1.StatusEvent.toObject(message.statusEvents[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this TaskStatus to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.TaskStatus
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TaskStatus.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TaskStatus
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.TaskStatus
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TaskStatus.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.TaskStatus";
                        };
    
                        /**
                         * State enum.
                         * @name google.cloud.batch.v1.TaskStatus.State
                         * @enum {number}
                         * @property {number} STATE_UNSPECIFIED=0 STATE_UNSPECIFIED value
                         * @property {number} PENDING=1 PENDING value
                         * @property {number} ASSIGNED=2 ASSIGNED value
                         * @property {number} RUNNING=3 RUNNING value
                         * @property {number} FAILED=4 FAILED value
                         * @property {number} SUCCEEDED=5 SUCCEEDED value
                         * @property {number} UNEXECUTED=6 UNEXECUTED value
                         */
                        TaskStatus.State = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "PENDING"] = 1;
                            values[valuesById[2] = "ASSIGNED"] = 2;
                            values[valuesById[3] = "RUNNING"] = 3;
                            values[valuesById[4] = "FAILED"] = 4;
                            values[valuesById[5] = "SUCCEEDED"] = 5;
                            values[valuesById[6] = "UNEXECUTED"] = 6;
                            return values;
                        })();
    
                        return TaskStatus;
                    })();
    
                    v1.Runnable = (function() {
    
                        /**
                         * Properties of a Runnable.
                         * @memberof google.cloud.batch.v1
                         * @interface IRunnable
                         * @property {google.cloud.batch.v1.Runnable.IContainer|null} [container] Runnable container
                         * @property {google.cloud.batch.v1.Runnable.IScript|null} [script] Runnable script
                         * @property {google.cloud.batch.v1.Runnable.IBarrier|null} [barrier] Runnable barrier
                         * @property {boolean|null} [ignoreExitStatus] Runnable ignoreExitStatus
                         * @property {boolean|null} [background] Runnable background
                         * @property {boolean|null} [alwaysRun] Runnable alwaysRun
                         * @property {google.cloud.batch.v1.IEnvironment|null} [environment] Runnable environment
                         * @property {google.protobuf.IDuration|null} [timeout] Runnable timeout
                         * @property {Object.<string,string>|null} [labels] Runnable labels
                         */
    
                        /**
                         * Constructs a new Runnable.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a Runnable.
                         * @implements IRunnable
                         * @constructor
                         * @param {google.cloud.batch.v1.IRunnable=} [properties] Properties to set
                         */
                        function Runnable(properties) {
                            this.labels = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Runnable container.
                         * @member {google.cloud.batch.v1.Runnable.IContainer|null|undefined} container
                         * @memberof google.cloud.batch.v1.Runnable
                         * @instance
                         */
                        Runnable.prototype.container = null;
    
                        /**
                         * Runnable script.
                         * @member {google.cloud.batch.v1.Runnable.IScript|null|undefined} script
                         * @memberof google.cloud.batch.v1.Runnable
                         * @instance
                         */
                        Runnable.prototype.script = null;
    
                        /**
                         * Runnable barrier.
                         * @member {google.cloud.batch.v1.Runnable.IBarrier|null|undefined} barrier
                         * @memberof google.cloud.batch.v1.Runnable
                         * @instance
                         */
                        Runnable.prototype.barrier = null;
    
                        /**
                         * Runnable ignoreExitStatus.
                         * @member {boolean} ignoreExitStatus
                         * @memberof google.cloud.batch.v1.Runnable
                         * @instance
                         */
                        Runnable.prototype.ignoreExitStatus = false;
    
                        /**
                         * Runnable background.
                         * @member {boolean} background
                         * @memberof google.cloud.batch.v1.Runnable
                         * @instance
                         */
                        Runnable.prototype.background = false;
    
                        /**
                         * Runnable alwaysRun.
                         * @member {boolean} alwaysRun
                         * @memberof google.cloud.batch.v1.Runnable
                         * @instance
                         */
                        Runnable.prototype.alwaysRun = false;
    
                        /**
                         * Runnable environment.
                         * @member {google.cloud.batch.v1.IEnvironment|null|undefined} environment
                         * @memberof google.cloud.batch.v1.Runnable
                         * @instance
                         */
                        Runnable.prototype.environment = null;
    
                        /**
                         * Runnable timeout.
                         * @member {google.protobuf.IDuration|null|undefined} timeout
                         * @memberof google.cloud.batch.v1.Runnable
                         * @instance
                         */
                        Runnable.prototype.timeout = null;
    
                        /**
                         * Runnable labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.cloud.batch.v1.Runnable
                         * @instance
                         */
                        Runnable.prototype.labels = $util.emptyObject;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Runnable executable.
                         * @member {"container"|"script"|"barrier"|undefined} executable
                         * @memberof google.cloud.batch.v1.Runnable
                         * @instance
                         */
                        Object.defineProperty(Runnable.prototype, "executable", {
                            get: $util.oneOfGetter($oneOfFields = ["container", "script", "barrier"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Runnable instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.Runnable
                         * @static
                         * @param {google.cloud.batch.v1.IRunnable=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.Runnable} Runnable instance
                         */
                        Runnable.create = function create(properties) {
                            return new Runnable(properties);
                        };
    
                        /**
                         * Encodes the specified Runnable message. Does not implicitly {@link google.cloud.batch.v1.Runnable.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.Runnable
                         * @static
                         * @param {google.cloud.batch.v1.IRunnable} message Runnable message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Runnable.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.container != null && Object.hasOwnProperty.call(message, "container"))
                                $root.google.cloud.batch.v1.Runnable.Container.encode(message.container, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.script != null && Object.hasOwnProperty.call(message, "script"))
                                $root.google.cloud.batch.v1.Runnable.Script.encode(message.script, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.ignoreExitStatus != null && Object.hasOwnProperty.call(message, "ignoreExitStatus"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.ignoreExitStatus);
                            if (message.background != null && Object.hasOwnProperty.call(message, "background"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.background);
                            if (message.alwaysRun != null && Object.hasOwnProperty.call(message, "alwaysRun"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.alwaysRun);
                            if (message.barrier != null && Object.hasOwnProperty.call(message, "barrier"))
                                $root.google.cloud.batch.v1.Runnable.Barrier.encode(message.barrier, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.environment != null && Object.hasOwnProperty.call(message, "environment"))
                                $root.google.cloud.batch.v1.Environment.encode(message.environment, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                                $root.google.protobuf.Duration.encode(message.timeout, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 9, wireType 2 =*/74).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Runnable message, length delimited. Does not implicitly {@link google.cloud.batch.v1.Runnable.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.Runnable
                         * @static
                         * @param {google.cloud.batch.v1.IRunnable} message Runnable message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Runnable.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Runnable message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.Runnable
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.Runnable} Runnable
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Runnable.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.Runnable(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.container = $root.google.cloud.batch.v1.Runnable.Container.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.script = $root.google.cloud.batch.v1.Runnable.Script.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.barrier = $root.google.cloud.batch.v1.Runnable.Barrier.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.ignoreExitStatus = reader.bool();
                                        break;
                                    }
                                case 4: {
                                        message.background = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        message.alwaysRun = reader.bool();
                                        break;
                                    }
                                case 7: {
                                        message.environment = $root.google.cloud.batch.v1.Environment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.timeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Runnable message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.Runnable
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.Runnable} Runnable
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Runnable.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Runnable message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.Runnable
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Runnable.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.container != null && message.hasOwnProperty("container")) {
                                properties.executable = 1;
                                {
                                    var error = $root.google.cloud.batch.v1.Runnable.Container.verify(message.container);
                                    if (error)
                                        return "container." + error;
                                }
                            }
                            if (message.script != null && message.hasOwnProperty("script")) {
                                if (properties.executable === 1)
                                    return "executable: multiple values";
                                properties.executable = 1;
                                {
                                    var error = $root.google.cloud.batch.v1.Runnable.Script.verify(message.script);
                                    if (error)
                                        return "script." + error;
                                }
                            }
                            if (message.barrier != null && message.hasOwnProperty("barrier")) {
                                if (properties.executable === 1)
                                    return "executable: multiple values";
                                properties.executable = 1;
                                {
                                    var error = $root.google.cloud.batch.v1.Runnable.Barrier.verify(message.barrier);
                                    if (error)
                                        return "barrier." + error;
                                }
                            }
                            if (message.ignoreExitStatus != null && message.hasOwnProperty("ignoreExitStatus"))
                                if (typeof message.ignoreExitStatus !== "boolean")
                                    return "ignoreExitStatus: boolean expected";
                            if (message.background != null && message.hasOwnProperty("background"))
                                if (typeof message.background !== "boolean")
                                    return "background: boolean expected";
                            if (message.alwaysRun != null && message.hasOwnProperty("alwaysRun"))
                                if (typeof message.alwaysRun !== "boolean")
                                    return "alwaysRun: boolean expected";
                            if (message.environment != null && message.hasOwnProperty("environment")) {
                                var error = $root.google.cloud.batch.v1.Environment.verify(message.environment);
                                if (error)
                                    return "environment." + error;
                            }
                            if (message.timeout != null && message.hasOwnProperty("timeout")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeout);
                                if (error)
                                    return "timeout." + error;
                            }
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Runnable message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.Runnable
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.Runnable} Runnable
                         */
                        Runnable.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.Runnable)
                                return object;
                            var message = new $root.google.cloud.batch.v1.Runnable();
                            if (object.container != null) {
                                if (typeof object.container !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Runnable.container: object expected");
                                message.container = $root.google.cloud.batch.v1.Runnable.Container.fromObject(object.container);
                            }
                            if (object.script != null) {
                                if (typeof object.script !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Runnable.script: object expected");
                                message.script = $root.google.cloud.batch.v1.Runnable.Script.fromObject(object.script);
                            }
                            if (object.barrier != null) {
                                if (typeof object.barrier !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Runnable.barrier: object expected");
                                message.barrier = $root.google.cloud.batch.v1.Runnable.Barrier.fromObject(object.barrier);
                            }
                            if (object.ignoreExitStatus != null)
                                message.ignoreExitStatus = Boolean(object.ignoreExitStatus);
                            if (object.background != null)
                                message.background = Boolean(object.background);
                            if (object.alwaysRun != null)
                                message.alwaysRun = Boolean(object.alwaysRun);
                            if (object.environment != null) {
                                if (typeof object.environment !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Runnable.environment: object expected");
                                message.environment = $root.google.cloud.batch.v1.Environment.fromObject(object.environment);
                            }
                            if (object.timeout != null) {
                                if (typeof object.timeout !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Runnable.timeout: object expected");
                                message.timeout = $root.google.protobuf.Duration.fromObject(object.timeout);
                            }
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Runnable.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Runnable message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.Runnable
                         * @static
                         * @param {google.cloud.batch.v1.Runnable} message Runnable
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Runnable.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.ignoreExitStatus = false;
                                object.background = false;
                                object.alwaysRun = false;
                                object.environment = null;
                                object.timeout = null;
                            }
                            if (message.container != null && message.hasOwnProperty("container")) {
                                object.container = $root.google.cloud.batch.v1.Runnable.Container.toObject(message.container, options);
                                if (options.oneofs)
                                    object.executable = "container";
                            }
                            if (message.script != null && message.hasOwnProperty("script")) {
                                object.script = $root.google.cloud.batch.v1.Runnable.Script.toObject(message.script, options);
                                if (options.oneofs)
                                    object.executable = "script";
                            }
                            if (message.ignoreExitStatus != null && message.hasOwnProperty("ignoreExitStatus"))
                                object.ignoreExitStatus = message.ignoreExitStatus;
                            if (message.background != null && message.hasOwnProperty("background"))
                                object.background = message.background;
                            if (message.alwaysRun != null && message.hasOwnProperty("alwaysRun"))
                                object.alwaysRun = message.alwaysRun;
                            if (message.barrier != null && message.hasOwnProperty("barrier")) {
                                object.barrier = $root.google.cloud.batch.v1.Runnable.Barrier.toObject(message.barrier, options);
                                if (options.oneofs)
                                    object.executable = "barrier";
                            }
                            if (message.environment != null && message.hasOwnProperty("environment"))
                                object.environment = $root.google.cloud.batch.v1.Environment.toObject(message.environment, options);
                            if (message.timeout != null && message.hasOwnProperty("timeout"))
                                object.timeout = $root.google.protobuf.Duration.toObject(message.timeout, options);
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Runnable to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.Runnable
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Runnable.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Runnable
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.Runnable
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Runnable.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.Runnable";
                        };
    
                        Runnable.Container = (function() {
    
                            /**
                             * Properties of a Container.
                             * @memberof google.cloud.batch.v1.Runnable
                             * @interface IContainer
                             * @property {string|null} [imageUri] Container imageUri
                             * @property {Array.<string>|null} [commands] Container commands
                             * @property {string|null} [entrypoint] Container entrypoint
                             * @property {Array.<string>|null} [volumes] Container volumes
                             * @property {string|null} [options] Container options
                             * @property {boolean|null} [blockExternalNetwork] Container blockExternalNetwork
                             * @property {string|null} [username] Container username
                             * @property {string|null} [password] Container password
                             */
    
                            /**
                             * Constructs a new Container.
                             * @memberof google.cloud.batch.v1.Runnable
                             * @classdesc Represents a Container.
                             * @implements IContainer
                             * @constructor
                             * @param {google.cloud.batch.v1.Runnable.IContainer=} [properties] Properties to set
                             */
                            function Container(properties) {
                                this.commands = [];
                                this.volumes = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Container imageUri.
                             * @member {string} imageUri
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @instance
                             */
                            Container.prototype.imageUri = "";
    
                            /**
                             * Container commands.
                             * @member {Array.<string>} commands
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @instance
                             */
                            Container.prototype.commands = $util.emptyArray;
    
                            /**
                             * Container entrypoint.
                             * @member {string} entrypoint
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @instance
                             */
                            Container.prototype.entrypoint = "";
    
                            /**
                             * Container volumes.
                             * @member {Array.<string>} volumes
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @instance
                             */
                            Container.prototype.volumes = $util.emptyArray;
    
                            /**
                             * Container options.
                             * @member {string} options
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @instance
                             */
                            Container.prototype.options = "";
    
                            /**
                             * Container blockExternalNetwork.
                             * @member {boolean} blockExternalNetwork
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @instance
                             */
                            Container.prototype.blockExternalNetwork = false;
    
                            /**
                             * Container username.
                             * @member {string} username
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @instance
                             */
                            Container.prototype.username = "";
    
                            /**
                             * Container password.
                             * @member {string} password
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @instance
                             */
                            Container.prototype.password = "";
    
                            /**
                             * Creates a new Container instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @static
                             * @param {google.cloud.batch.v1.Runnable.IContainer=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.Runnable.Container} Container instance
                             */
                            Container.create = function create(properties) {
                                return new Container(properties);
                            };
    
                            /**
                             * Encodes the specified Container message. Does not implicitly {@link google.cloud.batch.v1.Runnable.Container.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @static
                             * @param {google.cloud.batch.v1.Runnable.IContainer} message Container message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Container.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.imageUri != null && Object.hasOwnProperty.call(message, "imageUri"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.imageUri);
                                if (message.commands != null && message.commands.length)
                                    for (var i = 0; i < message.commands.length; ++i)
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.commands[i]);
                                if (message.entrypoint != null && Object.hasOwnProperty.call(message, "entrypoint"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.entrypoint);
                                if (message.volumes != null && message.volumes.length)
                                    for (var i = 0; i < message.volumes.length; ++i)
                                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.volumes[i]);
                                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.options);
                                if (message.blockExternalNetwork != null && Object.hasOwnProperty.call(message, "blockExternalNetwork"))
                                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.blockExternalNetwork);
                                if (message.username != null && Object.hasOwnProperty.call(message, "username"))
                                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.username);
                                if (message.password != null && Object.hasOwnProperty.call(message, "password"))
                                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.password);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Container message, length delimited. Does not implicitly {@link google.cloud.batch.v1.Runnable.Container.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @static
                             * @param {google.cloud.batch.v1.Runnable.IContainer} message Container message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Container.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Container message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.Runnable.Container} Container
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Container.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.Runnable.Container();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.imageUri = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.commands && message.commands.length))
                                                message.commands = [];
                                            message.commands.push(reader.string());
                                            break;
                                        }
                                    case 3: {
                                            message.entrypoint = reader.string();
                                            break;
                                        }
                                    case 7: {
                                            if (!(message.volumes && message.volumes.length))
                                                message.volumes = [];
                                            message.volumes.push(reader.string());
                                            break;
                                        }
                                    case 8: {
                                            message.options = reader.string();
                                            break;
                                        }
                                    case 9: {
                                            message.blockExternalNetwork = reader.bool();
                                            break;
                                        }
                                    case 10: {
                                            message.username = reader.string();
                                            break;
                                        }
                                    case 11: {
                                            message.password = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Container message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.Runnable.Container} Container
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Container.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Container message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Container.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.imageUri != null && message.hasOwnProperty("imageUri"))
                                    if (!$util.isString(message.imageUri))
                                        return "imageUri: string expected";
                                if (message.commands != null && message.hasOwnProperty("commands")) {
                                    if (!Array.isArray(message.commands))
                                        return "commands: array expected";
                                    for (var i = 0; i < message.commands.length; ++i)
                                        if (!$util.isString(message.commands[i]))
                                            return "commands: string[] expected";
                                }
                                if (message.entrypoint != null && message.hasOwnProperty("entrypoint"))
                                    if (!$util.isString(message.entrypoint))
                                        return "entrypoint: string expected";
                                if (message.volumes != null && message.hasOwnProperty("volumes")) {
                                    if (!Array.isArray(message.volumes))
                                        return "volumes: array expected";
                                    for (var i = 0; i < message.volumes.length; ++i)
                                        if (!$util.isString(message.volumes[i]))
                                            return "volumes: string[] expected";
                                }
                                if (message.options != null && message.hasOwnProperty("options"))
                                    if (!$util.isString(message.options))
                                        return "options: string expected";
                                if (message.blockExternalNetwork != null && message.hasOwnProperty("blockExternalNetwork"))
                                    if (typeof message.blockExternalNetwork !== "boolean")
                                        return "blockExternalNetwork: boolean expected";
                                if (message.username != null && message.hasOwnProperty("username"))
                                    if (!$util.isString(message.username))
                                        return "username: string expected";
                                if (message.password != null && message.hasOwnProperty("password"))
                                    if (!$util.isString(message.password))
                                        return "password: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a Container message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.Runnable.Container} Container
                             */
                            Container.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.Runnable.Container)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.Runnable.Container();
                                if (object.imageUri != null)
                                    message.imageUri = String(object.imageUri);
                                if (object.commands) {
                                    if (!Array.isArray(object.commands))
                                        throw TypeError(".google.cloud.batch.v1.Runnable.Container.commands: array expected");
                                    message.commands = [];
                                    for (var i = 0; i < object.commands.length; ++i)
                                        message.commands[i] = String(object.commands[i]);
                                }
                                if (object.entrypoint != null)
                                    message.entrypoint = String(object.entrypoint);
                                if (object.volumes) {
                                    if (!Array.isArray(object.volumes))
                                        throw TypeError(".google.cloud.batch.v1.Runnable.Container.volumes: array expected");
                                    message.volumes = [];
                                    for (var i = 0; i < object.volumes.length; ++i)
                                        message.volumes[i] = String(object.volumes[i]);
                                }
                                if (object.options != null)
                                    message.options = String(object.options);
                                if (object.blockExternalNetwork != null)
                                    message.blockExternalNetwork = Boolean(object.blockExternalNetwork);
                                if (object.username != null)
                                    message.username = String(object.username);
                                if (object.password != null)
                                    message.password = String(object.password);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Container message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @static
                             * @param {google.cloud.batch.v1.Runnable.Container} message Container
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Container.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults) {
                                    object.commands = [];
                                    object.volumes = [];
                                }
                                if (options.defaults) {
                                    object.imageUri = "";
                                    object.entrypoint = "";
                                    object.options = "";
                                    object.blockExternalNetwork = false;
                                    object.username = "";
                                    object.password = "";
                                }
                                if (message.imageUri != null && message.hasOwnProperty("imageUri"))
                                    object.imageUri = message.imageUri;
                                if (message.commands && message.commands.length) {
                                    object.commands = [];
                                    for (var j = 0; j < message.commands.length; ++j)
                                        object.commands[j] = message.commands[j];
                                }
                                if (message.entrypoint != null && message.hasOwnProperty("entrypoint"))
                                    object.entrypoint = message.entrypoint;
                                if (message.volumes && message.volumes.length) {
                                    object.volumes = [];
                                    for (var j = 0; j < message.volumes.length; ++j)
                                        object.volumes[j] = message.volumes[j];
                                }
                                if (message.options != null && message.hasOwnProperty("options"))
                                    object.options = message.options;
                                if (message.blockExternalNetwork != null && message.hasOwnProperty("blockExternalNetwork"))
                                    object.blockExternalNetwork = message.blockExternalNetwork;
                                if (message.username != null && message.hasOwnProperty("username"))
                                    object.username = message.username;
                                if (message.password != null && message.hasOwnProperty("password"))
                                    object.password = message.password;
                                return object;
                            };
    
                            /**
                             * Converts this Container to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Container.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Container
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.Runnable.Container
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Container.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.Runnable.Container";
                            };
    
                            return Container;
                        })();
    
                        Runnable.Script = (function() {
    
                            /**
                             * Properties of a Script.
                             * @memberof google.cloud.batch.v1.Runnable
                             * @interface IScript
                             * @property {string|null} [path] Script path
                             * @property {string|null} [text] Script text
                             */
    
                            /**
                             * Constructs a new Script.
                             * @memberof google.cloud.batch.v1.Runnable
                             * @classdesc Represents a Script.
                             * @implements IScript
                             * @constructor
                             * @param {google.cloud.batch.v1.Runnable.IScript=} [properties] Properties to set
                             */
                            function Script(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Script path.
                             * @member {string|null|undefined} path
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @instance
                             */
                            Script.prototype.path = null;
    
                            /**
                             * Script text.
                             * @member {string|null|undefined} text
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @instance
                             */
                            Script.prototype.text = null;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * Script command.
                             * @member {"path"|"text"|undefined} command
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @instance
                             */
                            Object.defineProperty(Script.prototype, "command", {
                                get: $util.oneOfGetter($oneOfFields = ["path", "text"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new Script instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @static
                             * @param {google.cloud.batch.v1.Runnable.IScript=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.Runnable.Script} Script instance
                             */
                            Script.create = function create(properties) {
                                return new Script(properties);
                            };
    
                            /**
                             * Encodes the specified Script message. Does not implicitly {@link google.cloud.batch.v1.Runnable.Script.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @static
                             * @param {google.cloud.batch.v1.Runnable.IScript} message Script message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Script.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                                if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Script message, length delimited. Does not implicitly {@link google.cloud.batch.v1.Runnable.Script.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @static
                             * @param {google.cloud.batch.v1.Runnable.IScript} message Script message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Script.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Script message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.Runnable.Script} Script
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Script.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.Runnable.Script();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.path = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.text = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Script message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.Runnable.Script} Script
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Script.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Script message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Script.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.path != null && message.hasOwnProperty("path")) {
                                    properties.command = 1;
                                    if (!$util.isString(message.path))
                                        return "path: string expected";
                                }
                                if (message.text != null && message.hasOwnProperty("text")) {
                                    if (properties.command === 1)
                                        return "command: multiple values";
                                    properties.command = 1;
                                    if (!$util.isString(message.text))
                                        return "text: string expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Script message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.Runnable.Script} Script
                             */
                            Script.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.Runnable.Script)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.Runnable.Script();
                                if (object.path != null)
                                    message.path = String(object.path);
                                if (object.text != null)
                                    message.text = String(object.text);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Script message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @static
                             * @param {google.cloud.batch.v1.Runnable.Script} message Script
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Script.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (message.path != null && message.hasOwnProperty("path")) {
                                    object.path = message.path;
                                    if (options.oneofs)
                                        object.command = "path";
                                }
                                if (message.text != null && message.hasOwnProperty("text")) {
                                    object.text = message.text;
                                    if (options.oneofs)
                                        object.command = "text";
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Script to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Script.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Script
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.Runnable.Script
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Script.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.Runnable.Script";
                            };
    
                            return Script;
                        })();
    
                        Runnable.Barrier = (function() {
    
                            /**
                             * Properties of a Barrier.
                             * @memberof google.cloud.batch.v1.Runnable
                             * @interface IBarrier
                             * @property {string|null} [name] Barrier name
                             */
    
                            /**
                             * Constructs a new Barrier.
                             * @memberof google.cloud.batch.v1.Runnable
                             * @classdesc Represents a Barrier.
                             * @implements IBarrier
                             * @constructor
                             * @param {google.cloud.batch.v1.Runnable.IBarrier=} [properties] Properties to set
                             */
                            function Barrier(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Barrier name.
                             * @member {string} name
                             * @memberof google.cloud.batch.v1.Runnable.Barrier
                             * @instance
                             */
                            Barrier.prototype.name = "";
    
                            /**
                             * Creates a new Barrier instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.Runnable.Barrier
                             * @static
                             * @param {google.cloud.batch.v1.Runnable.IBarrier=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.Runnable.Barrier} Barrier instance
                             */
                            Barrier.create = function create(properties) {
                                return new Barrier(properties);
                            };
    
                            /**
                             * Encodes the specified Barrier message. Does not implicitly {@link google.cloud.batch.v1.Runnable.Barrier.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.Runnable.Barrier
                             * @static
                             * @param {google.cloud.batch.v1.Runnable.IBarrier} message Barrier message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Barrier.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Barrier message, length delimited. Does not implicitly {@link google.cloud.batch.v1.Runnable.Barrier.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.Runnable.Barrier
                             * @static
                             * @param {google.cloud.batch.v1.Runnable.IBarrier} message Barrier message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Barrier.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Barrier message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.Runnable.Barrier
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.Runnable.Barrier} Barrier
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Barrier.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.Runnable.Barrier();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.name = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Barrier message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.Runnable.Barrier
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.Runnable.Barrier} Barrier
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Barrier.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Barrier message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.Runnable.Barrier
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Barrier.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a Barrier message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.Runnable.Barrier
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.Runnable.Barrier} Barrier
                             */
                            Barrier.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.Runnable.Barrier)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.Runnable.Barrier();
                                if (object.name != null)
                                    message.name = String(object.name);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Barrier message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.Runnable.Barrier
                             * @static
                             * @param {google.cloud.batch.v1.Runnable.Barrier} message Barrier
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Barrier.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.name = "";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                return object;
                            };
    
                            /**
                             * Converts this Barrier to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.Runnable.Barrier
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Barrier.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Barrier
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.Runnable.Barrier
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Barrier.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.Runnable.Barrier";
                            };
    
                            return Barrier;
                        })();
    
                        return Runnable;
                    })();
    
                    v1.TaskSpec = (function() {
    
                        /**
                         * Properties of a TaskSpec.
                         * @memberof google.cloud.batch.v1
                         * @interface ITaskSpec
                         * @property {Array.<google.cloud.batch.v1.IRunnable>|null} [runnables] TaskSpec runnables
                         * @property {google.cloud.batch.v1.IComputeResource|null} [computeResource] TaskSpec computeResource
                         * @property {google.protobuf.IDuration|null} [maxRunDuration] TaskSpec maxRunDuration
                         * @property {number|null} [maxRetryCount] TaskSpec maxRetryCount
                         * @property {Array.<google.cloud.batch.v1.ILifecyclePolicy>|null} [lifecyclePolicies] TaskSpec lifecyclePolicies
                         * @property {Object.<string,string>|null} [environments] TaskSpec environments
                         * @property {Array.<google.cloud.batch.v1.IVolume>|null} [volumes] TaskSpec volumes
                         * @property {google.cloud.batch.v1.IEnvironment|null} [environment] TaskSpec environment
                         */
    
                        /**
                         * Constructs a new TaskSpec.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a TaskSpec.
                         * @implements ITaskSpec
                         * @constructor
                         * @param {google.cloud.batch.v1.ITaskSpec=} [properties] Properties to set
                         */
                        function TaskSpec(properties) {
                            this.runnables = [];
                            this.lifecyclePolicies = [];
                            this.environments = {};
                            this.volumes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TaskSpec runnables.
                         * @member {Array.<google.cloud.batch.v1.IRunnable>} runnables
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.runnables = $util.emptyArray;
    
                        /**
                         * TaskSpec computeResource.
                         * @member {google.cloud.batch.v1.IComputeResource|null|undefined} computeResource
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.computeResource = null;
    
                        /**
                         * TaskSpec maxRunDuration.
                         * @member {google.protobuf.IDuration|null|undefined} maxRunDuration
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.maxRunDuration = null;
    
                        /**
                         * TaskSpec maxRetryCount.
                         * @member {number} maxRetryCount
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.maxRetryCount = 0;
    
                        /**
                         * TaskSpec lifecyclePolicies.
                         * @member {Array.<google.cloud.batch.v1.ILifecyclePolicy>} lifecyclePolicies
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.lifecyclePolicies = $util.emptyArray;
    
                        /**
                         * TaskSpec environments.
                         * @member {Object.<string,string>} environments
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.environments = $util.emptyObject;
    
                        /**
                         * TaskSpec volumes.
                         * @member {Array.<google.cloud.batch.v1.IVolume>} volumes
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.volumes = $util.emptyArray;
    
                        /**
                         * TaskSpec environment.
                         * @member {google.cloud.batch.v1.IEnvironment|null|undefined} environment
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.environment = null;
    
                        /**
                         * Creates a new TaskSpec instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @static
                         * @param {google.cloud.batch.v1.ITaskSpec=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.TaskSpec} TaskSpec instance
                         */
                        TaskSpec.create = function create(properties) {
                            return new TaskSpec(properties);
                        };
    
                        /**
                         * Encodes the specified TaskSpec message. Does not implicitly {@link google.cloud.batch.v1.TaskSpec.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @static
                         * @param {google.cloud.batch.v1.ITaskSpec} message TaskSpec message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskSpec.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.computeResource != null && Object.hasOwnProperty.call(message, "computeResource"))
                                $root.google.cloud.batch.v1.ComputeResource.encode(message.computeResource, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.maxRunDuration != null && Object.hasOwnProperty.call(message, "maxRunDuration"))
                                $root.google.protobuf.Duration.encode(message.maxRunDuration, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.maxRetryCount != null && Object.hasOwnProperty.call(message, "maxRetryCount"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.maxRetryCount);
                            if (message.environments != null && Object.hasOwnProperty.call(message, "environments"))
                                for (var keys = Object.keys(message.environments), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.environments[keys[i]]).ldelim();
                            if (message.volumes != null && message.volumes.length)
                                for (var i = 0; i < message.volumes.length; ++i)
                                    $root.google.cloud.batch.v1.Volume.encode(message.volumes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.runnables != null && message.runnables.length)
                                for (var i = 0; i < message.runnables.length; ++i)
                                    $root.google.cloud.batch.v1.Runnable.encode(message.runnables[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.lifecyclePolicies != null && message.lifecyclePolicies.length)
                                for (var i = 0; i < message.lifecyclePolicies.length; ++i)
                                    $root.google.cloud.batch.v1.LifecyclePolicy.encode(message.lifecyclePolicies[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.environment != null && Object.hasOwnProperty.call(message, "environment"))
                                $root.google.cloud.batch.v1.Environment.encode(message.environment, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TaskSpec message, length delimited. Does not implicitly {@link google.cloud.batch.v1.TaskSpec.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @static
                         * @param {google.cloud.batch.v1.ITaskSpec} message TaskSpec message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskSpec.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TaskSpec message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.TaskSpec} TaskSpec
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskSpec.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.TaskSpec(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 8: {
                                        if (!(message.runnables && message.runnables.length))
                                            message.runnables = [];
                                        message.runnables.push($root.google.cloud.batch.v1.Runnable.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        message.computeResource = $root.google.cloud.batch.v1.ComputeResource.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.maxRunDuration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.maxRetryCount = reader.int32();
                                        break;
                                    }
                                case 9: {
                                        if (!(message.lifecyclePolicies && message.lifecyclePolicies.length))
                                            message.lifecyclePolicies = [];
                                        message.lifecyclePolicies.push($root.google.cloud.batch.v1.LifecyclePolicy.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 6: {
                                        if (message.environments === $util.emptyObject)
                                            message.environments = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.environments[key] = value;
                                        break;
                                    }
                                case 7: {
                                        if (!(message.volumes && message.volumes.length))
                                            message.volumes = [];
                                        message.volumes.push($root.google.cloud.batch.v1.Volume.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 10: {
                                        message.environment = $root.google.cloud.batch.v1.Environment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TaskSpec message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.TaskSpec} TaskSpec
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskSpec.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TaskSpec message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TaskSpec.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.runnables != null && message.hasOwnProperty("runnables")) {
                                if (!Array.isArray(message.runnables))
                                    return "runnables: array expected";
                                for (var i = 0; i < message.runnables.length; ++i) {
                                    var error = $root.google.cloud.batch.v1.Runnable.verify(message.runnables[i]);
                                    if (error)
                                        return "runnables." + error;
                                }
                            }
                            if (message.computeResource != null && message.hasOwnProperty("computeResource")) {
                                var error = $root.google.cloud.batch.v1.ComputeResource.verify(message.computeResource);
                                if (error)
                                    return "computeResource." + error;
                            }
                            if (message.maxRunDuration != null && message.hasOwnProperty("maxRunDuration")) {
                                var error = $root.google.protobuf.Duration.verify(message.maxRunDuration);
                                if (error)
                                    return "maxRunDuration." + error;
                            }
                            if (message.maxRetryCount != null && message.hasOwnProperty("maxRetryCount"))
                                if (!$util.isInteger(message.maxRetryCount))
                                    return "maxRetryCount: integer expected";
                            if (message.lifecyclePolicies != null && message.hasOwnProperty("lifecyclePolicies")) {
                                if (!Array.isArray(message.lifecyclePolicies))
                                    return "lifecyclePolicies: array expected";
                                for (var i = 0; i < message.lifecyclePolicies.length; ++i) {
                                    var error = $root.google.cloud.batch.v1.LifecyclePolicy.verify(message.lifecyclePolicies[i]);
                                    if (error)
                                        return "lifecyclePolicies." + error;
                                }
                            }
                            if (message.environments != null && message.hasOwnProperty("environments")) {
                                if (!$util.isObject(message.environments))
                                    return "environments: object expected";
                                var key = Object.keys(message.environments);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.environments[key[i]]))
                                        return "environments: string{k:string} expected";
                            }
                            if (message.volumes != null && message.hasOwnProperty("volumes")) {
                                if (!Array.isArray(message.volumes))
                                    return "volumes: array expected";
                                for (var i = 0; i < message.volumes.length; ++i) {
                                    var error = $root.google.cloud.batch.v1.Volume.verify(message.volumes[i]);
                                    if (error)
                                        return "volumes." + error;
                                }
                            }
                            if (message.environment != null && message.hasOwnProperty("environment")) {
                                var error = $root.google.cloud.batch.v1.Environment.verify(message.environment);
                                if (error)
                                    return "environment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TaskSpec message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.TaskSpec} TaskSpec
                         */
                        TaskSpec.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.TaskSpec)
                                return object;
                            var message = new $root.google.cloud.batch.v1.TaskSpec();
                            if (object.runnables) {
                                if (!Array.isArray(object.runnables))
                                    throw TypeError(".google.cloud.batch.v1.TaskSpec.runnables: array expected");
                                message.runnables = [];
                                for (var i = 0; i < object.runnables.length; ++i) {
                                    if (typeof object.runnables[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1.TaskSpec.runnables: object expected");
                                    message.runnables[i] = $root.google.cloud.batch.v1.Runnable.fromObject(object.runnables[i]);
                                }
                            }
                            if (object.computeResource != null) {
                                if (typeof object.computeResource !== "object")
                                    throw TypeError(".google.cloud.batch.v1.TaskSpec.computeResource: object expected");
                                message.computeResource = $root.google.cloud.batch.v1.ComputeResource.fromObject(object.computeResource);
                            }
                            if (object.maxRunDuration != null) {
                                if (typeof object.maxRunDuration !== "object")
                                    throw TypeError(".google.cloud.batch.v1.TaskSpec.maxRunDuration: object expected");
                                message.maxRunDuration = $root.google.protobuf.Duration.fromObject(object.maxRunDuration);
                            }
                            if (object.maxRetryCount != null)
                                message.maxRetryCount = object.maxRetryCount | 0;
                            if (object.lifecyclePolicies) {
                                if (!Array.isArray(object.lifecyclePolicies))
                                    throw TypeError(".google.cloud.batch.v1.TaskSpec.lifecyclePolicies: array expected");
                                message.lifecyclePolicies = [];
                                for (var i = 0; i < object.lifecyclePolicies.length; ++i) {
                                    if (typeof object.lifecyclePolicies[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1.TaskSpec.lifecyclePolicies: object expected");
                                    message.lifecyclePolicies[i] = $root.google.cloud.batch.v1.LifecyclePolicy.fromObject(object.lifecyclePolicies[i]);
                                }
                            }
                            if (object.environments) {
                                if (typeof object.environments !== "object")
                                    throw TypeError(".google.cloud.batch.v1.TaskSpec.environments: object expected");
                                message.environments = {};
                                for (var keys = Object.keys(object.environments), i = 0; i < keys.length; ++i)
                                    message.environments[keys[i]] = String(object.environments[keys[i]]);
                            }
                            if (object.volumes) {
                                if (!Array.isArray(object.volumes))
                                    throw TypeError(".google.cloud.batch.v1.TaskSpec.volumes: array expected");
                                message.volumes = [];
                                for (var i = 0; i < object.volumes.length; ++i) {
                                    if (typeof object.volumes[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1.TaskSpec.volumes: object expected");
                                    message.volumes[i] = $root.google.cloud.batch.v1.Volume.fromObject(object.volumes[i]);
                                }
                            }
                            if (object.environment != null) {
                                if (typeof object.environment !== "object")
                                    throw TypeError(".google.cloud.batch.v1.TaskSpec.environment: object expected");
                                message.environment = $root.google.cloud.batch.v1.Environment.fromObject(object.environment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TaskSpec message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @static
                         * @param {google.cloud.batch.v1.TaskSpec} message TaskSpec
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TaskSpec.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.volumes = [];
                                object.runnables = [];
                                object.lifecyclePolicies = [];
                            }
                            if (options.objects || options.defaults)
                                object.environments = {};
                            if (options.defaults) {
                                object.computeResource = null;
                                object.maxRunDuration = null;
                                object.maxRetryCount = 0;
                                object.environment = null;
                            }
                            if (message.computeResource != null && message.hasOwnProperty("computeResource"))
                                object.computeResource = $root.google.cloud.batch.v1.ComputeResource.toObject(message.computeResource, options);
                            if (message.maxRunDuration != null && message.hasOwnProperty("maxRunDuration"))
                                object.maxRunDuration = $root.google.protobuf.Duration.toObject(message.maxRunDuration, options);
                            if (message.maxRetryCount != null && message.hasOwnProperty("maxRetryCount"))
                                object.maxRetryCount = message.maxRetryCount;
                            var keys2;
                            if (message.environments && (keys2 = Object.keys(message.environments)).length) {
                                object.environments = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.environments[keys2[j]] = message.environments[keys2[j]];
                            }
                            if (message.volumes && message.volumes.length) {
                                object.volumes = [];
                                for (var j = 0; j < message.volumes.length; ++j)
                                    object.volumes[j] = $root.google.cloud.batch.v1.Volume.toObject(message.volumes[j], options);
                            }
                            if (message.runnables && message.runnables.length) {
                                object.runnables = [];
                                for (var j = 0; j < message.runnables.length; ++j)
                                    object.runnables[j] = $root.google.cloud.batch.v1.Runnable.toObject(message.runnables[j], options);
                            }
                            if (message.lifecyclePolicies && message.lifecyclePolicies.length) {
                                object.lifecyclePolicies = [];
                                for (var j = 0; j < message.lifecyclePolicies.length; ++j)
                                    object.lifecyclePolicies[j] = $root.google.cloud.batch.v1.LifecyclePolicy.toObject(message.lifecyclePolicies[j], options);
                            }
                            if (message.environment != null && message.hasOwnProperty("environment"))
                                object.environment = $root.google.cloud.batch.v1.Environment.toObject(message.environment, options);
                            return object;
                        };
    
                        /**
                         * Converts this TaskSpec to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TaskSpec.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TaskSpec
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.TaskSpec
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TaskSpec.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.TaskSpec";
                        };
    
                        return TaskSpec;
                    })();
    
                    v1.LifecyclePolicy = (function() {
    
                        /**
                         * Properties of a LifecyclePolicy.
                         * @memberof google.cloud.batch.v1
                         * @interface ILifecyclePolicy
                         * @property {google.cloud.batch.v1.LifecyclePolicy.Action|null} [action] LifecyclePolicy action
                         * @property {google.cloud.batch.v1.LifecyclePolicy.IActionCondition|null} [actionCondition] LifecyclePolicy actionCondition
                         */
    
                        /**
                         * Constructs a new LifecyclePolicy.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a LifecyclePolicy.
                         * @implements ILifecyclePolicy
                         * @constructor
                         * @param {google.cloud.batch.v1.ILifecyclePolicy=} [properties] Properties to set
                         */
                        function LifecyclePolicy(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LifecyclePolicy action.
                         * @member {google.cloud.batch.v1.LifecyclePolicy.Action} action
                         * @memberof google.cloud.batch.v1.LifecyclePolicy
                         * @instance
                         */
                        LifecyclePolicy.prototype.action = 0;
    
                        /**
                         * LifecyclePolicy actionCondition.
                         * @member {google.cloud.batch.v1.LifecyclePolicy.IActionCondition|null|undefined} actionCondition
                         * @memberof google.cloud.batch.v1.LifecyclePolicy
                         * @instance
                         */
                        LifecyclePolicy.prototype.actionCondition = null;
    
                        /**
                         * Creates a new LifecyclePolicy instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.LifecyclePolicy
                         * @static
                         * @param {google.cloud.batch.v1.ILifecyclePolicy=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.LifecyclePolicy} LifecyclePolicy instance
                         */
                        LifecyclePolicy.create = function create(properties) {
                            return new LifecyclePolicy(properties);
                        };
    
                        /**
                         * Encodes the specified LifecyclePolicy message. Does not implicitly {@link google.cloud.batch.v1.LifecyclePolicy.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.LifecyclePolicy
                         * @static
                         * @param {google.cloud.batch.v1.ILifecyclePolicy} message LifecyclePolicy message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LifecyclePolicy.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
                            if (message.actionCondition != null && Object.hasOwnProperty.call(message, "actionCondition"))
                                $root.google.cloud.batch.v1.LifecyclePolicy.ActionCondition.encode(message.actionCondition, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LifecyclePolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1.LifecyclePolicy.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.LifecyclePolicy
                         * @static
                         * @param {google.cloud.batch.v1.ILifecyclePolicy} message LifecyclePolicy message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LifecyclePolicy.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LifecyclePolicy message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.LifecyclePolicy
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.LifecyclePolicy} LifecyclePolicy
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LifecyclePolicy.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.LifecyclePolicy();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.action = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.actionCondition = $root.google.cloud.batch.v1.LifecyclePolicy.ActionCondition.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LifecyclePolicy message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.LifecyclePolicy
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.LifecyclePolicy} LifecyclePolicy
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LifecyclePolicy.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LifecyclePolicy message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.LifecyclePolicy
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LifecyclePolicy.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.action != null && message.hasOwnProperty("action"))
                                switch (message.action) {
                                default:
                                    return "action: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.actionCondition != null && message.hasOwnProperty("actionCondition")) {
                                var error = $root.google.cloud.batch.v1.LifecyclePolicy.ActionCondition.verify(message.actionCondition);
                                if (error)
                                    return "actionCondition." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a LifecyclePolicy message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.LifecyclePolicy
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.LifecyclePolicy} LifecyclePolicy
                         */
                        LifecyclePolicy.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.LifecyclePolicy)
                                return object;
                            var message = new $root.google.cloud.batch.v1.LifecyclePolicy();
                            switch (object.action) {
                            default:
                                if (typeof object.action === "number") {
                                    message.action = object.action;
                                    break;
                                }
                                break;
                            case "ACTION_UNSPECIFIED":
                            case 0:
                                message.action = 0;
                                break;
                            case "RETRY_TASK":
                            case 1:
                                message.action = 1;
                                break;
                            case "FAIL_TASK":
                            case 2:
                                message.action = 2;
                                break;
                            }
                            if (object.actionCondition != null) {
                                if (typeof object.actionCondition !== "object")
                                    throw TypeError(".google.cloud.batch.v1.LifecyclePolicy.actionCondition: object expected");
                                message.actionCondition = $root.google.cloud.batch.v1.LifecyclePolicy.ActionCondition.fromObject(object.actionCondition);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LifecyclePolicy message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.LifecyclePolicy
                         * @static
                         * @param {google.cloud.batch.v1.LifecyclePolicy} message LifecyclePolicy
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LifecyclePolicy.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                                object.actionCondition = null;
                            }
                            if (message.action != null && message.hasOwnProperty("action"))
                                object.action = options.enums === String ? $root.google.cloud.batch.v1.LifecyclePolicy.Action[message.action] === undefined ? message.action : $root.google.cloud.batch.v1.LifecyclePolicy.Action[message.action] : message.action;
                            if (message.actionCondition != null && message.hasOwnProperty("actionCondition"))
                                object.actionCondition = $root.google.cloud.batch.v1.LifecyclePolicy.ActionCondition.toObject(message.actionCondition, options);
                            return object;
                        };
    
                        /**
                         * Converts this LifecyclePolicy to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.LifecyclePolicy
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LifecyclePolicy.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LifecyclePolicy
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.LifecyclePolicy
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LifecyclePolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.LifecyclePolicy";
                        };
    
                        LifecyclePolicy.ActionCondition = (function() {
    
                            /**
                             * Properties of an ActionCondition.
                             * @memberof google.cloud.batch.v1.LifecyclePolicy
                             * @interface IActionCondition
                             * @property {Array.<number>|null} [exitCodes] ActionCondition exitCodes
                             */
    
                            /**
                             * Constructs a new ActionCondition.
                             * @memberof google.cloud.batch.v1.LifecyclePolicy
                             * @classdesc Represents an ActionCondition.
                             * @implements IActionCondition
                             * @constructor
                             * @param {google.cloud.batch.v1.LifecyclePolicy.IActionCondition=} [properties] Properties to set
                             */
                            function ActionCondition(properties) {
                                this.exitCodes = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ActionCondition exitCodes.
                             * @member {Array.<number>} exitCodes
                             * @memberof google.cloud.batch.v1.LifecyclePolicy.ActionCondition
                             * @instance
                             */
                            ActionCondition.prototype.exitCodes = $util.emptyArray;
    
                            /**
                             * Creates a new ActionCondition instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {google.cloud.batch.v1.LifecyclePolicy.IActionCondition=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.LifecyclePolicy.ActionCondition} ActionCondition instance
                             */
                            ActionCondition.create = function create(properties) {
                                return new ActionCondition(properties);
                            };
    
                            /**
                             * Encodes the specified ActionCondition message. Does not implicitly {@link google.cloud.batch.v1.LifecyclePolicy.ActionCondition.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {google.cloud.batch.v1.LifecyclePolicy.IActionCondition} message ActionCondition message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ActionCondition.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.exitCodes != null && message.exitCodes.length) {
                                    writer.uint32(/* id 1, wireType 2 =*/10).fork();
                                    for (var i = 0; i < message.exitCodes.length; ++i)
                                        writer.int32(message.exitCodes[i]);
                                    writer.ldelim();
                                }
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ActionCondition message, length delimited. Does not implicitly {@link google.cloud.batch.v1.LifecyclePolicy.ActionCondition.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {google.cloud.batch.v1.LifecyclePolicy.IActionCondition} message ActionCondition message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ActionCondition.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ActionCondition message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.LifecyclePolicy.ActionCondition} ActionCondition
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ActionCondition.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.LifecyclePolicy.ActionCondition();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            if (!(message.exitCodes && message.exitCodes.length))
                                                message.exitCodes = [];
                                            if ((tag & 7) === 2) {
                                                var end2 = reader.uint32() + reader.pos;
                                                while (reader.pos < end2)
                                                    message.exitCodes.push(reader.int32());
                                            } else
                                                message.exitCodes.push(reader.int32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ActionCondition message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.LifecyclePolicy.ActionCondition} ActionCondition
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ActionCondition.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ActionCondition message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ActionCondition.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.exitCodes != null && message.hasOwnProperty("exitCodes")) {
                                    if (!Array.isArray(message.exitCodes))
                                        return "exitCodes: array expected";
                                    for (var i = 0; i < message.exitCodes.length; ++i)
                                        if (!$util.isInteger(message.exitCodes[i]))
                                            return "exitCodes: integer[] expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates an ActionCondition message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.LifecyclePolicy.ActionCondition} ActionCondition
                             */
                            ActionCondition.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.LifecyclePolicy.ActionCondition)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.LifecyclePolicy.ActionCondition();
                                if (object.exitCodes) {
                                    if (!Array.isArray(object.exitCodes))
                                        throw TypeError(".google.cloud.batch.v1.LifecyclePolicy.ActionCondition.exitCodes: array expected");
                                    message.exitCodes = [];
                                    for (var i = 0; i < object.exitCodes.length; ++i)
                                        message.exitCodes[i] = object.exitCodes[i] | 0;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ActionCondition message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {google.cloud.batch.v1.LifecyclePolicy.ActionCondition} message ActionCondition
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ActionCondition.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.exitCodes = [];
                                if (message.exitCodes && message.exitCodes.length) {
                                    object.exitCodes = [];
                                    for (var j = 0; j < message.exitCodes.length; ++j)
                                        object.exitCodes[j] = message.exitCodes[j];
                                }
                                return object;
                            };
    
                            /**
                             * Converts this ActionCondition to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.LifecyclePolicy.ActionCondition
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ActionCondition.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ActionCondition
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ActionCondition.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.LifecyclePolicy.ActionCondition";
                            };
    
                            return ActionCondition;
                        })();
    
                        /**
                         * Action enum.
                         * @name google.cloud.batch.v1.LifecyclePolicy.Action
                         * @enum {number}
                         * @property {number} ACTION_UNSPECIFIED=0 ACTION_UNSPECIFIED value
                         * @property {number} RETRY_TASK=1 RETRY_TASK value
                         * @property {number} FAIL_TASK=2 FAIL_TASK value
                         */
                        LifecyclePolicy.Action = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "RETRY_TASK"] = 1;
                            values[valuesById[2] = "FAIL_TASK"] = 2;
                            return values;
                        })();
    
                        return LifecyclePolicy;
                    })();
    
                    v1.Task = (function() {
    
                        /**
                         * Properties of a Task.
                         * @memberof google.cloud.batch.v1
                         * @interface ITask
                         * @property {string|null} [name] Task name
                         * @property {google.cloud.batch.v1.ITaskStatus|null} [status] Task status
                         */
    
                        /**
                         * Constructs a new Task.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a Task.
                         * @implements ITask
                         * @constructor
                         * @param {google.cloud.batch.v1.ITask=} [properties] Properties to set
                         */
                        function Task(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Task name.
                         * @member {string} name
                         * @memberof google.cloud.batch.v1.Task
                         * @instance
                         */
                        Task.prototype.name = "";
    
                        /**
                         * Task status.
                         * @member {google.cloud.batch.v1.ITaskStatus|null|undefined} status
                         * @memberof google.cloud.batch.v1.Task
                         * @instance
                         */
                        Task.prototype.status = null;
    
                        /**
                         * Creates a new Task instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.Task
                         * @static
                         * @param {google.cloud.batch.v1.ITask=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.Task} Task instance
                         */
                        Task.create = function create(properties) {
                            return new Task(properties);
                        };
    
                        /**
                         * Encodes the specified Task message. Does not implicitly {@link google.cloud.batch.v1.Task.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.Task
                         * @static
                         * @param {google.cloud.batch.v1.ITask} message Task message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Task.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                                $root.google.cloud.batch.v1.TaskStatus.encode(message.status, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Task message, length delimited. Does not implicitly {@link google.cloud.batch.v1.Task.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.Task
                         * @static
                         * @param {google.cloud.batch.v1.ITask} message Task message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Task.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Task message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.Task
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.Task} Task
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Task.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.Task();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.status = $root.google.cloud.batch.v1.TaskStatus.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Task message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.Task
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.Task} Task
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Task.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Task message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.Task
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Task.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.status != null && message.hasOwnProperty("status")) {
                                var error = $root.google.cloud.batch.v1.TaskStatus.verify(message.status);
                                if (error)
                                    return "status." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Task message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.Task
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.Task} Task
                         */
                        Task.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.Task)
                                return object;
                            var message = new $root.google.cloud.batch.v1.Task();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.status != null) {
                                if (typeof object.status !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Task.status: object expected");
                                message.status = $root.google.cloud.batch.v1.TaskStatus.fromObject(object.status);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Task message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.Task
                         * @static
                         * @param {google.cloud.batch.v1.Task} message Task
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Task.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.status = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.status != null && message.hasOwnProperty("status"))
                                object.status = $root.google.cloud.batch.v1.TaskStatus.toObject(message.status, options);
                            return object;
                        };
    
                        /**
                         * Converts this Task to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.Task
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Task.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Task
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.Task
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Task.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.Task";
                        };
    
                        return Task;
                    })();
    
                    v1.Environment = (function() {
    
                        /**
                         * Properties of an Environment.
                         * @memberof google.cloud.batch.v1
                         * @interface IEnvironment
                         * @property {Object.<string,string>|null} [variables] Environment variables
                         * @property {Object.<string,string>|null} [secretVariables] Environment secretVariables
                         * @property {google.cloud.batch.v1.Environment.IKMSEnvMap|null} [encryptedVariables] Environment encryptedVariables
                         */
    
                        /**
                         * Constructs a new Environment.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents an Environment.
                         * @implements IEnvironment
                         * @constructor
                         * @param {google.cloud.batch.v1.IEnvironment=} [properties] Properties to set
                         */
                        function Environment(properties) {
                            this.variables = {};
                            this.secretVariables = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Environment variables.
                         * @member {Object.<string,string>} variables
                         * @memberof google.cloud.batch.v1.Environment
                         * @instance
                         */
                        Environment.prototype.variables = $util.emptyObject;
    
                        /**
                         * Environment secretVariables.
                         * @member {Object.<string,string>} secretVariables
                         * @memberof google.cloud.batch.v1.Environment
                         * @instance
                         */
                        Environment.prototype.secretVariables = $util.emptyObject;
    
                        /**
                         * Environment encryptedVariables.
                         * @member {google.cloud.batch.v1.Environment.IKMSEnvMap|null|undefined} encryptedVariables
                         * @memberof google.cloud.batch.v1.Environment
                         * @instance
                         */
                        Environment.prototype.encryptedVariables = null;
    
                        /**
                         * Creates a new Environment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.Environment
                         * @static
                         * @param {google.cloud.batch.v1.IEnvironment=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.Environment} Environment instance
                         */
                        Environment.create = function create(properties) {
                            return new Environment(properties);
                        };
    
                        /**
                         * Encodes the specified Environment message. Does not implicitly {@link google.cloud.batch.v1.Environment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.Environment
                         * @static
                         * @param {google.cloud.batch.v1.IEnvironment} message Environment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Environment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.variables != null && Object.hasOwnProperty.call(message, "variables"))
                                for (var keys = Object.keys(message.variables), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.variables[keys[i]]).ldelim();
                            if (message.secretVariables != null && Object.hasOwnProperty.call(message, "secretVariables"))
                                for (var keys = Object.keys(message.secretVariables), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.secretVariables[keys[i]]).ldelim();
                            if (message.encryptedVariables != null && Object.hasOwnProperty.call(message, "encryptedVariables"))
                                $root.google.cloud.batch.v1.Environment.KMSEnvMap.encode(message.encryptedVariables, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Environment message, length delimited. Does not implicitly {@link google.cloud.batch.v1.Environment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.Environment
                         * @static
                         * @param {google.cloud.batch.v1.IEnvironment} message Environment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Environment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Environment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.Environment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.Environment} Environment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Environment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.Environment(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (message.variables === $util.emptyObject)
                                            message.variables = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.variables[key] = value;
                                        break;
                                    }
                                case 2: {
                                        if (message.secretVariables === $util.emptyObject)
                                            message.secretVariables = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.secretVariables[key] = value;
                                        break;
                                    }
                                case 3: {
                                        message.encryptedVariables = $root.google.cloud.batch.v1.Environment.KMSEnvMap.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Environment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.Environment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.Environment} Environment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Environment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Environment message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.Environment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Environment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.variables != null && message.hasOwnProperty("variables")) {
                                if (!$util.isObject(message.variables))
                                    return "variables: object expected";
                                var key = Object.keys(message.variables);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.variables[key[i]]))
                                        return "variables: string{k:string} expected";
                            }
                            if (message.secretVariables != null && message.hasOwnProperty("secretVariables")) {
                                if (!$util.isObject(message.secretVariables))
                                    return "secretVariables: object expected";
                                var key = Object.keys(message.secretVariables);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.secretVariables[key[i]]))
                                        return "secretVariables: string{k:string} expected";
                            }
                            if (message.encryptedVariables != null && message.hasOwnProperty("encryptedVariables")) {
                                var error = $root.google.cloud.batch.v1.Environment.KMSEnvMap.verify(message.encryptedVariables);
                                if (error)
                                    return "encryptedVariables." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Environment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.Environment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.Environment} Environment
                         */
                        Environment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.Environment)
                                return object;
                            var message = new $root.google.cloud.batch.v1.Environment();
                            if (object.variables) {
                                if (typeof object.variables !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Environment.variables: object expected");
                                message.variables = {};
                                for (var keys = Object.keys(object.variables), i = 0; i < keys.length; ++i)
                                    message.variables[keys[i]] = String(object.variables[keys[i]]);
                            }
                            if (object.secretVariables) {
                                if (typeof object.secretVariables !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Environment.secretVariables: object expected");
                                message.secretVariables = {};
                                for (var keys = Object.keys(object.secretVariables), i = 0; i < keys.length; ++i)
                                    message.secretVariables[keys[i]] = String(object.secretVariables[keys[i]]);
                            }
                            if (object.encryptedVariables != null) {
                                if (typeof object.encryptedVariables !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Environment.encryptedVariables: object expected");
                                message.encryptedVariables = $root.google.cloud.batch.v1.Environment.KMSEnvMap.fromObject(object.encryptedVariables);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Environment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.Environment
                         * @static
                         * @param {google.cloud.batch.v1.Environment} message Environment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Environment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults) {
                                object.variables = {};
                                object.secretVariables = {};
                            }
                            if (options.defaults)
                                object.encryptedVariables = null;
                            var keys2;
                            if (message.variables && (keys2 = Object.keys(message.variables)).length) {
                                object.variables = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.variables[keys2[j]] = message.variables[keys2[j]];
                            }
                            if (message.secretVariables && (keys2 = Object.keys(message.secretVariables)).length) {
                                object.secretVariables = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.secretVariables[keys2[j]] = message.secretVariables[keys2[j]];
                            }
                            if (message.encryptedVariables != null && message.hasOwnProperty("encryptedVariables"))
                                object.encryptedVariables = $root.google.cloud.batch.v1.Environment.KMSEnvMap.toObject(message.encryptedVariables, options);
                            return object;
                        };
    
                        /**
                         * Converts this Environment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.Environment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Environment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Environment
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.Environment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Environment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.Environment";
                        };
    
                        Environment.KMSEnvMap = (function() {
    
                            /**
                             * Properties of a KMSEnvMap.
                             * @memberof google.cloud.batch.v1.Environment
                             * @interface IKMSEnvMap
                             * @property {string|null} [keyName] KMSEnvMap keyName
                             * @property {string|null} [cipherText] KMSEnvMap cipherText
                             */
    
                            /**
                             * Constructs a new KMSEnvMap.
                             * @memberof google.cloud.batch.v1.Environment
                             * @classdesc Represents a KMSEnvMap.
                             * @implements IKMSEnvMap
                             * @constructor
                             * @param {google.cloud.batch.v1.Environment.IKMSEnvMap=} [properties] Properties to set
                             */
                            function KMSEnvMap(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * KMSEnvMap keyName.
                             * @member {string} keyName
                             * @memberof google.cloud.batch.v1.Environment.KMSEnvMap
                             * @instance
                             */
                            KMSEnvMap.prototype.keyName = "";
    
                            /**
                             * KMSEnvMap cipherText.
                             * @member {string} cipherText
                             * @memberof google.cloud.batch.v1.Environment.KMSEnvMap
                             * @instance
                             */
                            KMSEnvMap.prototype.cipherText = "";
    
                            /**
                             * Creates a new KMSEnvMap instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1.Environment.KMSEnvMap
                             * @static
                             * @param {google.cloud.batch.v1.Environment.IKMSEnvMap=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1.Environment.KMSEnvMap} KMSEnvMap instance
                             */
                            KMSEnvMap.create = function create(properties) {
                                return new KMSEnvMap(properties);
                            };
    
                            /**
                             * Encodes the specified KMSEnvMap message. Does not implicitly {@link google.cloud.batch.v1.Environment.KMSEnvMap.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1.Environment.KMSEnvMap
                             * @static
                             * @param {google.cloud.batch.v1.Environment.IKMSEnvMap} message KMSEnvMap message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KMSEnvMap.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.keyName != null && Object.hasOwnProperty.call(message, "keyName"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.keyName);
                                if (message.cipherText != null && Object.hasOwnProperty.call(message, "cipherText"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.cipherText);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified KMSEnvMap message, length delimited. Does not implicitly {@link google.cloud.batch.v1.Environment.KMSEnvMap.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1.Environment.KMSEnvMap
                             * @static
                             * @param {google.cloud.batch.v1.Environment.IKMSEnvMap} message KMSEnvMap message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KMSEnvMap.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a KMSEnvMap message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1.Environment.KMSEnvMap
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1.Environment.KMSEnvMap} KMSEnvMap
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KMSEnvMap.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.Environment.KMSEnvMap();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.keyName = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.cipherText = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a KMSEnvMap message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1.Environment.KMSEnvMap
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1.Environment.KMSEnvMap} KMSEnvMap
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KMSEnvMap.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a KMSEnvMap message.
                             * @function verify
                             * @memberof google.cloud.batch.v1.Environment.KMSEnvMap
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            KMSEnvMap.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.keyName != null && message.hasOwnProperty("keyName"))
                                    if (!$util.isString(message.keyName))
                                        return "keyName: string expected";
                                if (message.cipherText != null && message.hasOwnProperty("cipherText"))
                                    if (!$util.isString(message.cipherText))
                                        return "cipherText: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a KMSEnvMap message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1.Environment.KMSEnvMap
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1.Environment.KMSEnvMap} KMSEnvMap
                             */
                            KMSEnvMap.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1.Environment.KMSEnvMap)
                                    return object;
                                var message = new $root.google.cloud.batch.v1.Environment.KMSEnvMap();
                                if (object.keyName != null)
                                    message.keyName = String(object.keyName);
                                if (object.cipherText != null)
                                    message.cipherText = String(object.cipherText);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a KMSEnvMap message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1.Environment.KMSEnvMap
                             * @static
                             * @param {google.cloud.batch.v1.Environment.KMSEnvMap} message KMSEnvMap
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            KMSEnvMap.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.keyName = "";
                                    object.cipherText = "";
                                }
                                if (message.keyName != null && message.hasOwnProperty("keyName"))
                                    object.keyName = message.keyName;
                                if (message.cipherText != null && message.hasOwnProperty("cipherText"))
                                    object.cipherText = message.cipherText;
                                return object;
                            };
    
                            /**
                             * Converts this KMSEnvMap to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1.Environment.KMSEnvMap
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            KMSEnvMap.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for KMSEnvMap
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1.Environment.KMSEnvMap
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            KMSEnvMap.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1.Environment.KMSEnvMap";
                            };
    
                            return KMSEnvMap;
                        })();
    
                        return Environment;
                    })();
    
                    v1.Volume = (function() {
    
                        /**
                         * Properties of a Volume.
                         * @memberof google.cloud.batch.v1
                         * @interface IVolume
                         * @property {google.cloud.batch.v1.INFS|null} [nfs] Volume nfs
                         * @property {google.cloud.batch.v1.IGCS|null} [gcs] Volume gcs
                         * @property {string|null} [deviceName] Volume deviceName
                         * @property {string|null} [mountPath] Volume mountPath
                         * @property {Array.<string>|null} [mountOptions] Volume mountOptions
                         */
    
                        /**
                         * Constructs a new Volume.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a Volume.
                         * @implements IVolume
                         * @constructor
                         * @param {google.cloud.batch.v1.IVolume=} [properties] Properties to set
                         */
                        function Volume(properties) {
                            this.mountOptions = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Volume nfs.
                         * @member {google.cloud.batch.v1.INFS|null|undefined} nfs
                         * @memberof google.cloud.batch.v1.Volume
                         * @instance
                         */
                        Volume.prototype.nfs = null;
    
                        /**
                         * Volume gcs.
                         * @member {google.cloud.batch.v1.IGCS|null|undefined} gcs
                         * @memberof google.cloud.batch.v1.Volume
                         * @instance
                         */
                        Volume.prototype.gcs = null;
    
                        /**
                         * Volume deviceName.
                         * @member {string|null|undefined} deviceName
                         * @memberof google.cloud.batch.v1.Volume
                         * @instance
                         */
                        Volume.prototype.deviceName = null;
    
                        /**
                         * Volume mountPath.
                         * @member {string} mountPath
                         * @memberof google.cloud.batch.v1.Volume
                         * @instance
                         */
                        Volume.prototype.mountPath = "";
    
                        /**
                         * Volume mountOptions.
                         * @member {Array.<string>} mountOptions
                         * @memberof google.cloud.batch.v1.Volume
                         * @instance
                         */
                        Volume.prototype.mountOptions = $util.emptyArray;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Volume source.
                         * @member {"nfs"|"gcs"|"deviceName"|undefined} source
                         * @memberof google.cloud.batch.v1.Volume
                         * @instance
                         */
                        Object.defineProperty(Volume.prototype, "source", {
                            get: $util.oneOfGetter($oneOfFields = ["nfs", "gcs", "deviceName"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Volume instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.Volume
                         * @static
                         * @param {google.cloud.batch.v1.IVolume=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.Volume} Volume instance
                         */
                        Volume.create = function create(properties) {
                            return new Volume(properties);
                        };
    
                        /**
                         * Encodes the specified Volume message. Does not implicitly {@link google.cloud.batch.v1.Volume.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.Volume
                         * @static
                         * @param {google.cloud.batch.v1.IVolume} message Volume message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Volume.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.nfs != null && Object.hasOwnProperty.call(message, "nfs"))
                                $root.google.cloud.batch.v1.NFS.encode(message.nfs, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.gcs != null && Object.hasOwnProperty.call(message, "gcs"))
                                $root.google.cloud.batch.v1.GCS.encode(message.gcs, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.mountPath != null && Object.hasOwnProperty.call(message, "mountPath"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.mountPath);
                            if (message.mountOptions != null && message.mountOptions.length)
                                for (var i = 0; i < message.mountOptions.length; ++i)
                                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.mountOptions[i]);
                            if (message.deviceName != null && Object.hasOwnProperty.call(message, "deviceName"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.deviceName);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Volume message, length delimited. Does not implicitly {@link google.cloud.batch.v1.Volume.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.Volume
                         * @static
                         * @param {google.cloud.batch.v1.IVolume} message Volume message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Volume.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Volume message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.Volume
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.Volume} Volume
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Volume.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.Volume();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.nfs = $root.google.cloud.batch.v1.NFS.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.gcs = $root.google.cloud.batch.v1.GCS.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.deviceName = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.mountPath = reader.string();
                                        break;
                                    }
                                case 5: {
                                        if (!(message.mountOptions && message.mountOptions.length))
                                            message.mountOptions = [];
                                        message.mountOptions.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Volume message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.Volume
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.Volume} Volume
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Volume.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Volume message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.Volume
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Volume.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.nfs != null && message.hasOwnProperty("nfs")) {
                                properties.source = 1;
                                {
                                    var error = $root.google.cloud.batch.v1.NFS.verify(message.nfs);
                                    if (error)
                                        return "nfs." + error;
                                }
                            }
                            if (message.gcs != null && message.hasOwnProperty("gcs")) {
                                if (properties.source === 1)
                                    return "source: multiple values";
                                properties.source = 1;
                                {
                                    var error = $root.google.cloud.batch.v1.GCS.verify(message.gcs);
                                    if (error)
                                        return "gcs." + error;
                                }
                            }
                            if (message.deviceName != null && message.hasOwnProperty("deviceName")) {
                                if (properties.source === 1)
                                    return "source: multiple values";
                                properties.source = 1;
                                if (!$util.isString(message.deviceName))
                                    return "deviceName: string expected";
                            }
                            if (message.mountPath != null && message.hasOwnProperty("mountPath"))
                                if (!$util.isString(message.mountPath))
                                    return "mountPath: string expected";
                            if (message.mountOptions != null && message.hasOwnProperty("mountOptions")) {
                                if (!Array.isArray(message.mountOptions))
                                    return "mountOptions: array expected";
                                for (var i = 0; i < message.mountOptions.length; ++i)
                                    if (!$util.isString(message.mountOptions[i]))
                                        return "mountOptions: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Volume message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.Volume
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.Volume} Volume
                         */
                        Volume.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.Volume)
                                return object;
                            var message = new $root.google.cloud.batch.v1.Volume();
                            if (object.nfs != null) {
                                if (typeof object.nfs !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Volume.nfs: object expected");
                                message.nfs = $root.google.cloud.batch.v1.NFS.fromObject(object.nfs);
                            }
                            if (object.gcs != null) {
                                if (typeof object.gcs !== "object")
                                    throw TypeError(".google.cloud.batch.v1.Volume.gcs: object expected");
                                message.gcs = $root.google.cloud.batch.v1.GCS.fromObject(object.gcs);
                            }
                            if (object.deviceName != null)
                                message.deviceName = String(object.deviceName);
                            if (object.mountPath != null)
                                message.mountPath = String(object.mountPath);
                            if (object.mountOptions) {
                                if (!Array.isArray(object.mountOptions))
                                    throw TypeError(".google.cloud.batch.v1.Volume.mountOptions: array expected");
                                message.mountOptions = [];
                                for (var i = 0; i < object.mountOptions.length; ++i)
                                    message.mountOptions[i] = String(object.mountOptions[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Volume message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.Volume
                         * @static
                         * @param {google.cloud.batch.v1.Volume} message Volume
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Volume.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.mountOptions = [];
                            if (options.defaults)
                                object.mountPath = "";
                            if (message.nfs != null && message.hasOwnProperty("nfs")) {
                                object.nfs = $root.google.cloud.batch.v1.NFS.toObject(message.nfs, options);
                                if (options.oneofs)
                                    object.source = "nfs";
                            }
                            if (message.gcs != null && message.hasOwnProperty("gcs")) {
                                object.gcs = $root.google.cloud.batch.v1.GCS.toObject(message.gcs, options);
                                if (options.oneofs)
                                    object.source = "gcs";
                            }
                            if (message.mountPath != null && message.hasOwnProperty("mountPath"))
                                object.mountPath = message.mountPath;
                            if (message.mountOptions && message.mountOptions.length) {
                                object.mountOptions = [];
                                for (var j = 0; j < message.mountOptions.length; ++j)
                                    object.mountOptions[j] = message.mountOptions[j];
                            }
                            if (message.deviceName != null && message.hasOwnProperty("deviceName")) {
                                object.deviceName = message.deviceName;
                                if (options.oneofs)
                                    object.source = "deviceName";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Volume to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.Volume
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Volume.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Volume
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.Volume
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Volume.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.Volume";
                        };
    
                        return Volume;
                    })();
    
                    v1.NFS = (function() {
    
                        /**
                         * Properties of a NFS.
                         * @memberof google.cloud.batch.v1
                         * @interface INFS
                         * @property {string|null} [server] NFS server
                         * @property {string|null} [remotePath] NFS remotePath
                         */
    
                        /**
                         * Constructs a new NFS.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a NFS.
                         * @implements INFS
                         * @constructor
                         * @param {google.cloud.batch.v1.INFS=} [properties] Properties to set
                         */
                        function NFS(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * NFS server.
                         * @member {string} server
                         * @memberof google.cloud.batch.v1.NFS
                         * @instance
                         */
                        NFS.prototype.server = "";
    
                        /**
                         * NFS remotePath.
                         * @member {string} remotePath
                         * @memberof google.cloud.batch.v1.NFS
                         * @instance
                         */
                        NFS.prototype.remotePath = "";
    
                        /**
                         * Creates a new NFS instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.NFS
                         * @static
                         * @param {google.cloud.batch.v1.INFS=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.NFS} NFS instance
                         */
                        NFS.create = function create(properties) {
                            return new NFS(properties);
                        };
    
                        /**
                         * Encodes the specified NFS message. Does not implicitly {@link google.cloud.batch.v1.NFS.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.NFS
                         * @static
                         * @param {google.cloud.batch.v1.INFS} message NFS message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NFS.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.server != null && Object.hasOwnProperty.call(message, "server"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.server);
                            if (message.remotePath != null && Object.hasOwnProperty.call(message, "remotePath"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.remotePath);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified NFS message, length delimited. Does not implicitly {@link google.cloud.batch.v1.NFS.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.NFS
                         * @static
                         * @param {google.cloud.batch.v1.INFS} message NFS message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NFS.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a NFS message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.NFS
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.NFS} NFS
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NFS.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.NFS();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.server = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.remotePath = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a NFS message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.NFS
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.NFS} NFS
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NFS.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a NFS message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.NFS
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NFS.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.server != null && message.hasOwnProperty("server"))
                                if (!$util.isString(message.server))
                                    return "server: string expected";
                            if (message.remotePath != null && message.hasOwnProperty("remotePath"))
                                if (!$util.isString(message.remotePath))
                                    return "remotePath: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a NFS message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.NFS
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.NFS} NFS
                         */
                        NFS.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.NFS)
                                return object;
                            var message = new $root.google.cloud.batch.v1.NFS();
                            if (object.server != null)
                                message.server = String(object.server);
                            if (object.remotePath != null)
                                message.remotePath = String(object.remotePath);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a NFS message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.NFS
                         * @static
                         * @param {google.cloud.batch.v1.NFS} message NFS
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NFS.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.server = "";
                                object.remotePath = "";
                            }
                            if (message.server != null && message.hasOwnProperty("server"))
                                object.server = message.server;
                            if (message.remotePath != null && message.hasOwnProperty("remotePath"))
                                object.remotePath = message.remotePath;
                            return object;
                        };
    
                        /**
                         * Converts this NFS to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.NFS
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NFS.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for NFS
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.NFS
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        NFS.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.NFS";
                        };
    
                        return NFS;
                    })();
    
                    v1.GCS = (function() {
    
                        /**
                         * Properties of a GCS.
                         * @memberof google.cloud.batch.v1
                         * @interface IGCS
                         * @property {string|null} [remotePath] GCS remotePath
                         */
    
                        /**
                         * Constructs a new GCS.
                         * @memberof google.cloud.batch.v1
                         * @classdesc Represents a GCS.
                         * @implements IGCS
                         * @constructor
                         * @param {google.cloud.batch.v1.IGCS=} [properties] Properties to set
                         */
                        function GCS(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GCS remotePath.
                         * @member {string} remotePath
                         * @memberof google.cloud.batch.v1.GCS
                         * @instance
                         */
                        GCS.prototype.remotePath = "";
    
                        /**
                         * Creates a new GCS instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1.GCS
                         * @static
                         * @param {google.cloud.batch.v1.IGCS=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1.GCS} GCS instance
                         */
                        GCS.create = function create(properties) {
                            return new GCS(properties);
                        };
    
                        /**
                         * Encodes the specified GCS message. Does not implicitly {@link google.cloud.batch.v1.GCS.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1.GCS
                         * @static
                         * @param {google.cloud.batch.v1.IGCS} message GCS message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GCS.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.remotePath != null && Object.hasOwnProperty.call(message, "remotePath"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.remotePath);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GCS message, length delimited. Does not implicitly {@link google.cloud.batch.v1.GCS.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1.GCS
                         * @static
                         * @param {google.cloud.batch.v1.IGCS} message GCS message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GCS.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GCS message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1.GCS
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1.GCS} GCS
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GCS.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1.GCS();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.remotePath = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GCS message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1.GCS
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1.GCS} GCS
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GCS.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GCS message.
                         * @function verify
                         * @memberof google.cloud.batch.v1.GCS
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GCS.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.remotePath != null && message.hasOwnProperty("remotePath"))
                                if (!$util.isString(message.remotePath))
                                    return "remotePath: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GCS message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1.GCS
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1.GCS} GCS
                         */
                        GCS.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1.GCS)
                                return object;
                            var message = new $root.google.cloud.batch.v1.GCS();
                            if (object.remotePath != null)
                                message.remotePath = String(object.remotePath);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GCS message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1.GCS
                         * @static
                         * @param {google.cloud.batch.v1.GCS} message GCS
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GCS.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.remotePath = "";
                            if (message.remotePath != null && message.hasOwnProperty("remotePath"))
                                object.remotePath = message.remotePath;
                            return object;
                        };
    
                        /**
                         * Converts this GCS to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1.GCS
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GCS.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for GCS
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1.GCS
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        GCS.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1.GCS";
                        };
    
                        return GCS;
                    })();
    
                    return v1;
                })();
    
                batch.v1alpha = (function() {
    
                    /**
                     * Namespace v1alpha.
                     * @memberof google.cloud.batch
                     * @namespace
                     */
                    var v1alpha = {};
    
                    v1alpha.BatchService = (function() {
    
                        /**
                         * Constructs a new BatchService service.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a BatchService
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function BatchService(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (BatchService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = BatchService;
    
                        /**
                         * Creates new BatchService service using the specified rpc implementation.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {BatchService} RPC service. Useful where requests and/or responses are streamed.
                         */
                        BatchService.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };
    
                        /**
                         * Callback as used by {@link google.cloud.batch.v1alpha.BatchService|createJob}.
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @typedef CreateJobCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.batch.v1alpha.Job} [response] Job
                         */
    
                        /**
                         * Calls CreateJob.
                         * @function createJob
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1alpha.ICreateJobRequest} request CreateJobRequest message or plain object
                         * @param {google.cloud.batch.v1alpha.BatchService.CreateJobCallback} callback Node-style callback called with the error, if any, and Job
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BatchService.prototype.createJob = function createJob(request, callback) {
                            return this.rpcCall(createJob, $root.google.cloud.batch.v1alpha.CreateJobRequest, $root.google.cloud.batch.v1alpha.Job, request, callback);
                        }, "name", { value: "CreateJob" });
    
                        /**
                         * Calls CreateJob.
                         * @function createJob
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1alpha.ICreateJobRequest} request CreateJobRequest message or plain object
                         * @returns {Promise<google.cloud.batch.v1alpha.Job>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.batch.v1alpha.BatchService|getJob}.
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @typedef GetJobCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.batch.v1alpha.Job} [response] Job
                         */
    
                        /**
                         * Calls GetJob.
                         * @function getJob
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1alpha.IGetJobRequest} request GetJobRequest message or plain object
                         * @param {google.cloud.batch.v1alpha.BatchService.GetJobCallback} callback Node-style callback called with the error, if any, and Job
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BatchService.prototype.getJob = function getJob(request, callback) {
                            return this.rpcCall(getJob, $root.google.cloud.batch.v1alpha.GetJobRequest, $root.google.cloud.batch.v1alpha.Job, request, callback);
                        }, "name", { value: "GetJob" });
    
                        /**
                         * Calls GetJob.
                         * @function getJob
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1alpha.IGetJobRequest} request GetJobRequest message or plain object
                         * @returns {Promise<google.cloud.batch.v1alpha.Job>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.batch.v1alpha.BatchService|deleteJob}.
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @typedef DeleteJobCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.longrunning.Operation} [response] Operation
                         */
    
                        /**
                         * Calls DeleteJob.
                         * @function deleteJob
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1alpha.IDeleteJobRequest} request DeleteJobRequest message or plain object
                         * @param {google.cloud.batch.v1alpha.BatchService.DeleteJobCallback} callback Node-style callback called with the error, if any, and Operation
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BatchService.prototype.deleteJob = function deleteJob(request, callback) {
                            return this.rpcCall(deleteJob, $root.google.cloud.batch.v1alpha.DeleteJobRequest, $root.google.longrunning.Operation, request, callback);
                        }, "name", { value: "DeleteJob" });
    
                        /**
                         * Calls DeleteJob.
                         * @function deleteJob
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1alpha.IDeleteJobRequest} request DeleteJobRequest message or plain object
                         * @returns {Promise<google.longrunning.Operation>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.batch.v1alpha.BatchService|listJobs}.
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @typedef ListJobsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.batch.v1alpha.ListJobsResponse} [response] ListJobsResponse
                         */
    
                        /**
                         * Calls ListJobs.
                         * @function listJobs
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1alpha.IListJobsRequest} request ListJobsRequest message or plain object
                         * @param {google.cloud.batch.v1alpha.BatchService.ListJobsCallback} callback Node-style callback called with the error, if any, and ListJobsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BatchService.prototype.listJobs = function listJobs(request, callback) {
                            return this.rpcCall(listJobs, $root.google.cloud.batch.v1alpha.ListJobsRequest, $root.google.cloud.batch.v1alpha.ListJobsResponse, request, callback);
                        }, "name", { value: "ListJobs" });
    
                        /**
                         * Calls ListJobs.
                         * @function listJobs
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1alpha.IListJobsRequest} request ListJobsRequest message or plain object
                         * @returns {Promise<google.cloud.batch.v1alpha.ListJobsResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.batch.v1alpha.BatchService|getTask}.
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @typedef GetTaskCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.batch.v1alpha.Task} [response] Task
                         */
    
                        /**
                         * Calls GetTask.
                         * @function getTask
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1alpha.IGetTaskRequest} request GetTaskRequest message or plain object
                         * @param {google.cloud.batch.v1alpha.BatchService.GetTaskCallback} callback Node-style callback called with the error, if any, and Task
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BatchService.prototype.getTask = function getTask(request, callback) {
                            return this.rpcCall(getTask, $root.google.cloud.batch.v1alpha.GetTaskRequest, $root.google.cloud.batch.v1alpha.Task, request, callback);
                        }, "name", { value: "GetTask" });
    
                        /**
                         * Calls GetTask.
                         * @function getTask
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1alpha.IGetTaskRequest} request GetTaskRequest message or plain object
                         * @returns {Promise<google.cloud.batch.v1alpha.Task>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link google.cloud.batch.v1alpha.BatchService|listTasks}.
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @typedef ListTasksCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {google.cloud.batch.v1alpha.ListTasksResponse} [response] ListTasksResponse
                         */
    
                        /**
                         * Calls ListTasks.
                         * @function listTasks
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1alpha.IListTasksRequest} request ListTasksRequest message or plain object
                         * @param {google.cloud.batch.v1alpha.BatchService.ListTasksCallback} callback Node-style callback called with the error, if any, and ListTasksResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(BatchService.prototype.listTasks = function listTasks(request, callback) {
                            return this.rpcCall(listTasks, $root.google.cloud.batch.v1alpha.ListTasksRequest, $root.google.cloud.batch.v1alpha.ListTasksResponse, request, callback);
                        }, "name", { value: "ListTasks" });
    
                        /**
                         * Calls ListTasks.
                         * @function listTasks
                         * @memberof google.cloud.batch.v1alpha.BatchService
                         * @instance
                         * @param {google.cloud.batch.v1alpha.IListTasksRequest} request ListTasksRequest message or plain object
                         * @returns {Promise<google.cloud.batch.v1alpha.ListTasksResponse>} Promise
                         * @variation 2
                         */
    
                        return BatchService;
                    })();
    
                    v1alpha.CreateJobRequest = (function() {
    
                        /**
                         * Properties of a CreateJobRequest.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface ICreateJobRequest
                         * @property {string|null} [parent] CreateJobRequest parent
                         * @property {string|null} [jobId] CreateJobRequest jobId
                         * @property {google.cloud.batch.v1alpha.IJob|null} [job] CreateJobRequest job
                         * @property {string|null} [requestId] CreateJobRequest requestId
                         */
    
                        /**
                         * Constructs a new CreateJobRequest.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a CreateJobRequest.
                         * @implements ICreateJobRequest
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.ICreateJobRequest=} [properties] Properties to set
                         */
                        function CreateJobRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * CreateJobRequest parent.
                         * @member {string} parent
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @instance
                         */
                        CreateJobRequest.prototype.parent = "";
    
                        /**
                         * CreateJobRequest jobId.
                         * @member {string} jobId
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @instance
                         */
                        CreateJobRequest.prototype.jobId = "";
    
                        /**
                         * CreateJobRequest job.
                         * @member {google.cloud.batch.v1alpha.IJob|null|undefined} job
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @instance
                         */
                        CreateJobRequest.prototype.job = null;
    
                        /**
                         * CreateJobRequest requestId.
                         * @member {string} requestId
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @instance
                         */
                        CreateJobRequest.prototype.requestId = "";
    
                        /**
                         * Creates a new CreateJobRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.ICreateJobRequest=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.CreateJobRequest} CreateJobRequest instance
                         */
                        CreateJobRequest.create = function create(properties) {
                            return new CreateJobRequest(properties);
                        };
    
                        /**
                         * Encodes the specified CreateJobRequest message. Does not implicitly {@link google.cloud.batch.v1alpha.CreateJobRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.ICreateJobRequest} message CreateJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateJobRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.jobId != null && Object.hasOwnProperty.call(message, "jobId"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.jobId);
                            if (message.job != null && Object.hasOwnProperty.call(message, "job"))
                                $root.google.cloud.batch.v1alpha.Job.encode(message.job, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.requestId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified CreateJobRequest message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.CreateJobRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.ICreateJobRequest} message CreateJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CreateJobRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a CreateJobRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.CreateJobRequest} CreateJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateJobRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.CreateJobRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.parent = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.jobId = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.job = $root.google.cloud.batch.v1alpha.Job.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.requestId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a CreateJobRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.CreateJobRequest} CreateJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CreateJobRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a CreateJobRequest message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CreateJobRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.jobId != null && message.hasOwnProperty("jobId"))
                                if (!$util.isString(message.jobId))
                                    return "jobId: string expected";
                            if (message.job != null && message.hasOwnProperty("job")) {
                                var error = $root.google.cloud.batch.v1alpha.Job.verify(message.job);
                                if (error)
                                    return "job." + error;
                            }
                            if (message.requestId != null && message.hasOwnProperty("requestId"))
                                if (!$util.isString(message.requestId))
                                    return "requestId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a CreateJobRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.CreateJobRequest} CreateJobRequest
                         */
                        CreateJobRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.CreateJobRequest)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.CreateJobRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.jobId != null)
                                message.jobId = String(object.jobId);
                            if (object.job != null) {
                                if (typeof object.job !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.CreateJobRequest.job: object expected");
                                message.job = $root.google.cloud.batch.v1alpha.Job.fromObject(object.job);
                            }
                            if (object.requestId != null)
                                message.requestId = String(object.requestId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a CreateJobRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.CreateJobRequest} message CreateJobRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CreateJobRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.jobId = "";
                                object.job = null;
                                object.requestId = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.jobId != null && message.hasOwnProperty("jobId"))
                                object.jobId = message.jobId;
                            if (message.job != null && message.hasOwnProperty("job"))
                                object.job = $root.google.cloud.batch.v1alpha.Job.toObject(message.job, options);
                            if (message.requestId != null && message.hasOwnProperty("requestId"))
                                object.requestId = message.requestId;
                            return object;
                        };
    
                        /**
                         * Converts this CreateJobRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CreateJobRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for CreateJobRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.CreateJobRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CreateJobRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.CreateJobRequest";
                        };
    
                        return CreateJobRequest;
                    })();
    
                    v1alpha.GetJobRequest = (function() {
    
                        /**
                         * Properties of a GetJobRequest.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IGetJobRequest
                         * @property {string|null} [name] GetJobRequest name
                         */
    
                        /**
                         * Constructs a new GetJobRequest.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a GetJobRequest.
                         * @implements IGetJobRequest
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IGetJobRequest=} [properties] Properties to set
                         */
                        function GetJobRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetJobRequest name.
                         * @member {string} name
                         * @memberof google.cloud.batch.v1alpha.GetJobRequest
                         * @instance
                         */
                        GetJobRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetJobRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.GetJobRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IGetJobRequest=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.GetJobRequest} GetJobRequest instance
                         */
                        GetJobRequest.create = function create(properties) {
                            return new GetJobRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetJobRequest message. Does not implicitly {@link google.cloud.batch.v1alpha.GetJobRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.GetJobRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IGetJobRequest} message GetJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetJobRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetJobRequest message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.GetJobRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.GetJobRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IGetJobRequest} message GetJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetJobRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetJobRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.GetJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.GetJobRequest} GetJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetJobRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.GetJobRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetJobRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.GetJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.GetJobRequest} GetJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetJobRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetJobRequest message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.GetJobRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetJobRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetJobRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.GetJobRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.GetJobRequest} GetJobRequest
                         */
                        GetJobRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.GetJobRequest)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.GetJobRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetJobRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.GetJobRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.GetJobRequest} message GetJobRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetJobRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetJobRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.GetJobRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetJobRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for GetJobRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.GetJobRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        GetJobRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.GetJobRequest";
                        };
    
                        return GetJobRequest;
                    })();
    
                    v1alpha.DeleteJobRequest = (function() {
    
                        /**
                         * Properties of a DeleteJobRequest.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IDeleteJobRequest
                         * @property {string|null} [name] DeleteJobRequest name
                         * @property {string|null} [reason] DeleteJobRequest reason
                         * @property {string|null} [requestId] DeleteJobRequest requestId
                         */
    
                        /**
                         * Constructs a new DeleteJobRequest.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a DeleteJobRequest.
                         * @implements IDeleteJobRequest
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IDeleteJobRequest=} [properties] Properties to set
                         */
                        function DeleteJobRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DeleteJobRequest name.
                         * @member {string} name
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @instance
                         */
                        DeleteJobRequest.prototype.name = "";
    
                        /**
                         * DeleteJobRequest reason.
                         * @member {string} reason
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @instance
                         */
                        DeleteJobRequest.prototype.reason = "";
    
                        /**
                         * DeleteJobRequest requestId.
                         * @member {string} requestId
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @instance
                         */
                        DeleteJobRequest.prototype.requestId = "";
    
                        /**
                         * Creates a new DeleteJobRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IDeleteJobRequest=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.DeleteJobRequest} DeleteJobRequest instance
                         */
                        DeleteJobRequest.create = function create(properties) {
                            return new DeleteJobRequest(properties);
                        };
    
                        /**
                         * Encodes the specified DeleteJobRequest message. Does not implicitly {@link google.cloud.batch.v1alpha.DeleteJobRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IDeleteJobRequest} message DeleteJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteJobRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.reason != null && Object.hasOwnProperty.call(message, "reason"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.reason);
                            if (message.requestId != null && Object.hasOwnProperty.call(message, "requestId"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.requestId);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DeleteJobRequest message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.DeleteJobRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IDeleteJobRequest} message DeleteJobRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DeleteJobRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DeleteJobRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.DeleteJobRequest} DeleteJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteJobRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.DeleteJobRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.reason = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.requestId = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DeleteJobRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.DeleteJobRequest} DeleteJobRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DeleteJobRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DeleteJobRequest message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DeleteJobRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.reason != null && message.hasOwnProperty("reason"))
                                if (!$util.isString(message.reason))
                                    return "reason: string expected";
                            if (message.requestId != null && message.hasOwnProperty("requestId"))
                                if (!$util.isString(message.requestId))
                                    return "requestId: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DeleteJobRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.DeleteJobRequest} DeleteJobRequest
                         */
                        DeleteJobRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.DeleteJobRequest)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.DeleteJobRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.reason != null)
                                message.reason = String(object.reason);
                            if (object.requestId != null)
                                message.requestId = String(object.requestId);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DeleteJobRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.DeleteJobRequest} message DeleteJobRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DeleteJobRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.reason = "";
                                object.requestId = "";
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.reason != null && message.hasOwnProperty("reason"))
                                object.reason = message.reason;
                            if (message.requestId != null && message.hasOwnProperty("requestId"))
                                object.requestId = message.requestId;
                            return object;
                        };
    
                        /**
                         * Converts this DeleteJobRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DeleteJobRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for DeleteJobRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.DeleteJobRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DeleteJobRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.DeleteJobRequest";
                        };
    
                        return DeleteJobRequest;
                    })();
    
                    v1alpha.ListJobsRequest = (function() {
    
                        /**
                         * Properties of a ListJobsRequest.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IListJobsRequest
                         * @property {string|null} [parent] ListJobsRequest parent
                         * @property {string|null} [filter] ListJobsRequest filter
                         * @property {string|null} [orderBy] ListJobsRequest orderBy
                         * @property {number|null} [pageSize] ListJobsRequest pageSize
                         * @property {string|null} [pageToken] ListJobsRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListJobsRequest.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a ListJobsRequest.
                         * @implements IListJobsRequest
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IListJobsRequest=} [properties] Properties to set
                         */
                        function ListJobsRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListJobsRequest parent.
                         * @member {string} parent
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @instance
                         */
                        ListJobsRequest.prototype.parent = "";
    
                        /**
                         * ListJobsRequest filter.
                         * @member {string} filter
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @instance
                         */
                        ListJobsRequest.prototype.filter = "";
    
                        /**
                         * ListJobsRequest orderBy.
                         * @member {string} orderBy
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @instance
                         */
                        ListJobsRequest.prototype.orderBy = "";
    
                        /**
                         * ListJobsRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @instance
                         */
                        ListJobsRequest.prototype.pageSize = 0;
    
                        /**
                         * ListJobsRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @instance
                         */
                        ListJobsRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListJobsRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IListJobsRequest=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.ListJobsRequest} ListJobsRequest instance
                         */
                        ListJobsRequest.create = function create(properties) {
                            return new ListJobsRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListJobsRequest message. Does not implicitly {@link google.cloud.batch.v1alpha.ListJobsRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IListJobsRequest} message ListJobsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListJobsRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                            if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.filter);
                            if (message.orderBy != null && Object.hasOwnProperty.call(message, "orderBy"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.orderBy);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListJobsRequest message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.ListJobsRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IListJobsRequest} message ListJobsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListJobsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListJobsRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.ListJobsRequest} ListJobsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListJobsRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.ListJobsRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.parent = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.filter = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.orderBy = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.pageSize = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.pageToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListJobsRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.ListJobsRequest} ListJobsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListJobsRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListJobsRequest message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListJobsRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                if (!$util.isString(message.filter))
                                    return "filter: string expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListJobsRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.ListJobsRequest} ListJobsRequest
                         */
                        ListJobsRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.ListJobsRequest)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.ListJobsRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.filter != null)
                                message.filter = String(object.filter);
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListJobsRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.ListJobsRequest} message ListJobsRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListJobsRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.pageSize = 0;
                                object.pageToken = "";
                                object.filter = "";
                                object.orderBy = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                object.filter = message.filter;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            return object;
                        };
    
                        /**
                         * Converts this ListJobsRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListJobsRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListJobsRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.ListJobsRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListJobsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.ListJobsRequest";
                        };
    
                        return ListJobsRequest;
                    })();
    
                    v1alpha.ListJobsResponse = (function() {
    
                        /**
                         * Properties of a ListJobsResponse.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IListJobsResponse
                         * @property {Array.<google.cloud.batch.v1alpha.IJob>|null} [jobs] ListJobsResponse jobs
                         * @property {string|null} [nextPageToken] ListJobsResponse nextPageToken
                         * @property {Array.<string>|null} [unreachable] ListJobsResponse unreachable
                         */
    
                        /**
                         * Constructs a new ListJobsResponse.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a ListJobsResponse.
                         * @implements IListJobsResponse
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IListJobsResponse=} [properties] Properties to set
                         */
                        function ListJobsResponse(properties) {
                            this.jobs = [];
                            this.unreachable = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListJobsResponse jobs.
                         * @member {Array.<google.cloud.batch.v1alpha.IJob>} jobs
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @instance
                         */
                        ListJobsResponse.prototype.jobs = $util.emptyArray;
    
                        /**
                         * ListJobsResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @instance
                         */
                        ListJobsResponse.prototype.nextPageToken = "";
    
                        /**
                         * ListJobsResponse unreachable.
                         * @member {Array.<string>} unreachable
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @instance
                         */
                        ListJobsResponse.prototype.unreachable = $util.emptyArray;
    
                        /**
                         * Creates a new ListJobsResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @static
                         * @param {google.cloud.batch.v1alpha.IListJobsResponse=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.ListJobsResponse} ListJobsResponse instance
                         */
                        ListJobsResponse.create = function create(properties) {
                            return new ListJobsResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListJobsResponse message. Does not implicitly {@link google.cloud.batch.v1alpha.ListJobsResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @static
                         * @param {google.cloud.batch.v1alpha.IListJobsResponse} message ListJobsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListJobsResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.jobs != null && message.jobs.length)
                                for (var i = 0; i < message.jobs.length; ++i)
                                    $root.google.cloud.batch.v1alpha.Job.encode(message.jobs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            if (message.unreachable != null && message.unreachable.length)
                                for (var i = 0; i < message.unreachable.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.unreachable[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListJobsResponse message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.ListJobsResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @static
                         * @param {google.cloud.batch.v1alpha.IListJobsResponse} message ListJobsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListJobsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListJobsResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.ListJobsResponse} ListJobsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListJobsResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.ListJobsResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.jobs && message.jobs.length))
                                            message.jobs = [];
                                        message.jobs.push($root.google.cloud.batch.v1alpha.Job.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.nextPageToken = reader.string();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.unreachable && message.unreachable.length))
                                            message.unreachable = [];
                                        message.unreachable.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListJobsResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.ListJobsResponse} ListJobsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListJobsResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListJobsResponse message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListJobsResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.jobs != null && message.hasOwnProperty("jobs")) {
                                if (!Array.isArray(message.jobs))
                                    return "jobs: array expected";
                                for (var i = 0; i < message.jobs.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.Job.verify(message.jobs[i]);
                                    if (error)
                                        return "jobs." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            if (message.unreachable != null && message.hasOwnProperty("unreachable")) {
                                if (!Array.isArray(message.unreachable))
                                    return "unreachable: array expected";
                                for (var i = 0; i < message.unreachable.length; ++i)
                                    if (!$util.isString(message.unreachable[i]))
                                        return "unreachable: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ListJobsResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.ListJobsResponse} ListJobsResponse
                         */
                        ListJobsResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.ListJobsResponse)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.ListJobsResponse();
                            if (object.jobs) {
                                if (!Array.isArray(object.jobs))
                                    throw TypeError(".google.cloud.batch.v1alpha.ListJobsResponse.jobs: array expected");
                                message.jobs = [];
                                for (var i = 0; i < object.jobs.length; ++i) {
                                    if (typeof object.jobs[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.ListJobsResponse.jobs: object expected");
                                    message.jobs[i] = $root.google.cloud.batch.v1alpha.Job.fromObject(object.jobs[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            if (object.unreachable) {
                                if (!Array.isArray(object.unreachable))
                                    throw TypeError(".google.cloud.batch.v1alpha.ListJobsResponse.unreachable: array expected");
                                message.unreachable = [];
                                for (var i = 0; i < object.unreachable.length; ++i)
                                    message.unreachable[i] = String(object.unreachable[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListJobsResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @static
                         * @param {google.cloud.batch.v1alpha.ListJobsResponse} message ListJobsResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListJobsResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.jobs = [];
                                object.unreachable = [];
                            }
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.jobs && message.jobs.length) {
                                object.jobs = [];
                                for (var j = 0; j < message.jobs.length; ++j)
                                    object.jobs[j] = $root.google.cloud.batch.v1alpha.Job.toObject(message.jobs[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            if (message.unreachable && message.unreachable.length) {
                                object.unreachable = [];
                                for (var j = 0; j < message.unreachable.length; ++j)
                                    object.unreachable[j] = message.unreachable[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ListJobsResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListJobsResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListJobsResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.ListJobsResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListJobsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.ListJobsResponse";
                        };
    
                        return ListJobsResponse;
                    })();
    
                    v1alpha.ListTasksRequest = (function() {
    
                        /**
                         * Properties of a ListTasksRequest.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IListTasksRequest
                         * @property {string|null} [parent] ListTasksRequest parent
                         * @property {string|null} [filter] ListTasksRequest filter
                         * @property {string|null} [orderBy] ListTasksRequest orderBy
                         * @property {number|null} [pageSize] ListTasksRequest pageSize
                         * @property {string|null} [pageToken] ListTasksRequest pageToken
                         */
    
                        /**
                         * Constructs a new ListTasksRequest.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a ListTasksRequest.
                         * @implements IListTasksRequest
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IListTasksRequest=} [properties] Properties to set
                         */
                        function ListTasksRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListTasksRequest parent.
                         * @member {string} parent
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @instance
                         */
                        ListTasksRequest.prototype.parent = "";
    
                        /**
                         * ListTasksRequest filter.
                         * @member {string} filter
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @instance
                         */
                        ListTasksRequest.prototype.filter = "";
    
                        /**
                         * ListTasksRequest orderBy.
                         * @member {string} orderBy
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @instance
                         */
                        ListTasksRequest.prototype.orderBy = "";
    
                        /**
                         * ListTasksRequest pageSize.
                         * @member {number} pageSize
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @instance
                         */
                        ListTasksRequest.prototype.pageSize = 0;
    
                        /**
                         * ListTasksRequest pageToken.
                         * @member {string} pageToken
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @instance
                         */
                        ListTasksRequest.prototype.pageToken = "";
    
                        /**
                         * Creates a new ListTasksRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IListTasksRequest=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.ListTasksRequest} ListTasksRequest instance
                         */
                        ListTasksRequest.create = function create(properties) {
                            return new ListTasksRequest(properties);
                        };
    
                        /**
                         * Encodes the specified ListTasksRequest message. Does not implicitly {@link google.cloud.batch.v1alpha.ListTasksRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IListTasksRequest} message ListTasksRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListTasksRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.parent);
                            if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.filter);
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.pageSize);
                            if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.pageToken);
                            if (message.orderBy != null && Object.hasOwnProperty.call(message, "orderBy"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.orderBy);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListTasksRequest message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.ListTasksRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IListTasksRequest} message ListTasksRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListTasksRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListTasksRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.ListTasksRequest} ListTasksRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListTasksRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.ListTasksRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.parent = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.filter = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.orderBy = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.pageSize = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.pageToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListTasksRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.ListTasksRequest} ListTasksRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListTasksRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListTasksRequest message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListTasksRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                if (!$util.isString(message.parent))
                                    return "parent: string expected";
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                if (!$util.isString(message.filter))
                                    return "filter: string expected";
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                if (!$util.isString(message.orderBy))
                                    return "orderBy: string expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize))
                                    return "pageSize: integer expected";
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                if (!$util.isString(message.pageToken))
                                    return "pageToken: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ListTasksRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.ListTasksRequest} ListTasksRequest
                         */
                        ListTasksRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.ListTasksRequest)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.ListTasksRequest();
                            if (object.parent != null)
                                message.parent = String(object.parent);
                            if (object.filter != null)
                                message.filter = String(object.filter);
                            if (object.orderBy != null)
                                message.orderBy = String(object.orderBy);
                            if (object.pageSize != null)
                                message.pageSize = object.pageSize | 0;
                            if (object.pageToken != null)
                                message.pageToken = String(object.pageToken);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListTasksRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.ListTasksRequest} message ListTasksRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListTasksRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.parent = "";
                                object.filter = "";
                                object.pageSize = 0;
                                object.pageToken = "";
                                object.orderBy = "";
                            }
                            if (message.parent != null && message.hasOwnProperty("parent"))
                                object.parent = message.parent;
                            if (message.filter != null && message.hasOwnProperty("filter"))
                                object.filter = message.filter;
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                object.pageSize = message.pageSize;
                            if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                                object.pageToken = message.pageToken;
                            if (message.orderBy != null && message.hasOwnProperty("orderBy"))
                                object.orderBy = message.orderBy;
                            return object;
                        };
    
                        /**
                         * Converts this ListTasksRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListTasksRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListTasksRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.ListTasksRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListTasksRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.ListTasksRequest";
                        };
    
                        return ListTasksRequest;
                    })();
    
                    v1alpha.ListTasksResponse = (function() {
    
                        /**
                         * Properties of a ListTasksResponse.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IListTasksResponse
                         * @property {Array.<google.cloud.batch.v1alpha.ITask>|null} [tasks] ListTasksResponse tasks
                         * @property {string|null} [nextPageToken] ListTasksResponse nextPageToken
                         * @property {Array.<string>|null} [unreachable] ListTasksResponse unreachable
                         */
    
                        /**
                         * Constructs a new ListTasksResponse.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a ListTasksResponse.
                         * @implements IListTasksResponse
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IListTasksResponse=} [properties] Properties to set
                         */
                        function ListTasksResponse(properties) {
                            this.tasks = [];
                            this.unreachable = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ListTasksResponse tasks.
                         * @member {Array.<google.cloud.batch.v1alpha.ITask>} tasks
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @instance
                         */
                        ListTasksResponse.prototype.tasks = $util.emptyArray;
    
                        /**
                         * ListTasksResponse nextPageToken.
                         * @member {string} nextPageToken
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @instance
                         */
                        ListTasksResponse.prototype.nextPageToken = "";
    
                        /**
                         * ListTasksResponse unreachable.
                         * @member {Array.<string>} unreachable
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @instance
                         */
                        ListTasksResponse.prototype.unreachable = $util.emptyArray;
    
                        /**
                         * Creates a new ListTasksResponse instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @static
                         * @param {google.cloud.batch.v1alpha.IListTasksResponse=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.ListTasksResponse} ListTasksResponse instance
                         */
                        ListTasksResponse.create = function create(properties) {
                            return new ListTasksResponse(properties);
                        };
    
                        /**
                         * Encodes the specified ListTasksResponse message. Does not implicitly {@link google.cloud.batch.v1alpha.ListTasksResponse.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @static
                         * @param {google.cloud.batch.v1alpha.IListTasksResponse} message ListTasksResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListTasksResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.tasks != null && message.tasks.length)
                                for (var i = 0; i < message.tasks.length; ++i)
                                    $root.google.cloud.batch.v1alpha.Task.encode(message.tasks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                            if (message.unreachable != null && message.unreachable.length)
                                for (var i = 0; i < message.unreachable.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.unreachable[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ListTasksResponse message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.ListTasksResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @static
                         * @param {google.cloud.batch.v1alpha.IListTasksResponse} message ListTasksResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ListTasksResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ListTasksResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.ListTasksResponse} ListTasksResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListTasksResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.ListTasksResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.tasks && message.tasks.length))
                                            message.tasks = [];
                                        message.tasks.push($root.google.cloud.batch.v1alpha.Task.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.nextPageToken = reader.string();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.unreachable && message.unreachable.length))
                                            message.unreachable = [];
                                        message.unreachable.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ListTasksResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.ListTasksResponse} ListTasksResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ListTasksResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ListTasksResponse message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ListTasksResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                                if (!Array.isArray(message.tasks))
                                    return "tasks: array expected";
                                for (var i = 0; i < message.tasks.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.Task.verify(message.tasks[i]);
                                    if (error)
                                        return "tasks." + error;
                                }
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                if (!$util.isString(message.nextPageToken))
                                    return "nextPageToken: string expected";
                            if (message.unreachable != null && message.hasOwnProperty("unreachable")) {
                                if (!Array.isArray(message.unreachable))
                                    return "unreachable: array expected";
                                for (var i = 0; i < message.unreachable.length; ++i)
                                    if (!$util.isString(message.unreachable[i]))
                                        return "unreachable: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ListTasksResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.ListTasksResponse} ListTasksResponse
                         */
                        ListTasksResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.ListTasksResponse)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.ListTasksResponse();
                            if (object.tasks) {
                                if (!Array.isArray(object.tasks))
                                    throw TypeError(".google.cloud.batch.v1alpha.ListTasksResponse.tasks: array expected");
                                message.tasks = [];
                                for (var i = 0; i < object.tasks.length; ++i) {
                                    if (typeof object.tasks[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.ListTasksResponse.tasks: object expected");
                                    message.tasks[i] = $root.google.cloud.batch.v1alpha.Task.fromObject(object.tasks[i]);
                                }
                            }
                            if (object.nextPageToken != null)
                                message.nextPageToken = String(object.nextPageToken);
                            if (object.unreachable) {
                                if (!Array.isArray(object.unreachable))
                                    throw TypeError(".google.cloud.batch.v1alpha.ListTasksResponse.unreachable: array expected");
                                message.unreachable = [];
                                for (var i = 0; i < object.unreachable.length; ++i)
                                    message.unreachable[i] = String(object.unreachable[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ListTasksResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @static
                         * @param {google.cloud.batch.v1alpha.ListTasksResponse} message ListTasksResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ListTasksResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.tasks = [];
                                object.unreachable = [];
                            }
                            if (options.defaults)
                                object.nextPageToken = "";
                            if (message.tasks && message.tasks.length) {
                                object.tasks = [];
                                for (var j = 0; j < message.tasks.length; ++j)
                                    object.tasks[j] = $root.google.cloud.batch.v1alpha.Task.toObject(message.tasks[j], options);
                            }
                            if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                                object.nextPageToken = message.nextPageToken;
                            if (message.unreachable && message.unreachable.length) {
                                object.unreachable = [];
                                for (var j = 0; j < message.unreachable.length; ++j)
                                    object.unreachable[j] = message.unreachable[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ListTasksResponse to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ListTasksResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ListTasksResponse
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.ListTasksResponse
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ListTasksResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.ListTasksResponse";
                        };
    
                        return ListTasksResponse;
                    })();
    
                    v1alpha.GetTaskRequest = (function() {
    
                        /**
                         * Properties of a GetTaskRequest.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IGetTaskRequest
                         * @property {string|null} [name] GetTaskRequest name
                         */
    
                        /**
                         * Constructs a new GetTaskRequest.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a GetTaskRequest.
                         * @implements IGetTaskRequest
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IGetTaskRequest=} [properties] Properties to set
                         */
                        function GetTaskRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GetTaskRequest name.
                         * @member {string} name
                         * @memberof google.cloud.batch.v1alpha.GetTaskRequest
                         * @instance
                         */
                        GetTaskRequest.prototype.name = "";
    
                        /**
                         * Creates a new GetTaskRequest instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.GetTaskRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IGetTaskRequest=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.GetTaskRequest} GetTaskRequest instance
                         */
                        GetTaskRequest.create = function create(properties) {
                            return new GetTaskRequest(properties);
                        };
    
                        /**
                         * Encodes the specified GetTaskRequest message. Does not implicitly {@link google.cloud.batch.v1alpha.GetTaskRequest.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.GetTaskRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IGetTaskRequest} message GetTaskRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetTaskRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GetTaskRequest message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.GetTaskRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.GetTaskRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.IGetTaskRequest} message GetTaskRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GetTaskRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GetTaskRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.GetTaskRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.GetTaskRequest} GetTaskRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetTaskRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.GetTaskRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GetTaskRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.GetTaskRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.GetTaskRequest} GetTaskRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GetTaskRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GetTaskRequest message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.GetTaskRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GetTaskRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GetTaskRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.GetTaskRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.GetTaskRequest} GetTaskRequest
                         */
                        GetTaskRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.GetTaskRequest)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.GetTaskRequest();
                            if (object.name != null)
                                message.name = String(object.name);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GetTaskRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.GetTaskRequest
                         * @static
                         * @param {google.cloud.batch.v1alpha.GetTaskRequest} message GetTaskRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GetTaskRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.name = "";
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            return object;
                        };
    
                        /**
                         * Converts this GetTaskRequest to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.GetTaskRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GetTaskRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for GetTaskRequest
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.GetTaskRequest
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        GetTaskRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.GetTaskRequest";
                        };
    
                        return GetTaskRequest;
                    })();
    
                    v1alpha.OperationMetadata = (function() {
    
                        /**
                         * Properties of an OperationMetadata.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IOperationMetadata
                         * @property {google.protobuf.ITimestamp|null} [createTime] OperationMetadata createTime
                         * @property {google.protobuf.ITimestamp|null} [endTime] OperationMetadata endTime
                         * @property {string|null} [target] OperationMetadata target
                         * @property {string|null} [verb] OperationMetadata verb
                         * @property {string|null} [statusMessage] OperationMetadata statusMessage
                         * @property {boolean|null} [requestedCancellation] OperationMetadata requestedCancellation
                         * @property {string|null} [apiVersion] OperationMetadata apiVersion
                         */
    
                        /**
                         * Constructs a new OperationMetadata.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents an OperationMetadata.
                         * @implements IOperationMetadata
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IOperationMetadata=} [properties] Properties to set
                         */
                        function OperationMetadata(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * OperationMetadata createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.createTime = null;
    
                        /**
                         * OperationMetadata endTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} endTime
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.endTime = null;
    
                        /**
                         * OperationMetadata target.
                         * @member {string} target
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.target = "";
    
                        /**
                         * OperationMetadata verb.
                         * @member {string} verb
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.verb = "";
    
                        /**
                         * OperationMetadata statusMessage.
                         * @member {string} statusMessage
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.statusMessage = "";
    
                        /**
                         * OperationMetadata requestedCancellation.
                         * @member {boolean} requestedCancellation
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.requestedCancellation = false;
    
                        /**
                         * OperationMetadata apiVersion.
                         * @member {string} apiVersion
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @instance
                         */
                        OperationMetadata.prototype.apiVersion = "";
    
                        /**
                         * Creates a new OperationMetadata instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @static
                         * @param {google.cloud.batch.v1alpha.IOperationMetadata=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.OperationMetadata} OperationMetadata instance
                         */
                        OperationMetadata.create = function create(properties) {
                            return new OperationMetadata(properties);
                        };
    
                        /**
                         * Encodes the specified OperationMetadata message. Does not implicitly {@link google.cloud.batch.v1alpha.OperationMetadata.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @static
                         * @param {google.cloud.batch.v1alpha.IOperationMetadata} message OperationMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OperationMetadata.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                                $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.target != null && Object.hasOwnProperty.call(message, "target"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.target);
                            if (message.verb != null && Object.hasOwnProperty.call(message, "verb"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.verb);
                            if (message.statusMessage != null && Object.hasOwnProperty.call(message, "statusMessage"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.statusMessage);
                            if (message.requestedCancellation != null && Object.hasOwnProperty.call(message, "requestedCancellation"))
                                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.requestedCancellation);
                            if (message.apiVersion != null && Object.hasOwnProperty.call(message, "apiVersion"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.apiVersion);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified OperationMetadata message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.OperationMetadata.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @static
                         * @param {google.cloud.batch.v1alpha.IOperationMetadata} message OperationMetadata message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        OperationMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an OperationMetadata message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.OperationMetadata} OperationMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OperationMetadata.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.OperationMetadata();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.target = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.verb = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.statusMessage = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.requestedCancellation = reader.bool();
                                        break;
                                    }
                                case 7: {
                                        message.apiVersion = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an OperationMetadata message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.OperationMetadata} OperationMetadata
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        OperationMetadata.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an OperationMetadata message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        OperationMetadata.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.endTime != null && message.hasOwnProperty("endTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.endTime);
                                if (error)
                                    return "endTime." + error;
                            }
                            if (message.target != null && message.hasOwnProperty("target"))
                                if (!$util.isString(message.target))
                                    return "target: string expected";
                            if (message.verb != null && message.hasOwnProperty("verb"))
                                if (!$util.isString(message.verb))
                                    return "verb: string expected";
                            if (message.statusMessage != null && message.hasOwnProperty("statusMessage"))
                                if (!$util.isString(message.statusMessage))
                                    return "statusMessage: string expected";
                            if (message.requestedCancellation != null && message.hasOwnProperty("requestedCancellation"))
                                if (typeof message.requestedCancellation !== "boolean")
                                    return "requestedCancellation: boolean expected";
                            if (message.apiVersion != null && message.hasOwnProperty("apiVersion"))
                                if (!$util.isString(message.apiVersion))
                                    return "apiVersion: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an OperationMetadata message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.OperationMetadata} OperationMetadata
                         */
                        OperationMetadata.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.OperationMetadata)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.OperationMetadata();
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.OperationMetadata.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.endTime != null) {
                                if (typeof object.endTime !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.OperationMetadata.endTime: object expected");
                                message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);
                            }
                            if (object.target != null)
                                message.target = String(object.target);
                            if (object.verb != null)
                                message.verb = String(object.verb);
                            if (object.statusMessage != null)
                                message.statusMessage = String(object.statusMessage);
                            if (object.requestedCancellation != null)
                                message.requestedCancellation = Boolean(object.requestedCancellation);
                            if (object.apiVersion != null)
                                message.apiVersion = String(object.apiVersion);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an OperationMetadata message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @static
                         * @param {google.cloud.batch.v1alpha.OperationMetadata} message OperationMetadata
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        OperationMetadata.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.createTime = null;
                                object.endTime = null;
                                object.target = "";
                                object.verb = "";
                                object.statusMessage = "";
                                object.requestedCancellation = false;
                                object.apiVersion = "";
                            }
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.endTime != null && message.hasOwnProperty("endTime"))
                                object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);
                            if (message.target != null && message.hasOwnProperty("target"))
                                object.target = message.target;
                            if (message.verb != null && message.hasOwnProperty("verb"))
                                object.verb = message.verb;
                            if (message.statusMessage != null && message.hasOwnProperty("statusMessage"))
                                object.statusMessage = message.statusMessage;
                            if (message.requestedCancellation != null && message.hasOwnProperty("requestedCancellation"))
                                object.requestedCancellation = message.requestedCancellation;
                            if (message.apiVersion != null && message.hasOwnProperty("apiVersion"))
                                object.apiVersion = message.apiVersion;
                            return object;
                        };
    
                        /**
                         * Converts this OperationMetadata to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        OperationMetadata.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for OperationMetadata
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.OperationMetadata
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        OperationMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.OperationMetadata";
                        };
    
                        return OperationMetadata;
                    })();
    
                    v1alpha.Job = (function() {
    
                        /**
                         * Properties of a Job.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IJob
                         * @property {string|null} [name] Job name
                         * @property {string|null} [uid] Job uid
                         * @property {number|Long|null} [priority] Job priority
                         * @property {Array.<google.cloud.batch.v1alpha.ITaskGroup>|null} [taskGroups] Job taskGroups
                         * @property {google.cloud.batch.v1alpha.Job.SchedulingPolicy|null} [schedulingPolicy] Job schedulingPolicy
                         * @property {Array.<google.cloud.batch.v1alpha.IJobDependency>|null} [dependencies] Job dependencies
                         * @property {google.cloud.batch.v1alpha.IAllocationPolicy|null} [allocationPolicy] Job allocationPolicy
                         * @property {Object.<string,string>|null} [labels] Job labels
                         * @property {google.cloud.batch.v1alpha.IJobStatus|null} [status] Job status
                         * @property {google.cloud.batch.v1alpha.IJobNotification|null} [notification] Job notification
                         * @property {google.protobuf.ITimestamp|null} [createTime] Job createTime
                         * @property {google.protobuf.ITimestamp|null} [updateTime] Job updateTime
                         * @property {google.cloud.batch.v1alpha.ILogsPolicy|null} [logsPolicy] Job logsPolicy
                         * @property {Array.<google.cloud.batch.v1alpha.IJobNotification>|null} [notifications] Job notifications
                         */
    
                        /**
                         * Constructs a new Job.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a Job.
                         * @implements IJob
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IJob=} [properties] Properties to set
                         */
                        function Job(properties) {
                            this.taskGroups = [];
                            this.dependencies = [];
                            this.labels = {};
                            this.notifications = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Job name.
                         * @member {string} name
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.name = "";
    
                        /**
                         * Job uid.
                         * @member {string} uid
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.uid = "";
    
                        /**
                         * Job priority.
                         * @member {number|Long} priority
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.priority = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Job taskGroups.
                         * @member {Array.<google.cloud.batch.v1alpha.ITaskGroup>} taskGroups
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.taskGroups = $util.emptyArray;
    
                        /**
                         * Job schedulingPolicy.
                         * @member {google.cloud.batch.v1alpha.Job.SchedulingPolicy} schedulingPolicy
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.schedulingPolicy = 0;
    
                        /**
                         * Job dependencies.
                         * @member {Array.<google.cloud.batch.v1alpha.IJobDependency>} dependencies
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.dependencies = $util.emptyArray;
    
                        /**
                         * Job allocationPolicy.
                         * @member {google.cloud.batch.v1alpha.IAllocationPolicy|null|undefined} allocationPolicy
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.allocationPolicy = null;
    
                        /**
                         * Job labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.labels = $util.emptyObject;
    
                        /**
                         * Job status.
                         * @member {google.cloud.batch.v1alpha.IJobStatus|null|undefined} status
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.status = null;
    
                        /**
                         * Job notification.
                         * @member {google.cloud.batch.v1alpha.IJobNotification|null|undefined} notification
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.notification = null;
    
                        /**
                         * Job createTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} createTime
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.createTime = null;
    
                        /**
                         * Job updateTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} updateTime
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.updateTime = null;
    
                        /**
                         * Job logsPolicy.
                         * @member {google.cloud.batch.v1alpha.ILogsPolicy|null|undefined} logsPolicy
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.logsPolicy = null;
    
                        /**
                         * Job notifications.
                         * @member {Array.<google.cloud.batch.v1alpha.IJobNotification>} notifications
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         */
                        Job.prototype.notifications = $util.emptyArray;
    
                        /**
                         * Creates a new Job instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @static
                         * @param {google.cloud.batch.v1alpha.IJob=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.Job} Job instance
                         */
                        Job.create = function create(properties) {
                            return new Job(properties);
                        };
    
                        /**
                         * Encodes the specified Job message. Does not implicitly {@link google.cloud.batch.v1alpha.Job.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @static
                         * @param {google.cloud.batch.v1alpha.IJob} message Job message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Job.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.uid != null && Object.hasOwnProperty.call(message, "uid"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.uid);
                            if (message.priority != null && Object.hasOwnProperty.call(message, "priority"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.priority);
                            if (message.taskGroups != null && message.taskGroups.length)
                                for (var i = 0; i < message.taskGroups.length; ++i)
                                    $root.google.cloud.batch.v1alpha.TaskGroup.encode(message.taskGroups[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.schedulingPolicy != null && Object.hasOwnProperty.call(message, "schedulingPolicy"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.schedulingPolicy);
                            if (message.dependencies != null && message.dependencies.length)
                                for (var i = 0; i < message.dependencies.length; ++i)
                                    $root.google.cloud.batch.v1alpha.JobDependency.encode(message.dependencies[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.allocationPolicy != null && Object.hasOwnProperty.call(message, "allocationPolicy"))
                                $root.google.cloud.batch.v1alpha.AllocationPolicy.encode(message.allocationPolicy, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 8, wireType 2 =*/66).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                                $root.google.cloud.batch.v1alpha.JobStatus.encode(message.status, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.notification != null && Object.hasOwnProperty.call(message, "notification"))
                                $root.google.cloud.batch.v1alpha.JobNotification.encode(message.notification, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            if (message.createTime != null && Object.hasOwnProperty.call(message, "createTime"))
                                $root.google.protobuf.Timestamp.encode(message.createTime, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            if (message.updateTime != null && Object.hasOwnProperty.call(message, "updateTime"))
                                $root.google.protobuf.Timestamp.encode(message.updateTime, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                            if (message.logsPolicy != null && Object.hasOwnProperty.call(message, "logsPolicy"))
                                $root.google.cloud.batch.v1alpha.LogsPolicy.encode(message.logsPolicy, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            if (message.notifications != null && message.notifications.length)
                                for (var i = 0; i < message.notifications.length; ++i)
                                    $root.google.cloud.batch.v1alpha.JobNotification.encode(message.notifications[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Job message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.Job.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @static
                         * @param {google.cloud.batch.v1alpha.IJob} message Job message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Job.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Job message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.Job} Job
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Job.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.Job(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.uid = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.priority = reader.int64();
                                        break;
                                    }
                                case 4: {
                                        if (!(message.taskGroups && message.taskGroups.length))
                                            message.taskGroups = [];
                                        message.taskGroups.push($root.google.cloud.batch.v1alpha.TaskGroup.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 5: {
                                        message.schedulingPolicy = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        if (!(message.dependencies && message.dependencies.length))
                                            message.dependencies = [];
                                        message.dependencies.push($root.google.cloud.batch.v1alpha.JobDependency.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 7: {
                                        message.allocationPolicy = $root.google.cloud.batch.v1alpha.AllocationPolicy.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                case 9: {
                                        message.status = $root.google.cloud.batch.v1alpha.JobStatus.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 10: {
                                        message.notification = $root.google.cloud.batch.v1alpha.JobNotification.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        message.createTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 12: {
                                        message.updateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 13: {
                                        message.logsPolicy = $root.google.cloud.batch.v1alpha.LogsPolicy.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 14: {
                                        if (!(message.notifications && message.notifications.length))
                                            message.notifications = [];
                                        message.notifications.push($root.google.cloud.batch.v1alpha.JobNotification.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Job message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.Job} Job
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Job.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Job message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Job.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.uid != null && message.hasOwnProperty("uid"))
                                if (!$util.isString(message.uid))
                                    return "uid: string expected";
                            if (message.priority != null && message.hasOwnProperty("priority"))
                                if (!$util.isInteger(message.priority) && !(message.priority && $util.isInteger(message.priority.low) && $util.isInteger(message.priority.high)))
                                    return "priority: integer|Long expected";
                            if (message.taskGroups != null && message.hasOwnProperty("taskGroups")) {
                                if (!Array.isArray(message.taskGroups))
                                    return "taskGroups: array expected";
                                for (var i = 0; i < message.taskGroups.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.TaskGroup.verify(message.taskGroups[i]);
                                    if (error)
                                        return "taskGroups." + error;
                                }
                            }
                            if (message.schedulingPolicy != null && message.hasOwnProperty("schedulingPolicy"))
                                switch (message.schedulingPolicy) {
                                default:
                                    return "schedulingPolicy: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.dependencies != null && message.hasOwnProperty("dependencies")) {
                                if (!Array.isArray(message.dependencies))
                                    return "dependencies: array expected";
                                for (var i = 0; i < message.dependencies.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.JobDependency.verify(message.dependencies[i]);
                                    if (error)
                                        return "dependencies." + error;
                                }
                            }
                            if (message.allocationPolicy != null && message.hasOwnProperty("allocationPolicy")) {
                                var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.verify(message.allocationPolicy);
                                if (error)
                                    return "allocationPolicy." + error;
                            }
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.status != null && message.hasOwnProperty("status")) {
                                var error = $root.google.cloud.batch.v1alpha.JobStatus.verify(message.status);
                                if (error)
                                    return "status." + error;
                            }
                            if (message.notification != null && message.hasOwnProperty("notification")) {
                                var error = $root.google.cloud.batch.v1alpha.JobNotification.verify(message.notification);
                                if (error)
                                    return "notification." + error;
                            }
                            if (message.createTime != null && message.hasOwnProperty("createTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.createTime);
                                if (error)
                                    return "createTime." + error;
                            }
                            if (message.updateTime != null && message.hasOwnProperty("updateTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.updateTime);
                                if (error)
                                    return "updateTime." + error;
                            }
                            if (message.logsPolicy != null && message.hasOwnProperty("logsPolicy")) {
                                var error = $root.google.cloud.batch.v1alpha.LogsPolicy.verify(message.logsPolicy);
                                if (error)
                                    return "logsPolicy." + error;
                            }
                            if (message.notifications != null && message.hasOwnProperty("notifications")) {
                                if (!Array.isArray(message.notifications))
                                    return "notifications: array expected";
                                for (var i = 0; i < message.notifications.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.JobNotification.verify(message.notifications[i]);
                                    if (error)
                                        return "notifications." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Job message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.Job} Job
                         */
                        Job.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.Job)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.Job();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.uid != null)
                                message.uid = String(object.uid);
                            if (object.priority != null)
                                if ($util.Long)
                                    (message.priority = $util.Long.fromValue(object.priority)).unsigned = false;
                                else if (typeof object.priority === "string")
                                    message.priority = parseInt(object.priority, 10);
                                else if (typeof object.priority === "number")
                                    message.priority = object.priority;
                                else if (typeof object.priority === "object")
                                    message.priority = new $util.LongBits(object.priority.low >>> 0, object.priority.high >>> 0).toNumber();
                            if (object.taskGroups) {
                                if (!Array.isArray(object.taskGroups))
                                    throw TypeError(".google.cloud.batch.v1alpha.Job.taskGroups: array expected");
                                message.taskGroups = [];
                                for (var i = 0; i < object.taskGroups.length; ++i) {
                                    if (typeof object.taskGroups[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.Job.taskGroups: object expected");
                                    message.taskGroups[i] = $root.google.cloud.batch.v1alpha.TaskGroup.fromObject(object.taskGroups[i]);
                                }
                            }
                            switch (object.schedulingPolicy) {
                            default:
                                if (typeof object.schedulingPolicy === "number") {
                                    message.schedulingPolicy = object.schedulingPolicy;
                                    break;
                                }
                                break;
                            case "SCHEDULING_POLICY_UNSPECIFIED":
                            case 0:
                                message.schedulingPolicy = 0;
                                break;
                            case "AS_SOON_AS_POSSIBLE":
                            case 1:
                                message.schedulingPolicy = 1;
                                break;
                            }
                            if (object.dependencies) {
                                if (!Array.isArray(object.dependencies))
                                    throw TypeError(".google.cloud.batch.v1alpha.Job.dependencies: array expected");
                                message.dependencies = [];
                                for (var i = 0; i < object.dependencies.length; ++i) {
                                    if (typeof object.dependencies[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.Job.dependencies: object expected");
                                    message.dependencies[i] = $root.google.cloud.batch.v1alpha.JobDependency.fromObject(object.dependencies[i]);
                                }
                            }
                            if (object.allocationPolicy != null) {
                                if (typeof object.allocationPolicy !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Job.allocationPolicy: object expected");
                                message.allocationPolicy = $root.google.cloud.batch.v1alpha.AllocationPolicy.fromObject(object.allocationPolicy);
                            }
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Job.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.status != null) {
                                if (typeof object.status !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Job.status: object expected");
                                message.status = $root.google.cloud.batch.v1alpha.JobStatus.fromObject(object.status);
                            }
                            if (object.notification != null) {
                                if (typeof object.notification !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Job.notification: object expected");
                                message.notification = $root.google.cloud.batch.v1alpha.JobNotification.fromObject(object.notification);
                            }
                            if (object.createTime != null) {
                                if (typeof object.createTime !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Job.createTime: object expected");
                                message.createTime = $root.google.protobuf.Timestamp.fromObject(object.createTime);
                            }
                            if (object.updateTime != null) {
                                if (typeof object.updateTime !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Job.updateTime: object expected");
                                message.updateTime = $root.google.protobuf.Timestamp.fromObject(object.updateTime);
                            }
                            if (object.logsPolicy != null) {
                                if (typeof object.logsPolicy !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Job.logsPolicy: object expected");
                                message.logsPolicy = $root.google.cloud.batch.v1alpha.LogsPolicy.fromObject(object.logsPolicy);
                            }
                            if (object.notifications) {
                                if (!Array.isArray(object.notifications))
                                    throw TypeError(".google.cloud.batch.v1alpha.Job.notifications: array expected");
                                message.notifications = [];
                                for (var i = 0; i < object.notifications.length; ++i) {
                                    if (typeof object.notifications[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.Job.notifications: object expected");
                                    message.notifications[i] = $root.google.cloud.batch.v1alpha.JobNotification.fromObject(object.notifications[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Job message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @static
                         * @param {google.cloud.batch.v1alpha.Job} message Job
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Job.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.taskGroups = [];
                                object.dependencies = [];
                                object.notifications = [];
                            }
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.name = "";
                                object.uid = "";
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.priority = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.priority = options.longs === String ? "0" : 0;
                                object.schedulingPolicy = options.enums === String ? "SCHEDULING_POLICY_UNSPECIFIED" : 0;
                                object.allocationPolicy = null;
                                object.status = null;
                                object.notification = null;
                                object.createTime = null;
                                object.updateTime = null;
                                object.logsPolicy = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.uid != null && message.hasOwnProperty("uid"))
                                object.uid = message.uid;
                            if (message.priority != null && message.hasOwnProperty("priority"))
                                if (typeof message.priority === "number")
                                    object.priority = options.longs === String ? String(message.priority) : message.priority;
                                else
                                    object.priority = options.longs === String ? $util.Long.prototype.toString.call(message.priority) : options.longs === Number ? new $util.LongBits(message.priority.low >>> 0, message.priority.high >>> 0).toNumber() : message.priority;
                            if (message.taskGroups && message.taskGroups.length) {
                                object.taskGroups = [];
                                for (var j = 0; j < message.taskGroups.length; ++j)
                                    object.taskGroups[j] = $root.google.cloud.batch.v1alpha.TaskGroup.toObject(message.taskGroups[j], options);
                            }
                            if (message.schedulingPolicy != null && message.hasOwnProperty("schedulingPolicy"))
                                object.schedulingPolicy = options.enums === String ? $root.google.cloud.batch.v1alpha.Job.SchedulingPolicy[message.schedulingPolicy] === undefined ? message.schedulingPolicy : $root.google.cloud.batch.v1alpha.Job.SchedulingPolicy[message.schedulingPolicy] : message.schedulingPolicy;
                            if (message.dependencies && message.dependencies.length) {
                                object.dependencies = [];
                                for (var j = 0; j < message.dependencies.length; ++j)
                                    object.dependencies[j] = $root.google.cloud.batch.v1alpha.JobDependency.toObject(message.dependencies[j], options);
                            }
                            if (message.allocationPolicy != null && message.hasOwnProperty("allocationPolicy"))
                                object.allocationPolicy = $root.google.cloud.batch.v1alpha.AllocationPolicy.toObject(message.allocationPolicy, options);
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.status != null && message.hasOwnProperty("status"))
                                object.status = $root.google.cloud.batch.v1alpha.JobStatus.toObject(message.status, options);
                            if (message.notification != null && message.hasOwnProperty("notification"))
                                object.notification = $root.google.cloud.batch.v1alpha.JobNotification.toObject(message.notification, options);
                            if (message.createTime != null && message.hasOwnProperty("createTime"))
                                object.createTime = $root.google.protobuf.Timestamp.toObject(message.createTime, options);
                            if (message.updateTime != null && message.hasOwnProperty("updateTime"))
                                object.updateTime = $root.google.protobuf.Timestamp.toObject(message.updateTime, options);
                            if (message.logsPolicy != null && message.hasOwnProperty("logsPolicy"))
                                object.logsPolicy = $root.google.cloud.batch.v1alpha.LogsPolicy.toObject(message.logsPolicy, options);
                            if (message.notifications && message.notifications.length) {
                                object.notifications = [];
                                for (var j = 0; j < message.notifications.length; ++j)
                                    object.notifications[j] = $root.google.cloud.batch.v1alpha.JobNotification.toObject(message.notifications[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Job to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Job.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Job
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.Job
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Job.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.Job";
                        };
    
                        /**
                         * SchedulingPolicy enum.
                         * @name google.cloud.batch.v1alpha.Job.SchedulingPolicy
                         * @enum {number}
                         * @property {number} SCHEDULING_POLICY_UNSPECIFIED=0 SCHEDULING_POLICY_UNSPECIFIED value
                         * @property {number} AS_SOON_AS_POSSIBLE=1 AS_SOON_AS_POSSIBLE value
                         */
                        Job.SchedulingPolicy = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "SCHEDULING_POLICY_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "AS_SOON_AS_POSSIBLE"] = 1;
                            return values;
                        })();
    
                        return Job;
                    })();
    
                    v1alpha.LogsPolicy = (function() {
    
                        /**
                         * Properties of a LogsPolicy.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface ILogsPolicy
                         * @property {google.cloud.batch.v1alpha.LogsPolicy.Destination|null} [destination] LogsPolicy destination
                         * @property {string|null} [logsPath] LogsPolicy logsPath
                         */
    
                        /**
                         * Constructs a new LogsPolicy.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a LogsPolicy.
                         * @implements ILogsPolicy
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.ILogsPolicy=} [properties] Properties to set
                         */
                        function LogsPolicy(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LogsPolicy destination.
                         * @member {google.cloud.batch.v1alpha.LogsPolicy.Destination} destination
                         * @memberof google.cloud.batch.v1alpha.LogsPolicy
                         * @instance
                         */
                        LogsPolicy.prototype.destination = 0;
    
                        /**
                         * LogsPolicy logsPath.
                         * @member {string} logsPath
                         * @memberof google.cloud.batch.v1alpha.LogsPolicy
                         * @instance
                         */
                        LogsPolicy.prototype.logsPath = "";
    
                        /**
                         * Creates a new LogsPolicy instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.LogsPolicy
                         * @static
                         * @param {google.cloud.batch.v1alpha.ILogsPolicy=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.LogsPolicy} LogsPolicy instance
                         */
                        LogsPolicy.create = function create(properties) {
                            return new LogsPolicy(properties);
                        };
    
                        /**
                         * Encodes the specified LogsPolicy message. Does not implicitly {@link google.cloud.batch.v1alpha.LogsPolicy.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.LogsPolicy
                         * @static
                         * @param {google.cloud.batch.v1alpha.ILogsPolicy} message LogsPolicy message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogsPolicy.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.destination != null && Object.hasOwnProperty.call(message, "destination"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.destination);
                            if (message.logsPath != null && Object.hasOwnProperty.call(message, "logsPath"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.logsPath);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LogsPolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.LogsPolicy.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.LogsPolicy
                         * @static
                         * @param {google.cloud.batch.v1alpha.ILogsPolicy} message LogsPolicy message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LogsPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LogsPolicy message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.LogsPolicy
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.LogsPolicy} LogsPolicy
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogsPolicy.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.LogsPolicy();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.destination = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.logsPath = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LogsPolicy message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.LogsPolicy
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.LogsPolicy} LogsPolicy
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LogsPolicy.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LogsPolicy message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.LogsPolicy
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LogsPolicy.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.destination != null && message.hasOwnProperty("destination"))
                                switch (message.destination) {
                                default:
                                    return "destination: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.logsPath != null && message.hasOwnProperty("logsPath"))
                                if (!$util.isString(message.logsPath))
                                    return "logsPath: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a LogsPolicy message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.LogsPolicy
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.LogsPolicy} LogsPolicy
                         */
                        LogsPolicy.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.LogsPolicy)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.LogsPolicy();
                            switch (object.destination) {
                            default:
                                if (typeof object.destination === "number") {
                                    message.destination = object.destination;
                                    break;
                                }
                                break;
                            case "DESTINATION_UNSPECIFIED":
                            case 0:
                                message.destination = 0;
                                break;
                            case "CLOUD_LOGGING":
                            case 1:
                                message.destination = 1;
                                break;
                            case "PATH":
                            case 2:
                                message.destination = 2;
                                break;
                            }
                            if (object.logsPath != null)
                                message.logsPath = String(object.logsPath);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LogsPolicy message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.LogsPolicy
                         * @static
                         * @param {google.cloud.batch.v1alpha.LogsPolicy} message LogsPolicy
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LogsPolicy.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.destination = options.enums === String ? "DESTINATION_UNSPECIFIED" : 0;
                                object.logsPath = "";
                            }
                            if (message.destination != null && message.hasOwnProperty("destination"))
                                object.destination = options.enums === String ? $root.google.cloud.batch.v1alpha.LogsPolicy.Destination[message.destination] === undefined ? message.destination : $root.google.cloud.batch.v1alpha.LogsPolicy.Destination[message.destination] : message.destination;
                            if (message.logsPath != null && message.hasOwnProperty("logsPath"))
                                object.logsPath = message.logsPath;
                            return object;
                        };
    
                        /**
                         * Converts this LogsPolicy to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.LogsPolicy
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LogsPolicy.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LogsPolicy
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.LogsPolicy
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LogsPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.LogsPolicy";
                        };
    
                        /**
                         * Destination enum.
                         * @name google.cloud.batch.v1alpha.LogsPolicy.Destination
                         * @enum {number}
                         * @property {number} DESTINATION_UNSPECIFIED=0 DESTINATION_UNSPECIFIED value
                         * @property {number} CLOUD_LOGGING=1 CLOUD_LOGGING value
                         * @property {number} PATH=2 PATH value
                         */
                        LogsPolicy.Destination = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "DESTINATION_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "CLOUD_LOGGING"] = 1;
                            values[valuesById[2] = "PATH"] = 2;
                            return values;
                        })();
    
                        return LogsPolicy;
                    })();
    
                    v1alpha.JobDependency = (function() {
    
                        /**
                         * Properties of a JobDependency.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IJobDependency
                         * @property {Object.<string,google.cloud.batch.v1alpha.JobDependency.Type>|null} [items] JobDependency items
                         */
    
                        /**
                         * Constructs a new JobDependency.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a JobDependency.
                         * @implements IJobDependency
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IJobDependency=} [properties] Properties to set
                         */
                        function JobDependency(properties) {
                            this.items = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * JobDependency items.
                         * @member {Object.<string,google.cloud.batch.v1alpha.JobDependency.Type>} items
                         * @memberof google.cloud.batch.v1alpha.JobDependency
                         * @instance
                         */
                        JobDependency.prototype.items = $util.emptyObject;
    
                        /**
                         * Creates a new JobDependency instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.JobDependency
                         * @static
                         * @param {google.cloud.batch.v1alpha.IJobDependency=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.JobDependency} JobDependency instance
                         */
                        JobDependency.create = function create(properties) {
                            return new JobDependency(properties);
                        };
    
                        /**
                         * Encodes the specified JobDependency message. Does not implicitly {@link google.cloud.batch.v1alpha.JobDependency.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.JobDependency
                         * @static
                         * @param {google.cloud.batch.v1alpha.IJobDependency} message JobDependency message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        JobDependency.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.items != null && Object.hasOwnProperty.call(message, "items"))
                                for (var keys = Object.keys(message.items), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.items[keys[i]]).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified JobDependency message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.JobDependency.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.JobDependency
                         * @static
                         * @param {google.cloud.batch.v1alpha.IJobDependency} message JobDependency message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        JobDependency.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a JobDependency message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.JobDependency
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.JobDependency} JobDependency
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        JobDependency.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.JobDependency(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (message.items === $util.emptyObject)
                                            message.items = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = 0;
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.int32();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.items[key] = value;
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a JobDependency message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.JobDependency
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.JobDependency} JobDependency
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        JobDependency.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a JobDependency message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.JobDependency
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        JobDependency.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.items != null && message.hasOwnProperty("items")) {
                                if (!$util.isObject(message.items))
                                    return "items: object expected";
                                var key = Object.keys(message.items);
                                for (var i = 0; i < key.length; ++i)
                                    switch (message.items[key[i]]) {
                                    default:
                                        return "items: enum value{k:string} expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a JobDependency message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.JobDependency
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.JobDependency} JobDependency
                         */
                        JobDependency.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.JobDependency)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.JobDependency();
                            if (object.items) {
                                if (typeof object.items !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.JobDependency.items: object expected");
                                message.items = {};
                                for (var keys = Object.keys(object.items), i = 0; i < keys.length; ++i)
                                    switch (object.items[keys[i]]) {
                                    default:
                                        if (typeof object.items[keys[i]] === "number") {
                                            message.items[keys[i]] = object.items[keys[i]];
                                            break;
                                        }
                                        break;
                                    case "TYPE_UNSPECIFIED":
                                    case 0:
                                        message.items[keys[i]] = 0;
                                        break;
                                    case "SUCCEEDED":
                                    case 1:
                                        message.items[keys[i]] = 1;
                                        break;
                                    case "FAILED":
                                    case 2:
                                        message.items[keys[i]] = 2;
                                        break;
                                    case "FINISHED":
                                    case 3:
                                        message.items[keys[i]] = 3;
                                        break;
                                    }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a JobDependency message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.JobDependency
                         * @static
                         * @param {google.cloud.batch.v1alpha.JobDependency} message JobDependency
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        JobDependency.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.items = {};
                            var keys2;
                            if (message.items && (keys2 = Object.keys(message.items)).length) {
                                object.items = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.items[keys2[j]] = options.enums === String ? $root.google.cloud.batch.v1alpha.JobDependency.Type[message.items[keys2[j]]] === undefined ? message.items[keys2[j]] : $root.google.cloud.batch.v1alpha.JobDependency.Type[message.items[keys2[j]]] : message.items[keys2[j]];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this JobDependency to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.JobDependency
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        JobDependency.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for JobDependency
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.JobDependency
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        JobDependency.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.JobDependency";
                        };
    
                        /**
                         * Type enum.
                         * @name google.cloud.batch.v1alpha.JobDependency.Type
                         * @enum {number}
                         * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                         * @property {number} SUCCEEDED=1 SUCCEEDED value
                         * @property {number} FAILED=2 FAILED value
                         * @property {number} FINISHED=3 FINISHED value
                         */
                        JobDependency.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "SUCCEEDED"] = 1;
                            values[valuesById[2] = "FAILED"] = 2;
                            values[valuesById[3] = "FINISHED"] = 3;
                            return values;
                        })();
    
                        return JobDependency;
                    })();
    
                    v1alpha.JobStatus = (function() {
    
                        /**
                         * Properties of a JobStatus.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IJobStatus
                         * @property {google.cloud.batch.v1alpha.JobStatus.State|null} [state] JobStatus state
                         * @property {Array.<google.cloud.batch.v1alpha.IStatusEvent>|null} [statusEvents] JobStatus statusEvents
                         * @property {Object.<string,google.cloud.batch.v1alpha.JobStatus.ITaskGroupStatus>|null} [taskGroups] JobStatus taskGroups
                         * @property {google.protobuf.IDuration|null} [runDuration] JobStatus runDuration
                         * @property {google.cloud.batch.v1alpha.IResourceUsage|null} [resourceUsage] JobStatus resourceUsage
                         */
    
                        /**
                         * Constructs a new JobStatus.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a JobStatus.
                         * @implements IJobStatus
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IJobStatus=} [properties] Properties to set
                         */
                        function JobStatus(properties) {
                            this.statusEvents = [];
                            this.taskGroups = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * JobStatus state.
                         * @member {google.cloud.batch.v1alpha.JobStatus.State} state
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @instance
                         */
                        JobStatus.prototype.state = 0;
    
                        /**
                         * JobStatus statusEvents.
                         * @member {Array.<google.cloud.batch.v1alpha.IStatusEvent>} statusEvents
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @instance
                         */
                        JobStatus.prototype.statusEvents = $util.emptyArray;
    
                        /**
                         * JobStatus taskGroups.
                         * @member {Object.<string,google.cloud.batch.v1alpha.JobStatus.ITaskGroupStatus>} taskGroups
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @instance
                         */
                        JobStatus.prototype.taskGroups = $util.emptyObject;
    
                        /**
                         * JobStatus runDuration.
                         * @member {google.protobuf.IDuration|null|undefined} runDuration
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @instance
                         */
                        JobStatus.prototype.runDuration = null;
    
                        /**
                         * JobStatus resourceUsage.
                         * @member {google.cloud.batch.v1alpha.IResourceUsage|null|undefined} resourceUsage
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @instance
                         */
                        JobStatus.prototype.resourceUsage = null;
    
                        /**
                         * Creates a new JobStatus instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @static
                         * @param {google.cloud.batch.v1alpha.IJobStatus=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.JobStatus} JobStatus instance
                         */
                        JobStatus.create = function create(properties) {
                            return new JobStatus(properties);
                        };
    
                        /**
                         * Encodes the specified JobStatus message. Does not implicitly {@link google.cloud.batch.v1alpha.JobStatus.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @static
                         * @param {google.cloud.batch.v1alpha.IJobStatus} message JobStatus message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        JobStatus.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                            if (message.statusEvents != null && message.statusEvents.length)
                                for (var i = 0; i < message.statusEvents.length; ++i)
                                    $root.google.cloud.batch.v1alpha.StatusEvent.encode(message.statusEvents[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.taskGroups != null && Object.hasOwnProperty.call(message, "taskGroups"))
                                for (var keys = Object.keys(message.taskGroups), i = 0; i < keys.length; ++i) {
                                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);
                                    $root.google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus.encode(message.taskGroups[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();
                                }
                            if (message.runDuration != null && Object.hasOwnProperty.call(message, "runDuration"))
                                $root.google.protobuf.Duration.encode(message.runDuration, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.resourceUsage != null && Object.hasOwnProperty.call(message, "resourceUsage"))
                                $root.google.cloud.batch.v1alpha.ResourceUsage.encode(message.resourceUsage, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified JobStatus message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.JobStatus.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @static
                         * @param {google.cloud.batch.v1alpha.IJobStatus} message JobStatus message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        JobStatus.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a JobStatus message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.JobStatus} JobStatus
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        JobStatus.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.JobStatus(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.state = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.statusEvents && message.statusEvents.length))
                                            message.statusEvents = [];
                                        message.statusEvents.push($root.google.cloud.batch.v1alpha.StatusEvent.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        if (message.taskGroups === $util.emptyObject)
                                            message.taskGroups = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = null;
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = $root.google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus.decode(reader, reader.uint32());
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.taskGroups[key] = value;
                                        break;
                                    }
                                case 5: {
                                        message.runDuration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.resourceUsage = $root.google.cloud.batch.v1alpha.ResourceUsage.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a JobStatus message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.JobStatus} JobStatus
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        JobStatus.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a JobStatus message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        JobStatus.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                switch (message.state) {
                                default:
                                    return "state: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            if (message.statusEvents != null && message.hasOwnProperty("statusEvents")) {
                                if (!Array.isArray(message.statusEvents))
                                    return "statusEvents: array expected";
                                for (var i = 0; i < message.statusEvents.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.StatusEvent.verify(message.statusEvents[i]);
                                    if (error)
                                        return "statusEvents." + error;
                                }
                            }
                            if (message.taskGroups != null && message.hasOwnProperty("taskGroups")) {
                                if (!$util.isObject(message.taskGroups))
                                    return "taskGroups: object expected";
                                var key = Object.keys(message.taskGroups);
                                for (var i = 0; i < key.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus.verify(message.taskGroups[key[i]]);
                                    if (error)
                                        return "taskGroups." + error;
                                }
                            }
                            if (message.runDuration != null && message.hasOwnProperty("runDuration")) {
                                var error = $root.google.protobuf.Duration.verify(message.runDuration);
                                if (error)
                                    return "runDuration." + error;
                            }
                            if (message.resourceUsage != null && message.hasOwnProperty("resourceUsage")) {
                                var error = $root.google.cloud.batch.v1alpha.ResourceUsage.verify(message.resourceUsage);
                                if (error)
                                    return "resourceUsage." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a JobStatus message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.JobStatus} JobStatus
                         */
                        JobStatus.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.JobStatus)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.JobStatus();
                            switch (object.state) {
                            default:
                                if (typeof object.state === "number") {
                                    message.state = object.state;
                                    break;
                                }
                                break;
                            case "STATE_UNSPECIFIED":
                            case 0:
                                message.state = 0;
                                break;
                            case "QUEUED":
                            case 1:
                                message.state = 1;
                                break;
                            case "SCHEDULED":
                            case 2:
                                message.state = 2;
                                break;
                            case "RUNNING":
                            case 3:
                                message.state = 3;
                                break;
                            case "SUCCEEDED":
                            case 4:
                                message.state = 4;
                                break;
                            case "FAILED":
                            case 5:
                                message.state = 5;
                                break;
                            case "DELETION_IN_PROGRESS":
                            case 6:
                                message.state = 6;
                                break;
                            }
                            if (object.statusEvents) {
                                if (!Array.isArray(object.statusEvents))
                                    throw TypeError(".google.cloud.batch.v1alpha.JobStatus.statusEvents: array expected");
                                message.statusEvents = [];
                                for (var i = 0; i < object.statusEvents.length; ++i) {
                                    if (typeof object.statusEvents[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.JobStatus.statusEvents: object expected");
                                    message.statusEvents[i] = $root.google.cloud.batch.v1alpha.StatusEvent.fromObject(object.statusEvents[i]);
                                }
                            }
                            if (object.taskGroups) {
                                if (typeof object.taskGroups !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.JobStatus.taskGroups: object expected");
                                message.taskGroups = {};
                                for (var keys = Object.keys(object.taskGroups), i = 0; i < keys.length; ++i) {
                                    if (typeof object.taskGroups[keys[i]] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.JobStatus.taskGroups: object expected");
                                    message.taskGroups[keys[i]] = $root.google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus.fromObject(object.taskGroups[keys[i]]);
                                }
                            }
                            if (object.runDuration != null) {
                                if (typeof object.runDuration !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.JobStatus.runDuration: object expected");
                                message.runDuration = $root.google.protobuf.Duration.fromObject(object.runDuration);
                            }
                            if (object.resourceUsage != null) {
                                if (typeof object.resourceUsage !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.JobStatus.resourceUsage: object expected");
                                message.resourceUsage = $root.google.cloud.batch.v1alpha.ResourceUsage.fromObject(object.resourceUsage);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a JobStatus message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @static
                         * @param {google.cloud.batch.v1alpha.JobStatus} message JobStatus
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        JobStatus.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.statusEvents = [];
                            if (options.objects || options.defaults)
                                object.taskGroups = {};
                            if (options.defaults) {
                                object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                                object.runDuration = null;
                                object.resourceUsage = null;
                            }
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = options.enums === String ? $root.google.cloud.batch.v1alpha.JobStatus.State[message.state] === undefined ? message.state : $root.google.cloud.batch.v1alpha.JobStatus.State[message.state] : message.state;
                            if (message.statusEvents && message.statusEvents.length) {
                                object.statusEvents = [];
                                for (var j = 0; j < message.statusEvents.length; ++j)
                                    object.statusEvents[j] = $root.google.cloud.batch.v1alpha.StatusEvent.toObject(message.statusEvents[j], options);
                            }
                            var keys2;
                            if (message.taskGroups && (keys2 = Object.keys(message.taskGroups)).length) {
                                object.taskGroups = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.taskGroups[keys2[j]] = $root.google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus.toObject(message.taskGroups[keys2[j]], options);
                            }
                            if (message.runDuration != null && message.hasOwnProperty("runDuration"))
                                object.runDuration = $root.google.protobuf.Duration.toObject(message.runDuration, options);
                            if (message.resourceUsage != null && message.hasOwnProperty("resourceUsage"))
                                object.resourceUsage = $root.google.cloud.batch.v1alpha.ResourceUsage.toObject(message.resourceUsage, options);
                            return object;
                        };
    
                        /**
                         * Converts this JobStatus to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        JobStatus.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for JobStatus
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.JobStatus
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        JobStatus.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.JobStatus";
                        };
    
                        JobStatus.InstanceStatus = (function() {
    
                            /**
                             * Properties of an InstanceStatus.
                             * @memberof google.cloud.batch.v1alpha.JobStatus
                             * @interface IInstanceStatus
                             * @property {string|null} [machineType] InstanceStatus machineType
                             * @property {google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel|null} [provisioningModel] InstanceStatus provisioningModel
                             * @property {number|Long|null} [taskPack] InstanceStatus taskPack
                             * @property {google.cloud.batch.v1alpha.AllocationPolicy.IDisk|null} [bootDisk] InstanceStatus bootDisk
                             */
    
                            /**
                             * Constructs a new InstanceStatus.
                             * @memberof google.cloud.batch.v1alpha.JobStatus
                             * @classdesc Represents an InstanceStatus.
                             * @implements IInstanceStatus
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.JobStatus.IInstanceStatus=} [properties] Properties to set
                             */
                            function InstanceStatus(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * InstanceStatus machineType.
                             * @member {string} machineType
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @instance
                             */
                            InstanceStatus.prototype.machineType = "";
    
                            /**
                             * InstanceStatus provisioningModel.
                             * @member {google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel} provisioningModel
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @instance
                             */
                            InstanceStatus.prototype.provisioningModel = 0;
    
                            /**
                             * InstanceStatus taskPack.
                             * @member {number|Long} taskPack
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @instance
                             */
                            InstanceStatus.prototype.taskPack = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * InstanceStatus bootDisk.
                             * @member {google.cloud.batch.v1alpha.AllocationPolicy.IDisk|null|undefined} bootDisk
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @instance
                             */
                            InstanceStatus.prototype.bootDisk = null;
    
                            /**
                             * Creates a new InstanceStatus instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @static
                             * @param {google.cloud.batch.v1alpha.JobStatus.IInstanceStatus=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.JobStatus.InstanceStatus} InstanceStatus instance
                             */
                            InstanceStatus.create = function create(properties) {
                                return new InstanceStatus(properties);
                            };
    
                            /**
                             * Encodes the specified InstanceStatus message. Does not implicitly {@link google.cloud.batch.v1alpha.JobStatus.InstanceStatus.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @static
                             * @param {google.cloud.batch.v1alpha.JobStatus.IInstanceStatus} message InstanceStatus message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstanceStatus.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.machineType != null && Object.hasOwnProperty.call(message, "machineType"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.machineType);
                                if (message.provisioningModel != null && Object.hasOwnProperty.call(message, "provisioningModel"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.provisioningModel);
                                if (message.taskPack != null && Object.hasOwnProperty.call(message, "taskPack"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.taskPack);
                                if (message.bootDisk != null && Object.hasOwnProperty.call(message, "bootDisk"))
                                    $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.encode(message.bootDisk, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified InstanceStatus message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.JobStatus.InstanceStatus.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @static
                             * @param {google.cloud.batch.v1alpha.JobStatus.IInstanceStatus} message InstanceStatus message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstanceStatus.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an InstanceStatus message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.JobStatus.InstanceStatus} InstanceStatus
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstanceStatus.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.JobStatus.InstanceStatus();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.machineType = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.provisioningModel = reader.int32();
                                            break;
                                        }
                                    case 3: {
                                            message.taskPack = reader.int64();
                                            break;
                                        }
                                    case 4: {
                                            message.bootDisk = $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.decode(reader, reader.uint32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an InstanceStatus message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.JobStatus.InstanceStatus} InstanceStatus
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstanceStatus.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an InstanceStatus message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            InstanceStatus.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.machineType != null && message.hasOwnProperty("machineType"))
                                    if (!$util.isString(message.machineType))
                                        return "machineType: string expected";
                                if (message.provisioningModel != null && message.hasOwnProperty("provisioningModel"))
                                    switch (message.provisioningModel) {
                                    default:
                                        return "provisioningModel: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                                if (message.taskPack != null && message.hasOwnProperty("taskPack"))
                                    if (!$util.isInteger(message.taskPack) && !(message.taskPack && $util.isInteger(message.taskPack.low) && $util.isInteger(message.taskPack.high)))
                                        return "taskPack: integer|Long expected";
                                if (message.bootDisk != null && message.hasOwnProperty("bootDisk")) {
                                    var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.verify(message.bootDisk);
                                    if (error)
                                        return "bootDisk." + error;
                                }
                                return null;
                            };
    
                            /**
                             * Creates an InstanceStatus message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.JobStatus.InstanceStatus} InstanceStatus
                             */
                            InstanceStatus.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.JobStatus.InstanceStatus)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.JobStatus.InstanceStatus();
                                if (object.machineType != null)
                                    message.machineType = String(object.machineType);
                                switch (object.provisioningModel) {
                                default:
                                    if (typeof object.provisioningModel === "number") {
                                        message.provisioningModel = object.provisioningModel;
                                        break;
                                    }
                                    break;
                                case "PROVISIONING_MODEL_UNSPECIFIED":
                                case 0:
                                    message.provisioningModel = 0;
                                    break;
                                case "STANDARD":
                                case 1:
                                    message.provisioningModel = 1;
                                    break;
                                case "SPOT":
                                case 2:
                                    message.provisioningModel = 2;
                                    break;
                                case "PREEMPTIBLE":
                                case 3:
                                    message.provisioningModel = 3;
                                    break;
                                }
                                if (object.taskPack != null)
                                    if ($util.Long)
                                        (message.taskPack = $util.Long.fromValue(object.taskPack)).unsigned = false;
                                    else if (typeof object.taskPack === "string")
                                        message.taskPack = parseInt(object.taskPack, 10);
                                    else if (typeof object.taskPack === "number")
                                        message.taskPack = object.taskPack;
                                    else if (typeof object.taskPack === "object")
                                        message.taskPack = new $util.LongBits(object.taskPack.low >>> 0, object.taskPack.high >>> 0).toNumber();
                                if (object.bootDisk != null) {
                                    if (typeof object.bootDisk !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.JobStatus.InstanceStatus.bootDisk: object expected");
                                    message.bootDisk = $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.fromObject(object.bootDisk);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an InstanceStatus message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @static
                             * @param {google.cloud.batch.v1alpha.JobStatus.InstanceStatus} message InstanceStatus
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            InstanceStatus.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.machineType = "";
                                    object.provisioningModel = options.enums === String ? "PROVISIONING_MODEL_UNSPECIFIED" : 0;
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.taskPack = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.taskPack = options.longs === String ? "0" : 0;
                                    object.bootDisk = null;
                                }
                                if (message.machineType != null && message.hasOwnProperty("machineType"))
                                    object.machineType = message.machineType;
                                if (message.provisioningModel != null && message.hasOwnProperty("provisioningModel"))
                                    object.provisioningModel = options.enums === String ? $root.google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel[message.provisioningModel] === undefined ? message.provisioningModel : $root.google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel[message.provisioningModel] : message.provisioningModel;
                                if (message.taskPack != null && message.hasOwnProperty("taskPack"))
                                    if (typeof message.taskPack === "number")
                                        object.taskPack = options.longs === String ? String(message.taskPack) : message.taskPack;
                                    else
                                        object.taskPack = options.longs === String ? $util.Long.prototype.toString.call(message.taskPack) : options.longs === Number ? new $util.LongBits(message.taskPack.low >>> 0, message.taskPack.high >>> 0).toNumber() : message.taskPack;
                                if (message.bootDisk != null && message.hasOwnProperty("bootDisk"))
                                    object.bootDisk = $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.toObject(message.bootDisk, options);
                                return object;
                            };
    
                            /**
                             * Converts this InstanceStatus to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            InstanceStatus.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for InstanceStatus
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.JobStatus.InstanceStatus
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            InstanceStatus.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.JobStatus.InstanceStatus";
                            };
    
                            return InstanceStatus;
                        })();
    
                        JobStatus.TaskGroupStatus = (function() {
    
                            /**
                             * Properties of a TaskGroupStatus.
                             * @memberof google.cloud.batch.v1alpha.JobStatus
                             * @interface ITaskGroupStatus
                             * @property {Object.<string,number|Long>|null} [counts] TaskGroupStatus counts
                             * @property {Array.<google.cloud.batch.v1alpha.JobStatus.IInstanceStatus>|null} [instances] TaskGroupStatus instances
                             */
    
                            /**
                             * Constructs a new TaskGroupStatus.
                             * @memberof google.cloud.batch.v1alpha.JobStatus
                             * @classdesc Represents a TaskGroupStatus.
                             * @implements ITaskGroupStatus
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.JobStatus.ITaskGroupStatus=} [properties] Properties to set
                             */
                            function TaskGroupStatus(properties) {
                                this.counts = {};
                                this.instances = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * TaskGroupStatus counts.
                             * @member {Object.<string,number|Long>} counts
                             * @memberof google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
                             * @instance
                             */
                            TaskGroupStatus.prototype.counts = $util.emptyObject;
    
                            /**
                             * TaskGroupStatus instances.
                             * @member {Array.<google.cloud.batch.v1alpha.JobStatus.IInstanceStatus>} instances
                             * @memberof google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
                             * @instance
                             */
                            TaskGroupStatus.prototype.instances = $util.emptyArray;
    
                            /**
                             * Creates a new TaskGroupStatus instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
                             * @static
                             * @param {google.cloud.batch.v1alpha.JobStatus.ITaskGroupStatus=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus} TaskGroupStatus instance
                             */
                            TaskGroupStatus.create = function create(properties) {
                                return new TaskGroupStatus(properties);
                            };
    
                            /**
                             * Encodes the specified TaskGroupStatus message. Does not implicitly {@link google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
                             * @static
                             * @param {google.cloud.batch.v1alpha.JobStatus.ITaskGroupStatus} message TaskGroupStatus message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TaskGroupStatus.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.counts != null && Object.hasOwnProperty.call(message, "counts"))
                                    for (var keys = Object.keys(message.counts), i = 0; i < keys.length; ++i)
                                        writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 0 =*/16).int64(message.counts[keys[i]]).ldelim();
                                if (message.instances != null && message.instances.length)
                                    for (var i = 0; i < message.instances.length; ++i)
                                        $root.google.cloud.batch.v1alpha.JobStatus.InstanceStatus.encode(message.instances[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified TaskGroupStatus message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
                             * @static
                             * @param {google.cloud.batch.v1alpha.JobStatus.ITaskGroupStatus} message TaskGroupStatus message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            TaskGroupStatus.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a TaskGroupStatus message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus} TaskGroupStatus
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TaskGroupStatus.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus(), key, value;
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            if (message.counts === $util.emptyObject)
                                                message.counts = {};
                                            var end2 = reader.uint32() + reader.pos;
                                            key = "";
                                            value = 0;
                                            while (reader.pos < end2) {
                                                var tag2 = reader.uint32();
                                                switch (tag2 >>> 3) {
                                                case 1:
                                                    key = reader.string();
                                                    break;
                                                case 2:
                                                    value = reader.int64();
                                                    break;
                                                default:
                                                    reader.skipType(tag2 & 7);
                                                    break;
                                                }
                                            }
                                            message.counts[key] = value;
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.instances && message.instances.length))
                                                message.instances = [];
                                            message.instances.push($root.google.cloud.batch.v1alpha.JobStatus.InstanceStatus.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a TaskGroupStatus message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus} TaskGroupStatus
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            TaskGroupStatus.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a TaskGroupStatus message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            TaskGroupStatus.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.counts != null && message.hasOwnProperty("counts")) {
                                    if (!$util.isObject(message.counts))
                                        return "counts: object expected";
                                    var key = Object.keys(message.counts);
                                    for (var i = 0; i < key.length; ++i)
                                        if (!$util.isInteger(message.counts[key[i]]) && !(message.counts[key[i]] && $util.isInteger(message.counts[key[i]].low) && $util.isInteger(message.counts[key[i]].high)))
                                            return "counts: integer|Long{k:string} expected";
                                }
                                if (message.instances != null && message.hasOwnProperty("instances")) {
                                    if (!Array.isArray(message.instances))
                                        return "instances: array expected";
                                    for (var i = 0; i < message.instances.length; ++i) {
                                        var error = $root.google.cloud.batch.v1alpha.JobStatus.InstanceStatus.verify(message.instances[i]);
                                        if (error)
                                            return "instances." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a TaskGroupStatus message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus} TaskGroupStatus
                             */
                            TaskGroupStatus.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus();
                                if (object.counts) {
                                    if (typeof object.counts !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus.counts: object expected");
                                    message.counts = {};
                                    for (var keys = Object.keys(object.counts), i = 0; i < keys.length; ++i)
                                        if ($util.Long)
                                            (message.counts[keys[i]] = $util.Long.fromValue(object.counts[keys[i]])).unsigned = false;
                                        else if (typeof object.counts[keys[i]] === "string")
                                            message.counts[keys[i]] = parseInt(object.counts[keys[i]], 10);
                                        else if (typeof object.counts[keys[i]] === "number")
                                            message.counts[keys[i]] = object.counts[keys[i]];
                                        else if (typeof object.counts[keys[i]] === "object")
                                            message.counts[keys[i]] = new $util.LongBits(object.counts[keys[i]].low >>> 0, object.counts[keys[i]].high >>> 0).toNumber();
                                }
                                if (object.instances) {
                                    if (!Array.isArray(object.instances))
                                        throw TypeError(".google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus.instances: array expected");
                                    message.instances = [];
                                    for (var i = 0; i < object.instances.length; ++i) {
                                        if (typeof object.instances[i] !== "object")
                                            throw TypeError(".google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus.instances: object expected");
                                        message.instances[i] = $root.google.cloud.batch.v1alpha.JobStatus.InstanceStatus.fromObject(object.instances[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a TaskGroupStatus message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
                             * @static
                             * @param {google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus} message TaskGroupStatus
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            TaskGroupStatus.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.instances = [];
                                if (options.objects || options.defaults)
                                    object.counts = {};
                                var keys2;
                                if (message.counts && (keys2 = Object.keys(message.counts)).length) {
                                    object.counts = {};
                                    for (var j = 0; j < keys2.length; ++j)
                                        if (typeof message.counts[keys2[j]] === "number")
                                            object.counts[keys2[j]] = options.longs === String ? String(message.counts[keys2[j]]) : message.counts[keys2[j]];
                                        else
                                            object.counts[keys2[j]] = options.longs === String ? $util.Long.prototype.toString.call(message.counts[keys2[j]]) : options.longs === Number ? new $util.LongBits(message.counts[keys2[j]].low >>> 0, message.counts[keys2[j]].high >>> 0).toNumber() : message.counts[keys2[j]];
                                }
                                if (message.instances && message.instances.length) {
                                    object.instances = [];
                                    for (var j = 0; j < message.instances.length; ++j)
                                        object.instances[j] = $root.google.cloud.batch.v1alpha.JobStatus.InstanceStatus.toObject(message.instances[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this TaskGroupStatus to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            TaskGroupStatus.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for TaskGroupStatus
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            TaskGroupStatus.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.JobStatus.TaskGroupStatus";
                            };
    
                            return TaskGroupStatus;
                        })();
    
                        /**
                         * State enum.
                         * @name google.cloud.batch.v1alpha.JobStatus.State
                         * @enum {number}
                         * @property {number} STATE_UNSPECIFIED=0 STATE_UNSPECIFIED value
                         * @property {number} QUEUED=1 QUEUED value
                         * @property {number} SCHEDULED=2 SCHEDULED value
                         * @property {number} RUNNING=3 RUNNING value
                         * @property {number} SUCCEEDED=4 SUCCEEDED value
                         * @property {number} FAILED=5 FAILED value
                         * @property {number} DELETION_IN_PROGRESS=6 DELETION_IN_PROGRESS value
                         */
                        JobStatus.State = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "QUEUED"] = 1;
                            values[valuesById[2] = "SCHEDULED"] = 2;
                            values[valuesById[3] = "RUNNING"] = 3;
                            values[valuesById[4] = "SUCCEEDED"] = 4;
                            values[valuesById[5] = "FAILED"] = 5;
                            values[valuesById[6] = "DELETION_IN_PROGRESS"] = 6;
                            return values;
                        })();
    
                        return JobStatus;
                    })();
    
                    v1alpha.ResourceUsage = (function() {
    
                        /**
                         * Properties of a ResourceUsage.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IResourceUsage
                         * @property {number|null} [coreHours] ResourceUsage coreHours
                         */
    
                        /**
                         * Constructs a new ResourceUsage.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a ResourceUsage.
                         * @implements IResourceUsage
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IResourceUsage=} [properties] Properties to set
                         */
                        function ResourceUsage(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ResourceUsage coreHours.
                         * @member {number} coreHours
                         * @memberof google.cloud.batch.v1alpha.ResourceUsage
                         * @instance
                         */
                        ResourceUsage.prototype.coreHours = 0;
    
                        /**
                         * Creates a new ResourceUsage instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.ResourceUsage
                         * @static
                         * @param {google.cloud.batch.v1alpha.IResourceUsage=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.ResourceUsage} ResourceUsage instance
                         */
                        ResourceUsage.create = function create(properties) {
                            return new ResourceUsage(properties);
                        };
    
                        /**
                         * Encodes the specified ResourceUsage message. Does not implicitly {@link google.cloud.batch.v1alpha.ResourceUsage.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.ResourceUsage
                         * @static
                         * @param {google.cloud.batch.v1alpha.IResourceUsage} message ResourceUsage message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ResourceUsage.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.coreHours != null && Object.hasOwnProperty.call(message, "coreHours"))
                                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coreHours);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ResourceUsage message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.ResourceUsage.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ResourceUsage
                         * @static
                         * @param {google.cloud.batch.v1alpha.IResourceUsage} message ResourceUsage message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ResourceUsage.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ResourceUsage message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.ResourceUsage
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.ResourceUsage} ResourceUsage
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ResourceUsage.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.ResourceUsage();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.coreHours = reader.double();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ResourceUsage message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ResourceUsage
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.ResourceUsage} ResourceUsage
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ResourceUsage.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ResourceUsage message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.ResourceUsage
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ResourceUsage.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.coreHours != null && message.hasOwnProperty("coreHours"))
                                if (typeof message.coreHours !== "number")
                                    return "coreHours: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a ResourceUsage message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.ResourceUsage
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.ResourceUsage} ResourceUsage
                         */
                        ResourceUsage.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.ResourceUsage)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.ResourceUsage();
                            if (object.coreHours != null)
                                message.coreHours = Number(object.coreHours);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ResourceUsage message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.ResourceUsage
                         * @static
                         * @param {google.cloud.batch.v1alpha.ResourceUsage} message ResourceUsage
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ResourceUsage.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.coreHours = 0;
                            if (message.coreHours != null && message.hasOwnProperty("coreHours"))
                                object.coreHours = options.json && !isFinite(message.coreHours) ? String(message.coreHours) : message.coreHours;
                            return object;
                        };
    
                        /**
                         * Converts this ResourceUsage to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.ResourceUsage
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ResourceUsage.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ResourceUsage
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.ResourceUsage
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ResourceUsage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.ResourceUsage";
                        };
    
                        return ResourceUsage;
                    })();
    
                    v1alpha.JobNotification = (function() {
    
                        /**
                         * Properties of a JobNotification.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IJobNotification
                         * @property {string|null} [pubsubTopic] JobNotification pubsubTopic
                         * @property {google.cloud.batch.v1alpha.JobNotification.IMessage|null} [message] JobNotification message
                         */
    
                        /**
                         * Constructs a new JobNotification.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a JobNotification.
                         * @implements IJobNotification
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IJobNotification=} [properties] Properties to set
                         */
                        function JobNotification(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * JobNotification pubsubTopic.
                         * @member {string} pubsubTopic
                         * @memberof google.cloud.batch.v1alpha.JobNotification
                         * @instance
                         */
                        JobNotification.prototype.pubsubTopic = "";
    
                        /**
                         * JobNotification message.
                         * @member {google.cloud.batch.v1alpha.JobNotification.IMessage|null|undefined} message
                         * @memberof google.cloud.batch.v1alpha.JobNotification
                         * @instance
                         */
                        JobNotification.prototype.message = null;
    
                        /**
                         * Creates a new JobNotification instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.JobNotification
                         * @static
                         * @param {google.cloud.batch.v1alpha.IJobNotification=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.JobNotification} JobNotification instance
                         */
                        JobNotification.create = function create(properties) {
                            return new JobNotification(properties);
                        };
    
                        /**
                         * Encodes the specified JobNotification message. Does not implicitly {@link google.cloud.batch.v1alpha.JobNotification.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.JobNotification
                         * @static
                         * @param {google.cloud.batch.v1alpha.IJobNotification} message JobNotification message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        JobNotification.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.pubsubTopic != null && Object.hasOwnProperty.call(message, "pubsubTopic"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.pubsubTopic);
                            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                                $root.google.cloud.batch.v1alpha.JobNotification.Message.encode(message.message, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified JobNotification message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.JobNotification.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.JobNotification
                         * @static
                         * @param {google.cloud.batch.v1alpha.IJobNotification} message JobNotification message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        JobNotification.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a JobNotification message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.JobNotification
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.JobNotification} JobNotification
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        JobNotification.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.JobNotification();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.pubsubTopic = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.message = $root.google.cloud.batch.v1alpha.JobNotification.Message.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a JobNotification message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.JobNotification
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.JobNotification} JobNotification
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        JobNotification.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a JobNotification message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.JobNotification
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        JobNotification.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.pubsubTopic != null && message.hasOwnProperty("pubsubTopic"))
                                if (!$util.isString(message.pubsubTopic))
                                    return "pubsubTopic: string expected";
                            if (message.message != null && message.hasOwnProperty("message")) {
                                var error = $root.google.cloud.batch.v1alpha.JobNotification.Message.verify(message.message);
                                if (error)
                                    return "message." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a JobNotification message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.JobNotification
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.JobNotification} JobNotification
                         */
                        JobNotification.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.JobNotification)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.JobNotification();
                            if (object.pubsubTopic != null)
                                message.pubsubTopic = String(object.pubsubTopic);
                            if (object.message != null) {
                                if (typeof object.message !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.JobNotification.message: object expected");
                                message.message = $root.google.cloud.batch.v1alpha.JobNotification.Message.fromObject(object.message);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a JobNotification message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.JobNotification
                         * @static
                         * @param {google.cloud.batch.v1alpha.JobNotification} message JobNotification
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        JobNotification.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.pubsubTopic = "";
                                object.message = null;
                            }
                            if (message.pubsubTopic != null && message.hasOwnProperty("pubsubTopic"))
                                object.pubsubTopic = message.pubsubTopic;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = $root.google.cloud.batch.v1alpha.JobNotification.Message.toObject(message.message, options);
                            return object;
                        };
    
                        /**
                         * Converts this JobNotification to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.JobNotification
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        JobNotification.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for JobNotification
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.JobNotification
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        JobNotification.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.JobNotification";
                        };
    
                        JobNotification.Message = (function() {
    
                            /**
                             * Properties of a Message.
                             * @memberof google.cloud.batch.v1alpha.JobNotification
                             * @interface IMessage
                             * @property {google.cloud.batch.v1alpha.JobNotification.Type|null} [type] Message type
                             * @property {google.cloud.batch.v1alpha.JobStatus.State|null} [newJobState] Message newJobState
                             * @property {google.cloud.batch.v1alpha.TaskStatus.State|null} [newTaskState] Message newTaskState
                             */
    
                            /**
                             * Constructs a new Message.
                             * @memberof google.cloud.batch.v1alpha.JobNotification
                             * @classdesc Represents a Message.
                             * @implements IMessage
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.JobNotification.IMessage=} [properties] Properties to set
                             */
                            function Message(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Message type.
                             * @member {google.cloud.batch.v1alpha.JobNotification.Type} type
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @instance
                             */
                            Message.prototype.type = 0;
    
                            /**
                             * Message newJobState.
                             * @member {google.cloud.batch.v1alpha.JobStatus.State} newJobState
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @instance
                             */
                            Message.prototype.newJobState = 0;
    
                            /**
                             * Message newTaskState.
                             * @member {google.cloud.batch.v1alpha.TaskStatus.State} newTaskState
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @instance
                             */
                            Message.prototype.newTaskState = 0;
    
                            /**
                             * Creates a new Message instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @static
                             * @param {google.cloud.batch.v1alpha.JobNotification.IMessage=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.JobNotification.Message} Message instance
                             */
                            Message.create = function create(properties) {
                                return new Message(properties);
                            };
    
                            /**
                             * Encodes the specified Message message. Does not implicitly {@link google.cloud.batch.v1alpha.JobNotification.Message.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @static
                             * @param {google.cloud.batch.v1alpha.JobNotification.IMessage} message Message message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Message.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                                if (message.newJobState != null && Object.hasOwnProperty.call(message, "newJobState"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.newJobState);
                                if (message.newTaskState != null && Object.hasOwnProperty.call(message, "newTaskState"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.newTaskState);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Message message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.JobNotification.Message.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @static
                             * @param {google.cloud.batch.v1alpha.JobNotification.IMessage} message Message message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Message.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Message message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.JobNotification.Message} Message
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Message.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.JobNotification.Message();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.type = reader.int32();
                                            break;
                                        }
                                    case 2: {
                                            message.newJobState = reader.int32();
                                            break;
                                        }
                                    case 3: {
                                            message.newTaskState = reader.int32();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Message message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.JobNotification.Message} Message
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Message.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Message message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Message.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.type != null && message.hasOwnProperty("type"))
                                    switch (message.type) {
                                    default:
                                        return "type: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                        break;
                                    }
                                if (message.newJobState != null && message.hasOwnProperty("newJobState"))
                                    switch (message.newJobState) {
                                    default:
                                        return "newJobState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                    case 6:
                                        break;
                                    }
                                if (message.newTaskState != null && message.hasOwnProperty("newTaskState"))
                                    switch (message.newTaskState) {
                                    default:
                                        return "newTaskState: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                    case 4:
                                    case 5:
                                    case 6:
                                        break;
                                    }
                                return null;
                            };
    
                            /**
                             * Creates a Message message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.JobNotification.Message} Message
                             */
                            Message.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.JobNotification.Message)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.JobNotification.Message();
                                switch (object.type) {
                                default:
                                    if (typeof object.type === "number") {
                                        message.type = object.type;
                                        break;
                                    }
                                    break;
                                case "TYPE_UNSPECIFIED":
                                case 0:
                                    message.type = 0;
                                    break;
                                case "JOB_STATE_CHANGED":
                                case 1:
                                    message.type = 1;
                                    break;
                                case "TASK_STATE_CHANGED":
                                case 2:
                                    message.type = 2;
                                    break;
                                }
                                switch (object.newJobState) {
                                default:
                                    if (typeof object.newJobState === "number") {
                                        message.newJobState = object.newJobState;
                                        break;
                                    }
                                    break;
                                case "STATE_UNSPECIFIED":
                                case 0:
                                    message.newJobState = 0;
                                    break;
                                case "QUEUED":
                                case 1:
                                    message.newJobState = 1;
                                    break;
                                case "SCHEDULED":
                                case 2:
                                    message.newJobState = 2;
                                    break;
                                case "RUNNING":
                                case 3:
                                    message.newJobState = 3;
                                    break;
                                case "SUCCEEDED":
                                case 4:
                                    message.newJobState = 4;
                                    break;
                                case "FAILED":
                                case 5:
                                    message.newJobState = 5;
                                    break;
                                case "DELETION_IN_PROGRESS":
                                case 6:
                                    message.newJobState = 6;
                                    break;
                                }
                                switch (object.newTaskState) {
                                default:
                                    if (typeof object.newTaskState === "number") {
                                        message.newTaskState = object.newTaskState;
                                        break;
                                    }
                                    break;
                                case "STATE_UNSPECIFIED":
                                case 0:
                                    message.newTaskState = 0;
                                    break;
                                case "PENDING":
                                case 1:
                                    message.newTaskState = 1;
                                    break;
                                case "ASSIGNED":
                                case 2:
                                    message.newTaskState = 2;
                                    break;
                                case "RUNNING":
                                case 3:
                                    message.newTaskState = 3;
                                    break;
                                case "FAILED":
                                case 4:
                                    message.newTaskState = 4;
                                    break;
                                case "SUCCEEDED":
                                case 5:
                                    message.newTaskState = 5;
                                    break;
                                case "UNEXECUTED":
                                case 6:
                                    message.newTaskState = 6;
                                    break;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Message message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @static
                             * @param {google.cloud.batch.v1alpha.JobNotification.Message} message Message
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Message.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.type = options.enums === String ? "TYPE_UNSPECIFIED" : 0;
                                    object.newJobState = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                                    object.newTaskState = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                                }
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = options.enums === String ? $root.google.cloud.batch.v1alpha.JobNotification.Type[message.type] === undefined ? message.type : $root.google.cloud.batch.v1alpha.JobNotification.Type[message.type] : message.type;
                                if (message.newJobState != null && message.hasOwnProperty("newJobState"))
                                    object.newJobState = options.enums === String ? $root.google.cloud.batch.v1alpha.JobStatus.State[message.newJobState] === undefined ? message.newJobState : $root.google.cloud.batch.v1alpha.JobStatus.State[message.newJobState] : message.newJobState;
                                if (message.newTaskState != null && message.hasOwnProperty("newTaskState"))
                                    object.newTaskState = options.enums === String ? $root.google.cloud.batch.v1alpha.TaskStatus.State[message.newTaskState] === undefined ? message.newTaskState : $root.google.cloud.batch.v1alpha.TaskStatus.State[message.newTaskState] : message.newTaskState;
                                return object;
                            };
    
                            /**
                             * Converts this Message to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Message.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Message
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.JobNotification.Message
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Message.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.JobNotification.Message";
                            };
    
                            return Message;
                        })();
    
                        /**
                         * Type enum.
                         * @name google.cloud.batch.v1alpha.JobNotification.Type
                         * @enum {number}
                         * @property {number} TYPE_UNSPECIFIED=0 TYPE_UNSPECIFIED value
                         * @property {number} JOB_STATE_CHANGED=1 JOB_STATE_CHANGED value
                         * @property {number} TASK_STATE_CHANGED=2 TASK_STATE_CHANGED value
                         */
                        JobNotification.Type = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "TYPE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "JOB_STATE_CHANGED"] = 1;
                            values[valuesById[2] = "TASK_STATE_CHANGED"] = 2;
                            return values;
                        })();
    
                        return JobNotification;
                    })();
    
                    v1alpha.AllocationPolicy = (function() {
    
                        /**
                         * Properties of an AllocationPolicy.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IAllocationPolicy
                         * @property {google.cloud.batch.v1alpha.AllocationPolicy.ILocationPolicy|null} [location] AllocationPolicy location
                         * @property {google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicy|null} [instance] AllocationPolicy instance
                         * @property {Array.<google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicyOrTemplate>|null} [instances] AllocationPolicy instances
                         * @property {Array.<string>|null} [instanceTemplates] AllocationPolicy instanceTemplates
                         * @property {Array.<google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel>|null} [provisioningModels] AllocationPolicy provisioningModels
                         * @property {string|null} [serviceAccountEmail] AllocationPolicy serviceAccountEmail
                         * @property {google.cloud.batch.v1alpha.IServiceAccount|null} [serviceAccount] AllocationPolicy serviceAccount
                         * @property {Object.<string,string>|null} [labels] AllocationPolicy labels
                         * @property {google.cloud.batch.v1alpha.AllocationPolicy.INetworkPolicy|null} [network] AllocationPolicy network
                         * @property {google.cloud.batch.v1alpha.AllocationPolicy.IPlacementPolicy|null} [placement] AllocationPolicy placement
                         */
    
                        /**
                         * Constructs a new AllocationPolicy.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents an AllocationPolicy.
                         * @implements IAllocationPolicy
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IAllocationPolicy=} [properties] Properties to set
                         */
                        function AllocationPolicy(properties) {
                            this.instances = [];
                            this.instanceTemplates = [];
                            this.provisioningModels = [];
                            this.labels = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * AllocationPolicy location.
                         * @member {google.cloud.batch.v1alpha.AllocationPolicy.ILocationPolicy|null|undefined} location
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.location = null;
    
                        /**
                         * AllocationPolicy instance.
                         * @member {google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicy|null|undefined} instance
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.instance = null;
    
                        /**
                         * AllocationPolicy instances.
                         * @member {Array.<google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicyOrTemplate>} instances
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.instances = $util.emptyArray;
    
                        /**
                         * AllocationPolicy instanceTemplates.
                         * @member {Array.<string>} instanceTemplates
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.instanceTemplates = $util.emptyArray;
    
                        /**
                         * AllocationPolicy provisioningModels.
                         * @member {Array.<google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel>} provisioningModels
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.provisioningModels = $util.emptyArray;
    
                        /**
                         * AllocationPolicy serviceAccountEmail.
                         * @member {string} serviceAccountEmail
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.serviceAccountEmail = "";
    
                        /**
                         * AllocationPolicy serviceAccount.
                         * @member {google.cloud.batch.v1alpha.IServiceAccount|null|undefined} serviceAccount
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.serviceAccount = null;
    
                        /**
                         * AllocationPolicy labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.labels = $util.emptyObject;
    
                        /**
                         * AllocationPolicy network.
                         * @member {google.cloud.batch.v1alpha.AllocationPolicy.INetworkPolicy|null|undefined} network
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.network = null;
    
                        /**
                         * AllocationPolicy placement.
                         * @member {google.cloud.batch.v1alpha.AllocationPolicy.IPlacementPolicy|null|undefined} placement
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @instance
                         */
                        AllocationPolicy.prototype.placement = null;
    
                        /**
                         * Creates a new AllocationPolicy instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @static
                         * @param {google.cloud.batch.v1alpha.IAllocationPolicy=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.AllocationPolicy} AllocationPolicy instance
                         */
                        AllocationPolicy.create = function create(properties) {
                            return new AllocationPolicy(properties);
                        };
    
                        /**
                         * Encodes the specified AllocationPolicy message. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @static
                         * @param {google.cloud.batch.v1alpha.IAllocationPolicy} message AllocationPolicy message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AllocationPolicy.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.location != null && Object.hasOwnProperty.call(message, "location"))
                                $root.google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy.encode(message.location, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.instance != null && Object.hasOwnProperty.call(message, "instance"))
                                $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.encode(message.instance, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.instanceTemplates != null && message.instanceTemplates.length)
                                for (var i = 0; i < message.instanceTemplates.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.instanceTemplates[i]);
                            if (message.provisioningModels != null && message.provisioningModels.length) {
                                writer.uint32(/* id 4, wireType 2 =*/34).fork();
                                for (var i = 0; i < message.provisioningModels.length; ++i)
                                    writer.int32(message.provisioningModels[i]);
                                writer.ldelim();
                            }
                            if (message.serviceAccountEmail != null && Object.hasOwnProperty.call(message, "serviceAccountEmail"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.serviceAccountEmail);
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.network != null && Object.hasOwnProperty.call(message, "network"))
                                $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy.encode(message.network, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.instances != null && message.instances.length)
                                for (var i = 0; i < message.instances.length; ++i)
                                    $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate.encode(message.instances[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.serviceAccount != null && Object.hasOwnProperty.call(message, "serviceAccount"))
                                $root.google.cloud.batch.v1alpha.ServiceAccount.encode(message.serviceAccount, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.placement != null && Object.hasOwnProperty.call(message, "placement"))
                                $root.google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy.encode(message.placement, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified AllocationPolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @static
                         * @param {google.cloud.batch.v1alpha.IAllocationPolicy} message AllocationPolicy message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        AllocationPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an AllocationPolicy message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.AllocationPolicy} AllocationPolicy
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AllocationPolicy.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.AllocationPolicy(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.location = $root.google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.instance = $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        if (!(message.instances && message.instances.length))
                                            message.instances = [];
                                        message.instances.push($root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        if (!(message.instanceTemplates && message.instanceTemplates.length))
                                            message.instanceTemplates = [];
                                        message.instanceTemplates.push(reader.string());
                                        break;
                                    }
                                case 4: {
                                        if (!(message.provisioningModels && message.provisioningModels.length))
                                            message.provisioningModels = [];
                                        if ((tag & 7) === 2) {
                                            var end2 = reader.uint32() + reader.pos;
                                            while (reader.pos < end2)
                                                message.provisioningModels.push(reader.int32());
                                        } else
                                            message.provisioningModels.push(reader.int32());
                                        break;
                                    }
                                case 5: {
                                        message.serviceAccountEmail = reader.string();
                                        break;
                                    }
                                case 9: {
                                        message.serviceAccount = $root.google.cloud.batch.v1alpha.ServiceAccount.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                case 7: {
                                        message.network = $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 10: {
                                        message.placement = $root.google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an AllocationPolicy message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.AllocationPolicy} AllocationPolicy
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        AllocationPolicy.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an AllocationPolicy message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        AllocationPolicy.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.location != null && message.hasOwnProperty("location")) {
                                var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy.verify(message.location);
                                if (error)
                                    return "location." + error;
                            }
                            if (message.instance != null && message.hasOwnProperty("instance")) {
                                var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.verify(message.instance);
                                if (error)
                                    return "instance." + error;
                            }
                            if (message.instances != null && message.hasOwnProperty("instances")) {
                                if (!Array.isArray(message.instances))
                                    return "instances: array expected";
                                for (var i = 0; i < message.instances.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate.verify(message.instances[i]);
                                    if (error)
                                        return "instances." + error;
                                }
                            }
                            if (message.instanceTemplates != null && message.hasOwnProperty("instanceTemplates")) {
                                if (!Array.isArray(message.instanceTemplates))
                                    return "instanceTemplates: array expected";
                                for (var i = 0; i < message.instanceTemplates.length; ++i)
                                    if (!$util.isString(message.instanceTemplates[i]))
                                        return "instanceTemplates: string[] expected";
                            }
                            if (message.provisioningModels != null && message.hasOwnProperty("provisioningModels")) {
                                if (!Array.isArray(message.provisioningModels))
                                    return "provisioningModels: array expected";
                                for (var i = 0; i < message.provisioningModels.length; ++i)
                                    switch (message.provisioningModels[i]) {
                                    default:
                                        return "provisioningModels: enum value[] expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                            }
                            if (message.serviceAccountEmail != null && message.hasOwnProperty("serviceAccountEmail"))
                                if (!$util.isString(message.serviceAccountEmail))
                                    return "serviceAccountEmail: string expected";
                            if (message.serviceAccount != null && message.hasOwnProperty("serviceAccount")) {
                                var error = $root.google.cloud.batch.v1alpha.ServiceAccount.verify(message.serviceAccount);
                                if (error)
                                    return "serviceAccount." + error;
                            }
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.network != null && message.hasOwnProperty("network")) {
                                var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy.verify(message.network);
                                if (error)
                                    return "network." + error;
                            }
                            if (message.placement != null && message.hasOwnProperty("placement")) {
                                var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy.verify(message.placement);
                                if (error)
                                    return "placement." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an AllocationPolicy message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.AllocationPolicy} AllocationPolicy
                         */
                        AllocationPolicy.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.AllocationPolicy)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.AllocationPolicy();
                            if (object.location != null) {
                                if (typeof object.location !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.location: object expected");
                                message.location = $root.google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy.fromObject(object.location);
                            }
                            if (object.instance != null) {
                                if (typeof object.instance !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.instance: object expected");
                                message.instance = $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.fromObject(object.instance);
                            }
                            if (object.instances) {
                                if (!Array.isArray(object.instances))
                                    throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.instances: array expected");
                                message.instances = [];
                                for (var i = 0; i < object.instances.length; ++i) {
                                    if (typeof object.instances[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.instances: object expected");
                                    message.instances[i] = $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate.fromObject(object.instances[i]);
                                }
                            }
                            if (object.instanceTemplates) {
                                if (!Array.isArray(object.instanceTemplates))
                                    throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.instanceTemplates: array expected");
                                message.instanceTemplates = [];
                                for (var i = 0; i < object.instanceTemplates.length; ++i)
                                    message.instanceTemplates[i] = String(object.instanceTemplates[i]);
                            }
                            if (object.provisioningModels) {
                                if (!Array.isArray(object.provisioningModels))
                                    throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.provisioningModels: array expected");
                                message.provisioningModels = [];
                                for (var i = 0; i < object.provisioningModels.length; ++i)
                                    switch (object.provisioningModels[i]) {
                                    default:
                                        if (typeof object.provisioningModels[i] === "number") {
                                            message.provisioningModels[i] = object.provisioningModels[i];
                                            break;
                                        }
                                    case "PROVISIONING_MODEL_UNSPECIFIED":
                                    case 0:
                                        message.provisioningModels[i] = 0;
                                        break;
                                    case "STANDARD":
                                    case 1:
                                        message.provisioningModels[i] = 1;
                                        break;
                                    case "SPOT":
                                    case 2:
                                        message.provisioningModels[i] = 2;
                                        break;
                                    case "PREEMPTIBLE":
                                    case 3:
                                        message.provisioningModels[i] = 3;
                                        break;
                                    }
                            }
                            if (object.serviceAccountEmail != null)
                                message.serviceAccountEmail = String(object.serviceAccountEmail);
                            if (object.serviceAccount != null) {
                                if (typeof object.serviceAccount !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.serviceAccount: object expected");
                                message.serviceAccount = $root.google.cloud.batch.v1alpha.ServiceAccount.fromObject(object.serviceAccount);
                            }
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.network != null) {
                                if (typeof object.network !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.network: object expected");
                                message.network = $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy.fromObject(object.network);
                            }
                            if (object.placement != null) {
                                if (typeof object.placement !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.placement: object expected");
                                message.placement = $root.google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy.fromObject(object.placement);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an AllocationPolicy message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @static
                         * @param {google.cloud.batch.v1alpha.AllocationPolicy} message AllocationPolicy
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        AllocationPolicy.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.instanceTemplates = [];
                                object.provisioningModels = [];
                                object.instances = [];
                            }
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.location = null;
                                object.instance = null;
                                object.serviceAccountEmail = "";
                                object.network = null;
                                object.serviceAccount = null;
                                object.placement = null;
                            }
                            if (message.location != null && message.hasOwnProperty("location"))
                                object.location = $root.google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy.toObject(message.location, options);
                            if (message.instance != null && message.hasOwnProperty("instance"))
                                object.instance = $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.toObject(message.instance, options);
                            if (message.instanceTemplates && message.instanceTemplates.length) {
                                object.instanceTemplates = [];
                                for (var j = 0; j < message.instanceTemplates.length; ++j)
                                    object.instanceTemplates[j] = message.instanceTemplates[j];
                            }
                            if (message.provisioningModels && message.provisioningModels.length) {
                                object.provisioningModels = [];
                                for (var j = 0; j < message.provisioningModels.length; ++j)
                                    object.provisioningModels[j] = options.enums === String ? $root.google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel[message.provisioningModels[j]] === undefined ? message.provisioningModels[j] : $root.google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel[message.provisioningModels[j]] : message.provisioningModels[j];
                            }
                            if (message.serviceAccountEmail != null && message.hasOwnProperty("serviceAccountEmail"))
                                object.serviceAccountEmail = message.serviceAccountEmail;
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.network != null && message.hasOwnProperty("network"))
                                object.network = $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy.toObject(message.network, options);
                            if (message.instances && message.instances.length) {
                                object.instances = [];
                                for (var j = 0; j < message.instances.length; ++j)
                                    object.instances[j] = $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate.toObject(message.instances[j], options);
                            }
                            if (message.serviceAccount != null && message.hasOwnProperty("serviceAccount"))
                                object.serviceAccount = $root.google.cloud.batch.v1alpha.ServiceAccount.toObject(message.serviceAccount, options);
                            if (message.placement != null && message.hasOwnProperty("placement"))
                                object.placement = $root.google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy.toObject(message.placement, options);
                            return object;
                        };
    
                        /**
                         * Converts this AllocationPolicy to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        AllocationPolicy.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for AllocationPolicy
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        AllocationPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.AllocationPolicy";
                        };
    
                        AllocationPolicy.LocationPolicy = (function() {
    
                            /**
                             * Properties of a LocationPolicy.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @interface ILocationPolicy
                             * @property {Array.<string>|null} [allowedLocations] LocationPolicy allowedLocations
                             * @property {Array.<string>|null} [deniedLocations] LocationPolicy deniedLocations
                             */
    
                            /**
                             * Constructs a new LocationPolicy.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @classdesc Represents a LocationPolicy.
                             * @implements ILocationPolicy
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.ILocationPolicy=} [properties] Properties to set
                             */
                            function LocationPolicy(properties) {
                                this.allowedLocations = [];
                                this.deniedLocations = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * LocationPolicy allowedLocations.
                             * @member {Array.<string>} allowedLocations
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
                             * @instance
                             */
                            LocationPolicy.prototype.allowedLocations = $util.emptyArray;
    
                            /**
                             * LocationPolicy deniedLocations.
                             * @member {Array.<string>} deniedLocations
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
                             * @instance
                             */
                            LocationPolicy.prototype.deniedLocations = $util.emptyArray;
    
                            /**
                             * Creates a new LocationPolicy instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.ILocationPolicy=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy} LocationPolicy instance
                             */
                            LocationPolicy.create = function create(properties) {
                                return new LocationPolicy(properties);
                            };
    
                            /**
                             * Encodes the specified LocationPolicy message. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.ILocationPolicy} message LocationPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LocationPolicy.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.allowedLocations != null && message.allowedLocations.length)
                                    for (var i = 0; i < message.allowedLocations.length; ++i)
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.allowedLocations[i]);
                                if (message.deniedLocations != null && message.deniedLocations.length)
                                    for (var i = 0; i < message.deniedLocations.length; ++i)
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.deniedLocations[i]);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified LocationPolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.ILocationPolicy} message LocationPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            LocationPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a LocationPolicy message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy} LocationPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LocationPolicy.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            if (!(message.allowedLocations && message.allowedLocations.length))
                                                message.allowedLocations = [];
                                            message.allowedLocations.push(reader.string());
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.deniedLocations && message.deniedLocations.length))
                                                message.deniedLocations = [];
                                            message.deniedLocations.push(reader.string());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a LocationPolicy message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy} LocationPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            LocationPolicy.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a LocationPolicy message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            LocationPolicy.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.allowedLocations != null && message.hasOwnProperty("allowedLocations")) {
                                    if (!Array.isArray(message.allowedLocations))
                                        return "allowedLocations: array expected";
                                    for (var i = 0; i < message.allowedLocations.length; ++i)
                                        if (!$util.isString(message.allowedLocations[i]))
                                            return "allowedLocations: string[] expected";
                                }
                                if (message.deniedLocations != null && message.hasOwnProperty("deniedLocations")) {
                                    if (!Array.isArray(message.deniedLocations))
                                        return "deniedLocations: array expected";
                                    for (var i = 0; i < message.deniedLocations.length; ++i)
                                        if (!$util.isString(message.deniedLocations[i]))
                                            return "deniedLocations: string[] expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates a LocationPolicy message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy} LocationPolicy
                             */
                            LocationPolicy.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy();
                                if (object.allowedLocations) {
                                    if (!Array.isArray(object.allowedLocations))
                                        throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy.allowedLocations: array expected");
                                    message.allowedLocations = [];
                                    for (var i = 0; i < object.allowedLocations.length; ++i)
                                        message.allowedLocations[i] = String(object.allowedLocations[i]);
                                }
                                if (object.deniedLocations) {
                                    if (!Array.isArray(object.deniedLocations))
                                        throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy.deniedLocations: array expected");
                                    message.deniedLocations = [];
                                    for (var i = 0; i < object.deniedLocations.length; ++i)
                                        message.deniedLocations[i] = String(object.deniedLocations[i]);
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a LocationPolicy message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy} message LocationPolicy
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            LocationPolicy.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults) {
                                    object.allowedLocations = [];
                                    object.deniedLocations = [];
                                }
                                if (message.allowedLocations && message.allowedLocations.length) {
                                    object.allowedLocations = [];
                                    for (var j = 0; j < message.allowedLocations.length; ++j)
                                        object.allowedLocations[j] = message.allowedLocations[j];
                                }
                                if (message.deniedLocations && message.deniedLocations.length) {
                                    object.deniedLocations = [];
                                    for (var j = 0; j < message.deniedLocations.length; ++j)
                                        object.deniedLocations[j] = message.deniedLocations[j];
                                }
                                return object;
                            };
    
                            /**
                             * Converts this LocationPolicy to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            LocationPolicy.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for LocationPolicy
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            LocationPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.AllocationPolicy.LocationPolicy";
                            };
    
                            return LocationPolicy;
                        })();
    
                        AllocationPolicy.Disk = (function() {
    
                            /**
                             * Properties of a Disk.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @interface IDisk
                             * @property {string|null} [image] Disk image
                             * @property {string|null} [snapshot] Disk snapshot
                             * @property {string|null} [type] Disk type
                             * @property {number|Long|null} [sizeGb] Disk sizeGb
                             * @property {string|null} [diskInterface] Disk diskInterface
                             */
    
                            /**
                             * Constructs a new Disk.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @classdesc Represents a Disk.
                             * @implements IDisk
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IDisk=} [properties] Properties to set
                             */
                            function Disk(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Disk image.
                             * @member {string|null|undefined} image
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @instance
                             */
                            Disk.prototype.image = null;
    
                            /**
                             * Disk snapshot.
                             * @member {string|null|undefined} snapshot
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @instance
                             */
                            Disk.prototype.snapshot = null;
    
                            /**
                             * Disk type.
                             * @member {string} type
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @instance
                             */
                            Disk.prototype.type = "";
    
                            /**
                             * Disk sizeGb.
                             * @member {number|Long} sizeGb
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @instance
                             */
                            Disk.prototype.sizeGb = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Disk diskInterface.
                             * @member {string} diskInterface
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @instance
                             */
                            Disk.prototype.diskInterface = "";
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * Disk dataSource.
                             * @member {"image"|"snapshot"|undefined} dataSource
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @instance
                             */
                            Object.defineProperty(Disk.prototype, "dataSource", {
                                get: $util.oneOfGetter($oneOfFields = ["image", "snapshot"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new Disk instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IDisk=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.Disk} Disk instance
                             */
                            Disk.create = function create(properties) {
                                return new Disk(properties);
                            };
    
                            /**
                             * Encodes the specified Disk message. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.Disk.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IDisk} message Disk message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Disk.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                                if (message.sizeGb != null && Object.hasOwnProperty.call(message, "sizeGb"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.sizeGb);
                                if (message.image != null && Object.hasOwnProperty.call(message, "image"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.image);
                                if (message.snapshot != null && Object.hasOwnProperty.call(message, "snapshot"))
                                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.snapshot);
                                if (message.diskInterface != null && Object.hasOwnProperty.call(message, "diskInterface"))
                                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.diskInterface);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Disk message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.Disk.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IDisk} message Disk message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Disk.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Disk message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.Disk} Disk
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Disk.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 4: {
                                            message.image = reader.string();
                                            break;
                                        }
                                    case 5: {
                                            message.snapshot = reader.string();
                                            break;
                                        }
                                    case 1: {
                                            message.type = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.sizeGb = reader.int64();
                                            break;
                                        }
                                    case 6: {
                                            message.diskInterface = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Disk message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.Disk} Disk
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Disk.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Disk message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Disk.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.image != null && message.hasOwnProperty("image")) {
                                    properties.dataSource = 1;
                                    if (!$util.isString(message.image))
                                        return "image: string expected";
                                }
                                if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                                    if (properties.dataSource === 1)
                                        return "dataSource: multiple values";
                                    properties.dataSource = 1;
                                    if (!$util.isString(message.snapshot))
                                        return "snapshot: string expected";
                                }
                                if (message.type != null && message.hasOwnProperty("type"))
                                    if (!$util.isString(message.type))
                                        return "type: string expected";
                                if (message.sizeGb != null && message.hasOwnProperty("sizeGb"))
                                    if (!$util.isInteger(message.sizeGb) && !(message.sizeGb && $util.isInteger(message.sizeGb.low) && $util.isInteger(message.sizeGb.high)))
                                        return "sizeGb: integer|Long expected";
                                if (message.diskInterface != null && message.hasOwnProperty("diskInterface"))
                                    if (!$util.isString(message.diskInterface))
                                        return "diskInterface: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a Disk message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.Disk} Disk
                             */
                            Disk.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk();
                                if (object.image != null)
                                    message.image = String(object.image);
                                if (object.snapshot != null)
                                    message.snapshot = String(object.snapshot);
                                if (object.type != null)
                                    message.type = String(object.type);
                                if (object.sizeGb != null)
                                    if ($util.Long)
                                        (message.sizeGb = $util.Long.fromValue(object.sizeGb)).unsigned = false;
                                    else if (typeof object.sizeGb === "string")
                                        message.sizeGb = parseInt(object.sizeGb, 10);
                                    else if (typeof object.sizeGb === "number")
                                        message.sizeGb = object.sizeGb;
                                    else if (typeof object.sizeGb === "object")
                                        message.sizeGb = new $util.LongBits(object.sizeGb.low >>> 0, object.sizeGb.high >>> 0).toNumber();
                                if (object.diskInterface != null)
                                    message.diskInterface = String(object.diskInterface);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Disk message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.Disk} message Disk
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Disk.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.type = "";
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.sizeGb = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.sizeGb = options.longs === String ? "0" : 0;
                                    object.diskInterface = "";
                                }
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = message.type;
                                if (message.sizeGb != null && message.hasOwnProperty("sizeGb"))
                                    if (typeof message.sizeGb === "number")
                                        object.sizeGb = options.longs === String ? String(message.sizeGb) : message.sizeGb;
                                    else
                                        object.sizeGb = options.longs === String ? $util.Long.prototype.toString.call(message.sizeGb) : options.longs === Number ? new $util.LongBits(message.sizeGb.low >>> 0, message.sizeGb.high >>> 0).toNumber() : message.sizeGb;
                                if (message.image != null && message.hasOwnProperty("image")) {
                                    object.image = message.image;
                                    if (options.oneofs)
                                        object.dataSource = "image";
                                }
                                if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                                    object.snapshot = message.snapshot;
                                    if (options.oneofs)
                                        object.dataSource = "snapshot";
                                }
                                if (message.diskInterface != null && message.hasOwnProperty("diskInterface"))
                                    object.diskInterface = message.diskInterface;
                                return object;
                            };
    
                            /**
                             * Converts this Disk to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Disk.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Disk
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Disk
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Disk.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.AllocationPolicy.Disk";
                            };
    
                            return Disk;
                        })();
    
                        AllocationPolicy.AttachedDisk = (function() {
    
                            /**
                             * Properties of an AttachedDisk.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @interface IAttachedDisk
                             * @property {google.cloud.batch.v1alpha.AllocationPolicy.IDisk|null} [newDisk] AttachedDisk newDisk
                             * @property {string|null} [existingDisk] AttachedDisk existingDisk
                             * @property {string|null} [deviceName] AttachedDisk deviceName
                             */
    
                            /**
                             * Constructs a new AttachedDisk.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @classdesc Represents an AttachedDisk.
                             * @implements IAttachedDisk
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IAttachedDisk=} [properties] Properties to set
                             */
                            function AttachedDisk(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * AttachedDisk newDisk.
                             * @member {google.cloud.batch.v1alpha.AllocationPolicy.IDisk|null|undefined} newDisk
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @instance
                             */
                            AttachedDisk.prototype.newDisk = null;
    
                            /**
                             * AttachedDisk existingDisk.
                             * @member {string|null|undefined} existingDisk
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @instance
                             */
                            AttachedDisk.prototype.existingDisk = null;
    
                            /**
                             * AttachedDisk deviceName.
                             * @member {string} deviceName
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @instance
                             */
                            AttachedDisk.prototype.deviceName = "";
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * AttachedDisk attached.
                             * @member {"newDisk"|"existingDisk"|undefined} attached
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @instance
                             */
                            Object.defineProperty(AttachedDisk.prototype, "attached", {
                                get: $util.oneOfGetter($oneOfFields = ["newDisk", "existingDisk"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new AttachedDisk instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IAttachedDisk=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk} AttachedDisk instance
                             */
                            AttachedDisk.create = function create(properties) {
                                return new AttachedDisk(properties);
                            };
    
                            /**
                             * Encodes the specified AttachedDisk message. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IAttachedDisk} message AttachedDisk message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AttachedDisk.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.newDisk != null && Object.hasOwnProperty.call(message, "newDisk"))
                                    $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.encode(message.newDisk, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.existingDisk != null && Object.hasOwnProperty.call(message, "existingDisk"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.existingDisk);
                                if (message.deviceName != null && Object.hasOwnProperty.call(message, "deviceName"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.deviceName);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified AttachedDisk message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IAttachedDisk} message AttachedDisk message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            AttachedDisk.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an AttachedDisk message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk} AttachedDisk
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AttachedDisk.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.newDisk = $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 2: {
                                            message.existingDisk = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.deviceName = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an AttachedDisk message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk} AttachedDisk
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            AttachedDisk.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an AttachedDisk message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            AttachedDisk.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.newDisk != null && message.hasOwnProperty("newDisk")) {
                                    properties.attached = 1;
                                    {
                                        var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.verify(message.newDisk);
                                        if (error)
                                            return "newDisk." + error;
                                    }
                                }
                                if (message.existingDisk != null && message.hasOwnProperty("existingDisk")) {
                                    if (properties.attached === 1)
                                        return "attached: multiple values";
                                    properties.attached = 1;
                                    if (!$util.isString(message.existingDisk))
                                        return "existingDisk: string expected";
                                }
                                if (message.deviceName != null && message.hasOwnProperty("deviceName"))
                                    if (!$util.isString(message.deviceName))
                                        return "deviceName: string expected";
                                return null;
                            };
    
                            /**
                             * Creates an AttachedDisk message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk} AttachedDisk
                             */
                            AttachedDisk.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk();
                                if (object.newDisk != null) {
                                    if (typeof object.newDisk !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk.newDisk: object expected");
                                    message.newDisk = $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.fromObject(object.newDisk);
                                }
                                if (object.existingDisk != null)
                                    message.existingDisk = String(object.existingDisk);
                                if (object.deviceName != null)
                                    message.deviceName = String(object.deviceName);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an AttachedDisk message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk} message AttachedDisk
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            AttachedDisk.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.deviceName = "";
                                if (message.newDisk != null && message.hasOwnProperty("newDisk")) {
                                    object.newDisk = $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.toObject(message.newDisk, options);
                                    if (options.oneofs)
                                        object.attached = "newDisk";
                                }
                                if (message.existingDisk != null && message.hasOwnProperty("existingDisk")) {
                                    object.existingDisk = message.existingDisk;
                                    if (options.oneofs)
                                        object.attached = "existingDisk";
                                }
                                if (message.deviceName != null && message.hasOwnProperty("deviceName"))
                                    object.deviceName = message.deviceName;
                                return object;
                            };
    
                            /**
                             * Converts this AttachedDisk to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            AttachedDisk.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for AttachedDisk
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            AttachedDisk.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk";
                            };
    
                            return AttachedDisk;
                        })();
    
                        AllocationPolicy.Accelerator = (function() {
    
                            /**
                             * Properties of an Accelerator.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @interface IAccelerator
                             * @property {string|null} [type] Accelerator type
                             * @property {number|Long|null} [count] Accelerator count
                             * @property {boolean|null} [installGpuDrivers] Accelerator installGpuDrivers
                             * @property {string|null} [driverVersion] Accelerator driverVersion
                             */
    
                            /**
                             * Constructs a new Accelerator.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @classdesc Represents an Accelerator.
                             * @implements IAccelerator
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IAccelerator=} [properties] Properties to set
                             */
                            function Accelerator(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Accelerator type.
                             * @member {string} type
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @instance
                             */
                            Accelerator.prototype.type = "";
    
                            /**
                             * Accelerator count.
                             * @member {number|Long} count
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @instance
                             */
                            Accelerator.prototype.count = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Accelerator installGpuDrivers.
                             * @member {boolean} installGpuDrivers
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @instance
                             */
                            Accelerator.prototype.installGpuDrivers = false;
    
                            /**
                             * Accelerator driverVersion.
                             * @member {string} driverVersion
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @instance
                             */
                            Accelerator.prototype.driverVersion = "";
    
                            /**
                             * Creates a new Accelerator instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IAccelerator=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.Accelerator} Accelerator instance
                             */
                            Accelerator.create = function create(properties) {
                                return new Accelerator(properties);
                            };
    
                            /**
                             * Encodes the specified Accelerator message. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.Accelerator.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IAccelerator} message Accelerator message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Accelerator.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                                if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.count);
                                if (message.installGpuDrivers != null && Object.hasOwnProperty.call(message, "installGpuDrivers"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.installGpuDrivers);
                                if (message.driverVersion != null && Object.hasOwnProperty.call(message, "driverVersion"))
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.driverVersion);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Accelerator message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.Accelerator.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IAccelerator} message Accelerator message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Accelerator.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an Accelerator message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.Accelerator} Accelerator
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Accelerator.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.Accelerator();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.type = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.count = reader.int64();
                                            break;
                                        }
                                    case 3: {
                                            message.installGpuDrivers = reader.bool();
                                            break;
                                        }
                                    case 4: {
                                            message.driverVersion = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an Accelerator message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.Accelerator} Accelerator
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Accelerator.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an Accelerator message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Accelerator.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.type != null && message.hasOwnProperty("type"))
                                    if (!$util.isString(message.type))
                                        return "type: string expected";
                                if (message.count != null && message.hasOwnProperty("count"))
                                    if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))
                                        return "count: integer|Long expected";
                                if (message.installGpuDrivers != null && message.hasOwnProperty("installGpuDrivers"))
                                    if (typeof message.installGpuDrivers !== "boolean")
                                        return "installGpuDrivers: boolean expected";
                                if (message.driverVersion != null && message.hasOwnProperty("driverVersion"))
                                    if (!$util.isString(message.driverVersion))
                                        return "driverVersion: string expected";
                                return null;
                            };
    
                            /**
                             * Creates an Accelerator message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.Accelerator} Accelerator
                             */
                            Accelerator.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.AllocationPolicy.Accelerator)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.Accelerator();
                                if (object.type != null)
                                    message.type = String(object.type);
                                if (object.count != null)
                                    if ($util.Long)
                                        (message.count = $util.Long.fromValue(object.count)).unsigned = false;
                                    else if (typeof object.count === "string")
                                        message.count = parseInt(object.count, 10);
                                    else if (typeof object.count === "number")
                                        message.count = object.count;
                                    else if (typeof object.count === "object")
                                        message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();
                                if (object.installGpuDrivers != null)
                                    message.installGpuDrivers = Boolean(object.installGpuDrivers);
                                if (object.driverVersion != null)
                                    message.driverVersion = String(object.driverVersion);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an Accelerator message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.Accelerator} message Accelerator
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Accelerator.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.type = "";
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.count = options.longs === String ? "0" : 0;
                                    object.installGpuDrivers = false;
                                    object.driverVersion = "";
                                }
                                if (message.type != null && message.hasOwnProperty("type"))
                                    object.type = message.type;
                                if (message.count != null && message.hasOwnProperty("count"))
                                    if (typeof message.count === "number")
                                        object.count = options.longs === String ? String(message.count) : message.count;
                                    else
                                        object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;
                                if (message.installGpuDrivers != null && message.hasOwnProperty("installGpuDrivers"))
                                    object.installGpuDrivers = message.installGpuDrivers;
                                if (message.driverVersion != null && message.hasOwnProperty("driverVersion"))
                                    object.driverVersion = message.driverVersion;
                                return object;
                            };
    
                            /**
                             * Converts this Accelerator to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Accelerator.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Accelerator
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.Accelerator
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Accelerator.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.AllocationPolicy.Accelerator";
                            };
    
                            return Accelerator;
                        })();
    
                        AllocationPolicy.InstancePolicy = (function() {
    
                            /**
                             * Properties of an InstancePolicy.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @interface IInstancePolicy
                             * @property {Array.<string>|null} [allowedMachineTypes] InstancePolicy allowedMachineTypes
                             * @property {string|null} [machineType] InstancePolicy machineType
                             * @property {string|null} [minCpuPlatform] InstancePolicy minCpuPlatform
                             * @property {google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel|null} [provisioningModel] InstancePolicy provisioningModel
                             * @property {Array.<google.cloud.batch.v1alpha.AllocationPolicy.IAccelerator>|null} [accelerators] InstancePolicy accelerators
                             * @property {google.cloud.batch.v1alpha.AllocationPolicy.IDisk|null} [bootDisk] InstancePolicy bootDisk
                             * @property {Array.<google.cloud.batch.v1alpha.AllocationPolicy.IAttachedDisk>|null} [disks] InstancePolicy disks
                             * @property {string|null} [reservation] InstancePolicy reservation
                             */
    
                            /**
                             * Constructs a new InstancePolicy.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @classdesc Represents an InstancePolicy.
                             * @implements IInstancePolicy
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicy=} [properties] Properties to set
                             */
                            function InstancePolicy(properties) {
                                this.allowedMachineTypes = [];
                                this.accelerators = [];
                                this.disks = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * InstancePolicy allowedMachineTypes.
                             * @member {Array.<string>} allowedMachineTypes
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.allowedMachineTypes = $util.emptyArray;
    
                            /**
                             * InstancePolicy machineType.
                             * @member {string} machineType
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.machineType = "";
    
                            /**
                             * InstancePolicy minCpuPlatform.
                             * @member {string} minCpuPlatform
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.minCpuPlatform = "";
    
                            /**
                             * InstancePolicy provisioningModel.
                             * @member {google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel} provisioningModel
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.provisioningModel = 0;
    
                            /**
                             * InstancePolicy accelerators.
                             * @member {Array.<google.cloud.batch.v1alpha.AllocationPolicy.IAccelerator>} accelerators
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.accelerators = $util.emptyArray;
    
                            /**
                             * InstancePolicy bootDisk.
                             * @member {google.cloud.batch.v1alpha.AllocationPolicy.IDisk|null|undefined} bootDisk
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.bootDisk = null;
    
                            /**
                             * InstancePolicy disks.
                             * @member {Array.<google.cloud.batch.v1alpha.AllocationPolicy.IAttachedDisk>} disks
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.disks = $util.emptyArray;
    
                            /**
                             * InstancePolicy reservation.
                             * @member {string} reservation
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @instance
                             */
                            InstancePolicy.prototype.reservation = "";
    
                            /**
                             * Creates a new InstancePolicy instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicy=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy} InstancePolicy instance
                             */
                            InstancePolicy.create = function create(properties) {
                                return new InstancePolicy(properties);
                            };
    
                            /**
                             * Encodes the specified InstancePolicy message. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicy} message InstancePolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstancePolicy.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.allowedMachineTypes != null && message.allowedMachineTypes.length)
                                    for (var i = 0; i < message.allowedMachineTypes.length; ++i)
                                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.allowedMachineTypes[i]);
                                if (message.machineType != null && Object.hasOwnProperty.call(message, "machineType"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.machineType);
                                if (message.minCpuPlatform != null && Object.hasOwnProperty.call(message, "minCpuPlatform"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.minCpuPlatform);
                                if (message.provisioningModel != null && Object.hasOwnProperty.call(message, "provisioningModel"))
                                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.provisioningModel);
                                if (message.accelerators != null && message.accelerators.length)
                                    for (var i = 0; i < message.accelerators.length; ++i)
                                        $root.google.cloud.batch.v1alpha.AllocationPolicy.Accelerator.encode(message.accelerators[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                                if (message.disks != null && message.disks.length)
                                    for (var i = 0; i < message.disks.length; ++i)
                                        $root.google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk.encode(message.disks[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                                if (message.reservation != null && Object.hasOwnProperty.call(message, "reservation"))
                                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.reservation);
                                if (message.bootDisk != null && Object.hasOwnProperty.call(message, "bootDisk"))
                                    $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.encode(message.bootDisk, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified InstancePolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicy} message InstancePolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstancePolicy.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an InstancePolicy message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy} InstancePolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstancePolicy.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            if (!(message.allowedMachineTypes && message.allowedMachineTypes.length))
                                                message.allowedMachineTypes = [];
                                            message.allowedMachineTypes.push(reader.string());
                                            break;
                                        }
                                    case 2: {
                                            message.machineType = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.minCpuPlatform = reader.string();
                                            break;
                                        }
                                    case 4: {
                                            message.provisioningModel = reader.int32();
                                            break;
                                        }
                                    case 5: {
                                            if (!(message.accelerators && message.accelerators.length))
                                                message.accelerators = [];
                                            message.accelerators.push($root.google.cloud.batch.v1alpha.AllocationPolicy.Accelerator.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 8: {
                                            message.bootDisk = $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 6: {
                                            if (!(message.disks && message.disks.length))
                                                message.disks = [];
                                            message.disks.push($root.google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    case 7: {
                                            message.reservation = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an InstancePolicy message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy} InstancePolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstancePolicy.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an InstancePolicy message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            InstancePolicy.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.allowedMachineTypes != null && message.hasOwnProperty("allowedMachineTypes")) {
                                    if (!Array.isArray(message.allowedMachineTypes))
                                        return "allowedMachineTypes: array expected";
                                    for (var i = 0; i < message.allowedMachineTypes.length; ++i)
                                        if (!$util.isString(message.allowedMachineTypes[i]))
                                            return "allowedMachineTypes: string[] expected";
                                }
                                if (message.machineType != null && message.hasOwnProperty("machineType"))
                                    if (!$util.isString(message.machineType))
                                        return "machineType: string expected";
                                if (message.minCpuPlatform != null && message.hasOwnProperty("minCpuPlatform"))
                                    if (!$util.isString(message.minCpuPlatform))
                                        return "minCpuPlatform: string expected";
                                if (message.provisioningModel != null && message.hasOwnProperty("provisioningModel"))
                                    switch (message.provisioningModel) {
                                    default:
                                        return "provisioningModel: enum value expected";
                                    case 0:
                                    case 1:
                                    case 2:
                                    case 3:
                                        break;
                                    }
                                if (message.accelerators != null && message.hasOwnProperty("accelerators")) {
                                    if (!Array.isArray(message.accelerators))
                                        return "accelerators: array expected";
                                    for (var i = 0; i < message.accelerators.length; ++i) {
                                        var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.Accelerator.verify(message.accelerators[i]);
                                        if (error)
                                            return "accelerators." + error;
                                    }
                                }
                                if (message.bootDisk != null && message.hasOwnProperty("bootDisk")) {
                                    var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.verify(message.bootDisk);
                                    if (error)
                                        return "bootDisk." + error;
                                }
                                if (message.disks != null && message.hasOwnProperty("disks")) {
                                    if (!Array.isArray(message.disks))
                                        return "disks: array expected";
                                    for (var i = 0; i < message.disks.length; ++i) {
                                        var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk.verify(message.disks[i]);
                                        if (error)
                                            return "disks." + error;
                                    }
                                }
                                if (message.reservation != null && message.hasOwnProperty("reservation"))
                                    if (!$util.isString(message.reservation))
                                        return "reservation: string expected";
                                return null;
                            };
    
                            /**
                             * Creates an InstancePolicy message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy} InstancePolicy
                             */
                            InstancePolicy.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy();
                                if (object.allowedMachineTypes) {
                                    if (!Array.isArray(object.allowedMachineTypes))
                                        throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.allowedMachineTypes: array expected");
                                    message.allowedMachineTypes = [];
                                    for (var i = 0; i < object.allowedMachineTypes.length; ++i)
                                        message.allowedMachineTypes[i] = String(object.allowedMachineTypes[i]);
                                }
                                if (object.machineType != null)
                                    message.machineType = String(object.machineType);
                                if (object.minCpuPlatform != null)
                                    message.minCpuPlatform = String(object.minCpuPlatform);
                                switch (object.provisioningModel) {
                                default:
                                    if (typeof object.provisioningModel === "number") {
                                        message.provisioningModel = object.provisioningModel;
                                        break;
                                    }
                                    break;
                                case "PROVISIONING_MODEL_UNSPECIFIED":
                                case 0:
                                    message.provisioningModel = 0;
                                    break;
                                case "STANDARD":
                                case 1:
                                    message.provisioningModel = 1;
                                    break;
                                case "SPOT":
                                case 2:
                                    message.provisioningModel = 2;
                                    break;
                                case "PREEMPTIBLE":
                                case 3:
                                    message.provisioningModel = 3;
                                    break;
                                }
                                if (object.accelerators) {
                                    if (!Array.isArray(object.accelerators))
                                        throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.accelerators: array expected");
                                    message.accelerators = [];
                                    for (var i = 0; i < object.accelerators.length; ++i) {
                                        if (typeof object.accelerators[i] !== "object")
                                            throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.accelerators: object expected");
                                        message.accelerators[i] = $root.google.cloud.batch.v1alpha.AllocationPolicy.Accelerator.fromObject(object.accelerators[i]);
                                    }
                                }
                                if (object.bootDisk != null) {
                                    if (typeof object.bootDisk !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.bootDisk: object expected");
                                    message.bootDisk = $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.fromObject(object.bootDisk);
                                }
                                if (object.disks) {
                                    if (!Array.isArray(object.disks))
                                        throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.disks: array expected");
                                    message.disks = [];
                                    for (var i = 0; i < object.disks.length; ++i) {
                                        if (typeof object.disks[i] !== "object")
                                            throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.disks: object expected");
                                        message.disks[i] = $root.google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk.fromObject(object.disks[i]);
                                    }
                                }
                                if (object.reservation != null)
                                    message.reservation = String(object.reservation);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an InstancePolicy message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy} message InstancePolicy
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            InstancePolicy.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults) {
                                    object.allowedMachineTypes = [];
                                    object.accelerators = [];
                                    object.disks = [];
                                }
                                if (options.defaults) {
                                    object.machineType = "";
                                    object.minCpuPlatform = "";
                                    object.provisioningModel = options.enums === String ? "PROVISIONING_MODEL_UNSPECIFIED" : 0;
                                    object.reservation = "";
                                    object.bootDisk = null;
                                }
                                if (message.allowedMachineTypes && message.allowedMachineTypes.length) {
                                    object.allowedMachineTypes = [];
                                    for (var j = 0; j < message.allowedMachineTypes.length; ++j)
                                        object.allowedMachineTypes[j] = message.allowedMachineTypes[j];
                                }
                                if (message.machineType != null && message.hasOwnProperty("machineType"))
                                    object.machineType = message.machineType;
                                if (message.minCpuPlatform != null && message.hasOwnProperty("minCpuPlatform"))
                                    object.minCpuPlatform = message.minCpuPlatform;
                                if (message.provisioningModel != null && message.hasOwnProperty("provisioningModel"))
                                    object.provisioningModel = options.enums === String ? $root.google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel[message.provisioningModel] === undefined ? message.provisioningModel : $root.google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel[message.provisioningModel] : message.provisioningModel;
                                if (message.accelerators && message.accelerators.length) {
                                    object.accelerators = [];
                                    for (var j = 0; j < message.accelerators.length; ++j)
                                        object.accelerators[j] = $root.google.cloud.batch.v1alpha.AllocationPolicy.Accelerator.toObject(message.accelerators[j], options);
                                }
                                if (message.disks && message.disks.length) {
                                    object.disks = [];
                                    for (var j = 0; j < message.disks.length; ++j)
                                        object.disks[j] = $root.google.cloud.batch.v1alpha.AllocationPolicy.AttachedDisk.toObject(message.disks[j], options);
                                }
                                if (message.reservation != null && message.hasOwnProperty("reservation"))
                                    object.reservation = message.reservation;
                                if (message.bootDisk != null && message.hasOwnProperty("bootDisk"))
                                    object.bootDisk = $root.google.cloud.batch.v1alpha.AllocationPolicy.Disk.toObject(message.bootDisk, options);
                                return object;
                            };
    
                            /**
                             * Converts this InstancePolicy to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            InstancePolicy.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for InstancePolicy
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            InstancePolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy";
                            };
    
                            return InstancePolicy;
                        })();
    
                        AllocationPolicy.InstancePolicyOrTemplate = (function() {
    
                            /**
                             * Properties of an InstancePolicyOrTemplate.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @interface IInstancePolicyOrTemplate
                             * @property {google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicy|null} [policy] InstancePolicyOrTemplate policy
                             * @property {string|null} [instanceTemplate] InstancePolicyOrTemplate instanceTemplate
                             * @property {boolean|null} [installGpuDrivers] InstancePolicyOrTemplate installGpuDrivers
                             */
    
                            /**
                             * Constructs a new InstancePolicyOrTemplate.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @classdesc Represents an InstancePolicyOrTemplate.
                             * @implements IInstancePolicyOrTemplate
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicyOrTemplate=} [properties] Properties to set
                             */
                            function InstancePolicyOrTemplate(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * InstancePolicyOrTemplate policy.
                             * @member {google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicy|null|undefined} policy
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @instance
                             */
                            InstancePolicyOrTemplate.prototype.policy = null;
    
                            /**
                             * InstancePolicyOrTemplate instanceTemplate.
                             * @member {string|null|undefined} instanceTemplate
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @instance
                             */
                            InstancePolicyOrTemplate.prototype.instanceTemplate = null;
    
                            /**
                             * InstancePolicyOrTemplate installGpuDrivers.
                             * @member {boolean} installGpuDrivers
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @instance
                             */
                            InstancePolicyOrTemplate.prototype.installGpuDrivers = false;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * InstancePolicyOrTemplate policyTemplate.
                             * @member {"policy"|"instanceTemplate"|undefined} policyTemplate
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @instance
                             */
                            Object.defineProperty(InstancePolicyOrTemplate.prototype, "policyTemplate", {
                                get: $util.oneOfGetter($oneOfFields = ["policy", "instanceTemplate"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new InstancePolicyOrTemplate instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicyOrTemplate=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate} InstancePolicyOrTemplate instance
                             */
                            InstancePolicyOrTemplate.create = function create(properties) {
                                return new InstancePolicyOrTemplate(properties);
                            };
    
                            /**
                             * Encodes the specified InstancePolicyOrTemplate message. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicyOrTemplate} message InstancePolicyOrTemplate message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstancePolicyOrTemplate.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.policy != null && Object.hasOwnProperty.call(message, "policy"))
                                    $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.encode(message.policy, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                if (message.instanceTemplate != null && Object.hasOwnProperty.call(message, "instanceTemplate"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.instanceTemplate);
                                if (message.installGpuDrivers != null && Object.hasOwnProperty.call(message, "installGpuDrivers"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.installGpuDrivers);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified InstancePolicyOrTemplate message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IInstancePolicyOrTemplate} message InstancePolicyOrTemplate message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            InstancePolicyOrTemplate.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an InstancePolicyOrTemplate message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate} InstancePolicyOrTemplate
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstancePolicyOrTemplate.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.policy = $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.decode(reader, reader.uint32());
                                            break;
                                        }
                                    case 2: {
                                            message.instanceTemplate = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.installGpuDrivers = reader.bool();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an InstancePolicyOrTemplate message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate} InstancePolicyOrTemplate
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            InstancePolicyOrTemplate.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an InstancePolicyOrTemplate message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            InstancePolicyOrTemplate.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.policy != null && message.hasOwnProperty("policy")) {
                                    properties.policyTemplate = 1;
                                    {
                                        var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.verify(message.policy);
                                        if (error)
                                            return "policy." + error;
                                    }
                                }
                                if (message.instanceTemplate != null && message.hasOwnProperty("instanceTemplate")) {
                                    if (properties.policyTemplate === 1)
                                        return "policyTemplate: multiple values";
                                    properties.policyTemplate = 1;
                                    if (!$util.isString(message.instanceTemplate))
                                        return "instanceTemplate: string expected";
                                }
                                if (message.installGpuDrivers != null && message.hasOwnProperty("installGpuDrivers"))
                                    if (typeof message.installGpuDrivers !== "boolean")
                                        return "installGpuDrivers: boolean expected";
                                return null;
                            };
    
                            /**
                             * Creates an InstancePolicyOrTemplate message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate} InstancePolicyOrTemplate
                             */
                            InstancePolicyOrTemplate.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate();
                                if (object.policy != null) {
                                    if (typeof object.policy !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate.policy: object expected");
                                    message.policy = $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.fromObject(object.policy);
                                }
                                if (object.instanceTemplate != null)
                                    message.instanceTemplate = String(object.instanceTemplate);
                                if (object.installGpuDrivers != null)
                                    message.installGpuDrivers = Boolean(object.installGpuDrivers);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an InstancePolicyOrTemplate message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate} message InstancePolicyOrTemplate
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            InstancePolicyOrTemplate.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.installGpuDrivers = false;
                                if (message.policy != null && message.hasOwnProperty("policy")) {
                                    object.policy = $root.google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicy.toObject(message.policy, options);
                                    if (options.oneofs)
                                        object.policyTemplate = "policy";
                                }
                                if (message.instanceTemplate != null && message.hasOwnProperty("instanceTemplate")) {
                                    object.instanceTemplate = message.instanceTemplate;
                                    if (options.oneofs)
                                        object.policyTemplate = "instanceTemplate";
                                }
                                if (message.installGpuDrivers != null && message.hasOwnProperty("installGpuDrivers"))
                                    object.installGpuDrivers = message.installGpuDrivers;
                                return object;
                            };
    
                            /**
                             * Converts this InstancePolicyOrTemplate to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            InstancePolicyOrTemplate.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for InstancePolicyOrTemplate
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            InstancePolicyOrTemplate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.AllocationPolicy.InstancePolicyOrTemplate";
                            };
    
                            return InstancePolicyOrTemplate;
                        })();
    
                        AllocationPolicy.NetworkInterface = (function() {
    
                            /**
                             * Properties of a NetworkInterface.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @interface INetworkInterface
                             * @property {string|null} [network] NetworkInterface network
                             * @property {string|null} [subnetwork] NetworkInterface subnetwork
                             * @property {boolean|null} [noExternalIpAddress] NetworkInterface noExternalIpAddress
                             */
    
                            /**
                             * Constructs a new NetworkInterface.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @classdesc Represents a NetworkInterface.
                             * @implements INetworkInterface
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.INetworkInterface=} [properties] Properties to set
                             */
                            function NetworkInterface(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * NetworkInterface network.
                             * @member {string} network
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @instance
                             */
                            NetworkInterface.prototype.network = "";
    
                            /**
                             * NetworkInterface subnetwork.
                             * @member {string} subnetwork
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @instance
                             */
                            NetworkInterface.prototype.subnetwork = "";
    
                            /**
                             * NetworkInterface noExternalIpAddress.
                             * @member {boolean} noExternalIpAddress
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @instance
                             */
                            NetworkInterface.prototype.noExternalIpAddress = false;
    
                            /**
                             * Creates a new NetworkInterface instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.INetworkInterface=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface} NetworkInterface instance
                             */
                            NetworkInterface.create = function create(properties) {
                                return new NetworkInterface(properties);
                            };
    
                            /**
                             * Encodes the specified NetworkInterface message. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.INetworkInterface} message NetworkInterface message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NetworkInterface.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.network != null && Object.hasOwnProperty.call(message, "network"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.network);
                                if (message.subnetwork != null && Object.hasOwnProperty.call(message, "subnetwork"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.subnetwork);
                                if (message.noExternalIpAddress != null && Object.hasOwnProperty.call(message, "noExternalIpAddress"))
                                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.noExternalIpAddress);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified NetworkInterface message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.INetworkInterface} message NetworkInterface message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NetworkInterface.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a NetworkInterface message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface} NetworkInterface
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NetworkInterface.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.network = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.subnetwork = reader.string();
                                            break;
                                        }
                                    case 3: {
                                            message.noExternalIpAddress = reader.bool();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a NetworkInterface message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface} NetworkInterface
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NetworkInterface.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a NetworkInterface message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            NetworkInterface.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.network != null && message.hasOwnProperty("network"))
                                    if (!$util.isString(message.network))
                                        return "network: string expected";
                                if (message.subnetwork != null && message.hasOwnProperty("subnetwork"))
                                    if (!$util.isString(message.subnetwork))
                                        return "subnetwork: string expected";
                                if (message.noExternalIpAddress != null && message.hasOwnProperty("noExternalIpAddress"))
                                    if (typeof message.noExternalIpAddress !== "boolean")
                                        return "noExternalIpAddress: boolean expected";
                                return null;
                            };
    
                            /**
                             * Creates a NetworkInterface message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface} NetworkInterface
                             */
                            NetworkInterface.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface();
                                if (object.network != null)
                                    message.network = String(object.network);
                                if (object.subnetwork != null)
                                    message.subnetwork = String(object.subnetwork);
                                if (object.noExternalIpAddress != null)
                                    message.noExternalIpAddress = Boolean(object.noExternalIpAddress);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a NetworkInterface message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface} message NetworkInterface
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            NetworkInterface.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.network = "";
                                    object.subnetwork = "";
                                    object.noExternalIpAddress = false;
                                }
                                if (message.network != null && message.hasOwnProperty("network"))
                                    object.network = message.network;
                                if (message.subnetwork != null && message.hasOwnProperty("subnetwork"))
                                    object.subnetwork = message.subnetwork;
                                if (message.noExternalIpAddress != null && message.hasOwnProperty("noExternalIpAddress"))
                                    object.noExternalIpAddress = message.noExternalIpAddress;
                                return object;
                            };
    
                            /**
                             * Converts this NetworkInterface to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            NetworkInterface.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for NetworkInterface
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            NetworkInterface.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface";
                            };
    
                            return NetworkInterface;
                        })();
    
                        AllocationPolicy.NetworkPolicy = (function() {
    
                            /**
                             * Properties of a NetworkPolicy.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @interface INetworkPolicy
                             * @property {Array.<google.cloud.batch.v1alpha.AllocationPolicy.INetworkInterface>|null} [networkInterfaces] NetworkPolicy networkInterfaces
                             */
    
                            /**
                             * Constructs a new NetworkPolicy.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @classdesc Represents a NetworkPolicy.
                             * @implements INetworkPolicy
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.INetworkPolicy=} [properties] Properties to set
                             */
                            function NetworkPolicy(properties) {
                                this.networkInterfaces = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * NetworkPolicy networkInterfaces.
                             * @member {Array.<google.cloud.batch.v1alpha.AllocationPolicy.INetworkInterface>} networkInterfaces
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy
                             * @instance
                             */
                            NetworkPolicy.prototype.networkInterfaces = $util.emptyArray;
    
                            /**
                             * Creates a new NetworkPolicy instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.INetworkPolicy=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy} NetworkPolicy instance
                             */
                            NetworkPolicy.create = function create(properties) {
                                return new NetworkPolicy(properties);
                            };
    
                            /**
                             * Encodes the specified NetworkPolicy message. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.INetworkPolicy} message NetworkPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NetworkPolicy.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.networkInterfaces != null && message.networkInterfaces.length)
                                    for (var i = 0; i < message.networkInterfaces.length; ++i)
                                        $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface.encode(message.networkInterfaces[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                                return writer;
                            };
    
                            /**
                             * Encodes the specified NetworkPolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.INetworkPolicy} message NetworkPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            NetworkPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a NetworkPolicy message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy} NetworkPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NetworkPolicy.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            if (!(message.networkInterfaces && message.networkInterfaces.length))
                                                message.networkInterfaces = [];
                                            message.networkInterfaces.push($root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface.decode(reader, reader.uint32()));
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a NetworkPolicy message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy} NetworkPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            NetworkPolicy.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a NetworkPolicy message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            NetworkPolicy.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.networkInterfaces != null && message.hasOwnProperty("networkInterfaces")) {
                                    if (!Array.isArray(message.networkInterfaces))
                                        return "networkInterfaces: array expected";
                                    for (var i = 0; i < message.networkInterfaces.length; ++i) {
                                        var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface.verify(message.networkInterfaces[i]);
                                        if (error)
                                            return "networkInterfaces." + error;
                                    }
                                }
                                return null;
                            };
    
                            /**
                             * Creates a NetworkPolicy message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy} NetworkPolicy
                             */
                            NetworkPolicy.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy();
                                if (object.networkInterfaces) {
                                    if (!Array.isArray(object.networkInterfaces))
                                        throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy.networkInterfaces: array expected");
                                    message.networkInterfaces = [];
                                    for (var i = 0; i < object.networkInterfaces.length; ++i) {
                                        if (typeof object.networkInterfaces[i] !== "object")
                                            throw TypeError(".google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy.networkInterfaces: object expected");
                                        message.networkInterfaces[i] = $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface.fromObject(object.networkInterfaces[i]);
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a NetworkPolicy message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy} message NetworkPolicy
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            NetworkPolicy.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.networkInterfaces = [];
                                if (message.networkInterfaces && message.networkInterfaces.length) {
                                    object.networkInterfaces = [];
                                    for (var j = 0; j < message.networkInterfaces.length; ++j)
                                        object.networkInterfaces[j] = $root.google.cloud.batch.v1alpha.AllocationPolicy.NetworkInterface.toObject(message.networkInterfaces[j], options);
                                }
                                return object;
                            };
    
                            /**
                             * Converts this NetworkPolicy to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            NetworkPolicy.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for NetworkPolicy
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            NetworkPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.AllocationPolicy.NetworkPolicy";
                            };
    
                            return NetworkPolicy;
                        })();
    
                        AllocationPolicy.PlacementPolicy = (function() {
    
                            /**
                             * Properties of a PlacementPolicy.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @interface IPlacementPolicy
                             * @property {string|null} [collocation] PlacementPolicy collocation
                             * @property {number|Long|null} [maxDistance] PlacementPolicy maxDistance
                             */
    
                            /**
                             * Constructs a new PlacementPolicy.
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy
                             * @classdesc Represents a PlacementPolicy.
                             * @implements IPlacementPolicy
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IPlacementPolicy=} [properties] Properties to set
                             */
                            function PlacementPolicy(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * PlacementPolicy collocation.
                             * @member {string} collocation
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
                             * @instance
                             */
                            PlacementPolicy.prototype.collocation = "";
    
                            /**
                             * PlacementPolicy maxDistance.
                             * @member {number|Long} maxDistance
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
                             * @instance
                             */
                            PlacementPolicy.prototype.maxDistance = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                            /**
                             * Creates a new PlacementPolicy instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IPlacementPolicy=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy} PlacementPolicy instance
                             */
                            PlacementPolicy.create = function create(properties) {
                                return new PlacementPolicy(properties);
                            };
    
                            /**
                             * Encodes the specified PlacementPolicy message. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IPlacementPolicy} message PlacementPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PlacementPolicy.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.collocation != null && Object.hasOwnProperty.call(message, "collocation"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.collocation);
                                if (message.maxDistance != null && Object.hasOwnProperty.call(message, "maxDistance"))
                                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.maxDistance);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified PlacementPolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.IPlacementPolicy} message PlacementPolicy message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            PlacementPolicy.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a PlacementPolicy message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy} PlacementPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PlacementPolicy.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.collocation = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.maxDistance = reader.int64();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a PlacementPolicy message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy} PlacementPolicy
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            PlacementPolicy.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a PlacementPolicy message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            PlacementPolicy.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.collocation != null && message.hasOwnProperty("collocation"))
                                    if (!$util.isString(message.collocation))
                                        return "collocation: string expected";
                                if (message.maxDistance != null && message.hasOwnProperty("maxDistance"))
                                    if (!$util.isInteger(message.maxDistance) && !(message.maxDistance && $util.isInteger(message.maxDistance.low) && $util.isInteger(message.maxDistance.high)))
                                        return "maxDistance: integer|Long expected";
                                return null;
                            };
    
                            /**
                             * Creates a PlacementPolicy message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy} PlacementPolicy
                             */
                            PlacementPolicy.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy();
                                if (object.collocation != null)
                                    message.collocation = String(object.collocation);
                                if (object.maxDistance != null)
                                    if ($util.Long)
                                        (message.maxDistance = $util.Long.fromValue(object.maxDistance)).unsigned = false;
                                    else if (typeof object.maxDistance === "string")
                                        message.maxDistance = parseInt(object.maxDistance, 10);
                                    else if (typeof object.maxDistance === "number")
                                        message.maxDistance = object.maxDistance;
                                    else if (typeof object.maxDistance === "object")
                                        message.maxDistance = new $util.LongBits(object.maxDistance.low >>> 0, object.maxDistance.high >>> 0).toNumber();
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a PlacementPolicy message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy} message PlacementPolicy
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            PlacementPolicy.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.collocation = "";
                                    if ($util.Long) {
                                        var long = new $util.Long(0, 0, false);
                                        object.maxDistance = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                    } else
                                        object.maxDistance = options.longs === String ? "0" : 0;
                                }
                                if (message.collocation != null && message.hasOwnProperty("collocation"))
                                    object.collocation = message.collocation;
                                if (message.maxDistance != null && message.hasOwnProperty("maxDistance"))
                                    if (typeof message.maxDistance === "number")
                                        object.maxDistance = options.longs === String ? String(message.maxDistance) : message.maxDistance;
                                    else
                                        object.maxDistance = options.longs === String ? $util.Long.prototype.toString.call(message.maxDistance) : options.longs === Number ? new $util.LongBits(message.maxDistance.low >>> 0, message.maxDistance.high >>> 0).toNumber() : message.maxDistance;
                                return object;
                            };
    
                            /**
                             * Converts this PlacementPolicy to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            PlacementPolicy.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for PlacementPolicy
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            PlacementPolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.AllocationPolicy.PlacementPolicy";
                            };
    
                            return PlacementPolicy;
                        })();
    
                        /**
                         * ProvisioningModel enum.
                         * @name google.cloud.batch.v1alpha.AllocationPolicy.ProvisioningModel
                         * @enum {number}
                         * @property {number} PROVISIONING_MODEL_UNSPECIFIED=0 PROVISIONING_MODEL_UNSPECIFIED value
                         * @property {number} STANDARD=1 STANDARD value
                         * @property {number} SPOT=2 SPOT value
                         * @property {number} PREEMPTIBLE=3 PREEMPTIBLE value
                         */
                        AllocationPolicy.ProvisioningModel = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "PROVISIONING_MODEL_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "STANDARD"] = 1;
                            values[valuesById[2] = "SPOT"] = 2;
                            values[valuesById[3] = "PREEMPTIBLE"] = 3;
                            return values;
                        })();
    
                        return AllocationPolicy;
                    })();
    
                    v1alpha.TaskGroup = (function() {
    
                        /**
                         * Properties of a TaskGroup.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface ITaskGroup
                         * @property {string|null} [name] TaskGroup name
                         * @property {google.cloud.batch.v1alpha.ITaskSpec|null} [taskSpec] TaskGroup taskSpec
                         * @property {number|Long|null} [taskCount] TaskGroup taskCount
                         * @property {number|Long|null} [parallelism] TaskGroup parallelism
                         * @property {google.cloud.batch.v1alpha.TaskGroup.SchedulingPolicy|null} [schedulingPolicy] TaskGroup schedulingPolicy
                         * @property {google.cloud.batch.v1alpha.IAllocationPolicy|null} [allocationPolicy] TaskGroup allocationPolicy
                         * @property {Object.<string,string>|null} [labels] TaskGroup labels
                         * @property {Array.<google.cloud.batch.v1alpha.IEnvironment>|null} [taskEnvironments] TaskGroup taskEnvironments
                         * @property {number|Long|null} [taskCountPerNode] TaskGroup taskCountPerNode
                         * @property {boolean|null} [requireHostsFile] TaskGroup requireHostsFile
                         * @property {boolean|null} [permissiveSsh] TaskGroup permissiveSsh
                         */
    
                        /**
                         * Constructs a new TaskGroup.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a TaskGroup.
                         * @implements ITaskGroup
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.ITaskGroup=} [properties] Properties to set
                         */
                        function TaskGroup(properties) {
                            this.labels = {};
                            this.taskEnvironments = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TaskGroup name.
                         * @member {string} name
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.name = "";
    
                        /**
                         * TaskGroup taskSpec.
                         * @member {google.cloud.batch.v1alpha.ITaskSpec|null|undefined} taskSpec
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.taskSpec = null;
    
                        /**
                         * TaskGroup taskCount.
                         * @member {number|Long} taskCount
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.taskCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * TaskGroup parallelism.
                         * @member {number|Long} parallelism
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.parallelism = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * TaskGroup schedulingPolicy.
                         * @member {google.cloud.batch.v1alpha.TaskGroup.SchedulingPolicy} schedulingPolicy
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.schedulingPolicy = 0;
    
                        /**
                         * TaskGroup allocationPolicy.
                         * @member {google.cloud.batch.v1alpha.IAllocationPolicy|null|undefined} allocationPolicy
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.allocationPolicy = null;
    
                        /**
                         * TaskGroup labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.labels = $util.emptyObject;
    
                        /**
                         * TaskGroup taskEnvironments.
                         * @member {Array.<google.cloud.batch.v1alpha.IEnvironment>} taskEnvironments
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.taskEnvironments = $util.emptyArray;
    
                        /**
                         * TaskGroup taskCountPerNode.
                         * @member {number|Long} taskCountPerNode
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.taskCountPerNode = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * TaskGroup requireHostsFile.
                         * @member {boolean} requireHostsFile
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.requireHostsFile = false;
    
                        /**
                         * TaskGroup permissiveSsh.
                         * @member {boolean} permissiveSsh
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @instance
                         */
                        TaskGroup.prototype.permissiveSsh = false;
    
                        /**
                         * Creates a new TaskGroup instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskGroup=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.TaskGroup} TaskGroup instance
                         */
                        TaskGroup.create = function create(properties) {
                            return new TaskGroup(properties);
                        };
    
                        /**
                         * Encodes the specified TaskGroup message. Does not implicitly {@link google.cloud.batch.v1alpha.TaskGroup.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskGroup} message TaskGroup message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskGroup.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.taskSpec != null && Object.hasOwnProperty.call(message, "taskSpec"))
                                $root.google.cloud.batch.v1alpha.TaskSpec.encode(message.taskSpec, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.taskCount != null && Object.hasOwnProperty.call(message, "taskCount"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.taskCount);
                            if (message.parallelism != null && Object.hasOwnProperty.call(message, "parallelism"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.parallelism);
                            if (message.schedulingPolicy != null && Object.hasOwnProperty.call(message, "schedulingPolicy"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.schedulingPolicy);
                            if (message.allocationPolicy != null && Object.hasOwnProperty.call(message, "allocationPolicy"))
                                $root.google.cloud.batch.v1alpha.AllocationPolicy.encode(message.allocationPolicy, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 8, wireType 2 =*/66).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.taskEnvironments != null && message.taskEnvironments.length)
                                for (var i = 0; i < message.taskEnvironments.length; ++i)
                                    $root.google.cloud.batch.v1alpha.Environment.encode(message.taskEnvironments[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.taskCountPerNode != null && Object.hasOwnProperty.call(message, "taskCountPerNode"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.taskCountPerNode);
                            if (message.requireHostsFile != null && Object.hasOwnProperty.call(message, "requireHostsFile"))
                                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.requireHostsFile);
                            if (message.permissiveSsh != null && Object.hasOwnProperty.call(message, "permissiveSsh"))
                                writer.uint32(/* id 12, wireType 0 =*/96).bool(message.permissiveSsh);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TaskGroup message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.TaskGroup.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskGroup} message TaskGroup message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskGroup.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TaskGroup message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.TaskGroup} TaskGroup
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskGroup.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.TaskGroup(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.taskSpec = $root.google.cloud.batch.v1alpha.TaskSpec.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.taskCount = reader.int64();
                                        break;
                                    }
                                case 5: {
                                        message.parallelism = reader.int64();
                                        break;
                                    }
                                case 6: {
                                        message.schedulingPolicy = reader.int32();
                                        break;
                                    }
                                case 7: {
                                        message.allocationPolicy = $root.google.cloud.batch.v1alpha.AllocationPolicy.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                case 9: {
                                        if (!(message.taskEnvironments && message.taskEnvironments.length))
                                            message.taskEnvironments = [];
                                        message.taskEnvironments.push($root.google.cloud.batch.v1alpha.Environment.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 10: {
                                        message.taskCountPerNode = reader.int64();
                                        break;
                                    }
                                case 11: {
                                        message.requireHostsFile = reader.bool();
                                        break;
                                    }
                                case 12: {
                                        message.permissiveSsh = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TaskGroup message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.TaskGroup} TaskGroup
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskGroup.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TaskGroup message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TaskGroup.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.taskSpec != null && message.hasOwnProperty("taskSpec")) {
                                var error = $root.google.cloud.batch.v1alpha.TaskSpec.verify(message.taskSpec);
                                if (error)
                                    return "taskSpec." + error;
                            }
                            if (message.taskCount != null && message.hasOwnProperty("taskCount"))
                                if (!$util.isInteger(message.taskCount) && !(message.taskCount && $util.isInteger(message.taskCount.low) && $util.isInteger(message.taskCount.high)))
                                    return "taskCount: integer|Long expected";
                            if (message.parallelism != null && message.hasOwnProperty("parallelism"))
                                if (!$util.isInteger(message.parallelism) && !(message.parallelism && $util.isInteger(message.parallelism.low) && $util.isInteger(message.parallelism.high)))
                                    return "parallelism: integer|Long expected";
                            if (message.schedulingPolicy != null && message.hasOwnProperty("schedulingPolicy"))
                                switch (message.schedulingPolicy) {
                                default:
                                    return "schedulingPolicy: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.allocationPolicy != null && message.hasOwnProperty("allocationPolicy")) {
                                var error = $root.google.cloud.batch.v1alpha.AllocationPolicy.verify(message.allocationPolicy);
                                if (error)
                                    return "allocationPolicy." + error;
                            }
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            if (message.taskEnvironments != null && message.hasOwnProperty("taskEnvironments")) {
                                if (!Array.isArray(message.taskEnvironments))
                                    return "taskEnvironments: array expected";
                                for (var i = 0; i < message.taskEnvironments.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.Environment.verify(message.taskEnvironments[i]);
                                    if (error)
                                        return "taskEnvironments." + error;
                                }
                            }
                            if (message.taskCountPerNode != null && message.hasOwnProperty("taskCountPerNode"))
                                if (!$util.isInteger(message.taskCountPerNode) && !(message.taskCountPerNode && $util.isInteger(message.taskCountPerNode.low) && $util.isInteger(message.taskCountPerNode.high)))
                                    return "taskCountPerNode: integer|Long expected";
                            if (message.requireHostsFile != null && message.hasOwnProperty("requireHostsFile"))
                                if (typeof message.requireHostsFile !== "boolean")
                                    return "requireHostsFile: boolean expected";
                            if (message.permissiveSsh != null && message.hasOwnProperty("permissiveSsh"))
                                if (typeof message.permissiveSsh !== "boolean")
                                    return "permissiveSsh: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a TaskGroup message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.TaskGroup} TaskGroup
                         */
                        TaskGroup.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.TaskGroup)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.TaskGroup();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.taskSpec != null) {
                                if (typeof object.taskSpec !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskGroup.taskSpec: object expected");
                                message.taskSpec = $root.google.cloud.batch.v1alpha.TaskSpec.fromObject(object.taskSpec);
                            }
                            if (object.taskCount != null)
                                if ($util.Long)
                                    (message.taskCount = $util.Long.fromValue(object.taskCount)).unsigned = false;
                                else if (typeof object.taskCount === "string")
                                    message.taskCount = parseInt(object.taskCount, 10);
                                else if (typeof object.taskCount === "number")
                                    message.taskCount = object.taskCount;
                                else if (typeof object.taskCount === "object")
                                    message.taskCount = new $util.LongBits(object.taskCount.low >>> 0, object.taskCount.high >>> 0).toNumber();
                            if (object.parallelism != null)
                                if ($util.Long)
                                    (message.parallelism = $util.Long.fromValue(object.parallelism)).unsigned = false;
                                else if (typeof object.parallelism === "string")
                                    message.parallelism = parseInt(object.parallelism, 10);
                                else if (typeof object.parallelism === "number")
                                    message.parallelism = object.parallelism;
                                else if (typeof object.parallelism === "object")
                                    message.parallelism = new $util.LongBits(object.parallelism.low >>> 0, object.parallelism.high >>> 0).toNumber();
                            switch (object.schedulingPolicy) {
                            default:
                                if (typeof object.schedulingPolicy === "number") {
                                    message.schedulingPolicy = object.schedulingPolicy;
                                    break;
                                }
                                break;
                            case "SCHEDULING_POLICY_UNSPECIFIED":
                            case 0:
                                message.schedulingPolicy = 0;
                                break;
                            case "AS_SOON_AS_POSSIBLE":
                            case 1:
                                message.schedulingPolicy = 1;
                                break;
                            case "IN_ORDER":
                            case 2:
                                message.schedulingPolicy = 2;
                                break;
                            }
                            if (object.allocationPolicy != null) {
                                if (typeof object.allocationPolicy !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskGroup.allocationPolicy: object expected");
                                message.allocationPolicy = $root.google.cloud.batch.v1alpha.AllocationPolicy.fromObject(object.allocationPolicy);
                            }
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskGroup.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            if (object.taskEnvironments) {
                                if (!Array.isArray(object.taskEnvironments))
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskGroup.taskEnvironments: array expected");
                                message.taskEnvironments = [];
                                for (var i = 0; i < object.taskEnvironments.length; ++i) {
                                    if (typeof object.taskEnvironments[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.TaskGroup.taskEnvironments: object expected");
                                    message.taskEnvironments[i] = $root.google.cloud.batch.v1alpha.Environment.fromObject(object.taskEnvironments[i]);
                                }
                            }
                            if (object.taskCountPerNode != null)
                                if ($util.Long)
                                    (message.taskCountPerNode = $util.Long.fromValue(object.taskCountPerNode)).unsigned = false;
                                else if (typeof object.taskCountPerNode === "string")
                                    message.taskCountPerNode = parseInt(object.taskCountPerNode, 10);
                                else if (typeof object.taskCountPerNode === "number")
                                    message.taskCountPerNode = object.taskCountPerNode;
                                else if (typeof object.taskCountPerNode === "object")
                                    message.taskCountPerNode = new $util.LongBits(object.taskCountPerNode.low >>> 0, object.taskCountPerNode.high >>> 0).toNumber();
                            if (object.requireHostsFile != null)
                                message.requireHostsFile = Boolean(object.requireHostsFile);
                            if (object.permissiveSsh != null)
                                message.permissiveSsh = Boolean(object.permissiveSsh);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TaskGroup message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @static
                         * @param {google.cloud.batch.v1alpha.TaskGroup} message TaskGroup
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TaskGroup.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.taskEnvironments = [];
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.name = "";
                                object.taskSpec = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.taskCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.taskCount = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.parallelism = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.parallelism = options.longs === String ? "0" : 0;
                                object.schedulingPolicy = options.enums === String ? "SCHEDULING_POLICY_UNSPECIFIED" : 0;
                                object.allocationPolicy = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.taskCountPerNode = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.taskCountPerNode = options.longs === String ? "0" : 0;
                                object.requireHostsFile = false;
                                object.permissiveSsh = false;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.taskSpec != null && message.hasOwnProperty("taskSpec"))
                                object.taskSpec = $root.google.cloud.batch.v1alpha.TaskSpec.toObject(message.taskSpec, options);
                            if (message.taskCount != null && message.hasOwnProperty("taskCount"))
                                if (typeof message.taskCount === "number")
                                    object.taskCount = options.longs === String ? String(message.taskCount) : message.taskCount;
                                else
                                    object.taskCount = options.longs === String ? $util.Long.prototype.toString.call(message.taskCount) : options.longs === Number ? new $util.LongBits(message.taskCount.low >>> 0, message.taskCount.high >>> 0).toNumber() : message.taskCount;
                            if (message.parallelism != null && message.hasOwnProperty("parallelism"))
                                if (typeof message.parallelism === "number")
                                    object.parallelism = options.longs === String ? String(message.parallelism) : message.parallelism;
                                else
                                    object.parallelism = options.longs === String ? $util.Long.prototype.toString.call(message.parallelism) : options.longs === Number ? new $util.LongBits(message.parallelism.low >>> 0, message.parallelism.high >>> 0).toNumber() : message.parallelism;
                            if (message.schedulingPolicy != null && message.hasOwnProperty("schedulingPolicy"))
                                object.schedulingPolicy = options.enums === String ? $root.google.cloud.batch.v1alpha.TaskGroup.SchedulingPolicy[message.schedulingPolicy] === undefined ? message.schedulingPolicy : $root.google.cloud.batch.v1alpha.TaskGroup.SchedulingPolicy[message.schedulingPolicy] : message.schedulingPolicy;
                            if (message.allocationPolicy != null && message.hasOwnProperty("allocationPolicy"))
                                object.allocationPolicy = $root.google.cloud.batch.v1alpha.AllocationPolicy.toObject(message.allocationPolicy, options);
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.taskEnvironments && message.taskEnvironments.length) {
                                object.taskEnvironments = [];
                                for (var j = 0; j < message.taskEnvironments.length; ++j)
                                    object.taskEnvironments[j] = $root.google.cloud.batch.v1alpha.Environment.toObject(message.taskEnvironments[j], options);
                            }
                            if (message.taskCountPerNode != null && message.hasOwnProperty("taskCountPerNode"))
                                if (typeof message.taskCountPerNode === "number")
                                    object.taskCountPerNode = options.longs === String ? String(message.taskCountPerNode) : message.taskCountPerNode;
                                else
                                    object.taskCountPerNode = options.longs === String ? $util.Long.prototype.toString.call(message.taskCountPerNode) : options.longs === Number ? new $util.LongBits(message.taskCountPerNode.low >>> 0, message.taskCountPerNode.high >>> 0).toNumber() : message.taskCountPerNode;
                            if (message.requireHostsFile != null && message.hasOwnProperty("requireHostsFile"))
                                object.requireHostsFile = message.requireHostsFile;
                            if (message.permissiveSsh != null && message.hasOwnProperty("permissiveSsh"))
                                object.permissiveSsh = message.permissiveSsh;
                            return object;
                        };
    
                        /**
                         * Converts this TaskGroup to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TaskGroup.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TaskGroup
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.TaskGroup
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TaskGroup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.TaskGroup";
                        };
    
                        /**
                         * SchedulingPolicy enum.
                         * @name google.cloud.batch.v1alpha.TaskGroup.SchedulingPolicy
                         * @enum {number}
                         * @property {number} SCHEDULING_POLICY_UNSPECIFIED=0 SCHEDULING_POLICY_UNSPECIFIED value
                         * @property {number} AS_SOON_AS_POSSIBLE=1 AS_SOON_AS_POSSIBLE value
                         * @property {number} IN_ORDER=2 IN_ORDER value
                         */
                        TaskGroup.SchedulingPolicy = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "SCHEDULING_POLICY_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "AS_SOON_AS_POSSIBLE"] = 1;
                            values[valuesById[2] = "IN_ORDER"] = 2;
                            return values;
                        })();
    
                        return TaskGroup;
                    })();
    
                    v1alpha.ServiceAccount = (function() {
    
                        /**
                         * Properties of a ServiceAccount.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IServiceAccount
                         * @property {string|null} [email] ServiceAccount email
                         * @property {Array.<string>|null} [scopes] ServiceAccount scopes
                         */
    
                        /**
                         * Constructs a new ServiceAccount.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a ServiceAccount.
                         * @implements IServiceAccount
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IServiceAccount=} [properties] Properties to set
                         */
                        function ServiceAccount(properties) {
                            this.scopes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ServiceAccount email.
                         * @member {string} email
                         * @memberof google.cloud.batch.v1alpha.ServiceAccount
                         * @instance
                         */
                        ServiceAccount.prototype.email = "";
    
                        /**
                         * ServiceAccount scopes.
                         * @member {Array.<string>} scopes
                         * @memberof google.cloud.batch.v1alpha.ServiceAccount
                         * @instance
                         */
                        ServiceAccount.prototype.scopes = $util.emptyArray;
    
                        /**
                         * Creates a new ServiceAccount instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.ServiceAccount
                         * @static
                         * @param {google.cloud.batch.v1alpha.IServiceAccount=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.ServiceAccount} ServiceAccount instance
                         */
                        ServiceAccount.create = function create(properties) {
                            return new ServiceAccount(properties);
                        };
    
                        /**
                         * Encodes the specified ServiceAccount message. Does not implicitly {@link google.cloud.batch.v1alpha.ServiceAccount.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.ServiceAccount
                         * @static
                         * @param {google.cloud.batch.v1alpha.IServiceAccount} message ServiceAccount message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ServiceAccount.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.email != null && Object.hasOwnProperty.call(message, "email"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.email);
                            if (message.scopes != null && message.scopes.length)
                                for (var i = 0; i < message.scopes.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.scopes[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ServiceAccount message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.ServiceAccount.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ServiceAccount
                         * @static
                         * @param {google.cloud.batch.v1alpha.IServiceAccount} message ServiceAccount message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ServiceAccount.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ServiceAccount message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.ServiceAccount
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.ServiceAccount} ServiceAccount
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ServiceAccount.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.ServiceAccount();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.email = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.scopes && message.scopes.length))
                                            message.scopes = [];
                                        message.scopes.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ServiceAccount message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ServiceAccount
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.ServiceAccount} ServiceAccount
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ServiceAccount.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ServiceAccount message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.ServiceAccount
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ServiceAccount.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.email != null && message.hasOwnProperty("email"))
                                if (!$util.isString(message.email))
                                    return "email: string expected";
                            if (message.scopes != null && message.hasOwnProperty("scopes")) {
                                if (!Array.isArray(message.scopes))
                                    return "scopes: array expected";
                                for (var i = 0; i < message.scopes.length; ++i)
                                    if (!$util.isString(message.scopes[i]))
                                        return "scopes: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ServiceAccount message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.ServiceAccount
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.ServiceAccount} ServiceAccount
                         */
                        ServiceAccount.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.ServiceAccount)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.ServiceAccount();
                            if (object.email != null)
                                message.email = String(object.email);
                            if (object.scopes) {
                                if (!Array.isArray(object.scopes))
                                    throw TypeError(".google.cloud.batch.v1alpha.ServiceAccount.scopes: array expected");
                                message.scopes = [];
                                for (var i = 0; i < object.scopes.length; ++i)
                                    message.scopes[i] = String(object.scopes[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ServiceAccount message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.ServiceAccount
                         * @static
                         * @param {google.cloud.batch.v1alpha.ServiceAccount} message ServiceAccount
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ServiceAccount.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.scopes = [];
                            if (options.defaults)
                                object.email = "";
                            if (message.email != null && message.hasOwnProperty("email"))
                                object.email = message.email;
                            if (message.scopes && message.scopes.length) {
                                object.scopes = [];
                                for (var j = 0; j < message.scopes.length; ++j)
                                    object.scopes[j] = message.scopes[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ServiceAccount to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.ServiceAccount
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ServiceAccount.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ServiceAccount
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.ServiceAccount
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ServiceAccount.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.ServiceAccount";
                        };
    
                        return ServiceAccount;
                    })();
    
                    v1alpha.ComputeResource = (function() {
    
                        /**
                         * Properties of a ComputeResource.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IComputeResource
                         * @property {number|Long|null} [cpuMilli] ComputeResource cpuMilli
                         * @property {number|Long|null} [memoryMib] ComputeResource memoryMib
                         * @property {number|Long|null} [gpuCount] ComputeResource gpuCount
                         * @property {number|Long|null} [bootDiskMib] ComputeResource bootDiskMib
                         */
    
                        /**
                         * Constructs a new ComputeResource.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a ComputeResource.
                         * @implements IComputeResource
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IComputeResource=} [properties] Properties to set
                         */
                        function ComputeResource(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ComputeResource cpuMilli.
                         * @member {number|Long} cpuMilli
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @instance
                         */
                        ComputeResource.prototype.cpuMilli = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * ComputeResource memoryMib.
                         * @member {number|Long} memoryMib
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @instance
                         */
                        ComputeResource.prototype.memoryMib = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * ComputeResource gpuCount.
                         * @member {number|Long} gpuCount
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @instance
                         */
                        ComputeResource.prototype.gpuCount = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * ComputeResource bootDiskMib.
                         * @member {number|Long} bootDiskMib
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @instance
                         */
                        ComputeResource.prototype.bootDiskMib = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                        /**
                         * Creates a new ComputeResource instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @static
                         * @param {google.cloud.batch.v1alpha.IComputeResource=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.ComputeResource} ComputeResource instance
                         */
                        ComputeResource.create = function create(properties) {
                            return new ComputeResource(properties);
                        };
    
                        /**
                         * Encodes the specified ComputeResource message. Does not implicitly {@link google.cloud.batch.v1alpha.ComputeResource.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @static
                         * @param {google.cloud.batch.v1alpha.IComputeResource} message ComputeResource message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ComputeResource.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.cpuMilli != null && Object.hasOwnProperty.call(message, "cpuMilli"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.cpuMilli);
                            if (message.memoryMib != null && Object.hasOwnProperty.call(message, "memoryMib"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.memoryMib);
                            if (message.gpuCount != null && Object.hasOwnProperty.call(message, "gpuCount"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.gpuCount);
                            if (message.bootDiskMib != null && Object.hasOwnProperty.call(message, "bootDiskMib"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.bootDiskMib);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ComputeResource message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.ComputeResource.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @static
                         * @param {google.cloud.batch.v1alpha.IComputeResource} message ComputeResource message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ComputeResource.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ComputeResource message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.ComputeResource} ComputeResource
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ComputeResource.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.ComputeResource();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.cpuMilli = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.memoryMib = reader.int64();
                                        break;
                                    }
                                case 3: {
                                        message.gpuCount = reader.int64();
                                        break;
                                    }
                                case 4: {
                                        message.bootDiskMib = reader.int64();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ComputeResource message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.ComputeResource} ComputeResource
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ComputeResource.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ComputeResource message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ComputeResource.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.cpuMilli != null && message.hasOwnProperty("cpuMilli"))
                                if (!$util.isInteger(message.cpuMilli) && !(message.cpuMilli && $util.isInteger(message.cpuMilli.low) && $util.isInteger(message.cpuMilli.high)))
                                    return "cpuMilli: integer|Long expected";
                            if (message.memoryMib != null && message.hasOwnProperty("memoryMib"))
                                if (!$util.isInteger(message.memoryMib) && !(message.memoryMib && $util.isInteger(message.memoryMib.low) && $util.isInteger(message.memoryMib.high)))
                                    return "memoryMib: integer|Long expected";
                            if (message.gpuCount != null && message.hasOwnProperty("gpuCount"))
                                if (!$util.isInteger(message.gpuCount) && !(message.gpuCount && $util.isInteger(message.gpuCount.low) && $util.isInteger(message.gpuCount.high)))
                                    return "gpuCount: integer|Long expected";
                            if (message.bootDiskMib != null && message.hasOwnProperty("bootDiskMib"))
                                if (!$util.isInteger(message.bootDiskMib) && !(message.bootDiskMib && $util.isInteger(message.bootDiskMib.low) && $util.isInteger(message.bootDiskMib.high)))
                                    return "bootDiskMib: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a ComputeResource message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.ComputeResource} ComputeResource
                         */
                        ComputeResource.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.ComputeResource)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.ComputeResource();
                            if (object.cpuMilli != null)
                                if ($util.Long)
                                    (message.cpuMilli = $util.Long.fromValue(object.cpuMilli)).unsigned = false;
                                else if (typeof object.cpuMilli === "string")
                                    message.cpuMilli = parseInt(object.cpuMilli, 10);
                                else if (typeof object.cpuMilli === "number")
                                    message.cpuMilli = object.cpuMilli;
                                else if (typeof object.cpuMilli === "object")
                                    message.cpuMilli = new $util.LongBits(object.cpuMilli.low >>> 0, object.cpuMilli.high >>> 0).toNumber();
                            if (object.memoryMib != null)
                                if ($util.Long)
                                    (message.memoryMib = $util.Long.fromValue(object.memoryMib)).unsigned = false;
                                else if (typeof object.memoryMib === "string")
                                    message.memoryMib = parseInt(object.memoryMib, 10);
                                else if (typeof object.memoryMib === "number")
                                    message.memoryMib = object.memoryMib;
                                else if (typeof object.memoryMib === "object")
                                    message.memoryMib = new $util.LongBits(object.memoryMib.low >>> 0, object.memoryMib.high >>> 0).toNumber();
                            if (object.gpuCount != null)
                                if ($util.Long)
                                    (message.gpuCount = $util.Long.fromValue(object.gpuCount)).unsigned = false;
                                else if (typeof object.gpuCount === "string")
                                    message.gpuCount = parseInt(object.gpuCount, 10);
                                else if (typeof object.gpuCount === "number")
                                    message.gpuCount = object.gpuCount;
                                else if (typeof object.gpuCount === "object")
                                    message.gpuCount = new $util.LongBits(object.gpuCount.low >>> 0, object.gpuCount.high >>> 0).toNumber();
                            if (object.bootDiskMib != null)
                                if ($util.Long)
                                    (message.bootDiskMib = $util.Long.fromValue(object.bootDiskMib)).unsigned = false;
                                else if (typeof object.bootDiskMib === "string")
                                    message.bootDiskMib = parseInt(object.bootDiskMib, 10);
                                else if (typeof object.bootDiskMib === "number")
                                    message.bootDiskMib = object.bootDiskMib;
                                else if (typeof object.bootDiskMib === "object")
                                    message.bootDiskMib = new $util.LongBits(object.bootDiskMib.low >>> 0, object.bootDiskMib.high >>> 0).toNumber();
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ComputeResource message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @static
                         * @param {google.cloud.batch.v1alpha.ComputeResource} message ComputeResource
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ComputeResource.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.cpuMilli = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.cpuMilli = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.memoryMib = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.memoryMib = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.gpuCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.gpuCount = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, false);
                                    object.bootDiskMib = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.bootDiskMib = options.longs === String ? "0" : 0;
                            }
                            if (message.cpuMilli != null && message.hasOwnProperty("cpuMilli"))
                                if (typeof message.cpuMilli === "number")
                                    object.cpuMilli = options.longs === String ? String(message.cpuMilli) : message.cpuMilli;
                                else
                                    object.cpuMilli = options.longs === String ? $util.Long.prototype.toString.call(message.cpuMilli) : options.longs === Number ? new $util.LongBits(message.cpuMilli.low >>> 0, message.cpuMilli.high >>> 0).toNumber() : message.cpuMilli;
                            if (message.memoryMib != null && message.hasOwnProperty("memoryMib"))
                                if (typeof message.memoryMib === "number")
                                    object.memoryMib = options.longs === String ? String(message.memoryMib) : message.memoryMib;
                                else
                                    object.memoryMib = options.longs === String ? $util.Long.prototype.toString.call(message.memoryMib) : options.longs === Number ? new $util.LongBits(message.memoryMib.low >>> 0, message.memoryMib.high >>> 0).toNumber() : message.memoryMib;
                            if (message.gpuCount != null && message.hasOwnProperty("gpuCount"))
                                if (typeof message.gpuCount === "number")
                                    object.gpuCount = options.longs === String ? String(message.gpuCount) : message.gpuCount;
                                else
                                    object.gpuCount = options.longs === String ? $util.Long.prototype.toString.call(message.gpuCount) : options.longs === Number ? new $util.LongBits(message.gpuCount.low >>> 0, message.gpuCount.high >>> 0).toNumber() : message.gpuCount;
                            if (message.bootDiskMib != null && message.hasOwnProperty("bootDiskMib"))
                                if (typeof message.bootDiskMib === "number")
                                    object.bootDiskMib = options.longs === String ? String(message.bootDiskMib) : message.bootDiskMib;
                                else
                                    object.bootDiskMib = options.longs === String ? $util.Long.prototype.toString.call(message.bootDiskMib) : options.longs === Number ? new $util.LongBits(message.bootDiskMib.low >>> 0, message.bootDiskMib.high >>> 0).toNumber() : message.bootDiskMib;
                            return object;
                        };
    
                        /**
                         * Converts this ComputeResource to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ComputeResource.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for ComputeResource
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.ComputeResource
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ComputeResource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.ComputeResource";
                        };
    
                        return ComputeResource;
                    })();
    
                    v1alpha.StatusEvent = (function() {
    
                        /**
                         * Properties of a StatusEvent.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IStatusEvent
                         * @property {string|null} [type] StatusEvent type
                         * @property {string|null} [description] StatusEvent description
                         * @property {google.protobuf.ITimestamp|null} [eventTime] StatusEvent eventTime
                         * @property {google.cloud.batch.v1alpha.ITaskExecution|null} [taskExecution] StatusEvent taskExecution
                         * @property {google.cloud.batch.v1alpha.TaskStatus.State|null} [taskState] StatusEvent taskState
                         */
    
                        /**
                         * Constructs a new StatusEvent.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a StatusEvent.
                         * @implements IStatusEvent
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IStatusEvent=} [properties] Properties to set
                         */
                        function StatusEvent(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * StatusEvent type.
                         * @member {string} type
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @instance
                         */
                        StatusEvent.prototype.type = "";
    
                        /**
                         * StatusEvent description.
                         * @member {string} description
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @instance
                         */
                        StatusEvent.prototype.description = "";
    
                        /**
                         * StatusEvent eventTime.
                         * @member {google.protobuf.ITimestamp|null|undefined} eventTime
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @instance
                         */
                        StatusEvent.prototype.eventTime = null;
    
                        /**
                         * StatusEvent taskExecution.
                         * @member {google.cloud.batch.v1alpha.ITaskExecution|null|undefined} taskExecution
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @instance
                         */
                        StatusEvent.prototype.taskExecution = null;
    
                        /**
                         * StatusEvent taskState.
                         * @member {google.cloud.batch.v1alpha.TaskStatus.State} taskState
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @instance
                         */
                        StatusEvent.prototype.taskState = 0;
    
                        /**
                         * Creates a new StatusEvent instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @static
                         * @param {google.cloud.batch.v1alpha.IStatusEvent=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.StatusEvent} StatusEvent instance
                         */
                        StatusEvent.create = function create(properties) {
                            return new StatusEvent(properties);
                        };
    
                        /**
                         * Encodes the specified StatusEvent message. Does not implicitly {@link google.cloud.batch.v1alpha.StatusEvent.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @static
                         * @param {google.cloud.batch.v1alpha.IStatusEvent} message StatusEvent message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StatusEvent.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.description);
                            if (message.eventTime != null && Object.hasOwnProperty.call(message, "eventTime"))
                                $root.google.protobuf.Timestamp.encode(message.eventTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);
                            if (message.taskExecution != null && Object.hasOwnProperty.call(message, "taskExecution"))
                                $root.google.cloud.batch.v1alpha.TaskExecution.encode(message.taskExecution, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.taskState != null && Object.hasOwnProperty.call(message, "taskState"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.taskState);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified StatusEvent message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.StatusEvent.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @static
                         * @param {google.cloud.batch.v1alpha.IStatusEvent} message StatusEvent message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        StatusEvent.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a StatusEvent message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.StatusEvent} StatusEvent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StatusEvent.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.StatusEvent();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 3: {
                                        message.type = reader.string();
                                        break;
                                    }
                                case 1: {
                                        message.description = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.eventTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.taskExecution = $root.google.cloud.batch.v1alpha.TaskExecution.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.taskState = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a StatusEvent message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.StatusEvent} StatusEvent
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        StatusEvent.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a StatusEvent message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        StatusEvent.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isString(message.type))
                                    return "type: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.eventTime != null && message.hasOwnProperty("eventTime")) {
                                var error = $root.google.protobuf.Timestamp.verify(message.eventTime);
                                if (error)
                                    return "eventTime." + error;
                            }
                            if (message.taskExecution != null && message.hasOwnProperty("taskExecution")) {
                                var error = $root.google.cloud.batch.v1alpha.TaskExecution.verify(message.taskExecution);
                                if (error)
                                    return "taskExecution." + error;
                            }
                            if (message.taskState != null && message.hasOwnProperty("taskState"))
                                switch (message.taskState) {
                                default:
                                    return "taskState: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            return null;
                        };
    
                        /**
                         * Creates a StatusEvent message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.StatusEvent} StatusEvent
                         */
                        StatusEvent.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.StatusEvent)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.StatusEvent();
                            if (object.type != null)
                                message.type = String(object.type);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.eventTime != null) {
                                if (typeof object.eventTime !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.StatusEvent.eventTime: object expected");
                                message.eventTime = $root.google.protobuf.Timestamp.fromObject(object.eventTime);
                            }
                            if (object.taskExecution != null) {
                                if (typeof object.taskExecution !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.StatusEvent.taskExecution: object expected");
                                message.taskExecution = $root.google.cloud.batch.v1alpha.TaskExecution.fromObject(object.taskExecution);
                            }
                            switch (object.taskState) {
                            default:
                                if (typeof object.taskState === "number") {
                                    message.taskState = object.taskState;
                                    break;
                                }
                                break;
                            case "STATE_UNSPECIFIED":
                            case 0:
                                message.taskState = 0;
                                break;
                            case "PENDING":
                            case 1:
                                message.taskState = 1;
                                break;
                            case "ASSIGNED":
                            case 2:
                                message.taskState = 2;
                                break;
                            case "RUNNING":
                            case 3:
                                message.taskState = 3;
                                break;
                            case "FAILED":
                            case 4:
                                message.taskState = 4;
                                break;
                            case "SUCCEEDED":
                            case 5:
                                message.taskState = 5;
                                break;
                            case "UNEXECUTED":
                            case 6:
                                message.taskState = 6;
                                break;
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a StatusEvent message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @static
                         * @param {google.cloud.batch.v1alpha.StatusEvent} message StatusEvent
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        StatusEvent.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.description = "";
                                object.eventTime = null;
                                object.type = "";
                                object.taskExecution = null;
                                object.taskState = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                            }
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.eventTime != null && message.hasOwnProperty("eventTime"))
                                object.eventTime = $root.google.protobuf.Timestamp.toObject(message.eventTime, options);
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.taskExecution != null && message.hasOwnProperty("taskExecution"))
                                object.taskExecution = $root.google.cloud.batch.v1alpha.TaskExecution.toObject(message.taskExecution, options);
                            if (message.taskState != null && message.hasOwnProperty("taskState"))
                                object.taskState = options.enums === String ? $root.google.cloud.batch.v1alpha.TaskStatus.State[message.taskState] === undefined ? message.taskState : $root.google.cloud.batch.v1alpha.TaskStatus.State[message.taskState] : message.taskState;
                            return object;
                        };
    
                        /**
                         * Converts this StatusEvent to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        StatusEvent.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for StatusEvent
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.StatusEvent
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        StatusEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.StatusEvent";
                        };
    
                        return StatusEvent;
                    })();
    
                    v1alpha.TaskExecution = (function() {
    
                        /**
                         * Properties of a TaskExecution.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface ITaskExecution
                         * @property {number|null} [exitCode] TaskExecution exitCode
                         * @property {string|null} [stderrSnippet] TaskExecution stderrSnippet
                         */
    
                        /**
                         * Constructs a new TaskExecution.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a TaskExecution.
                         * @implements ITaskExecution
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.ITaskExecution=} [properties] Properties to set
                         */
                        function TaskExecution(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TaskExecution exitCode.
                         * @member {number} exitCode
                         * @memberof google.cloud.batch.v1alpha.TaskExecution
                         * @instance
                         */
                        TaskExecution.prototype.exitCode = 0;
    
                        /**
                         * TaskExecution stderrSnippet.
                         * @member {string} stderrSnippet
                         * @memberof google.cloud.batch.v1alpha.TaskExecution
                         * @instance
                         */
                        TaskExecution.prototype.stderrSnippet = "";
    
                        /**
                         * Creates a new TaskExecution instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.TaskExecution
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskExecution=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.TaskExecution} TaskExecution instance
                         */
                        TaskExecution.create = function create(properties) {
                            return new TaskExecution(properties);
                        };
    
                        /**
                         * Encodes the specified TaskExecution message. Does not implicitly {@link google.cloud.batch.v1alpha.TaskExecution.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.TaskExecution
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskExecution} message TaskExecution message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskExecution.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.exitCode != null && Object.hasOwnProperty.call(message, "exitCode"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.exitCode);
                            if (message.stderrSnippet != null && Object.hasOwnProperty.call(message, "stderrSnippet"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.stderrSnippet);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TaskExecution message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.TaskExecution.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.TaskExecution
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskExecution} message TaskExecution message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskExecution.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TaskExecution message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.TaskExecution
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.TaskExecution} TaskExecution
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskExecution.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.TaskExecution();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.exitCode = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.stderrSnippet = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TaskExecution message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.TaskExecution
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.TaskExecution} TaskExecution
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskExecution.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TaskExecution message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.TaskExecution
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TaskExecution.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.exitCode != null && message.hasOwnProperty("exitCode"))
                                if (!$util.isInteger(message.exitCode))
                                    return "exitCode: integer expected";
                            if (message.stderrSnippet != null && message.hasOwnProperty("stderrSnippet"))
                                if (!$util.isString(message.stderrSnippet))
                                    return "stderrSnippet: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a TaskExecution message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.TaskExecution
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.TaskExecution} TaskExecution
                         */
                        TaskExecution.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.TaskExecution)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.TaskExecution();
                            if (object.exitCode != null)
                                message.exitCode = object.exitCode | 0;
                            if (object.stderrSnippet != null)
                                message.stderrSnippet = String(object.stderrSnippet);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TaskExecution message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.TaskExecution
                         * @static
                         * @param {google.cloud.batch.v1alpha.TaskExecution} message TaskExecution
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TaskExecution.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.exitCode = 0;
                                object.stderrSnippet = "";
                            }
                            if (message.exitCode != null && message.hasOwnProperty("exitCode"))
                                object.exitCode = message.exitCode;
                            if (message.stderrSnippet != null && message.hasOwnProperty("stderrSnippet"))
                                object.stderrSnippet = message.stderrSnippet;
                            return object;
                        };
    
                        /**
                         * Converts this TaskExecution to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.TaskExecution
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TaskExecution.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TaskExecution
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.TaskExecution
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TaskExecution.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.TaskExecution";
                        };
    
                        return TaskExecution;
                    })();
    
                    v1alpha.TaskStatus = (function() {
    
                        /**
                         * Properties of a TaskStatus.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface ITaskStatus
                         * @property {google.cloud.batch.v1alpha.TaskStatus.State|null} [state] TaskStatus state
                         * @property {Array.<google.cloud.batch.v1alpha.IStatusEvent>|null} [statusEvents] TaskStatus statusEvents
                         * @property {google.cloud.batch.v1alpha.ITaskResourceUsage|null} [resourceUsage] TaskStatus resourceUsage
                         */
    
                        /**
                         * Constructs a new TaskStatus.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a TaskStatus.
                         * @implements ITaskStatus
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.ITaskStatus=} [properties] Properties to set
                         */
                        function TaskStatus(properties) {
                            this.statusEvents = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TaskStatus state.
                         * @member {google.cloud.batch.v1alpha.TaskStatus.State} state
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @instance
                         */
                        TaskStatus.prototype.state = 0;
    
                        /**
                         * TaskStatus statusEvents.
                         * @member {Array.<google.cloud.batch.v1alpha.IStatusEvent>} statusEvents
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @instance
                         */
                        TaskStatus.prototype.statusEvents = $util.emptyArray;
    
                        /**
                         * TaskStatus resourceUsage.
                         * @member {google.cloud.batch.v1alpha.ITaskResourceUsage|null|undefined} resourceUsage
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @instance
                         */
                        TaskStatus.prototype.resourceUsage = null;
    
                        /**
                         * Creates a new TaskStatus instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskStatus=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.TaskStatus} TaskStatus instance
                         */
                        TaskStatus.create = function create(properties) {
                            return new TaskStatus(properties);
                        };
    
                        /**
                         * Encodes the specified TaskStatus message. Does not implicitly {@link google.cloud.batch.v1alpha.TaskStatus.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskStatus} message TaskStatus message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskStatus.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                            if (message.statusEvents != null && message.statusEvents.length)
                                for (var i = 0; i < message.statusEvents.length; ++i)
                                    $root.google.cloud.batch.v1alpha.StatusEvent.encode(message.statusEvents[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.resourceUsage != null && Object.hasOwnProperty.call(message, "resourceUsage"))
                                $root.google.cloud.batch.v1alpha.TaskResourceUsage.encode(message.resourceUsage, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TaskStatus message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.TaskStatus.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskStatus} message TaskStatus message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskStatus.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TaskStatus message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.TaskStatus} TaskStatus
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskStatus.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.TaskStatus();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.state = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.statusEvents && message.statusEvents.length))
                                            message.statusEvents = [];
                                        message.statusEvents.push($root.google.cloud.batch.v1alpha.StatusEvent.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        message.resourceUsage = $root.google.cloud.batch.v1alpha.TaskResourceUsage.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TaskStatus message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.TaskStatus} TaskStatus
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskStatus.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TaskStatus message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TaskStatus.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                switch (message.state) {
                                default:
                                    return "state: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                case 6:
                                    break;
                                }
                            if (message.statusEvents != null && message.hasOwnProperty("statusEvents")) {
                                if (!Array.isArray(message.statusEvents))
                                    return "statusEvents: array expected";
                                for (var i = 0; i < message.statusEvents.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.StatusEvent.verify(message.statusEvents[i]);
                                    if (error)
                                        return "statusEvents." + error;
                                }
                            }
                            if (message.resourceUsage != null && message.hasOwnProperty("resourceUsage")) {
                                var error = $root.google.cloud.batch.v1alpha.TaskResourceUsage.verify(message.resourceUsage);
                                if (error)
                                    return "resourceUsage." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TaskStatus message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.TaskStatus} TaskStatus
                         */
                        TaskStatus.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.TaskStatus)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.TaskStatus();
                            switch (object.state) {
                            default:
                                if (typeof object.state === "number") {
                                    message.state = object.state;
                                    break;
                                }
                                break;
                            case "STATE_UNSPECIFIED":
                            case 0:
                                message.state = 0;
                                break;
                            case "PENDING":
                            case 1:
                                message.state = 1;
                                break;
                            case "ASSIGNED":
                            case 2:
                                message.state = 2;
                                break;
                            case "RUNNING":
                            case 3:
                                message.state = 3;
                                break;
                            case "FAILED":
                            case 4:
                                message.state = 4;
                                break;
                            case "SUCCEEDED":
                            case 5:
                                message.state = 5;
                                break;
                            case "UNEXECUTED":
                            case 6:
                                message.state = 6;
                                break;
                            }
                            if (object.statusEvents) {
                                if (!Array.isArray(object.statusEvents))
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskStatus.statusEvents: array expected");
                                message.statusEvents = [];
                                for (var i = 0; i < object.statusEvents.length; ++i) {
                                    if (typeof object.statusEvents[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.TaskStatus.statusEvents: object expected");
                                    message.statusEvents[i] = $root.google.cloud.batch.v1alpha.StatusEvent.fromObject(object.statusEvents[i]);
                                }
                            }
                            if (object.resourceUsage != null) {
                                if (typeof object.resourceUsage !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskStatus.resourceUsage: object expected");
                                message.resourceUsage = $root.google.cloud.batch.v1alpha.TaskResourceUsage.fromObject(object.resourceUsage);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TaskStatus message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @static
                         * @param {google.cloud.batch.v1alpha.TaskStatus} message TaskStatus
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TaskStatus.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.statusEvents = [];
                            if (options.defaults) {
                                object.state = options.enums === String ? "STATE_UNSPECIFIED" : 0;
                                object.resourceUsage = null;
                            }
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = options.enums === String ? $root.google.cloud.batch.v1alpha.TaskStatus.State[message.state] === undefined ? message.state : $root.google.cloud.batch.v1alpha.TaskStatus.State[message.state] : message.state;
                            if (message.statusEvents && message.statusEvents.length) {
                                object.statusEvents = [];
                                for (var j = 0; j < message.statusEvents.length; ++j)
                                    object.statusEvents[j] = $root.google.cloud.batch.v1alpha.StatusEvent.toObject(message.statusEvents[j], options);
                            }
                            if (message.resourceUsage != null && message.hasOwnProperty("resourceUsage"))
                                object.resourceUsage = $root.google.cloud.batch.v1alpha.TaskResourceUsage.toObject(message.resourceUsage, options);
                            return object;
                        };
    
                        /**
                         * Converts this TaskStatus to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TaskStatus.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TaskStatus
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.TaskStatus
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TaskStatus.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.TaskStatus";
                        };
    
                        /**
                         * State enum.
                         * @name google.cloud.batch.v1alpha.TaskStatus.State
                         * @enum {number}
                         * @property {number} STATE_UNSPECIFIED=0 STATE_UNSPECIFIED value
                         * @property {number} PENDING=1 PENDING value
                         * @property {number} ASSIGNED=2 ASSIGNED value
                         * @property {number} RUNNING=3 RUNNING value
                         * @property {number} FAILED=4 FAILED value
                         * @property {number} SUCCEEDED=5 SUCCEEDED value
                         * @property {number} UNEXECUTED=6 UNEXECUTED value
                         */
                        TaskStatus.State = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "STATE_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "PENDING"] = 1;
                            values[valuesById[2] = "ASSIGNED"] = 2;
                            values[valuesById[3] = "RUNNING"] = 3;
                            values[valuesById[4] = "FAILED"] = 4;
                            values[valuesById[5] = "SUCCEEDED"] = 5;
                            values[valuesById[6] = "UNEXECUTED"] = 6;
                            return values;
                        })();
    
                        return TaskStatus;
                    })();
    
                    v1alpha.TaskResourceUsage = (function() {
    
                        /**
                         * Properties of a TaskResourceUsage.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface ITaskResourceUsage
                         * @property {number|null} [coreHours] TaskResourceUsage coreHours
                         */
    
                        /**
                         * Constructs a new TaskResourceUsage.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a TaskResourceUsage.
                         * @implements ITaskResourceUsage
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.ITaskResourceUsage=} [properties] Properties to set
                         */
                        function TaskResourceUsage(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TaskResourceUsage coreHours.
                         * @member {number} coreHours
                         * @memberof google.cloud.batch.v1alpha.TaskResourceUsage
                         * @instance
                         */
                        TaskResourceUsage.prototype.coreHours = 0;
    
                        /**
                         * Creates a new TaskResourceUsage instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.TaskResourceUsage
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskResourceUsage=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.TaskResourceUsage} TaskResourceUsage instance
                         */
                        TaskResourceUsage.create = function create(properties) {
                            return new TaskResourceUsage(properties);
                        };
    
                        /**
                         * Encodes the specified TaskResourceUsage message. Does not implicitly {@link google.cloud.batch.v1alpha.TaskResourceUsage.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.TaskResourceUsage
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskResourceUsage} message TaskResourceUsage message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskResourceUsage.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.coreHours != null && Object.hasOwnProperty.call(message, "coreHours"))
                                writer.uint32(/* id 1, wireType 1 =*/9).double(message.coreHours);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TaskResourceUsage message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.TaskResourceUsage.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.TaskResourceUsage
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskResourceUsage} message TaskResourceUsage message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskResourceUsage.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TaskResourceUsage message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.TaskResourceUsage
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.TaskResourceUsage} TaskResourceUsage
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskResourceUsage.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.TaskResourceUsage();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.coreHours = reader.double();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TaskResourceUsage message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.TaskResourceUsage
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.TaskResourceUsage} TaskResourceUsage
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskResourceUsage.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TaskResourceUsage message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.TaskResourceUsage
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TaskResourceUsage.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.coreHours != null && message.hasOwnProperty("coreHours"))
                                if (typeof message.coreHours !== "number")
                                    return "coreHours: number expected";
                            return null;
                        };
    
                        /**
                         * Creates a TaskResourceUsage message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.TaskResourceUsage
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.TaskResourceUsage} TaskResourceUsage
                         */
                        TaskResourceUsage.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.TaskResourceUsage)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.TaskResourceUsage();
                            if (object.coreHours != null)
                                message.coreHours = Number(object.coreHours);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TaskResourceUsage message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.TaskResourceUsage
                         * @static
                         * @param {google.cloud.batch.v1alpha.TaskResourceUsage} message TaskResourceUsage
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TaskResourceUsage.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.coreHours = 0;
                            if (message.coreHours != null && message.hasOwnProperty("coreHours"))
                                object.coreHours = options.json && !isFinite(message.coreHours) ? String(message.coreHours) : message.coreHours;
                            return object;
                        };
    
                        /**
                         * Converts this TaskResourceUsage to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.TaskResourceUsage
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TaskResourceUsage.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TaskResourceUsage
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.TaskResourceUsage
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TaskResourceUsage.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.TaskResourceUsage";
                        };
    
                        return TaskResourceUsage;
                    })();
    
                    v1alpha.Runnable = (function() {
    
                        /**
                         * Properties of a Runnable.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IRunnable
                         * @property {google.cloud.batch.v1alpha.Runnable.IContainer|null} [container] Runnable container
                         * @property {google.cloud.batch.v1alpha.Runnable.IScript|null} [script] Runnable script
                         * @property {google.cloud.batch.v1alpha.Runnable.IBarrier|null} [barrier] Runnable barrier
                         * @property {string|null} [displayName] Runnable displayName
                         * @property {boolean|null} [ignoreExitStatus] Runnable ignoreExitStatus
                         * @property {boolean|null} [background] Runnable background
                         * @property {boolean|null} [alwaysRun] Runnable alwaysRun
                         * @property {google.cloud.batch.v1alpha.IEnvironment|null} [environment] Runnable environment
                         * @property {google.protobuf.IDuration|null} [timeout] Runnable timeout
                         * @property {Object.<string,string>|null} [labels] Runnable labels
                         */
    
                        /**
                         * Constructs a new Runnable.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a Runnable.
                         * @implements IRunnable
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IRunnable=} [properties] Properties to set
                         */
                        function Runnable(properties) {
                            this.labels = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Runnable container.
                         * @member {google.cloud.batch.v1alpha.Runnable.IContainer|null|undefined} container
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @instance
                         */
                        Runnable.prototype.container = null;
    
                        /**
                         * Runnable script.
                         * @member {google.cloud.batch.v1alpha.Runnable.IScript|null|undefined} script
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @instance
                         */
                        Runnable.prototype.script = null;
    
                        /**
                         * Runnable barrier.
                         * @member {google.cloud.batch.v1alpha.Runnable.IBarrier|null|undefined} barrier
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @instance
                         */
                        Runnable.prototype.barrier = null;
    
                        /**
                         * Runnable displayName.
                         * @member {string} displayName
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @instance
                         */
                        Runnable.prototype.displayName = "";
    
                        /**
                         * Runnable ignoreExitStatus.
                         * @member {boolean} ignoreExitStatus
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @instance
                         */
                        Runnable.prototype.ignoreExitStatus = false;
    
                        /**
                         * Runnable background.
                         * @member {boolean} background
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @instance
                         */
                        Runnable.prototype.background = false;
    
                        /**
                         * Runnable alwaysRun.
                         * @member {boolean} alwaysRun
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @instance
                         */
                        Runnable.prototype.alwaysRun = false;
    
                        /**
                         * Runnable environment.
                         * @member {google.cloud.batch.v1alpha.IEnvironment|null|undefined} environment
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @instance
                         */
                        Runnable.prototype.environment = null;
    
                        /**
                         * Runnable timeout.
                         * @member {google.protobuf.IDuration|null|undefined} timeout
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @instance
                         */
                        Runnable.prototype.timeout = null;
    
                        /**
                         * Runnable labels.
                         * @member {Object.<string,string>} labels
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @instance
                         */
                        Runnable.prototype.labels = $util.emptyObject;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Runnable executable.
                         * @member {"container"|"script"|"barrier"|undefined} executable
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @instance
                         */
                        Object.defineProperty(Runnable.prototype, "executable", {
                            get: $util.oneOfGetter($oneOfFields = ["container", "script", "barrier"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Runnable instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @static
                         * @param {google.cloud.batch.v1alpha.IRunnable=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.Runnable} Runnable instance
                         */
                        Runnable.create = function create(properties) {
                            return new Runnable(properties);
                        };
    
                        /**
                         * Encodes the specified Runnable message. Does not implicitly {@link google.cloud.batch.v1alpha.Runnable.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @static
                         * @param {google.cloud.batch.v1alpha.IRunnable} message Runnable message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Runnable.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.container != null && Object.hasOwnProperty.call(message, "container"))
                                $root.google.cloud.batch.v1alpha.Runnable.Container.encode(message.container, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.script != null && Object.hasOwnProperty.call(message, "script"))
                                $root.google.cloud.batch.v1alpha.Runnable.Script.encode(message.script, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.ignoreExitStatus != null && Object.hasOwnProperty.call(message, "ignoreExitStatus"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.ignoreExitStatus);
                            if (message.background != null && Object.hasOwnProperty.call(message, "background"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.background);
                            if (message.alwaysRun != null && Object.hasOwnProperty.call(message, "alwaysRun"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.alwaysRun);
                            if (message.barrier != null && Object.hasOwnProperty.call(message, "barrier"))
                                $root.google.cloud.batch.v1alpha.Runnable.Barrier.encode(message.barrier, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.environment != null && Object.hasOwnProperty.call(message, "environment"))
                                $root.google.cloud.batch.v1alpha.Environment.encode(message.environment, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                                $root.google.protobuf.Duration.encode(message.timeout, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                                for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 9, wireType 2 =*/74).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                            if (message.displayName != null && Object.hasOwnProperty.call(message, "displayName"))
                                writer.uint32(/* id 10, wireType 2 =*/82).string(message.displayName);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Runnable message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.Runnable.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @static
                         * @param {google.cloud.batch.v1alpha.IRunnable} message Runnable message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Runnable.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Runnable message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.Runnable} Runnable
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Runnable.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.Runnable(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.container = $root.google.cloud.batch.v1alpha.Runnable.Container.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.script = $root.google.cloud.batch.v1alpha.Runnable.Script.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.barrier = $root.google.cloud.batch.v1alpha.Runnable.Barrier.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 10: {
                                        message.displayName = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.ignoreExitStatus = reader.bool();
                                        break;
                                    }
                                case 4: {
                                        message.background = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        message.alwaysRun = reader.bool();
                                        break;
                                    }
                                case 7: {
                                        message.environment = $root.google.cloud.batch.v1alpha.Environment.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.timeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        if (message.labels === $util.emptyObject)
                                            message.labels = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.labels[key] = value;
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Runnable message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.Runnable} Runnable
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Runnable.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Runnable message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Runnable.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.container != null && message.hasOwnProperty("container")) {
                                properties.executable = 1;
                                {
                                    var error = $root.google.cloud.batch.v1alpha.Runnable.Container.verify(message.container);
                                    if (error)
                                        return "container." + error;
                                }
                            }
                            if (message.script != null && message.hasOwnProperty("script")) {
                                if (properties.executable === 1)
                                    return "executable: multiple values";
                                properties.executable = 1;
                                {
                                    var error = $root.google.cloud.batch.v1alpha.Runnable.Script.verify(message.script);
                                    if (error)
                                        return "script." + error;
                                }
                            }
                            if (message.barrier != null && message.hasOwnProperty("barrier")) {
                                if (properties.executable === 1)
                                    return "executable: multiple values";
                                properties.executable = 1;
                                {
                                    var error = $root.google.cloud.batch.v1alpha.Runnable.Barrier.verify(message.barrier);
                                    if (error)
                                        return "barrier." + error;
                                }
                            }
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                if (!$util.isString(message.displayName))
                                    return "displayName: string expected";
                            if (message.ignoreExitStatus != null && message.hasOwnProperty("ignoreExitStatus"))
                                if (typeof message.ignoreExitStatus !== "boolean")
                                    return "ignoreExitStatus: boolean expected";
                            if (message.background != null && message.hasOwnProperty("background"))
                                if (typeof message.background !== "boolean")
                                    return "background: boolean expected";
                            if (message.alwaysRun != null && message.hasOwnProperty("alwaysRun"))
                                if (typeof message.alwaysRun !== "boolean")
                                    return "alwaysRun: boolean expected";
                            if (message.environment != null && message.hasOwnProperty("environment")) {
                                var error = $root.google.cloud.batch.v1alpha.Environment.verify(message.environment);
                                if (error)
                                    return "environment." + error;
                            }
                            if (message.timeout != null && message.hasOwnProperty("timeout")) {
                                var error = $root.google.protobuf.Duration.verify(message.timeout);
                                if (error)
                                    return "timeout." + error;
                            }
                            if (message.labels != null && message.hasOwnProperty("labels")) {
                                if (!$util.isObject(message.labels))
                                    return "labels: object expected";
                                var key = Object.keys(message.labels);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.labels[key[i]]))
                                        return "labels: string{k:string} expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Runnable message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.Runnable} Runnable
                         */
                        Runnable.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.Runnable)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.Runnable();
                            if (object.container != null) {
                                if (typeof object.container !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Runnable.container: object expected");
                                message.container = $root.google.cloud.batch.v1alpha.Runnable.Container.fromObject(object.container);
                            }
                            if (object.script != null) {
                                if (typeof object.script !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Runnable.script: object expected");
                                message.script = $root.google.cloud.batch.v1alpha.Runnable.Script.fromObject(object.script);
                            }
                            if (object.barrier != null) {
                                if (typeof object.barrier !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Runnable.barrier: object expected");
                                message.barrier = $root.google.cloud.batch.v1alpha.Runnable.Barrier.fromObject(object.barrier);
                            }
                            if (object.displayName != null)
                                message.displayName = String(object.displayName);
                            if (object.ignoreExitStatus != null)
                                message.ignoreExitStatus = Boolean(object.ignoreExitStatus);
                            if (object.background != null)
                                message.background = Boolean(object.background);
                            if (object.alwaysRun != null)
                                message.alwaysRun = Boolean(object.alwaysRun);
                            if (object.environment != null) {
                                if (typeof object.environment !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Runnable.environment: object expected");
                                message.environment = $root.google.cloud.batch.v1alpha.Environment.fromObject(object.environment);
                            }
                            if (object.timeout != null) {
                                if (typeof object.timeout !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Runnable.timeout: object expected");
                                message.timeout = $root.google.protobuf.Duration.fromObject(object.timeout);
                            }
                            if (object.labels) {
                                if (typeof object.labels !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Runnable.labels: object expected");
                                message.labels = {};
                                for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                    message.labels[keys[i]] = String(object.labels[keys[i]]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Runnable message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @static
                         * @param {google.cloud.batch.v1alpha.Runnable} message Runnable
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Runnable.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults)
                                object.labels = {};
                            if (options.defaults) {
                                object.ignoreExitStatus = false;
                                object.background = false;
                                object.alwaysRun = false;
                                object.environment = null;
                                object.timeout = null;
                                object.displayName = "";
                            }
                            if (message.container != null && message.hasOwnProperty("container")) {
                                object.container = $root.google.cloud.batch.v1alpha.Runnable.Container.toObject(message.container, options);
                                if (options.oneofs)
                                    object.executable = "container";
                            }
                            if (message.script != null && message.hasOwnProperty("script")) {
                                object.script = $root.google.cloud.batch.v1alpha.Runnable.Script.toObject(message.script, options);
                                if (options.oneofs)
                                    object.executable = "script";
                            }
                            if (message.ignoreExitStatus != null && message.hasOwnProperty("ignoreExitStatus"))
                                object.ignoreExitStatus = message.ignoreExitStatus;
                            if (message.background != null && message.hasOwnProperty("background"))
                                object.background = message.background;
                            if (message.alwaysRun != null && message.hasOwnProperty("alwaysRun"))
                                object.alwaysRun = message.alwaysRun;
                            if (message.barrier != null && message.hasOwnProperty("barrier")) {
                                object.barrier = $root.google.cloud.batch.v1alpha.Runnable.Barrier.toObject(message.barrier, options);
                                if (options.oneofs)
                                    object.executable = "barrier";
                            }
                            if (message.environment != null && message.hasOwnProperty("environment"))
                                object.environment = $root.google.cloud.batch.v1alpha.Environment.toObject(message.environment, options);
                            if (message.timeout != null && message.hasOwnProperty("timeout"))
                                object.timeout = $root.google.protobuf.Duration.toObject(message.timeout, options);
                            var keys2;
                            if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                                object.labels = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.labels[keys2[j]] = message.labels[keys2[j]];
                            }
                            if (message.displayName != null && message.hasOwnProperty("displayName"))
                                object.displayName = message.displayName;
                            return object;
                        };
    
                        /**
                         * Converts this Runnable to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Runnable.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Runnable
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.Runnable
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Runnable.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.Runnable";
                        };
    
                        Runnable.Container = (function() {
    
                            /**
                             * Properties of a Container.
                             * @memberof google.cloud.batch.v1alpha.Runnable
                             * @interface IContainer
                             * @property {string|null} [imageUri] Container imageUri
                             * @property {Array.<string>|null} [commands] Container commands
                             * @property {string|null} [entrypoint] Container entrypoint
                             * @property {Array.<string>|null} [volumes] Container volumes
                             * @property {string|null} [options] Container options
                             * @property {boolean|null} [blockExternalNetwork] Container blockExternalNetwork
                             * @property {string|null} [username] Container username
                             * @property {string|null} [password] Container password
                             * @property {boolean|null} [enableImageStreaming] Container enableImageStreaming
                             */
    
                            /**
                             * Constructs a new Container.
                             * @memberof google.cloud.batch.v1alpha.Runnable
                             * @classdesc Represents a Container.
                             * @implements IContainer
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.Runnable.IContainer=} [properties] Properties to set
                             */
                            function Container(properties) {
                                this.commands = [];
                                this.volumes = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Container imageUri.
                             * @member {string} imageUri
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @instance
                             */
                            Container.prototype.imageUri = "";
    
                            /**
                             * Container commands.
                             * @member {Array.<string>} commands
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @instance
                             */
                            Container.prototype.commands = $util.emptyArray;
    
                            /**
                             * Container entrypoint.
                             * @member {string} entrypoint
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @instance
                             */
                            Container.prototype.entrypoint = "";
    
                            /**
                             * Container volumes.
                             * @member {Array.<string>} volumes
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @instance
                             */
                            Container.prototype.volumes = $util.emptyArray;
    
                            /**
                             * Container options.
                             * @member {string} options
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @instance
                             */
                            Container.prototype.options = "";
    
                            /**
                             * Container blockExternalNetwork.
                             * @member {boolean} blockExternalNetwork
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @instance
                             */
                            Container.prototype.blockExternalNetwork = false;
    
                            /**
                             * Container username.
                             * @member {string} username
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @instance
                             */
                            Container.prototype.username = "";
    
                            /**
                             * Container password.
                             * @member {string} password
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @instance
                             */
                            Container.prototype.password = "";
    
                            /**
                             * Container enableImageStreaming.
                             * @member {boolean} enableImageStreaming
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @instance
                             */
                            Container.prototype.enableImageStreaming = false;
    
                            /**
                             * Creates a new Container instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @static
                             * @param {google.cloud.batch.v1alpha.Runnable.IContainer=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.Runnable.Container} Container instance
                             */
                            Container.create = function create(properties) {
                                return new Container(properties);
                            };
    
                            /**
                             * Encodes the specified Container message. Does not implicitly {@link google.cloud.batch.v1alpha.Runnable.Container.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @static
                             * @param {google.cloud.batch.v1alpha.Runnable.IContainer} message Container message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Container.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.imageUri != null && Object.hasOwnProperty.call(message, "imageUri"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.imageUri);
                                if (message.commands != null && message.commands.length)
                                    for (var i = 0; i < message.commands.length; ++i)
                                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.commands[i]);
                                if (message.entrypoint != null && Object.hasOwnProperty.call(message, "entrypoint"))
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.entrypoint);
                                if (message.volumes != null && message.volumes.length)
                                    for (var i = 0; i < message.volumes.length; ++i)
                                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.volumes[i]);
                                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.options);
                                if (message.blockExternalNetwork != null && Object.hasOwnProperty.call(message, "blockExternalNetwork"))
                                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.blockExternalNetwork);
                                if (message.username != null && Object.hasOwnProperty.call(message, "username"))
                                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.username);
                                if (message.password != null && Object.hasOwnProperty.call(message, "password"))
                                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.password);
                                if (message.enableImageStreaming != null && Object.hasOwnProperty.call(message, "enableImageStreaming"))
                                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.enableImageStreaming);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Container message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.Runnable.Container.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @static
                             * @param {google.cloud.batch.v1alpha.Runnable.IContainer} message Container message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Container.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Container message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.Runnable.Container} Container
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Container.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.Runnable.Container();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.imageUri = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            if (!(message.commands && message.commands.length))
                                                message.commands = [];
                                            message.commands.push(reader.string());
                                            break;
                                        }
                                    case 3: {
                                            message.entrypoint = reader.string();
                                            break;
                                        }
                                    case 7: {
                                            if (!(message.volumes && message.volumes.length))
                                                message.volumes = [];
                                            message.volumes.push(reader.string());
                                            break;
                                        }
                                    case 8: {
                                            message.options = reader.string();
                                            break;
                                        }
                                    case 9: {
                                            message.blockExternalNetwork = reader.bool();
                                            break;
                                        }
                                    case 10: {
                                            message.username = reader.string();
                                            break;
                                        }
                                    case 11: {
                                            message.password = reader.string();
                                            break;
                                        }
                                    case 12: {
                                            message.enableImageStreaming = reader.bool();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Container message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.Runnable.Container} Container
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Container.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Container message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Container.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.imageUri != null && message.hasOwnProperty("imageUri"))
                                    if (!$util.isString(message.imageUri))
                                        return "imageUri: string expected";
                                if (message.commands != null && message.hasOwnProperty("commands")) {
                                    if (!Array.isArray(message.commands))
                                        return "commands: array expected";
                                    for (var i = 0; i < message.commands.length; ++i)
                                        if (!$util.isString(message.commands[i]))
                                            return "commands: string[] expected";
                                }
                                if (message.entrypoint != null && message.hasOwnProperty("entrypoint"))
                                    if (!$util.isString(message.entrypoint))
                                        return "entrypoint: string expected";
                                if (message.volumes != null && message.hasOwnProperty("volumes")) {
                                    if (!Array.isArray(message.volumes))
                                        return "volumes: array expected";
                                    for (var i = 0; i < message.volumes.length; ++i)
                                        if (!$util.isString(message.volumes[i]))
                                            return "volumes: string[] expected";
                                }
                                if (message.options != null && message.hasOwnProperty("options"))
                                    if (!$util.isString(message.options))
                                        return "options: string expected";
                                if (message.blockExternalNetwork != null && message.hasOwnProperty("blockExternalNetwork"))
                                    if (typeof message.blockExternalNetwork !== "boolean")
                                        return "blockExternalNetwork: boolean expected";
                                if (message.username != null && message.hasOwnProperty("username"))
                                    if (!$util.isString(message.username))
                                        return "username: string expected";
                                if (message.password != null && message.hasOwnProperty("password"))
                                    if (!$util.isString(message.password))
                                        return "password: string expected";
                                if (message.enableImageStreaming != null && message.hasOwnProperty("enableImageStreaming"))
                                    if (typeof message.enableImageStreaming !== "boolean")
                                        return "enableImageStreaming: boolean expected";
                                return null;
                            };
    
                            /**
                             * Creates a Container message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.Runnable.Container} Container
                             */
                            Container.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.Runnable.Container)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.Runnable.Container();
                                if (object.imageUri != null)
                                    message.imageUri = String(object.imageUri);
                                if (object.commands) {
                                    if (!Array.isArray(object.commands))
                                        throw TypeError(".google.cloud.batch.v1alpha.Runnable.Container.commands: array expected");
                                    message.commands = [];
                                    for (var i = 0; i < object.commands.length; ++i)
                                        message.commands[i] = String(object.commands[i]);
                                }
                                if (object.entrypoint != null)
                                    message.entrypoint = String(object.entrypoint);
                                if (object.volumes) {
                                    if (!Array.isArray(object.volumes))
                                        throw TypeError(".google.cloud.batch.v1alpha.Runnable.Container.volumes: array expected");
                                    message.volumes = [];
                                    for (var i = 0; i < object.volumes.length; ++i)
                                        message.volumes[i] = String(object.volumes[i]);
                                }
                                if (object.options != null)
                                    message.options = String(object.options);
                                if (object.blockExternalNetwork != null)
                                    message.blockExternalNetwork = Boolean(object.blockExternalNetwork);
                                if (object.username != null)
                                    message.username = String(object.username);
                                if (object.password != null)
                                    message.password = String(object.password);
                                if (object.enableImageStreaming != null)
                                    message.enableImageStreaming = Boolean(object.enableImageStreaming);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Container message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @static
                             * @param {google.cloud.batch.v1alpha.Runnable.Container} message Container
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Container.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults) {
                                    object.commands = [];
                                    object.volumes = [];
                                }
                                if (options.defaults) {
                                    object.imageUri = "";
                                    object.entrypoint = "";
                                    object.options = "";
                                    object.blockExternalNetwork = false;
                                    object.username = "";
                                    object.password = "";
                                    object.enableImageStreaming = false;
                                }
                                if (message.imageUri != null && message.hasOwnProperty("imageUri"))
                                    object.imageUri = message.imageUri;
                                if (message.commands && message.commands.length) {
                                    object.commands = [];
                                    for (var j = 0; j < message.commands.length; ++j)
                                        object.commands[j] = message.commands[j];
                                }
                                if (message.entrypoint != null && message.hasOwnProperty("entrypoint"))
                                    object.entrypoint = message.entrypoint;
                                if (message.volumes && message.volumes.length) {
                                    object.volumes = [];
                                    for (var j = 0; j < message.volumes.length; ++j)
                                        object.volumes[j] = message.volumes[j];
                                }
                                if (message.options != null && message.hasOwnProperty("options"))
                                    object.options = message.options;
                                if (message.blockExternalNetwork != null && message.hasOwnProperty("blockExternalNetwork"))
                                    object.blockExternalNetwork = message.blockExternalNetwork;
                                if (message.username != null && message.hasOwnProperty("username"))
                                    object.username = message.username;
                                if (message.password != null && message.hasOwnProperty("password"))
                                    object.password = message.password;
                                if (message.enableImageStreaming != null && message.hasOwnProperty("enableImageStreaming"))
                                    object.enableImageStreaming = message.enableImageStreaming;
                                return object;
                            };
    
                            /**
                             * Converts this Container to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Container.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Container
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.Runnable.Container
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Container.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.Runnable.Container";
                            };
    
                            return Container;
                        })();
    
                        Runnable.Script = (function() {
    
                            /**
                             * Properties of a Script.
                             * @memberof google.cloud.batch.v1alpha.Runnable
                             * @interface IScript
                             * @property {string|null} [path] Script path
                             * @property {string|null} [text] Script text
                             */
    
                            /**
                             * Constructs a new Script.
                             * @memberof google.cloud.batch.v1alpha.Runnable
                             * @classdesc Represents a Script.
                             * @implements IScript
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.Runnable.IScript=} [properties] Properties to set
                             */
                            function Script(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Script path.
                             * @member {string|null|undefined} path
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @instance
                             */
                            Script.prototype.path = null;
    
                            /**
                             * Script text.
                             * @member {string|null|undefined} text
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @instance
                             */
                            Script.prototype.text = null;
    
                            // OneOf field names bound to virtual getters and setters
                            var $oneOfFields;
    
                            /**
                             * Script command.
                             * @member {"path"|"text"|undefined} command
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @instance
                             */
                            Object.defineProperty(Script.prototype, "command", {
                                get: $util.oneOfGetter($oneOfFields = ["path", "text"]),
                                set: $util.oneOfSetter($oneOfFields)
                            });
    
                            /**
                             * Creates a new Script instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @static
                             * @param {google.cloud.batch.v1alpha.Runnable.IScript=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.Runnable.Script} Script instance
                             */
                            Script.create = function create(properties) {
                                return new Script(properties);
                            };
    
                            /**
                             * Encodes the specified Script message. Does not implicitly {@link google.cloud.batch.v1alpha.Runnable.Script.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @static
                             * @param {google.cloud.batch.v1alpha.Runnable.IScript} message Script message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Script.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                                if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Script message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.Runnable.Script.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @static
                             * @param {google.cloud.batch.v1alpha.Runnable.IScript} message Script message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Script.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Script message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.Runnable.Script} Script
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Script.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.Runnable.Script();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.path = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.text = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Script message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.Runnable.Script} Script
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Script.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Script message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Script.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                var properties = {};
                                if (message.path != null && message.hasOwnProperty("path")) {
                                    properties.command = 1;
                                    if (!$util.isString(message.path))
                                        return "path: string expected";
                                }
                                if (message.text != null && message.hasOwnProperty("text")) {
                                    if (properties.command === 1)
                                        return "command: multiple values";
                                    properties.command = 1;
                                    if (!$util.isString(message.text))
                                        return "text: string expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates a Script message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.Runnable.Script} Script
                             */
                            Script.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.Runnable.Script)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.Runnable.Script();
                                if (object.path != null)
                                    message.path = String(object.path);
                                if (object.text != null)
                                    message.text = String(object.text);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Script message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @static
                             * @param {google.cloud.batch.v1alpha.Runnable.Script} message Script
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Script.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (message.path != null && message.hasOwnProperty("path")) {
                                    object.path = message.path;
                                    if (options.oneofs)
                                        object.command = "path";
                                }
                                if (message.text != null && message.hasOwnProperty("text")) {
                                    object.text = message.text;
                                    if (options.oneofs)
                                        object.command = "text";
                                }
                                return object;
                            };
    
                            /**
                             * Converts this Script to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Script.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Script
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.Runnable.Script
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Script.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.Runnable.Script";
                            };
    
                            return Script;
                        })();
    
                        Runnable.Barrier = (function() {
    
                            /**
                             * Properties of a Barrier.
                             * @memberof google.cloud.batch.v1alpha.Runnable
                             * @interface IBarrier
                             * @property {string|null} [name] Barrier name
                             */
    
                            /**
                             * Constructs a new Barrier.
                             * @memberof google.cloud.batch.v1alpha.Runnable
                             * @classdesc Represents a Barrier.
                             * @implements IBarrier
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.Runnable.IBarrier=} [properties] Properties to set
                             */
                            function Barrier(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * Barrier name.
                             * @member {string} name
                             * @memberof google.cloud.batch.v1alpha.Runnable.Barrier
                             * @instance
                             */
                            Barrier.prototype.name = "";
    
                            /**
                             * Creates a new Barrier instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.Runnable.Barrier
                             * @static
                             * @param {google.cloud.batch.v1alpha.Runnable.IBarrier=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.Runnable.Barrier} Barrier instance
                             */
                            Barrier.create = function create(properties) {
                                return new Barrier(properties);
                            };
    
                            /**
                             * Encodes the specified Barrier message. Does not implicitly {@link google.cloud.batch.v1alpha.Runnable.Barrier.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.Runnable.Barrier
                             * @static
                             * @param {google.cloud.batch.v1alpha.Runnable.IBarrier} message Barrier message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Barrier.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified Barrier message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.Runnable.Barrier.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.Runnable.Barrier
                             * @static
                             * @param {google.cloud.batch.v1alpha.Runnable.IBarrier} message Barrier message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            Barrier.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a Barrier message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.Runnable.Barrier
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.Runnable.Barrier} Barrier
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Barrier.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.Runnable.Barrier();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.name = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a Barrier message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.Runnable.Barrier
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.Runnable.Barrier} Barrier
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            Barrier.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a Barrier message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.Runnable.Barrier
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            Barrier.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    if (!$util.isString(message.name))
                                        return "name: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a Barrier message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.Runnable.Barrier
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.Runnable.Barrier} Barrier
                             */
                            Barrier.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.Runnable.Barrier)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.Runnable.Barrier();
                                if (object.name != null)
                                    message.name = String(object.name);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a Barrier message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.Runnable.Barrier
                             * @static
                             * @param {google.cloud.batch.v1alpha.Runnable.Barrier} message Barrier
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            Barrier.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults)
                                    object.name = "";
                                if (message.name != null && message.hasOwnProperty("name"))
                                    object.name = message.name;
                                return object;
                            };
    
                            /**
                             * Converts this Barrier to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.Runnable.Barrier
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            Barrier.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for Barrier
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.Runnable.Barrier
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            Barrier.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.Runnable.Barrier";
                            };
    
                            return Barrier;
                        })();
    
                        return Runnable;
                    })();
    
                    v1alpha.TaskSpec = (function() {
    
                        /**
                         * Properties of a TaskSpec.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface ITaskSpec
                         * @property {Array.<google.cloud.batch.v1alpha.IRunnable>|null} [runnables] TaskSpec runnables
                         * @property {google.cloud.batch.v1alpha.IComputeResource|null} [computeResource] TaskSpec computeResource
                         * @property {google.protobuf.IDuration|null} [maxRunDuration] TaskSpec maxRunDuration
                         * @property {number|null} [maxRetryCount] TaskSpec maxRetryCount
                         * @property {Array.<google.cloud.batch.v1alpha.ILifecyclePolicy>|null} [lifecyclePolicies] TaskSpec lifecyclePolicies
                         * @property {Object.<string,string>|null} [environments] TaskSpec environments
                         * @property {Array.<google.cloud.batch.v1alpha.IVolume>|null} [volumes] TaskSpec volumes
                         * @property {google.cloud.batch.v1alpha.IEnvironment|null} [environment] TaskSpec environment
                         */
    
                        /**
                         * Constructs a new TaskSpec.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a TaskSpec.
                         * @implements ITaskSpec
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.ITaskSpec=} [properties] Properties to set
                         */
                        function TaskSpec(properties) {
                            this.runnables = [];
                            this.lifecyclePolicies = [];
                            this.environments = {};
                            this.volumes = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * TaskSpec runnables.
                         * @member {Array.<google.cloud.batch.v1alpha.IRunnable>} runnables
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.runnables = $util.emptyArray;
    
                        /**
                         * TaskSpec computeResource.
                         * @member {google.cloud.batch.v1alpha.IComputeResource|null|undefined} computeResource
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.computeResource = null;
    
                        /**
                         * TaskSpec maxRunDuration.
                         * @member {google.protobuf.IDuration|null|undefined} maxRunDuration
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.maxRunDuration = null;
    
                        /**
                         * TaskSpec maxRetryCount.
                         * @member {number} maxRetryCount
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.maxRetryCount = 0;
    
                        /**
                         * TaskSpec lifecyclePolicies.
                         * @member {Array.<google.cloud.batch.v1alpha.ILifecyclePolicy>} lifecyclePolicies
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.lifecyclePolicies = $util.emptyArray;
    
                        /**
                         * TaskSpec environments.
                         * @member {Object.<string,string>} environments
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.environments = $util.emptyObject;
    
                        /**
                         * TaskSpec volumes.
                         * @member {Array.<google.cloud.batch.v1alpha.IVolume>} volumes
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.volumes = $util.emptyArray;
    
                        /**
                         * TaskSpec environment.
                         * @member {google.cloud.batch.v1alpha.IEnvironment|null|undefined} environment
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @instance
                         */
                        TaskSpec.prototype.environment = null;
    
                        /**
                         * Creates a new TaskSpec instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskSpec=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.TaskSpec} TaskSpec instance
                         */
                        TaskSpec.create = function create(properties) {
                            return new TaskSpec(properties);
                        };
    
                        /**
                         * Encodes the specified TaskSpec message. Does not implicitly {@link google.cloud.batch.v1alpha.TaskSpec.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskSpec} message TaskSpec message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskSpec.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.computeResource != null && Object.hasOwnProperty.call(message, "computeResource"))
                                $root.google.cloud.batch.v1alpha.ComputeResource.encode(message.computeResource, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.maxRunDuration != null && Object.hasOwnProperty.call(message, "maxRunDuration"))
                                $root.google.protobuf.Duration.encode(message.maxRunDuration, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.maxRetryCount != null && Object.hasOwnProperty.call(message, "maxRetryCount"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.maxRetryCount);
                            if (message.environments != null && Object.hasOwnProperty.call(message, "environments"))
                                for (var keys = Object.keys(message.environments), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.environments[keys[i]]).ldelim();
                            if (message.volumes != null && message.volumes.length)
                                for (var i = 0; i < message.volumes.length; ++i)
                                    $root.google.cloud.batch.v1alpha.Volume.encode(message.volumes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.runnables != null && message.runnables.length)
                                for (var i = 0; i < message.runnables.length; ++i)
                                    $root.google.cloud.batch.v1alpha.Runnable.encode(message.runnables[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.lifecyclePolicies != null && message.lifecyclePolicies.length)
                                for (var i = 0; i < message.lifecyclePolicies.length; ++i)
                                    $root.google.cloud.batch.v1alpha.LifecyclePolicy.encode(message.lifecyclePolicies[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.environment != null && Object.hasOwnProperty.call(message, "environment"))
                                $root.google.cloud.batch.v1alpha.Environment.encode(message.environment, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified TaskSpec message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.TaskSpec.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITaskSpec} message TaskSpec message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TaskSpec.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a TaskSpec message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.TaskSpec} TaskSpec
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskSpec.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.TaskSpec(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 8: {
                                        if (!(message.runnables && message.runnables.length))
                                            message.runnables = [];
                                        message.runnables.push($root.google.cloud.batch.v1alpha.Runnable.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 3: {
                                        message.computeResource = $root.google.cloud.batch.v1alpha.ComputeResource.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.maxRunDuration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.maxRetryCount = reader.int32();
                                        break;
                                    }
                                case 9: {
                                        if (!(message.lifecyclePolicies && message.lifecyclePolicies.length))
                                            message.lifecyclePolicies = [];
                                        message.lifecyclePolicies.push($root.google.cloud.batch.v1alpha.LifecyclePolicy.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 6: {
                                        if (message.environments === $util.emptyObject)
                                            message.environments = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.environments[key] = value;
                                        break;
                                    }
                                case 7: {
                                        if (!(message.volumes && message.volumes.length))
                                            message.volumes = [];
                                        message.volumes.push($root.google.cloud.batch.v1alpha.Volume.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 10: {
                                        message.environment = $root.google.cloud.batch.v1alpha.Environment.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a TaskSpec message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.TaskSpec} TaskSpec
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TaskSpec.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a TaskSpec message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TaskSpec.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.runnables != null && message.hasOwnProperty("runnables")) {
                                if (!Array.isArray(message.runnables))
                                    return "runnables: array expected";
                                for (var i = 0; i < message.runnables.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.Runnable.verify(message.runnables[i]);
                                    if (error)
                                        return "runnables." + error;
                                }
                            }
                            if (message.computeResource != null && message.hasOwnProperty("computeResource")) {
                                var error = $root.google.cloud.batch.v1alpha.ComputeResource.verify(message.computeResource);
                                if (error)
                                    return "computeResource." + error;
                            }
                            if (message.maxRunDuration != null && message.hasOwnProperty("maxRunDuration")) {
                                var error = $root.google.protobuf.Duration.verify(message.maxRunDuration);
                                if (error)
                                    return "maxRunDuration." + error;
                            }
                            if (message.maxRetryCount != null && message.hasOwnProperty("maxRetryCount"))
                                if (!$util.isInteger(message.maxRetryCount))
                                    return "maxRetryCount: integer expected";
                            if (message.lifecyclePolicies != null && message.hasOwnProperty("lifecyclePolicies")) {
                                if (!Array.isArray(message.lifecyclePolicies))
                                    return "lifecyclePolicies: array expected";
                                for (var i = 0; i < message.lifecyclePolicies.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.LifecyclePolicy.verify(message.lifecyclePolicies[i]);
                                    if (error)
                                        return "lifecyclePolicies." + error;
                                }
                            }
                            if (message.environments != null && message.hasOwnProperty("environments")) {
                                if (!$util.isObject(message.environments))
                                    return "environments: object expected";
                                var key = Object.keys(message.environments);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.environments[key[i]]))
                                        return "environments: string{k:string} expected";
                            }
                            if (message.volumes != null && message.hasOwnProperty("volumes")) {
                                if (!Array.isArray(message.volumes))
                                    return "volumes: array expected";
                                for (var i = 0; i < message.volumes.length; ++i) {
                                    var error = $root.google.cloud.batch.v1alpha.Volume.verify(message.volumes[i]);
                                    if (error)
                                        return "volumes." + error;
                                }
                            }
                            if (message.environment != null && message.hasOwnProperty("environment")) {
                                var error = $root.google.cloud.batch.v1alpha.Environment.verify(message.environment);
                                if (error)
                                    return "environment." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a TaskSpec message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.TaskSpec} TaskSpec
                         */
                        TaskSpec.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.TaskSpec)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.TaskSpec();
                            if (object.runnables) {
                                if (!Array.isArray(object.runnables))
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskSpec.runnables: array expected");
                                message.runnables = [];
                                for (var i = 0; i < object.runnables.length; ++i) {
                                    if (typeof object.runnables[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.TaskSpec.runnables: object expected");
                                    message.runnables[i] = $root.google.cloud.batch.v1alpha.Runnable.fromObject(object.runnables[i]);
                                }
                            }
                            if (object.computeResource != null) {
                                if (typeof object.computeResource !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskSpec.computeResource: object expected");
                                message.computeResource = $root.google.cloud.batch.v1alpha.ComputeResource.fromObject(object.computeResource);
                            }
                            if (object.maxRunDuration != null) {
                                if (typeof object.maxRunDuration !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskSpec.maxRunDuration: object expected");
                                message.maxRunDuration = $root.google.protobuf.Duration.fromObject(object.maxRunDuration);
                            }
                            if (object.maxRetryCount != null)
                                message.maxRetryCount = object.maxRetryCount | 0;
                            if (object.lifecyclePolicies) {
                                if (!Array.isArray(object.lifecyclePolicies))
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskSpec.lifecyclePolicies: array expected");
                                message.lifecyclePolicies = [];
                                for (var i = 0; i < object.lifecyclePolicies.length; ++i) {
                                    if (typeof object.lifecyclePolicies[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.TaskSpec.lifecyclePolicies: object expected");
                                    message.lifecyclePolicies[i] = $root.google.cloud.batch.v1alpha.LifecyclePolicy.fromObject(object.lifecyclePolicies[i]);
                                }
                            }
                            if (object.environments) {
                                if (typeof object.environments !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskSpec.environments: object expected");
                                message.environments = {};
                                for (var keys = Object.keys(object.environments), i = 0; i < keys.length; ++i)
                                    message.environments[keys[i]] = String(object.environments[keys[i]]);
                            }
                            if (object.volumes) {
                                if (!Array.isArray(object.volumes))
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskSpec.volumes: array expected");
                                message.volumes = [];
                                for (var i = 0; i < object.volumes.length; ++i) {
                                    if (typeof object.volumes[i] !== "object")
                                        throw TypeError(".google.cloud.batch.v1alpha.TaskSpec.volumes: object expected");
                                    message.volumes[i] = $root.google.cloud.batch.v1alpha.Volume.fromObject(object.volumes[i]);
                                }
                            }
                            if (object.environment != null) {
                                if (typeof object.environment !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.TaskSpec.environment: object expected");
                                message.environment = $root.google.cloud.batch.v1alpha.Environment.fromObject(object.environment);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a TaskSpec message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @static
                         * @param {google.cloud.batch.v1alpha.TaskSpec} message TaskSpec
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TaskSpec.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults) {
                                object.volumes = [];
                                object.runnables = [];
                                object.lifecyclePolicies = [];
                            }
                            if (options.objects || options.defaults)
                                object.environments = {};
                            if (options.defaults) {
                                object.computeResource = null;
                                object.maxRunDuration = null;
                                object.maxRetryCount = 0;
                                object.environment = null;
                            }
                            if (message.computeResource != null && message.hasOwnProperty("computeResource"))
                                object.computeResource = $root.google.cloud.batch.v1alpha.ComputeResource.toObject(message.computeResource, options);
                            if (message.maxRunDuration != null && message.hasOwnProperty("maxRunDuration"))
                                object.maxRunDuration = $root.google.protobuf.Duration.toObject(message.maxRunDuration, options);
                            if (message.maxRetryCount != null && message.hasOwnProperty("maxRetryCount"))
                                object.maxRetryCount = message.maxRetryCount;
                            var keys2;
                            if (message.environments && (keys2 = Object.keys(message.environments)).length) {
                                object.environments = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.environments[keys2[j]] = message.environments[keys2[j]];
                            }
                            if (message.volumes && message.volumes.length) {
                                object.volumes = [];
                                for (var j = 0; j < message.volumes.length; ++j)
                                    object.volumes[j] = $root.google.cloud.batch.v1alpha.Volume.toObject(message.volumes[j], options);
                            }
                            if (message.runnables && message.runnables.length) {
                                object.runnables = [];
                                for (var j = 0; j < message.runnables.length; ++j)
                                    object.runnables[j] = $root.google.cloud.batch.v1alpha.Runnable.toObject(message.runnables[j], options);
                            }
                            if (message.lifecyclePolicies && message.lifecyclePolicies.length) {
                                object.lifecyclePolicies = [];
                                for (var j = 0; j < message.lifecyclePolicies.length; ++j)
                                    object.lifecyclePolicies[j] = $root.google.cloud.batch.v1alpha.LifecyclePolicy.toObject(message.lifecyclePolicies[j], options);
                            }
                            if (message.environment != null && message.hasOwnProperty("environment"))
                                object.environment = $root.google.cloud.batch.v1alpha.Environment.toObject(message.environment, options);
                            return object;
                        };
    
                        /**
                         * Converts this TaskSpec to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TaskSpec.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for TaskSpec
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.TaskSpec
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TaskSpec.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.TaskSpec";
                        };
    
                        return TaskSpec;
                    })();
    
                    v1alpha.LifecyclePolicy = (function() {
    
                        /**
                         * Properties of a LifecyclePolicy.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface ILifecyclePolicy
                         * @property {google.cloud.batch.v1alpha.LifecyclePolicy.Action|null} [action] LifecyclePolicy action
                         * @property {google.cloud.batch.v1alpha.LifecyclePolicy.IActionCondition|null} [actionCondition] LifecyclePolicy actionCondition
                         */
    
                        /**
                         * Constructs a new LifecyclePolicy.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a LifecyclePolicy.
                         * @implements ILifecyclePolicy
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.ILifecyclePolicy=} [properties] Properties to set
                         */
                        function LifecyclePolicy(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * LifecyclePolicy action.
                         * @member {google.cloud.batch.v1alpha.LifecyclePolicy.Action} action
                         * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                         * @instance
                         */
                        LifecyclePolicy.prototype.action = 0;
    
                        /**
                         * LifecyclePolicy actionCondition.
                         * @member {google.cloud.batch.v1alpha.LifecyclePolicy.IActionCondition|null|undefined} actionCondition
                         * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                         * @instance
                         */
                        LifecyclePolicy.prototype.actionCondition = null;
    
                        /**
                         * Creates a new LifecyclePolicy instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                         * @static
                         * @param {google.cloud.batch.v1alpha.ILifecyclePolicy=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.LifecyclePolicy} LifecyclePolicy instance
                         */
                        LifecyclePolicy.create = function create(properties) {
                            return new LifecyclePolicy(properties);
                        };
    
                        /**
                         * Encodes the specified LifecyclePolicy message. Does not implicitly {@link google.cloud.batch.v1alpha.LifecyclePolicy.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                         * @static
                         * @param {google.cloud.batch.v1alpha.ILifecyclePolicy} message LifecyclePolicy message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LifecyclePolicy.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.action);
                            if (message.actionCondition != null && Object.hasOwnProperty.call(message, "actionCondition"))
                                $root.google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition.encode(message.actionCondition, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified LifecyclePolicy message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.LifecyclePolicy.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                         * @static
                         * @param {google.cloud.batch.v1alpha.ILifecyclePolicy} message LifecyclePolicy message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LifecyclePolicy.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a LifecyclePolicy message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.LifecyclePolicy} LifecyclePolicy
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LifecyclePolicy.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.LifecyclePolicy();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.action = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.actionCondition = $root.google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a LifecyclePolicy message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.LifecyclePolicy} LifecyclePolicy
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LifecyclePolicy.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a LifecyclePolicy message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LifecyclePolicy.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.action != null && message.hasOwnProperty("action"))
                                switch (message.action) {
                                default:
                                    return "action: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.actionCondition != null && message.hasOwnProperty("actionCondition")) {
                                var error = $root.google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition.verify(message.actionCondition);
                                if (error)
                                    return "actionCondition." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a LifecyclePolicy message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.LifecyclePolicy} LifecyclePolicy
                         */
                        LifecyclePolicy.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.LifecyclePolicy)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.LifecyclePolicy();
                            switch (object.action) {
                            default:
                                if (typeof object.action === "number") {
                                    message.action = object.action;
                                    break;
                                }
                                break;
                            case "ACTION_UNSPECIFIED":
                            case 0:
                                message.action = 0;
                                break;
                            case "RETRY_TASK":
                            case 1:
                                message.action = 1;
                                break;
                            case "FAIL_TASK":
                            case 2:
                                message.action = 2;
                                break;
                            }
                            if (object.actionCondition != null) {
                                if (typeof object.actionCondition !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.LifecyclePolicy.actionCondition: object expected");
                                message.actionCondition = $root.google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition.fromObject(object.actionCondition);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a LifecyclePolicy message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                         * @static
                         * @param {google.cloud.batch.v1alpha.LifecyclePolicy} message LifecyclePolicy
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LifecyclePolicy.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.action = options.enums === String ? "ACTION_UNSPECIFIED" : 0;
                                object.actionCondition = null;
                            }
                            if (message.action != null && message.hasOwnProperty("action"))
                                object.action = options.enums === String ? $root.google.cloud.batch.v1alpha.LifecyclePolicy.Action[message.action] === undefined ? message.action : $root.google.cloud.batch.v1alpha.LifecyclePolicy.Action[message.action] : message.action;
                            if (message.actionCondition != null && message.hasOwnProperty("actionCondition"))
                                object.actionCondition = $root.google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition.toObject(message.actionCondition, options);
                            return object;
                        };
    
                        /**
                         * Converts this LifecyclePolicy to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LifecyclePolicy.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for LifecyclePolicy
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LifecyclePolicy.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.LifecyclePolicy";
                        };
    
                        LifecyclePolicy.ActionCondition = (function() {
    
                            /**
                             * Properties of an ActionCondition.
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                             * @interface IActionCondition
                             * @property {Array.<number>|null} [exitCodes] ActionCondition exitCodes
                             */
    
                            /**
                             * Constructs a new ActionCondition.
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy
                             * @classdesc Represents an ActionCondition.
                             * @implements IActionCondition
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.LifecyclePolicy.IActionCondition=} [properties] Properties to set
                             */
                            function ActionCondition(properties) {
                                this.exitCodes = [];
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * ActionCondition exitCodes.
                             * @member {Array.<number>} exitCodes
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition
                             * @instance
                             */
                            ActionCondition.prototype.exitCodes = $util.emptyArray;
    
                            /**
                             * Creates a new ActionCondition instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {google.cloud.batch.v1alpha.LifecyclePolicy.IActionCondition=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition} ActionCondition instance
                             */
                            ActionCondition.create = function create(properties) {
                                return new ActionCondition(properties);
                            };
    
                            /**
                             * Encodes the specified ActionCondition message. Does not implicitly {@link google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {google.cloud.batch.v1alpha.LifecyclePolicy.IActionCondition} message ActionCondition message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ActionCondition.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.exitCodes != null && message.exitCodes.length) {
                                    writer.uint32(/* id 1, wireType 2 =*/10).fork();
                                    for (var i = 0; i < message.exitCodes.length; ++i)
                                        writer.int32(message.exitCodes[i]);
                                    writer.ldelim();
                                }
                                return writer;
                            };
    
                            /**
                             * Encodes the specified ActionCondition message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {google.cloud.batch.v1alpha.LifecyclePolicy.IActionCondition} message ActionCondition message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            ActionCondition.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes an ActionCondition message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition} ActionCondition
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ActionCondition.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            if (!(message.exitCodes && message.exitCodes.length))
                                                message.exitCodes = [];
                                            if ((tag & 7) === 2) {
                                                var end2 = reader.uint32() + reader.pos;
                                                while (reader.pos < end2)
                                                    message.exitCodes.push(reader.int32());
                                            } else
                                                message.exitCodes.push(reader.int32());
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes an ActionCondition message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition} ActionCondition
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            ActionCondition.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies an ActionCondition message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            ActionCondition.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.exitCodes != null && message.hasOwnProperty("exitCodes")) {
                                    if (!Array.isArray(message.exitCodes))
                                        return "exitCodes: array expected";
                                    for (var i = 0; i < message.exitCodes.length; ++i)
                                        if (!$util.isInteger(message.exitCodes[i]))
                                            return "exitCodes: integer[] expected";
                                }
                                return null;
                            };
    
                            /**
                             * Creates an ActionCondition message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition} ActionCondition
                             */
                            ActionCondition.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition();
                                if (object.exitCodes) {
                                    if (!Array.isArray(object.exitCodes))
                                        throw TypeError(".google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition.exitCodes: array expected");
                                    message.exitCodes = [];
                                    for (var i = 0; i < object.exitCodes.length; ++i)
                                        message.exitCodes[i] = object.exitCodes[i] | 0;
                                }
                                return message;
                            };
    
                            /**
                             * Creates a plain object from an ActionCondition message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition} message ActionCondition
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            ActionCondition.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.arrays || options.defaults)
                                    object.exitCodes = [];
                                if (message.exitCodes && message.exitCodes.length) {
                                    object.exitCodes = [];
                                    for (var j = 0; j < message.exitCodes.length; ++j)
                                        object.exitCodes[j] = message.exitCodes[j];
                                }
                                return object;
                            };
    
                            /**
                             * Converts this ActionCondition to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            ActionCondition.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for ActionCondition
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            ActionCondition.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.LifecyclePolicy.ActionCondition";
                            };
    
                            return ActionCondition;
                        })();
    
                        /**
                         * Action enum.
                         * @name google.cloud.batch.v1alpha.LifecyclePolicy.Action
                         * @enum {number}
                         * @property {number} ACTION_UNSPECIFIED=0 ACTION_UNSPECIFIED value
                         * @property {number} RETRY_TASK=1 RETRY_TASK value
                         * @property {number} FAIL_TASK=2 FAIL_TASK value
                         */
                        LifecyclePolicy.Action = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "ACTION_UNSPECIFIED"] = 0;
                            values[valuesById[1] = "RETRY_TASK"] = 1;
                            values[valuesById[2] = "FAIL_TASK"] = 2;
                            return values;
                        })();
    
                        return LifecyclePolicy;
                    })();
    
                    v1alpha.Task = (function() {
    
                        /**
                         * Properties of a Task.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface ITask
                         * @property {string|null} [name] Task name
                         * @property {google.cloud.batch.v1alpha.ITaskStatus|null} [status] Task status
                         */
    
                        /**
                         * Constructs a new Task.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a Task.
                         * @implements ITask
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.ITask=} [properties] Properties to set
                         */
                        function Task(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Task name.
                         * @member {string} name
                         * @memberof google.cloud.batch.v1alpha.Task
                         * @instance
                         */
                        Task.prototype.name = "";
    
                        /**
                         * Task status.
                         * @member {google.cloud.batch.v1alpha.ITaskStatus|null|undefined} status
                         * @memberof google.cloud.batch.v1alpha.Task
                         * @instance
                         */
                        Task.prototype.status = null;
    
                        /**
                         * Creates a new Task instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.Task
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITask=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.Task} Task instance
                         */
                        Task.create = function create(properties) {
                            return new Task(properties);
                        };
    
                        /**
                         * Encodes the specified Task message. Does not implicitly {@link google.cloud.batch.v1alpha.Task.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.Task
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITask} message Task message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Task.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                                $root.google.cloud.batch.v1alpha.TaskStatus.encode(message.status, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Task message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.Task.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.Task
                         * @static
                         * @param {google.cloud.batch.v1alpha.ITask} message Task message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Task.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Task message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.Task
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.Task} Task
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Task.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.Task();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.status = $root.google.cloud.batch.v1alpha.TaskStatus.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Task message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.Task
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.Task} Task
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Task.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Task message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.Task
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Task.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.status != null && message.hasOwnProperty("status")) {
                                var error = $root.google.cloud.batch.v1alpha.TaskStatus.verify(message.status);
                                if (error)
                                    return "status." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Task message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.Task
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.Task} Task
                         */
                        Task.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.Task)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.Task();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.status != null) {
                                if (typeof object.status !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Task.status: object expected");
                                message.status = $root.google.cloud.batch.v1alpha.TaskStatus.fromObject(object.status);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Task message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.Task
                         * @static
                         * @param {google.cloud.batch.v1alpha.Task} message Task
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Task.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.status = null;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.status != null && message.hasOwnProperty("status"))
                                object.status = $root.google.cloud.batch.v1alpha.TaskStatus.toObject(message.status, options);
                            return object;
                        };
    
                        /**
                         * Converts this Task to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.Task
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Task.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Task
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.Task
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Task.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.Task";
                        };
    
                        return Task;
                    })();
    
                    v1alpha.Environment = (function() {
    
                        /**
                         * Properties of an Environment.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IEnvironment
                         * @property {Object.<string,string>|null} [variables] Environment variables
                         * @property {Object.<string,string>|null} [secretVariables] Environment secretVariables
                         * @property {google.cloud.batch.v1alpha.Environment.IKMSEnvMap|null} [encryptedVariables] Environment encryptedVariables
                         */
    
                        /**
                         * Constructs a new Environment.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents an Environment.
                         * @implements IEnvironment
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IEnvironment=} [properties] Properties to set
                         */
                        function Environment(properties) {
                            this.variables = {};
                            this.secretVariables = {};
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Environment variables.
                         * @member {Object.<string,string>} variables
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @instance
                         */
                        Environment.prototype.variables = $util.emptyObject;
    
                        /**
                         * Environment secretVariables.
                         * @member {Object.<string,string>} secretVariables
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @instance
                         */
                        Environment.prototype.secretVariables = $util.emptyObject;
    
                        /**
                         * Environment encryptedVariables.
                         * @member {google.cloud.batch.v1alpha.Environment.IKMSEnvMap|null|undefined} encryptedVariables
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @instance
                         */
                        Environment.prototype.encryptedVariables = null;
    
                        /**
                         * Creates a new Environment instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @static
                         * @param {google.cloud.batch.v1alpha.IEnvironment=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.Environment} Environment instance
                         */
                        Environment.create = function create(properties) {
                            return new Environment(properties);
                        };
    
                        /**
                         * Encodes the specified Environment message. Does not implicitly {@link google.cloud.batch.v1alpha.Environment.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @static
                         * @param {google.cloud.batch.v1alpha.IEnvironment} message Environment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Environment.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.variables != null && Object.hasOwnProperty.call(message, "variables"))
                                for (var keys = Object.keys(message.variables), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.variables[keys[i]]).ldelim();
                            if (message.secretVariables != null && Object.hasOwnProperty.call(message, "secretVariables"))
                                for (var keys = Object.keys(message.secretVariables), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.secretVariables[keys[i]]).ldelim();
                            if (message.encryptedVariables != null && Object.hasOwnProperty.call(message, "encryptedVariables"))
                                $root.google.cloud.batch.v1alpha.Environment.KMSEnvMap.encode(message.encryptedVariables, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Environment message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.Environment.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @static
                         * @param {google.cloud.batch.v1alpha.IEnvironment} message Environment message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Environment.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Environment message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.Environment} Environment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Environment.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.Environment(), key, value;
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (message.variables === $util.emptyObject)
                                            message.variables = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.variables[key] = value;
                                        break;
                                    }
                                case 2: {
                                        if (message.secretVariables === $util.emptyObject)
                                            message.secretVariables = {};
                                        var end2 = reader.uint32() + reader.pos;
                                        key = "";
                                        value = "";
                                        while (reader.pos < end2) {
                                            var tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.string();
                                                break;
                                            case 2:
                                                value = reader.string();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.secretVariables[key] = value;
                                        break;
                                    }
                                case 3: {
                                        message.encryptedVariables = $root.google.cloud.batch.v1alpha.Environment.KMSEnvMap.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Environment message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.Environment} Environment
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Environment.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Environment message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Environment.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.variables != null && message.hasOwnProperty("variables")) {
                                if (!$util.isObject(message.variables))
                                    return "variables: object expected";
                                var key = Object.keys(message.variables);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.variables[key[i]]))
                                        return "variables: string{k:string} expected";
                            }
                            if (message.secretVariables != null && message.hasOwnProperty("secretVariables")) {
                                if (!$util.isObject(message.secretVariables))
                                    return "secretVariables: object expected";
                                var key = Object.keys(message.secretVariables);
                                for (var i = 0; i < key.length; ++i)
                                    if (!$util.isString(message.secretVariables[key[i]]))
                                        return "secretVariables: string{k:string} expected";
                            }
                            if (message.encryptedVariables != null && message.hasOwnProperty("encryptedVariables")) {
                                var error = $root.google.cloud.batch.v1alpha.Environment.KMSEnvMap.verify(message.encryptedVariables);
                                if (error)
                                    return "encryptedVariables." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Environment message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.Environment} Environment
                         */
                        Environment.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.Environment)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.Environment();
                            if (object.variables) {
                                if (typeof object.variables !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Environment.variables: object expected");
                                message.variables = {};
                                for (var keys = Object.keys(object.variables), i = 0; i < keys.length; ++i)
                                    message.variables[keys[i]] = String(object.variables[keys[i]]);
                            }
                            if (object.secretVariables) {
                                if (typeof object.secretVariables !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Environment.secretVariables: object expected");
                                message.secretVariables = {};
                                for (var keys = Object.keys(object.secretVariables), i = 0; i < keys.length; ++i)
                                    message.secretVariables[keys[i]] = String(object.secretVariables[keys[i]]);
                            }
                            if (object.encryptedVariables != null) {
                                if (typeof object.encryptedVariables !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Environment.encryptedVariables: object expected");
                                message.encryptedVariables = $root.google.cloud.batch.v1alpha.Environment.KMSEnvMap.fromObject(object.encryptedVariables);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Environment message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @static
                         * @param {google.cloud.batch.v1alpha.Environment} message Environment
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Environment.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.objects || options.defaults) {
                                object.variables = {};
                                object.secretVariables = {};
                            }
                            if (options.defaults)
                                object.encryptedVariables = null;
                            var keys2;
                            if (message.variables && (keys2 = Object.keys(message.variables)).length) {
                                object.variables = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.variables[keys2[j]] = message.variables[keys2[j]];
                            }
                            if (message.secretVariables && (keys2 = Object.keys(message.secretVariables)).length) {
                                object.secretVariables = {};
                                for (var j = 0; j < keys2.length; ++j)
                                    object.secretVariables[keys2[j]] = message.secretVariables[keys2[j]];
                            }
                            if (message.encryptedVariables != null && message.hasOwnProperty("encryptedVariables"))
                                object.encryptedVariables = $root.google.cloud.batch.v1alpha.Environment.KMSEnvMap.toObject(message.encryptedVariables, options);
                            return object;
                        };
    
                        /**
                         * Converts this Environment to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Environment.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Environment
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.Environment
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Environment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.Environment";
                        };
    
                        Environment.KMSEnvMap = (function() {
    
                            /**
                             * Properties of a KMSEnvMap.
                             * @memberof google.cloud.batch.v1alpha.Environment
                             * @interface IKMSEnvMap
                             * @property {string|null} [keyName] KMSEnvMap keyName
                             * @property {string|null} [cipherText] KMSEnvMap cipherText
                             */
    
                            /**
                             * Constructs a new KMSEnvMap.
                             * @memberof google.cloud.batch.v1alpha.Environment
                             * @classdesc Represents a KMSEnvMap.
                             * @implements IKMSEnvMap
                             * @constructor
                             * @param {google.cloud.batch.v1alpha.Environment.IKMSEnvMap=} [properties] Properties to set
                             */
                            function KMSEnvMap(properties) {
                                if (properties)
                                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                        if (properties[keys[i]] != null)
                                            this[keys[i]] = properties[keys[i]];
                            }
    
                            /**
                             * KMSEnvMap keyName.
                             * @member {string} keyName
                             * @memberof google.cloud.batch.v1alpha.Environment.KMSEnvMap
                             * @instance
                             */
                            KMSEnvMap.prototype.keyName = "";
    
                            /**
                             * KMSEnvMap cipherText.
                             * @member {string} cipherText
                             * @memberof google.cloud.batch.v1alpha.Environment.KMSEnvMap
                             * @instance
                             */
                            KMSEnvMap.prototype.cipherText = "";
    
                            /**
                             * Creates a new KMSEnvMap instance using the specified properties.
                             * @function create
                             * @memberof google.cloud.batch.v1alpha.Environment.KMSEnvMap
                             * @static
                             * @param {google.cloud.batch.v1alpha.Environment.IKMSEnvMap=} [properties] Properties to set
                             * @returns {google.cloud.batch.v1alpha.Environment.KMSEnvMap} KMSEnvMap instance
                             */
                            KMSEnvMap.create = function create(properties) {
                                return new KMSEnvMap(properties);
                            };
    
                            /**
                             * Encodes the specified KMSEnvMap message. Does not implicitly {@link google.cloud.batch.v1alpha.Environment.KMSEnvMap.verify|verify} messages.
                             * @function encode
                             * @memberof google.cloud.batch.v1alpha.Environment.KMSEnvMap
                             * @static
                             * @param {google.cloud.batch.v1alpha.Environment.IKMSEnvMap} message KMSEnvMap message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KMSEnvMap.encode = function encode(message, writer) {
                                if (!writer)
                                    writer = $Writer.create();
                                if (message.keyName != null && Object.hasOwnProperty.call(message, "keyName"))
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.keyName);
                                if (message.cipherText != null && Object.hasOwnProperty.call(message, "cipherText"))
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.cipherText);
                                return writer;
                            };
    
                            /**
                             * Encodes the specified KMSEnvMap message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.Environment.KMSEnvMap.verify|verify} messages.
                             * @function encodeDelimited
                             * @memberof google.cloud.batch.v1alpha.Environment.KMSEnvMap
                             * @static
                             * @param {google.cloud.batch.v1alpha.Environment.IKMSEnvMap} message KMSEnvMap message or plain object to encode
                             * @param {$protobuf.Writer} [writer] Writer to encode to
                             * @returns {$protobuf.Writer} Writer
                             */
                            KMSEnvMap.encodeDelimited = function encodeDelimited(message, writer) {
                                return this.encode(message, writer).ldelim();
                            };
    
                            /**
                             * Decodes a KMSEnvMap message from the specified reader or buffer.
                             * @function decode
                             * @memberof google.cloud.batch.v1alpha.Environment.KMSEnvMap
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @param {number} [length] Message length if known beforehand
                             * @returns {google.cloud.batch.v1alpha.Environment.KMSEnvMap} KMSEnvMap
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KMSEnvMap.decode = function decode(reader, length) {
                                if (!(reader instanceof $Reader))
                                    reader = $Reader.create(reader);
                                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.Environment.KMSEnvMap();
                                while (reader.pos < end) {
                                    var tag = reader.uint32();
                                    switch (tag >>> 3) {
                                    case 1: {
                                            message.keyName = reader.string();
                                            break;
                                        }
                                    case 2: {
                                            message.cipherText = reader.string();
                                            break;
                                        }
                                    default:
                                        reader.skipType(tag & 7);
                                        break;
                                    }
                                }
                                return message;
                            };
    
                            /**
                             * Decodes a KMSEnvMap message from the specified reader or buffer, length delimited.
                             * @function decodeDelimited
                             * @memberof google.cloud.batch.v1alpha.Environment.KMSEnvMap
                             * @static
                             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                             * @returns {google.cloud.batch.v1alpha.Environment.KMSEnvMap} KMSEnvMap
                             * @throws {Error} If the payload is not a reader or valid buffer
                             * @throws {$protobuf.util.ProtocolError} If required fields are missing
                             */
                            KMSEnvMap.decodeDelimited = function decodeDelimited(reader) {
                                if (!(reader instanceof $Reader))
                                    reader = new $Reader(reader);
                                return this.decode(reader, reader.uint32());
                            };
    
                            /**
                             * Verifies a KMSEnvMap message.
                             * @function verify
                             * @memberof google.cloud.batch.v1alpha.Environment.KMSEnvMap
                             * @static
                             * @param {Object.<string,*>} message Plain object to verify
                             * @returns {string|null} `null` if valid, otherwise the reason why it is not
                             */
                            KMSEnvMap.verify = function verify(message) {
                                if (typeof message !== "object" || message === null)
                                    return "object expected";
                                if (message.keyName != null && message.hasOwnProperty("keyName"))
                                    if (!$util.isString(message.keyName))
                                        return "keyName: string expected";
                                if (message.cipherText != null && message.hasOwnProperty("cipherText"))
                                    if (!$util.isString(message.cipherText))
                                        return "cipherText: string expected";
                                return null;
                            };
    
                            /**
                             * Creates a KMSEnvMap message from a plain object. Also converts values to their respective internal types.
                             * @function fromObject
                             * @memberof google.cloud.batch.v1alpha.Environment.KMSEnvMap
                             * @static
                             * @param {Object.<string,*>} object Plain object
                             * @returns {google.cloud.batch.v1alpha.Environment.KMSEnvMap} KMSEnvMap
                             */
                            KMSEnvMap.fromObject = function fromObject(object) {
                                if (object instanceof $root.google.cloud.batch.v1alpha.Environment.KMSEnvMap)
                                    return object;
                                var message = new $root.google.cloud.batch.v1alpha.Environment.KMSEnvMap();
                                if (object.keyName != null)
                                    message.keyName = String(object.keyName);
                                if (object.cipherText != null)
                                    message.cipherText = String(object.cipherText);
                                return message;
                            };
    
                            /**
                             * Creates a plain object from a KMSEnvMap message. Also converts values to other types if specified.
                             * @function toObject
                             * @memberof google.cloud.batch.v1alpha.Environment.KMSEnvMap
                             * @static
                             * @param {google.cloud.batch.v1alpha.Environment.KMSEnvMap} message KMSEnvMap
                             * @param {$protobuf.IConversionOptions} [options] Conversion options
                             * @returns {Object.<string,*>} Plain object
                             */
                            KMSEnvMap.toObject = function toObject(message, options) {
                                if (!options)
                                    options = {};
                                var object = {};
                                if (options.defaults) {
                                    object.keyName = "";
                                    object.cipherText = "";
                                }
                                if (message.keyName != null && message.hasOwnProperty("keyName"))
                                    object.keyName = message.keyName;
                                if (message.cipherText != null && message.hasOwnProperty("cipherText"))
                                    object.cipherText = message.cipherText;
                                return object;
                            };
    
                            /**
                             * Converts this KMSEnvMap to JSON.
                             * @function toJSON
                             * @memberof google.cloud.batch.v1alpha.Environment.KMSEnvMap
                             * @instance
                             * @returns {Object.<string,*>} JSON object
                             */
                            KMSEnvMap.prototype.toJSON = function toJSON() {
                                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                            };
    
                            /**
                             * Gets the default type url for KMSEnvMap
                             * @function getTypeUrl
                             * @memberof google.cloud.batch.v1alpha.Environment.KMSEnvMap
                             * @static
                             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                             * @returns {string} The default type url
                             */
                            KMSEnvMap.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                                if (typeUrlPrefix === undefined) {
                                    typeUrlPrefix = "type.googleapis.com";
                                }
                                return typeUrlPrefix + "/google.cloud.batch.v1alpha.Environment.KMSEnvMap";
                            };
    
                            return KMSEnvMap;
                        })();
    
                        return Environment;
                    })();
    
                    v1alpha.Volume = (function() {
    
                        /**
                         * Properties of a Volume.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IVolume
                         * @property {google.cloud.batch.v1alpha.INFS|null} [nfs] Volume nfs
                         * @property {google.cloud.batch.v1alpha.IPD|null} [pd] Volume pd
                         * @property {google.cloud.batch.v1alpha.IGCS|null} [gcs] Volume gcs
                         * @property {string|null} [deviceName] Volume deviceName
                         * @property {string|null} [mountPath] Volume mountPath
                         * @property {Array.<string>|null} [mountOptions] Volume mountOptions
                         */
    
                        /**
                         * Constructs a new Volume.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a Volume.
                         * @implements IVolume
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IVolume=} [properties] Properties to set
                         */
                        function Volume(properties) {
                            this.mountOptions = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Volume nfs.
                         * @member {google.cloud.batch.v1alpha.INFS|null|undefined} nfs
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @instance
                         */
                        Volume.prototype.nfs = null;
    
                        /**
                         * Volume pd.
                         * @member {google.cloud.batch.v1alpha.IPD|null|undefined} pd
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @instance
                         */
                        Volume.prototype.pd = null;
    
                        /**
                         * Volume gcs.
                         * @member {google.cloud.batch.v1alpha.IGCS|null|undefined} gcs
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @instance
                         */
                        Volume.prototype.gcs = null;
    
                        /**
                         * Volume deviceName.
                         * @member {string|null|undefined} deviceName
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @instance
                         */
                        Volume.prototype.deviceName = null;
    
                        /**
                         * Volume mountPath.
                         * @member {string} mountPath
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @instance
                         */
                        Volume.prototype.mountPath = "";
    
                        /**
                         * Volume mountOptions.
                         * @member {Array.<string>} mountOptions
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @instance
                         */
                        Volume.prototype.mountOptions = $util.emptyArray;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Volume source.
                         * @member {"nfs"|"pd"|"gcs"|"deviceName"|undefined} source
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @instance
                         */
                        Object.defineProperty(Volume.prototype, "source", {
                            get: $util.oneOfGetter($oneOfFields = ["nfs", "pd", "gcs", "deviceName"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new Volume instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @static
                         * @param {google.cloud.batch.v1alpha.IVolume=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.Volume} Volume instance
                         */
                        Volume.create = function create(properties) {
                            return new Volume(properties);
                        };
    
                        /**
                         * Encodes the specified Volume message. Does not implicitly {@link google.cloud.batch.v1alpha.Volume.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @static
                         * @param {google.cloud.batch.v1alpha.IVolume} message Volume message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Volume.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.nfs != null && Object.hasOwnProperty.call(message, "nfs"))
                                $root.google.cloud.batch.v1alpha.NFS.encode(message.nfs, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.pd != null && Object.hasOwnProperty.call(message, "pd"))
                                $root.google.cloud.batch.v1alpha.PD.encode(message.pd, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.gcs != null && Object.hasOwnProperty.call(message, "gcs"))
                                $root.google.cloud.batch.v1alpha.GCS.encode(message.gcs, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.mountPath != null && Object.hasOwnProperty.call(message, "mountPath"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.mountPath);
                            if (message.mountOptions != null && message.mountOptions.length)
                                for (var i = 0; i < message.mountOptions.length; ++i)
                                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.mountOptions[i]);
                            if (message.deviceName != null && Object.hasOwnProperty.call(message, "deviceName"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.deviceName);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Volume message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.Volume.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @static
                         * @param {google.cloud.batch.v1alpha.IVolume} message Volume message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Volume.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Volume message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.Volume} Volume
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Volume.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.Volume();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.nfs = $root.google.cloud.batch.v1alpha.NFS.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.pd = $root.google.cloud.batch.v1alpha.PD.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.gcs = $root.google.cloud.batch.v1alpha.GCS.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.deviceName = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.mountPath = reader.string();
                                        break;
                                    }
                                case 5: {
                                        if (!(message.mountOptions && message.mountOptions.length))
                                            message.mountOptions = [];
                                        message.mountOptions.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Volume message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.Volume} Volume
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Volume.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Volume message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Volume.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.nfs != null && message.hasOwnProperty("nfs")) {
                                properties.source = 1;
                                {
                                    var error = $root.google.cloud.batch.v1alpha.NFS.verify(message.nfs);
                                    if (error)
                                        return "nfs." + error;
                                }
                            }
                            if (message.pd != null && message.hasOwnProperty("pd")) {
                                if (properties.source === 1)
                                    return "source: multiple values";
                                properties.source = 1;
                                {
                                    var error = $root.google.cloud.batch.v1alpha.PD.verify(message.pd);
                                    if (error)
                                        return "pd." + error;
                                }
                            }
                            if (message.gcs != null && message.hasOwnProperty("gcs")) {
                                if (properties.source === 1)
                                    return "source: multiple values";
                                properties.source = 1;
                                {
                                    var error = $root.google.cloud.batch.v1alpha.GCS.verify(message.gcs);
                                    if (error)
                                        return "gcs." + error;
                                }
                            }
                            if (message.deviceName != null && message.hasOwnProperty("deviceName")) {
                                if (properties.source === 1)
                                    return "source: multiple values";
                                properties.source = 1;
                                if (!$util.isString(message.deviceName))
                                    return "deviceName: string expected";
                            }
                            if (message.mountPath != null && message.hasOwnProperty("mountPath"))
                                if (!$util.isString(message.mountPath))
                                    return "mountPath: string expected";
                            if (message.mountOptions != null && message.hasOwnProperty("mountOptions")) {
                                if (!Array.isArray(message.mountOptions))
                                    return "mountOptions: array expected";
                                for (var i = 0; i < message.mountOptions.length; ++i)
                                    if (!$util.isString(message.mountOptions[i]))
                                        return "mountOptions: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Volume message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.Volume} Volume
                         */
                        Volume.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.Volume)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.Volume();
                            if (object.nfs != null) {
                                if (typeof object.nfs !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Volume.nfs: object expected");
                                message.nfs = $root.google.cloud.batch.v1alpha.NFS.fromObject(object.nfs);
                            }
                            if (object.pd != null) {
                                if (typeof object.pd !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Volume.pd: object expected");
                                message.pd = $root.google.cloud.batch.v1alpha.PD.fromObject(object.pd);
                            }
                            if (object.gcs != null) {
                                if (typeof object.gcs !== "object")
                                    throw TypeError(".google.cloud.batch.v1alpha.Volume.gcs: object expected");
                                message.gcs = $root.google.cloud.batch.v1alpha.GCS.fromObject(object.gcs);
                            }
                            if (object.deviceName != null)
                                message.deviceName = String(object.deviceName);
                            if (object.mountPath != null)
                                message.mountPath = String(object.mountPath);
                            if (object.mountOptions) {
                                if (!Array.isArray(object.mountOptions))
                                    throw TypeError(".google.cloud.batch.v1alpha.Volume.mountOptions: array expected");
                                message.mountOptions = [];
                                for (var i = 0; i < object.mountOptions.length; ++i)
                                    message.mountOptions[i] = String(object.mountOptions[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Volume message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @static
                         * @param {google.cloud.batch.v1alpha.Volume} message Volume
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Volume.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.mountOptions = [];
                            if (options.defaults)
                                object.mountPath = "";
                            if (message.nfs != null && message.hasOwnProperty("nfs")) {
                                object.nfs = $root.google.cloud.batch.v1alpha.NFS.toObject(message.nfs, options);
                                if (options.oneofs)
                                    object.source = "nfs";
                            }
                            if (message.pd != null && message.hasOwnProperty("pd")) {
                                object.pd = $root.google.cloud.batch.v1alpha.PD.toObject(message.pd, options);
                                if (options.oneofs)
                                    object.source = "pd";
                            }
                            if (message.gcs != null && message.hasOwnProperty("gcs")) {
                                object.gcs = $root.google.cloud.batch.v1alpha.GCS.toObject(message.gcs, options);
                                if (options.oneofs)
                                    object.source = "gcs";
                            }
                            if (message.mountPath != null && message.hasOwnProperty("mountPath"))
                                object.mountPath = message.mountPath;
                            if (message.mountOptions && message.mountOptions.length) {
                                object.mountOptions = [];
                                for (var j = 0; j < message.mountOptions.length; ++j)
                                    object.mountOptions[j] = message.mountOptions[j];
                            }
                            if (message.deviceName != null && message.hasOwnProperty("deviceName")) {
                                object.deviceName = message.deviceName;
                                if (options.oneofs)
                                    object.source = "deviceName";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Volume to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Volume.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for Volume
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.Volume
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Volume.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.Volume";
                        };
    
                        return Volume;
                    })();
    
                    v1alpha.NFS = (function() {
    
                        /**
                         * Properties of a NFS.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface INFS
                         * @property {string|null} [server] NFS server
                         * @property {string|null} [remotePath] NFS remotePath
                         */
    
                        /**
                         * Constructs a new NFS.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a NFS.
                         * @implements INFS
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.INFS=} [properties] Properties to set
                         */
                        function NFS(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * NFS server.
                         * @member {string} server
                         * @memberof google.cloud.batch.v1alpha.NFS
                         * @instance
                         */
                        NFS.prototype.server = "";
    
                        /**
                         * NFS remotePath.
                         * @member {string} remotePath
                         * @memberof google.cloud.batch.v1alpha.NFS
                         * @instance
                         */
                        NFS.prototype.remotePath = "";
    
                        /**
                         * Creates a new NFS instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.NFS
                         * @static
                         * @param {google.cloud.batch.v1alpha.INFS=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.NFS} NFS instance
                         */
                        NFS.create = function create(properties) {
                            return new NFS(properties);
                        };
    
                        /**
                         * Encodes the specified NFS message. Does not implicitly {@link google.cloud.batch.v1alpha.NFS.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.NFS
                         * @static
                         * @param {google.cloud.batch.v1alpha.INFS} message NFS message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NFS.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.server != null && Object.hasOwnProperty.call(message, "server"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.server);
                            if (message.remotePath != null && Object.hasOwnProperty.call(message, "remotePath"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.remotePath);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified NFS message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.NFS.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.NFS
                         * @static
                         * @param {google.cloud.batch.v1alpha.INFS} message NFS message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        NFS.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a NFS message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.NFS
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.NFS} NFS
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NFS.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.NFS();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.server = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.remotePath = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a NFS message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.NFS
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.NFS} NFS
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        NFS.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a NFS message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.NFS
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        NFS.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.server != null && message.hasOwnProperty("server"))
                                if (!$util.isString(message.server))
                                    return "server: string expected";
                            if (message.remotePath != null && message.hasOwnProperty("remotePath"))
                                if (!$util.isString(message.remotePath))
                                    return "remotePath: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a NFS message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.NFS
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.NFS} NFS
                         */
                        NFS.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.NFS)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.NFS();
                            if (object.server != null)
                                message.server = String(object.server);
                            if (object.remotePath != null)
                                message.remotePath = String(object.remotePath);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a NFS message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.NFS
                         * @static
                         * @param {google.cloud.batch.v1alpha.NFS} message NFS
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        NFS.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.server = "";
                                object.remotePath = "";
                            }
                            if (message.server != null && message.hasOwnProperty("server"))
                                object.server = message.server;
                            if (message.remotePath != null && message.hasOwnProperty("remotePath"))
                                object.remotePath = message.remotePath;
                            return object;
                        };
    
                        /**
                         * Converts this NFS to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.NFS
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        NFS.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for NFS
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.NFS
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        NFS.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.NFS";
                        };
    
                        return NFS;
                    })();
    
                    v1alpha.PD = (function() {
    
                        /**
                         * Properties of a PD.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IPD
                         * @property {string|null} [disk] PD disk
                         * @property {string|null} [device] PD device
                         * @property {boolean|null} [existing] PD existing
                         */
    
                        /**
                         * Constructs a new PD.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a PD.
                         * @implements IPD
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IPD=} [properties] Properties to set
                         */
                        function PD(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PD disk.
                         * @member {string} disk
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @instance
                         */
                        PD.prototype.disk = "";
    
                        /**
                         * PD device.
                         * @member {string} device
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @instance
                         */
                        PD.prototype.device = "";
    
                        /**
                         * PD existing.
                         * @member {boolean} existing
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @instance
                         */
                        PD.prototype.existing = false;
    
                        /**
                         * Creates a new PD instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @static
                         * @param {google.cloud.batch.v1alpha.IPD=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.PD} PD instance
                         */
                        PD.create = function create(properties) {
                            return new PD(properties);
                        };
    
                        /**
                         * Encodes the specified PD message. Does not implicitly {@link google.cloud.batch.v1alpha.PD.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @static
                         * @param {google.cloud.batch.v1alpha.IPD} message PD message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PD.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.disk != null && Object.hasOwnProperty.call(message, "disk"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.disk);
                            if (message.device != null && Object.hasOwnProperty.call(message, "device"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.device);
                            if (message.existing != null && Object.hasOwnProperty.call(message, "existing"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.existing);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PD message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.PD.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @static
                         * @param {google.cloud.batch.v1alpha.IPD} message PD message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PD.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PD message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.PD} PD
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PD.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.PD();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.disk = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.device = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.existing = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PD message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.PD} PD
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PD.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PD message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PD.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.disk != null && message.hasOwnProperty("disk"))
                                if (!$util.isString(message.disk))
                                    return "disk: string expected";
                            if (message.device != null && message.hasOwnProperty("device"))
                                if (!$util.isString(message.device))
                                    return "device: string expected";
                            if (message.existing != null && message.hasOwnProperty("existing"))
                                if (typeof message.existing !== "boolean")
                                    return "existing: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a PD message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.PD} PD
                         */
                        PD.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.PD)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.PD();
                            if (object.disk != null)
                                message.disk = String(object.disk);
                            if (object.device != null)
                                message.device = String(object.device);
                            if (object.existing != null)
                                message.existing = Boolean(object.existing);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PD message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @static
                         * @param {google.cloud.batch.v1alpha.PD} message PD
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PD.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.disk = "";
                                object.device = "";
                                object.existing = false;
                            }
                            if (message.disk != null && message.hasOwnProperty("disk"))
                                object.disk = message.disk;
                            if (message.device != null && message.hasOwnProperty("device"))
                                object.device = message.device;
                            if (message.existing != null && message.hasOwnProperty("existing"))
                                object.existing = message.existing;
                            return object;
                        };
    
                        /**
                         * Converts this PD to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PD.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for PD
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.PD
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PD.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.PD";
                        };
    
                        return PD;
                    })();
    
                    v1alpha.GCS = (function() {
    
                        /**
                         * Properties of a GCS.
                         * @memberof google.cloud.batch.v1alpha
                         * @interface IGCS
                         * @property {string|null} [remotePath] GCS remotePath
                         */
    
                        /**
                         * Constructs a new GCS.
                         * @memberof google.cloud.batch.v1alpha
                         * @classdesc Represents a GCS.
                         * @implements IGCS
                         * @constructor
                         * @param {google.cloud.batch.v1alpha.IGCS=} [properties] Properties to set
                         */
                        function GCS(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * GCS remotePath.
                         * @member {string} remotePath
                         * @memberof google.cloud.batch.v1alpha.GCS
                         * @instance
                         */
                        GCS.prototype.remotePath = "";
    
                        /**
                         * Creates a new GCS instance using the specified properties.
                         * @function create
                         * @memberof google.cloud.batch.v1alpha.GCS
                         * @static
                         * @param {google.cloud.batch.v1alpha.IGCS=} [properties] Properties to set
                         * @returns {google.cloud.batch.v1alpha.GCS} GCS instance
                         */
                        GCS.create = function create(properties) {
                            return new GCS(properties);
                        };
    
                        /**
                         * Encodes the specified GCS message. Does not implicitly {@link google.cloud.batch.v1alpha.GCS.verify|verify} messages.
                         * @function encode
                         * @memberof google.cloud.batch.v1alpha.GCS
                         * @static
                         * @param {google.cloud.batch.v1alpha.IGCS} message GCS message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GCS.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.remotePath != null && Object.hasOwnProperty.call(message, "remotePath"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.remotePath);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified GCS message, length delimited. Does not implicitly {@link google.cloud.batch.v1alpha.GCS.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.cloud.batch.v1alpha.GCS
                         * @static
                         * @param {google.cloud.batch.v1alpha.IGCS} message GCS message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        GCS.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a GCS message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.cloud.batch.v1alpha.GCS
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.cloud.batch.v1alpha.GCS} GCS
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GCS.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.cloud.batch.v1alpha.GCS();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.remotePath = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a GCS message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.cloud.batch.v1alpha.GCS
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.cloud.batch.v1alpha.GCS} GCS
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        GCS.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a GCS message.
                         * @function verify
                         * @memberof google.cloud.batch.v1alpha.GCS
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        GCS.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.remotePath != null && message.hasOwnProperty("remotePath"))
                                if (!$util.isString(message.remotePath))
                                    return "remotePath: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a GCS message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.cloud.batch.v1alpha.GCS
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.cloud.batch.v1alpha.GCS} GCS
                         */
                        GCS.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.cloud.batch.v1alpha.GCS)
                                return object;
                            var message = new $root.google.cloud.batch.v1alpha.GCS();
                            if (object.remotePath != null)
                                message.remotePath = String(object.remotePath);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a GCS message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.cloud.batch.v1alpha.GCS
                         * @static
                         * @param {google.cloud.batch.v1alpha.GCS} message GCS
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        GCS.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.remotePath = "";
                            if (message.remotePath != null && message.hasOwnProperty("remotePath"))
                                object.remotePath = message.remotePath;
                            return object;
                        };
    
                        /**
                         * Converts this GCS to JSON.
                         * @function toJSON
                         * @memberof google.cloud.batch.v1alpha.GCS
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        GCS.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for GCS
                         * @function getTypeUrl
                         * @memberof google.cloud.batch.v1alpha.GCS
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        GCS.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.cloud.batch.v1alpha.GCS";
                        };
    
                        return GCS;
                    })();
    
                    return v1alpha;
                })();
    
                return batch;
            })();
    
            return cloud;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fullyDecodeReservedExpansion.
                 * @member {boolean} fullyDecodeReservedExpansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fullyDecodeReservedExpansion = false;
    
                /**
                 * Creates a new Http instance using the specified properties.
                 * @function create
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp=} [properties] Properties to set
                 * @returns {google.api.Http} Http instance
                 */
                Http.create = function create(properties) {
                    return new Http(properties);
                };
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.rules && message.rules.length))
                                    message.rules = [];
                                message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.fullyDecodeReservedExpansion = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                            return "fullyDecodeReservedExpansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fullyDecodeReservedExpansion != null)
                        message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fullyDecodeReservedExpansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                        object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Http
                 * @function getTypeUrl
                 * @memberof google.api.Http
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Http";
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [responseBody] HttpRule responseBody
                 * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additionalBindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule responseBody.
                 * @member {string} responseBody
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.responseBody = "";
    
                /**
                 * HttpRule additionalBindings.
                 * @member {Array.<google.api.IHttpRule>} additionalBindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additionalBindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new HttpRule instance using the specified properties.
                 * @function create
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 * @returns {google.api.HttpRule} HttpRule instance
                 */
                HttpRule.create = function create(properties) {
                    return new HttpRule(properties);
                };
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additionalBindings != null && message.additionalBindings.length)
                        for (var i = 0; i < message.additionalBindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.get = reader.string();
                                break;
                            }
                        case 3: {
                                message.put = reader.string();
                                break;
                            }
                        case 4: {
                                message.post = reader.string();
                                break;
                            }
                        case 5: {
                                message["delete"] = reader.string();
                                break;
                            }
                        case 6: {
                                message.patch = reader.string();
                                break;
                            }
                        case 8: {
                                message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                                break;
                            }
                        case 7: {
                                message.body = reader.string();
                                break;
                            }
                        case 12: {
                                message.responseBody = reader.string();
                                break;
                            }
                        case 11: {
                                if (!(message.additionalBindings && message.additionalBindings.length))
                                    message.additionalBindings = [];
                                message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        if (!$util.isString(message.responseBody))
                            return "responseBody: string expected";
                    if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                        if (!Array.isArray(message.additionalBindings))
                            return "additionalBindings: array expected";
                        for (var i = 0; i < message.additionalBindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                            if (error)
                                return "additionalBindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.responseBody != null)
                        message.responseBody = String(object.responseBody);
                    if (object.additionalBindings) {
                        if (!Array.isArray(object.additionalBindings))
                            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                        message.additionalBindings = [];
                        for (var i = 0; i < object.additionalBindings.length; ++i) {
                            if (typeof object.additionalBindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                            message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additionalBindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.responseBody = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additionalBindings && message.additionalBindings.length) {
                        object.additionalBindings = [];
                        for (var j = 0; j < message.additionalBindings.length; ++j)
                            object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                    }
                    if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                        object.responseBody = message.responseBody;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for HttpRule
                 * @function getTypeUrl
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.HttpRule";
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Creates a new CustomHttpPattern instance using the specified properties.
                 * @function create
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
                 */
                CustomHttpPattern.create = function create(properties) {
                    return new CustomHttpPattern(properties);
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.kind = reader.string();
                                break;
                            }
                        case 2: {
                                message.path = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CustomHttpPattern
                 * @function getTypeUrl
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CustomHttpPattern";
                };
    
                return CustomHttpPattern;
            })();
    
            api.CommonLanguageSettings = (function() {
    
                /**
                 * Properties of a CommonLanguageSettings.
                 * @memberof google.api
                 * @interface ICommonLanguageSettings
                 * @property {string|null} [referenceDocsUri] CommonLanguageSettings referenceDocsUri
                 * @property {Array.<google.api.ClientLibraryDestination>|null} [destinations] CommonLanguageSettings destinations
                 */
    
                /**
                 * Constructs a new CommonLanguageSettings.
                 * @memberof google.api
                 * @classdesc Represents a CommonLanguageSettings.
                 * @implements ICommonLanguageSettings
                 * @constructor
                 * @param {google.api.ICommonLanguageSettings=} [properties] Properties to set
                 */
                function CommonLanguageSettings(properties) {
                    this.destinations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CommonLanguageSettings referenceDocsUri.
                 * @member {string} referenceDocsUri
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 */
                CommonLanguageSettings.prototype.referenceDocsUri = "";
    
                /**
                 * CommonLanguageSettings destinations.
                 * @member {Array.<google.api.ClientLibraryDestination>} destinations
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 */
                CommonLanguageSettings.prototype.destinations = $util.emptyArray;
    
                /**
                 * Creates a new CommonLanguageSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings=} [properties] Properties to set
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings instance
                 */
                CommonLanguageSettings.create = function create(properties) {
                    return new CommonLanguageSettings(properties);
                };
    
                /**
                 * Encodes the specified CommonLanguageSettings message. Does not implicitly {@link google.api.CommonLanguageSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings} message CommonLanguageSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonLanguageSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.referenceDocsUri != null && Object.hasOwnProperty.call(message, "referenceDocsUri"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.referenceDocsUri);
                    if (message.destinations != null && message.destinations.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.destinations.length; ++i)
                            writer.int32(message.destinations[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified CommonLanguageSettings message, length delimited. Does not implicitly {@link google.api.CommonLanguageSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.ICommonLanguageSettings} message CommonLanguageSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommonLanguageSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CommonLanguageSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonLanguageSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CommonLanguageSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.referenceDocsUri = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.destinations && message.destinations.length))
                                    message.destinations = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.destinations.push(reader.int32());
                                } else
                                    message.destinations.push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CommonLanguageSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommonLanguageSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CommonLanguageSettings message.
                 * @function verify
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommonLanguageSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                        if (!$util.isString(message.referenceDocsUri))
                            return "referenceDocsUri: string expected";
                    if (message.destinations != null && message.hasOwnProperty("destinations")) {
                        if (!Array.isArray(message.destinations))
                            return "destinations: array expected";
                        for (var i = 0; i < message.destinations.length; ++i)
                            switch (message.destinations[i]) {
                            default:
                                return "destinations: enum value[] expected";
                            case 0:
                            case 10:
                            case 20:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a CommonLanguageSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CommonLanguageSettings} CommonLanguageSettings
                 */
                CommonLanguageSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CommonLanguageSettings)
                        return object;
                    var message = new $root.google.api.CommonLanguageSettings();
                    if (object.referenceDocsUri != null)
                        message.referenceDocsUri = String(object.referenceDocsUri);
                    if (object.destinations) {
                        if (!Array.isArray(object.destinations))
                            throw TypeError(".google.api.CommonLanguageSettings.destinations: array expected");
                        message.destinations = [];
                        for (var i = 0; i < object.destinations.length; ++i)
                            switch (object.destinations[i]) {
                            default:
                                if (typeof object.destinations[i] === "number") {
                                    message.destinations[i] = object.destinations[i];
                                    break;
                                }
                            case "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED":
                            case 0:
                                message.destinations[i] = 0;
                                break;
                            case "GITHUB":
                            case 10:
                                message.destinations[i] = 10;
                                break;
                            case "PACKAGE_MANAGER":
                            case 20:
                                message.destinations[i] = 20;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CommonLanguageSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {google.api.CommonLanguageSettings} message CommonLanguageSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommonLanguageSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.destinations = [];
                    if (options.defaults)
                        object.referenceDocsUri = "";
                    if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                        object.referenceDocsUri = message.referenceDocsUri;
                    if (message.destinations && message.destinations.length) {
                        object.destinations = [];
                        for (var j = 0; j < message.destinations.length; ++j)
                            object.destinations[j] = options.enums === String ? $root.google.api.ClientLibraryDestination[message.destinations[j]] === undefined ? message.destinations[j] : $root.google.api.ClientLibraryDestination[message.destinations[j]] : message.destinations[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this CommonLanguageSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.CommonLanguageSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommonLanguageSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CommonLanguageSettings
                 * @function getTypeUrl
                 * @memberof google.api.CommonLanguageSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CommonLanguageSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CommonLanguageSettings";
                };
    
                return CommonLanguageSettings;
            })();
    
            api.ClientLibrarySettings = (function() {
    
                /**
                 * Properties of a ClientLibrarySettings.
                 * @memberof google.api
                 * @interface IClientLibrarySettings
                 * @property {string|null} [version] ClientLibrarySettings version
                 * @property {google.api.LaunchStage|null} [launchStage] ClientLibrarySettings launchStage
                 * @property {boolean|null} [restNumericEnums] ClientLibrarySettings restNumericEnums
                 * @property {google.api.IJavaSettings|null} [javaSettings] ClientLibrarySettings javaSettings
                 * @property {google.api.ICppSettings|null} [cppSettings] ClientLibrarySettings cppSettings
                 * @property {google.api.IPhpSettings|null} [phpSettings] ClientLibrarySettings phpSettings
                 * @property {google.api.IPythonSettings|null} [pythonSettings] ClientLibrarySettings pythonSettings
                 * @property {google.api.INodeSettings|null} [nodeSettings] ClientLibrarySettings nodeSettings
                 * @property {google.api.IDotnetSettings|null} [dotnetSettings] ClientLibrarySettings dotnetSettings
                 * @property {google.api.IRubySettings|null} [rubySettings] ClientLibrarySettings rubySettings
                 * @property {google.api.IGoSettings|null} [goSettings] ClientLibrarySettings goSettings
                 */
    
                /**
                 * Constructs a new ClientLibrarySettings.
                 * @memberof google.api
                 * @classdesc Represents a ClientLibrarySettings.
                 * @implements IClientLibrarySettings
                 * @constructor
                 * @param {google.api.IClientLibrarySettings=} [properties] Properties to set
                 */
                function ClientLibrarySettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ClientLibrarySettings version.
                 * @member {string} version
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.version = "";
    
                /**
                 * ClientLibrarySettings launchStage.
                 * @member {google.api.LaunchStage} launchStage
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.launchStage = 0;
    
                /**
                 * ClientLibrarySettings restNumericEnums.
                 * @member {boolean} restNumericEnums
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.restNumericEnums = false;
    
                /**
                 * ClientLibrarySettings javaSettings.
                 * @member {google.api.IJavaSettings|null|undefined} javaSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.javaSettings = null;
    
                /**
                 * ClientLibrarySettings cppSettings.
                 * @member {google.api.ICppSettings|null|undefined} cppSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.cppSettings = null;
    
                /**
                 * ClientLibrarySettings phpSettings.
                 * @member {google.api.IPhpSettings|null|undefined} phpSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.phpSettings = null;
    
                /**
                 * ClientLibrarySettings pythonSettings.
                 * @member {google.api.IPythonSettings|null|undefined} pythonSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.pythonSettings = null;
    
                /**
                 * ClientLibrarySettings nodeSettings.
                 * @member {google.api.INodeSettings|null|undefined} nodeSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.nodeSettings = null;
    
                /**
                 * ClientLibrarySettings dotnetSettings.
                 * @member {google.api.IDotnetSettings|null|undefined} dotnetSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.dotnetSettings = null;
    
                /**
                 * ClientLibrarySettings rubySettings.
                 * @member {google.api.IRubySettings|null|undefined} rubySettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.rubySettings = null;
    
                /**
                 * ClientLibrarySettings goSettings.
                 * @member {google.api.IGoSettings|null|undefined} goSettings
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 */
                ClientLibrarySettings.prototype.goSettings = null;
    
                /**
                 * Creates a new ClientLibrarySettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings=} [properties] Properties to set
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings instance
                 */
                ClientLibrarySettings.create = function create(properties) {
                    return new ClientLibrarySettings(properties);
                };
    
                /**
                 * Encodes the specified ClientLibrarySettings message. Does not implicitly {@link google.api.ClientLibrarySettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings} message ClientLibrarySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClientLibrarySettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.version);
                    if (message.launchStage != null && Object.hasOwnProperty.call(message, "launchStage"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.launchStage);
                    if (message.restNumericEnums != null && Object.hasOwnProperty.call(message, "restNumericEnums"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.restNumericEnums);
                    if (message.javaSettings != null && Object.hasOwnProperty.call(message, "javaSettings"))
                        $root.google.api.JavaSettings.encode(message.javaSettings, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                    if (message.cppSettings != null && Object.hasOwnProperty.call(message, "cppSettings"))
                        $root.google.api.CppSettings.encode(message.cppSettings, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                    if (message.phpSettings != null && Object.hasOwnProperty.call(message, "phpSettings"))
                        $root.google.api.PhpSettings.encode(message.phpSettings, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                    if (message.pythonSettings != null && Object.hasOwnProperty.call(message, "pythonSettings"))
                        $root.google.api.PythonSettings.encode(message.pythonSettings, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();
                    if (message.nodeSettings != null && Object.hasOwnProperty.call(message, "nodeSettings"))
                        $root.google.api.NodeSettings.encode(message.nodeSettings, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
                    if (message.dotnetSettings != null && Object.hasOwnProperty.call(message, "dotnetSettings"))
                        $root.google.api.DotnetSettings.encode(message.dotnetSettings, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                    if (message.rubySettings != null && Object.hasOwnProperty.call(message, "rubySettings"))
                        $root.google.api.RubySettings.encode(message.rubySettings, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();
                    if (message.goSettings != null && Object.hasOwnProperty.call(message, "goSettings"))
                        $root.google.api.GoSettings.encode(message.goSettings, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ClientLibrarySettings message, length delimited. Does not implicitly {@link google.api.ClientLibrarySettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.IClientLibrarySettings} message ClientLibrarySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ClientLibrarySettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ClientLibrarySettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClientLibrarySettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ClientLibrarySettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.version = reader.string();
                                break;
                            }
                        case 2: {
                                message.launchStage = reader.int32();
                                break;
                            }
                        case 3: {
                                message.restNumericEnums = reader.bool();
                                break;
                            }
                        case 21: {
                                message.javaSettings = $root.google.api.JavaSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 22: {
                                message.cppSettings = $root.google.api.CppSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 23: {
                                message.phpSettings = $root.google.api.PhpSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 24: {
                                message.pythonSettings = $root.google.api.PythonSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 25: {
                                message.nodeSettings = $root.google.api.NodeSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 26: {
                                message.dotnetSettings = $root.google.api.DotnetSettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 27: {
                                message.rubySettings = $root.google.api.RubySettings.decode(reader, reader.uint32());
                                break;
                            }
                        case 28: {
                                message.goSettings = $root.google.api.GoSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ClientLibrarySettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ClientLibrarySettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ClientLibrarySettings message.
                 * @function verify
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ClientLibrarySettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (!$util.isString(message.version))
                            return "version: string expected";
                    if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                        switch (message.launchStage) {
                        default:
                            return "launchStage: enum value expected";
                        case 0:
                        case 6:
                        case 7:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                        if (typeof message.restNumericEnums !== "boolean")
                            return "restNumericEnums: boolean expected";
                    if (message.javaSettings != null && message.hasOwnProperty("javaSettings")) {
                        var error = $root.google.api.JavaSettings.verify(message.javaSettings);
                        if (error)
                            return "javaSettings." + error;
                    }
                    if (message.cppSettings != null && message.hasOwnProperty("cppSettings")) {
                        var error = $root.google.api.CppSettings.verify(message.cppSettings);
                        if (error)
                            return "cppSettings." + error;
                    }
                    if (message.phpSettings != null && message.hasOwnProperty("phpSettings")) {
                        var error = $root.google.api.PhpSettings.verify(message.phpSettings);
                        if (error)
                            return "phpSettings." + error;
                    }
                    if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings")) {
                        var error = $root.google.api.PythonSettings.verify(message.pythonSettings);
                        if (error)
                            return "pythonSettings." + error;
                    }
                    if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings")) {
                        var error = $root.google.api.NodeSettings.verify(message.nodeSettings);
                        if (error)
                            return "nodeSettings." + error;
                    }
                    if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings")) {
                        var error = $root.google.api.DotnetSettings.verify(message.dotnetSettings);
                        if (error)
                            return "dotnetSettings." + error;
                    }
                    if (message.rubySettings != null && message.hasOwnProperty("rubySettings")) {
                        var error = $root.google.api.RubySettings.verify(message.rubySettings);
                        if (error)
                            return "rubySettings." + error;
                    }
                    if (message.goSettings != null && message.hasOwnProperty("goSettings")) {
                        var error = $root.google.api.GoSettings.verify(message.goSettings);
                        if (error)
                            return "goSettings." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ClientLibrarySettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ClientLibrarySettings} ClientLibrarySettings
                 */
                ClientLibrarySettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ClientLibrarySettings)
                        return object;
                    var message = new $root.google.api.ClientLibrarySettings();
                    if (object.version != null)
                        message.version = String(object.version);
                    switch (object.launchStage) {
                    default:
                        if (typeof object.launchStage === "number") {
                            message.launchStage = object.launchStage;
                            break;
                        }
                        break;
                    case "LAUNCH_STAGE_UNSPECIFIED":
                    case 0:
                        message.launchStage = 0;
                        break;
                    case "UNIMPLEMENTED":
                    case 6:
                        message.launchStage = 6;
                        break;
                    case "PRELAUNCH":
                    case 7:
                        message.launchStage = 7;
                        break;
                    case "EARLY_ACCESS":
                    case 1:
                        message.launchStage = 1;
                        break;
                    case "ALPHA":
                    case 2:
                        message.launchStage = 2;
                        break;
                    case "BETA":
                    case 3:
                        message.launchStage = 3;
                        break;
                    case "GA":
                    case 4:
                        message.launchStage = 4;
                        break;
                    case "DEPRECATED":
                    case 5:
                        message.launchStage = 5;
                        break;
                    }
                    if (object.restNumericEnums != null)
                        message.restNumericEnums = Boolean(object.restNumericEnums);
                    if (object.javaSettings != null) {
                        if (typeof object.javaSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.javaSettings: object expected");
                        message.javaSettings = $root.google.api.JavaSettings.fromObject(object.javaSettings);
                    }
                    if (object.cppSettings != null) {
                        if (typeof object.cppSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.cppSettings: object expected");
                        message.cppSettings = $root.google.api.CppSettings.fromObject(object.cppSettings);
                    }
                    if (object.phpSettings != null) {
                        if (typeof object.phpSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.phpSettings: object expected");
                        message.phpSettings = $root.google.api.PhpSettings.fromObject(object.phpSettings);
                    }
                    if (object.pythonSettings != null) {
                        if (typeof object.pythonSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.pythonSettings: object expected");
                        message.pythonSettings = $root.google.api.PythonSettings.fromObject(object.pythonSettings);
                    }
                    if (object.nodeSettings != null) {
                        if (typeof object.nodeSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.nodeSettings: object expected");
                        message.nodeSettings = $root.google.api.NodeSettings.fromObject(object.nodeSettings);
                    }
                    if (object.dotnetSettings != null) {
                        if (typeof object.dotnetSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.dotnetSettings: object expected");
                        message.dotnetSettings = $root.google.api.DotnetSettings.fromObject(object.dotnetSettings);
                    }
                    if (object.rubySettings != null) {
                        if (typeof object.rubySettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.rubySettings: object expected");
                        message.rubySettings = $root.google.api.RubySettings.fromObject(object.rubySettings);
                    }
                    if (object.goSettings != null) {
                        if (typeof object.goSettings !== "object")
                            throw TypeError(".google.api.ClientLibrarySettings.goSettings: object expected");
                        message.goSettings = $root.google.api.GoSettings.fromObject(object.goSettings);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ClientLibrarySettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {google.api.ClientLibrarySettings} message ClientLibrarySettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ClientLibrarySettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.version = "";
                        object.launchStage = options.enums === String ? "LAUNCH_STAGE_UNSPECIFIED" : 0;
                        object.restNumericEnums = false;
                        object.javaSettings = null;
                        object.cppSettings = null;
                        object.phpSettings = null;
                        object.pythonSettings = null;
                        object.nodeSettings = null;
                        object.dotnetSettings = null;
                        object.rubySettings = null;
                        object.goSettings = null;
                    }
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = message.version;
                    if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                        object.launchStage = options.enums === String ? $root.google.api.LaunchStage[message.launchStage] === undefined ? message.launchStage : $root.google.api.LaunchStage[message.launchStage] : message.launchStage;
                    if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                        object.restNumericEnums = message.restNumericEnums;
                    if (message.javaSettings != null && message.hasOwnProperty("javaSettings"))
                        object.javaSettings = $root.google.api.JavaSettings.toObject(message.javaSettings, options);
                    if (message.cppSettings != null && message.hasOwnProperty("cppSettings"))
                        object.cppSettings = $root.google.api.CppSettings.toObject(message.cppSettings, options);
                    if (message.phpSettings != null && message.hasOwnProperty("phpSettings"))
                        object.phpSettings = $root.google.api.PhpSettings.toObject(message.phpSettings, options);
                    if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings"))
                        object.pythonSettings = $root.google.api.PythonSettings.toObject(message.pythonSettings, options);
                    if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings"))
                        object.nodeSettings = $root.google.api.NodeSettings.toObject(message.nodeSettings, options);
                    if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings"))
                        object.dotnetSettings = $root.google.api.DotnetSettings.toObject(message.dotnetSettings, options);
                    if (message.rubySettings != null && message.hasOwnProperty("rubySettings"))
                        object.rubySettings = $root.google.api.RubySettings.toObject(message.rubySettings, options);
                    if (message.goSettings != null && message.hasOwnProperty("goSettings"))
                        object.goSettings = $root.google.api.GoSettings.toObject(message.goSettings, options);
                    return object;
                };
    
                /**
                 * Converts this ClientLibrarySettings to JSON.
                 * @function toJSON
                 * @memberof google.api.ClientLibrarySettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ClientLibrarySettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ClientLibrarySettings
                 * @function getTypeUrl
                 * @memberof google.api.ClientLibrarySettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ClientLibrarySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ClientLibrarySettings";
                };
    
                return ClientLibrarySettings;
            })();
    
            api.Publishing = (function() {
    
                /**
                 * Properties of a Publishing.
                 * @memberof google.api
                 * @interface IPublishing
                 * @property {Array.<google.api.IMethodSettings>|null} [methodSettings] Publishing methodSettings
                 * @property {string|null} [newIssueUri] Publishing newIssueUri
                 * @property {string|null} [documentationUri] Publishing documentationUri
                 * @property {string|null} [apiShortName] Publishing apiShortName
                 * @property {string|null} [githubLabel] Publishing githubLabel
                 * @property {Array.<string>|null} [codeownerGithubTeams] Publishing codeownerGithubTeams
                 * @property {string|null} [docTagPrefix] Publishing docTagPrefix
                 * @property {google.api.ClientLibraryOrganization|null} [organization] Publishing organization
                 * @property {Array.<google.api.IClientLibrarySettings>|null} [librarySettings] Publishing librarySettings
                 */
    
                /**
                 * Constructs a new Publishing.
                 * @memberof google.api
                 * @classdesc Represents a Publishing.
                 * @implements IPublishing
                 * @constructor
                 * @param {google.api.IPublishing=} [properties] Properties to set
                 */
                function Publishing(properties) {
                    this.methodSettings = [];
                    this.codeownerGithubTeams = [];
                    this.librarySettings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Publishing methodSettings.
                 * @member {Array.<google.api.IMethodSettings>} methodSettings
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.methodSettings = $util.emptyArray;
    
                /**
                 * Publishing newIssueUri.
                 * @member {string} newIssueUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.newIssueUri = "";
    
                /**
                 * Publishing documentationUri.
                 * @member {string} documentationUri
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.documentationUri = "";
    
                /**
                 * Publishing apiShortName.
                 * @member {string} apiShortName
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.apiShortName = "";
    
                /**
                 * Publishing githubLabel.
                 * @member {string} githubLabel
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.githubLabel = "";
    
                /**
                 * Publishing codeownerGithubTeams.
                 * @member {Array.<string>} codeownerGithubTeams
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.codeownerGithubTeams = $util.emptyArray;
    
                /**
                 * Publishing docTagPrefix.
                 * @member {string} docTagPrefix
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.docTagPrefix = "";
    
                /**
                 * Publishing organization.
                 * @member {google.api.ClientLibraryOrganization} organization
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.organization = 0;
    
                /**
                 * Publishing librarySettings.
                 * @member {Array.<google.api.IClientLibrarySettings>} librarySettings
                 * @memberof google.api.Publishing
                 * @instance
                 */
                Publishing.prototype.librarySettings = $util.emptyArray;
    
                /**
                 * Creates a new Publishing instance using the specified properties.
                 * @function create
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing=} [properties] Properties to set
                 * @returns {google.api.Publishing} Publishing instance
                 */
                Publishing.create = function create(properties) {
                    return new Publishing(properties);
                };
    
                /**
                 * Encodes the specified Publishing message. Does not implicitly {@link google.api.Publishing.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing} message Publishing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Publishing.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.methodSettings != null && message.methodSettings.length)
                        for (var i = 0; i < message.methodSettings.length; ++i)
                            $root.google.api.MethodSettings.encode(message.methodSettings[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.newIssueUri != null && Object.hasOwnProperty.call(message, "newIssueUri"))
                        writer.uint32(/* id 101, wireType 2 =*/810).string(message.newIssueUri);
                    if (message.documentationUri != null && Object.hasOwnProperty.call(message, "documentationUri"))
                        writer.uint32(/* id 102, wireType 2 =*/818).string(message.documentationUri);
                    if (message.apiShortName != null && Object.hasOwnProperty.call(message, "apiShortName"))
                        writer.uint32(/* id 103, wireType 2 =*/826).string(message.apiShortName);
                    if (message.githubLabel != null && Object.hasOwnProperty.call(message, "githubLabel"))
                        writer.uint32(/* id 104, wireType 2 =*/834).string(message.githubLabel);
                    if (message.codeownerGithubTeams != null && message.codeownerGithubTeams.length)
                        for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                            writer.uint32(/* id 105, wireType 2 =*/842).string(message.codeownerGithubTeams[i]);
                    if (message.docTagPrefix != null && Object.hasOwnProperty.call(message, "docTagPrefix"))
                        writer.uint32(/* id 106, wireType 2 =*/850).string(message.docTagPrefix);
                    if (message.organization != null && Object.hasOwnProperty.call(message, "organization"))
                        writer.uint32(/* id 107, wireType 0 =*/856).int32(message.organization);
                    if (message.librarySettings != null && message.librarySettings.length)
                        for (var i = 0; i < message.librarySettings.length; ++i)
                            $root.google.api.ClientLibrarySettings.encode(message.librarySettings[i], writer.uint32(/* id 109, wireType 2 =*/874).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Publishing message, length delimited. Does not implicitly {@link google.api.Publishing.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.IPublishing} message Publishing message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Publishing.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Publishing message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Publishing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Publishing} Publishing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Publishing.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Publishing();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.methodSettings && message.methodSettings.length))
                                    message.methodSettings = [];
                                message.methodSettings.push($root.google.api.MethodSettings.decode(reader, reader.uint32()));
                                break;
                            }
                        case 101: {
                                message.newIssueUri = reader.string();
                                break;
                            }
                        case 102: {
                                message.documentationUri = reader.string();
                                break;
                            }
                        case 103: {
                                message.apiShortName = reader.string();
                                break;
                            }
                        case 104: {
                                message.githubLabel = reader.string();
                                break;
                            }
                        case 105: {
                                if (!(message.codeownerGithubTeams && message.codeownerGithubTeams.length))
                                    message.codeownerGithubTeams = [];
                                message.codeownerGithubTeams.push(reader.string());
                                break;
                            }
                        case 106: {
                                message.docTagPrefix = reader.string();
                                break;
                            }
                        case 107: {
                                message.organization = reader.int32();
                                break;
                            }
                        case 109: {
                                if (!(message.librarySettings && message.librarySettings.length))
                                    message.librarySettings = [];
                                message.librarySettings.push($root.google.api.ClientLibrarySettings.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Publishing message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Publishing
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Publishing} Publishing
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Publishing.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Publishing message.
                 * @function verify
                 * @memberof google.api.Publishing
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Publishing.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.methodSettings != null && message.hasOwnProperty("methodSettings")) {
                        if (!Array.isArray(message.methodSettings))
                            return "methodSettings: array expected";
                        for (var i = 0; i < message.methodSettings.length; ++i) {
                            var error = $root.google.api.MethodSettings.verify(message.methodSettings[i]);
                            if (error)
                                return "methodSettings." + error;
                        }
                    }
                    if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                        if (!$util.isString(message.newIssueUri))
                            return "newIssueUri: string expected";
                    if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                        if (!$util.isString(message.documentationUri))
                            return "documentationUri: string expected";
                    if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                        if (!$util.isString(message.apiShortName))
                            return "apiShortName: string expected";
                    if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                        if (!$util.isString(message.githubLabel))
                            return "githubLabel: string expected";
                    if (message.codeownerGithubTeams != null && message.hasOwnProperty("codeownerGithubTeams")) {
                        if (!Array.isArray(message.codeownerGithubTeams))
                            return "codeownerGithubTeams: array expected";
                        for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                            if (!$util.isString(message.codeownerGithubTeams[i]))
                                return "codeownerGithubTeams: string[] expected";
                    }
                    if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                        if (!$util.isString(message.docTagPrefix))
                            return "docTagPrefix: string expected";
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        switch (message.organization) {
                        default:
                            return "organization: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                            break;
                        }
                    if (message.librarySettings != null && message.hasOwnProperty("librarySettings")) {
                        if (!Array.isArray(message.librarySettings))
                            return "librarySettings: array expected";
                        for (var i = 0; i < message.librarySettings.length; ++i) {
                            var error = $root.google.api.ClientLibrarySettings.verify(message.librarySettings[i]);
                            if (error)
                                return "librarySettings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Publishing message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Publishing
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Publishing} Publishing
                 */
                Publishing.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Publishing)
                        return object;
                    var message = new $root.google.api.Publishing();
                    if (object.methodSettings) {
                        if (!Array.isArray(object.methodSettings))
                            throw TypeError(".google.api.Publishing.methodSettings: array expected");
                        message.methodSettings = [];
                        for (var i = 0; i < object.methodSettings.length; ++i) {
                            if (typeof object.methodSettings[i] !== "object")
                                throw TypeError(".google.api.Publishing.methodSettings: object expected");
                            message.methodSettings[i] = $root.google.api.MethodSettings.fromObject(object.methodSettings[i]);
                        }
                    }
                    if (object.newIssueUri != null)
                        message.newIssueUri = String(object.newIssueUri);
                    if (object.documentationUri != null)
                        message.documentationUri = String(object.documentationUri);
                    if (object.apiShortName != null)
                        message.apiShortName = String(object.apiShortName);
                    if (object.githubLabel != null)
                        message.githubLabel = String(object.githubLabel);
                    if (object.codeownerGithubTeams) {
                        if (!Array.isArray(object.codeownerGithubTeams))
                            throw TypeError(".google.api.Publishing.codeownerGithubTeams: array expected");
                        message.codeownerGithubTeams = [];
                        for (var i = 0; i < object.codeownerGithubTeams.length; ++i)
                            message.codeownerGithubTeams[i] = String(object.codeownerGithubTeams[i]);
                    }
                    if (object.docTagPrefix != null)
                        message.docTagPrefix = String(object.docTagPrefix);
                    switch (object.organization) {
                    default:
                        if (typeof object.organization === "number") {
                            message.organization = object.organization;
                            break;
                        }
                        break;
                    case "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED":
                    case 0:
                        message.organization = 0;
                        break;
                    case "CLOUD":
                    case 1:
                        message.organization = 1;
                        break;
                    case "ADS":
                    case 2:
                        message.organization = 2;
                        break;
                    case "PHOTOS":
                    case 3:
                        message.organization = 3;
                        break;
                    case "STREET_VIEW":
                    case 4:
                        message.organization = 4;
                        break;
                    }
                    if (object.librarySettings) {
                        if (!Array.isArray(object.librarySettings))
                            throw TypeError(".google.api.Publishing.librarySettings: array expected");
                        message.librarySettings = [];
                        for (var i = 0; i < object.librarySettings.length; ++i) {
                            if (typeof object.librarySettings[i] !== "object")
                                throw TypeError(".google.api.Publishing.librarySettings: object expected");
                            message.librarySettings[i] = $root.google.api.ClientLibrarySettings.fromObject(object.librarySettings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Publishing message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Publishing
                 * @static
                 * @param {google.api.Publishing} message Publishing
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Publishing.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.methodSettings = [];
                        object.codeownerGithubTeams = [];
                        object.librarySettings = [];
                    }
                    if (options.defaults) {
                        object.newIssueUri = "";
                        object.documentationUri = "";
                        object.apiShortName = "";
                        object.githubLabel = "";
                        object.docTagPrefix = "";
                        object.organization = options.enums === String ? "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED" : 0;
                    }
                    if (message.methodSettings && message.methodSettings.length) {
                        object.methodSettings = [];
                        for (var j = 0; j < message.methodSettings.length; ++j)
                            object.methodSettings[j] = $root.google.api.MethodSettings.toObject(message.methodSettings[j], options);
                    }
                    if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                        object.newIssueUri = message.newIssueUri;
                    if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                        object.documentationUri = message.documentationUri;
                    if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                        object.apiShortName = message.apiShortName;
                    if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                        object.githubLabel = message.githubLabel;
                    if (message.codeownerGithubTeams && message.codeownerGithubTeams.length) {
                        object.codeownerGithubTeams = [];
                        for (var j = 0; j < message.codeownerGithubTeams.length; ++j)
                            object.codeownerGithubTeams[j] = message.codeownerGithubTeams[j];
                    }
                    if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                        object.docTagPrefix = message.docTagPrefix;
                    if (message.organization != null && message.hasOwnProperty("organization"))
                        object.organization = options.enums === String ? $root.google.api.ClientLibraryOrganization[message.organization] === undefined ? message.organization : $root.google.api.ClientLibraryOrganization[message.organization] : message.organization;
                    if (message.librarySettings && message.librarySettings.length) {
                        object.librarySettings = [];
                        for (var j = 0; j < message.librarySettings.length; ++j)
                            object.librarySettings[j] = $root.google.api.ClientLibrarySettings.toObject(message.librarySettings[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Publishing to JSON.
                 * @function toJSON
                 * @memberof google.api.Publishing
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Publishing.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Publishing
                 * @function getTypeUrl
                 * @memberof google.api.Publishing
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Publishing.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.Publishing";
                };
    
                return Publishing;
            })();
    
            api.JavaSettings = (function() {
    
                /**
                 * Properties of a JavaSettings.
                 * @memberof google.api
                 * @interface IJavaSettings
                 * @property {string|null} [libraryPackage] JavaSettings libraryPackage
                 * @property {Object.<string,string>|null} [serviceClassNames] JavaSettings serviceClassNames
                 * @property {google.api.ICommonLanguageSettings|null} [common] JavaSettings common
                 */
    
                /**
                 * Constructs a new JavaSettings.
                 * @memberof google.api
                 * @classdesc Represents a JavaSettings.
                 * @implements IJavaSettings
                 * @constructor
                 * @param {google.api.IJavaSettings=} [properties] Properties to set
                 */
                function JavaSettings(properties) {
                    this.serviceClassNames = {};
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * JavaSettings libraryPackage.
                 * @member {string} libraryPackage
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.libraryPackage = "";
    
                /**
                 * JavaSettings serviceClassNames.
                 * @member {Object.<string,string>} serviceClassNames
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.serviceClassNames = $util.emptyObject;
    
                /**
                 * JavaSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.JavaSettings
                 * @instance
                 */
                JavaSettings.prototype.common = null;
    
                /**
                 * Creates a new JavaSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings=} [properties] Properties to set
                 * @returns {google.api.JavaSettings} JavaSettings instance
                 */
                JavaSettings.create = function create(properties) {
                    return new JavaSettings(properties);
                };
    
                /**
                 * Encodes the specified JavaSettings message. Does not implicitly {@link google.api.JavaSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings} message JavaSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                JavaSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.libraryPackage != null && Object.hasOwnProperty.call(message, "libraryPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.libraryPackage);
                    if (message.serviceClassNames != null && Object.hasOwnProperty.call(message, "serviceClassNames"))
                        for (var keys = Object.keys(message.serviceClassNames), i = 0; i < keys.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.serviceClassNames[keys[i]]).ldelim();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified JavaSettings message, length delimited. Does not implicitly {@link google.api.JavaSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.IJavaSettings} message JavaSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                JavaSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a JavaSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.JavaSettings} JavaSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                JavaSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.JavaSettings(), key, value;
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.libraryPackage = reader.string();
                                break;
                            }
                        case 2: {
                                if (message.serviceClassNames === $util.emptyObject)
                                    message.serviceClassNames = {};
                                var end2 = reader.uint32() + reader.pos;
                                key = "";
                                value = "";
                                while (reader.pos < end2) {
                                    var tag2 = reader.uint32();
                                    switch (tag2 >>> 3) {
                                    case 1:
                                        key = reader.string();
                                        break;
                                    case 2:
                                        value = reader.string();
                                        break;
                                    default:
                                        reader.skipType(tag2 & 7);
                                        break;
                                    }
                                }
                                message.serviceClassNames[key] = value;
                                break;
                            }
                        case 3: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a JavaSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.JavaSettings} JavaSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                JavaSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a JavaSettings message.
                 * @function verify
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                JavaSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                        if (!$util.isString(message.libraryPackage))
                            return "libraryPackage: string expected";
                    if (message.serviceClassNames != null && message.hasOwnProperty("serviceClassNames")) {
                        if (!$util.isObject(message.serviceClassNames))
                            return "serviceClassNames: object expected";
                        var key = Object.keys(message.serviceClassNames);
                        for (var i = 0; i < key.length; ++i)
                            if (!$util.isString(message.serviceClassNames[key[i]]))
                                return "serviceClassNames: string{k:string} expected";
                    }
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a JavaSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.JavaSettings} JavaSettings
                 */
                JavaSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.JavaSettings)
                        return object;
                    var message = new $root.google.api.JavaSettings();
                    if (object.libraryPackage != null)
                        message.libraryPackage = String(object.libraryPackage);
                    if (object.serviceClassNames) {
                        if (typeof object.serviceClassNames !== "object")
                            throw TypeError(".google.api.JavaSettings.serviceClassNames: object expected");
                        message.serviceClassNames = {};
                        for (var keys = Object.keys(object.serviceClassNames), i = 0; i < keys.length; ++i)
                            message.serviceClassNames[keys[i]] = String(object.serviceClassNames[keys[i]]);
                    }
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.JavaSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a JavaSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {google.api.JavaSettings} message JavaSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                JavaSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.objects || options.defaults)
                        object.serviceClassNames = {};
                    if (options.defaults) {
                        object.libraryPackage = "";
                        object.common = null;
                    }
                    if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                        object.libraryPackage = message.libraryPackage;
                    var keys2;
                    if (message.serviceClassNames && (keys2 = Object.keys(message.serviceClassNames)).length) {
                        object.serviceClassNames = {};
                        for (var j = 0; j < keys2.length; ++j)
                            object.serviceClassNames[keys2[j]] = message.serviceClassNames[keys2[j]];
                    }
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this JavaSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.JavaSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                JavaSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for JavaSettings
                 * @function getTypeUrl
                 * @memberof google.api.JavaSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                JavaSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.JavaSettings";
                };
    
                return JavaSettings;
            })();
    
            api.CppSettings = (function() {
    
                /**
                 * Properties of a CppSettings.
                 * @memberof google.api
                 * @interface ICppSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] CppSettings common
                 */
    
                /**
                 * Constructs a new CppSettings.
                 * @memberof google.api
                 * @classdesc Represents a CppSettings.
                 * @implements ICppSettings
                 * @constructor
                 * @param {google.api.ICppSettings=} [properties] Properties to set
                 */
                function CppSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CppSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.CppSettings
                 * @instance
                 */
                CppSettings.prototype.common = null;
    
                /**
                 * Creates a new CppSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings=} [properties] Properties to set
                 * @returns {google.api.CppSettings} CppSettings instance
                 */
                CppSettings.create = function create(properties) {
                    return new CppSettings(properties);
                };
    
                /**
                 * Encodes the specified CppSettings message. Does not implicitly {@link google.api.CppSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings} message CppSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CppSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified CppSettings message, length delimited. Does not implicitly {@link google.api.CppSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.ICppSettings} message CppSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CppSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CppSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CppSettings} CppSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CppSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CppSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CppSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CppSettings} CppSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CppSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CppSettings message.
                 * @function verify
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CppSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a CppSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CppSettings} CppSettings
                 */
                CppSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CppSettings)
                        return object;
                    var message = new $root.google.api.CppSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.CppSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a CppSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {google.api.CppSettings} message CppSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CppSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this CppSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.CppSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CppSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CppSettings
                 * @function getTypeUrl
                 * @memberof google.api.CppSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CppSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.CppSettings";
                };
    
                return CppSettings;
            })();
    
            api.PhpSettings = (function() {
    
                /**
                 * Properties of a PhpSettings.
                 * @memberof google.api
                 * @interface IPhpSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] PhpSettings common
                 */
    
                /**
                 * Constructs a new PhpSettings.
                 * @memberof google.api
                 * @classdesc Represents a PhpSettings.
                 * @implements IPhpSettings
                 * @constructor
                 * @param {google.api.IPhpSettings=} [properties] Properties to set
                 */
                function PhpSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PhpSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.PhpSettings
                 * @instance
                 */
                PhpSettings.prototype.common = null;
    
                /**
                 * Creates a new PhpSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings=} [properties] Properties to set
                 * @returns {google.api.PhpSettings} PhpSettings instance
                 */
                PhpSettings.create = function create(properties) {
                    return new PhpSettings(properties);
                };
    
                /**
                 * Encodes the specified PhpSettings message. Does not implicitly {@link google.api.PhpSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings} message PhpSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PhpSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PhpSettings message, length delimited. Does not implicitly {@link google.api.PhpSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.IPhpSettings} message PhpSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PhpSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PhpSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.PhpSettings} PhpSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PhpSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.PhpSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PhpSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.PhpSettings} PhpSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PhpSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PhpSettings message.
                 * @function verify
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PhpSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PhpSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.PhpSettings} PhpSettings
                 */
                PhpSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.PhpSettings)
                        return object;
                    var message = new $root.google.api.PhpSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.PhpSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PhpSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {google.api.PhpSettings} message PhpSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PhpSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this PhpSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.PhpSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PhpSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PhpSettings
                 * @function getTypeUrl
                 * @memberof google.api.PhpSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PhpSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.PhpSettings";
                };
    
                return PhpSettings;
            })();
    
            api.PythonSettings = (function() {
    
                /**
                 * Properties of a PythonSettings.
                 * @memberof google.api
                 * @interface IPythonSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] PythonSettings common
                 */
    
                /**
                 * Constructs a new PythonSettings.
                 * @memberof google.api
                 * @classdesc Represents a PythonSettings.
                 * @implements IPythonSettings
                 * @constructor
                 * @param {google.api.IPythonSettings=} [properties] Properties to set
                 */
                function PythonSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PythonSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.PythonSettings
                 * @instance
                 */
                PythonSettings.prototype.common = null;
    
                /**
                 * Creates a new PythonSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings=} [properties] Properties to set
                 * @returns {google.api.PythonSettings} PythonSettings instance
                 */
                PythonSettings.create = function create(properties) {
                    return new PythonSettings(properties);
                };
    
                /**
                 * Encodes the specified PythonSettings message. Does not implicitly {@link google.api.PythonSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings} message PythonSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PythonSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified PythonSettings message, length delimited. Does not implicitly {@link google.api.PythonSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.IPythonSettings} message PythonSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PythonSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PythonSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.PythonSettings} PythonSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PythonSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.PythonSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PythonSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.PythonSettings} PythonSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PythonSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PythonSettings message.
                 * @function verify
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PythonSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a PythonSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.PythonSettings} PythonSettings
                 */
                PythonSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.PythonSettings)
                        return object;
                    var message = new $root.google.api.PythonSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.PythonSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a PythonSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {google.api.PythonSettings} message PythonSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PythonSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this PythonSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.PythonSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PythonSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for PythonSettings
                 * @function getTypeUrl
                 * @memberof google.api.PythonSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                PythonSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.PythonSettings";
                };
    
                return PythonSettings;
            })();
    
            api.NodeSettings = (function() {
    
                /**
                 * Properties of a NodeSettings.
                 * @memberof google.api
                 * @interface INodeSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] NodeSettings common
                 */
    
                /**
                 * Constructs a new NodeSettings.
                 * @memberof google.api
                 * @classdesc Represents a NodeSettings.
                 * @implements INodeSettings
                 * @constructor
                 * @param {google.api.INodeSettings=} [properties] Properties to set
                 */
                function NodeSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * NodeSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.NodeSettings
                 * @instance
                 */
                NodeSettings.prototype.common = null;
    
                /**
                 * Creates a new NodeSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings=} [properties] Properties to set
                 * @returns {google.api.NodeSettings} NodeSettings instance
                 */
                NodeSettings.create = function create(properties) {
                    return new NodeSettings(properties);
                };
    
                /**
                 * Encodes the specified NodeSettings message. Does not implicitly {@link google.api.NodeSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings} message NodeSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NodeSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified NodeSettings message, length delimited. Does not implicitly {@link google.api.NodeSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.INodeSettings} message NodeSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NodeSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a NodeSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.NodeSettings} NodeSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NodeSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.NodeSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a NodeSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.NodeSettings} NodeSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NodeSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a NodeSettings message.
                 * @function verify
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NodeSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a NodeSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.NodeSettings} NodeSettings
                 */
                NodeSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.NodeSettings)
                        return object;
                    var message = new $root.google.api.NodeSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.NodeSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a NodeSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {google.api.NodeSettings} message NodeSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NodeSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this NodeSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.NodeSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NodeSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for NodeSettings
                 * @function getTypeUrl
                 * @memberof google.api.NodeSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NodeSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.NodeSettings";
                };
    
                return NodeSettings;
            })();
    
            api.DotnetSettings = (function() {
    
                /**
                 * Properties of a DotnetSettings.
                 * @memberof google.api
                 * @interface IDotnetSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] DotnetSettings common
                 */
    
                /**
                 * Constructs a new DotnetSettings.
                 * @memberof google.api
                 * @classdesc Represents a DotnetSettings.
                 * @implements IDotnetSettings
                 * @constructor
                 * @param {google.api.IDotnetSettings=} [properties] Properties to set
                 */
                function DotnetSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DotnetSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.DotnetSettings
                 * @instance
                 */
                DotnetSettings.prototype.common = null;
    
                /**
                 * Creates a new DotnetSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings=} [properties] Properties to set
                 * @returns {google.api.DotnetSettings} DotnetSettings instance
                 */
                DotnetSettings.create = function create(properties) {
                    return new DotnetSettings(properties);
                };
    
                /**
                 * Encodes the specified DotnetSettings message. Does not implicitly {@link google.api.DotnetSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings} message DotnetSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DotnetSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified DotnetSettings message, length delimited. Does not implicitly {@link google.api.DotnetSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.IDotnetSettings} message DotnetSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DotnetSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DotnetSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DotnetSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.DotnetSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DotnetSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DotnetSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DotnetSettings message.
                 * @function verify
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DotnetSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a DotnetSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.DotnetSettings} DotnetSettings
                 */
                DotnetSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.DotnetSettings)
                        return object;
                    var message = new $root.google.api.DotnetSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.DotnetSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DotnetSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {google.api.DotnetSettings} message DotnetSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DotnetSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this DotnetSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.DotnetSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DotnetSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DotnetSettings
                 * @function getTypeUrl
                 * @memberof google.api.DotnetSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DotnetSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.DotnetSettings";
                };
    
                return DotnetSettings;
            })();
    
            api.RubySettings = (function() {
    
                /**
                 * Properties of a RubySettings.
                 * @memberof google.api
                 * @interface IRubySettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] RubySettings common
                 */
    
                /**
                 * Constructs a new RubySettings.
                 * @memberof google.api
                 * @classdesc Represents a RubySettings.
                 * @implements IRubySettings
                 * @constructor
                 * @param {google.api.IRubySettings=} [properties] Properties to set
                 */
                function RubySettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RubySettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.RubySettings
                 * @instance
                 */
                RubySettings.prototype.common = null;
    
                /**
                 * Creates a new RubySettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings=} [properties] Properties to set
                 * @returns {google.api.RubySettings} RubySettings instance
                 */
                RubySettings.create = function create(properties) {
                    return new RubySettings(properties);
                };
    
                /**
                 * Encodes the specified RubySettings message. Does not implicitly {@link google.api.RubySettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings} message RubySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RubySettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified RubySettings message, length delimited. Does not implicitly {@link google.api.RubySettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.IRubySettings} message RubySettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RubySettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RubySettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.RubySettings} RubySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RubySettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.RubySettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RubySettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.RubySettings} RubySettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RubySettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RubySettings message.
                 * @function verify
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RubySettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a RubySettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.RubySettings} RubySettings
                 */
                RubySettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.RubySettings)
                        return object;
                    var message = new $root.google.api.RubySettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.RubySettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RubySettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {google.api.RubySettings} message RubySettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RubySettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this RubySettings to JSON.
                 * @function toJSON
                 * @memberof google.api.RubySettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RubySettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for RubySettings
                 * @function getTypeUrl
                 * @memberof google.api.RubySettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                RubySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.RubySettings";
                };
    
                return RubySettings;
            })();
    
            api.GoSettings = (function() {
    
                /**
                 * Properties of a GoSettings.
                 * @memberof google.api
                 * @interface IGoSettings
                 * @property {google.api.ICommonLanguageSettings|null} [common] GoSettings common
                 */
    
                /**
                 * Constructs a new GoSettings.
                 * @memberof google.api
                 * @classdesc Represents a GoSettings.
                 * @implements IGoSettings
                 * @constructor
                 * @param {google.api.IGoSettings=} [properties] Properties to set
                 */
                function GoSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GoSettings common.
                 * @member {google.api.ICommonLanguageSettings|null|undefined} common
                 * @memberof google.api.GoSettings
                 * @instance
                 */
                GoSettings.prototype.common = null;
    
                /**
                 * Creates a new GoSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings=} [properties] Properties to set
                 * @returns {google.api.GoSettings} GoSettings instance
                 */
                GoSettings.create = function create(properties) {
                    return new GoSettings(properties);
                };
    
                /**
                 * Encodes the specified GoSettings message. Does not implicitly {@link google.api.GoSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings} message GoSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GoSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                        $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GoSettings message, length delimited. Does not implicitly {@link google.api.GoSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.IGoSettings} message GoSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GoSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GoSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.GoSettings} GoSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GoSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.GoSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GoSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.GoSettings} GoSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GoSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GoSettings message.
                 * @function verify
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GoSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.common != null && message.hasOwnProperty("common")) {
                        var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                        if (error)
                            return "common." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a GoSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.GoSettings} GoSettings
                 */
                GoSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.GoSettings)
                        return object;
                    var message = new $root.google.api.GoSettings();
                    if (object.common != null) {
                        if (typeof object.common !== "object")
                            throw TypeError(".google.api.GoSettings.common: object expected");
                        message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GoSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {google.api.GoSettings} message GoSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GoSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.common = null;
                    if (message.common != null && message.hasOwnProperty("common"))
                        object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
                    return object;
                };
    
                /**
                 * Converts this GoSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.GoSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GoSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GoSettings
                 * @function getTypeUrl
                 * @memberof google.api.GoSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GoSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.GoSettings";
                };
    
                return GoSettings;
            })();
    
            api.MethodSettings = (function() {
    
                /**
                 * Properties of a MethodSettings.
                 * @memberof google.api
                 * @interface IMethodSettings
                 * @property {string|null} [selector] MethodSettings selector
                 * @property {google.api.MethodSettings.ILongRunning|null} [longRunning] MethodSettings longRunning
                 */
    
                /**
                 * Constructs a new MethodSettings.
                 * @memberof google.api
                 * @classdesc Represents a MethodSettings.
                 * @implements IMethodSettings
                 * @constructor
                 * @param {google.api.IMethodSettings=} [properties] Properties to set
                 */
                function MethodSettings(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodSettings selector.
                 * @member {string} selector
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.selector = "";
    
                /**
                 * MethodSettings longRunning.
                 * @member {google.api.MethodSettings.ILongRunning|null|undefined} longRunning
                 * @memberof google.api.MethodSettings
                 * @instance
                 */
                MethodSettings.prototype.longRunning = null;
    
                /**
                 * Creates a new MethodSettings instance using the specified properties.
                 * @function create
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings=} [properties] Properties to set
                 * @returns {google.api.MethodSettings} MethodSettings instance
                 */
                MethodSettings.create = function create(properties) {
                    return new MethodSettings(properties);
                };
    
                /**
                 * Encodes the specified MethodSettings message. Does not implicitly {@link google.api.MethodSettings.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings} message MethodSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodSettings.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.longRunning != null && Object.hasOwnProperty.call(message, "longRunning"))
                        $root.google.api.MethodSettings.LongRunning.encode(message.longRunning, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodSettings message, length delimited. Does not implicitly {@link google.api.MethodSettings.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.IMethodSettings} message MethodSettings message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodSettings.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodSettings message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.MethodSettings} MethodSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodSettings.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.selector = reader.string();
                                break;
                            }
                        case 2: {
                                message.longRunning = $root.google.api.MethodSettings.LongRunning.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodSettings message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.MethodSettings} MethodSettings
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodSettings.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodSettings message.
                 * @function verify
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodSettings.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.longRunning != null && message.hasOwnProperty("longRunning")) {
                        var error = $root.google.api.MethodSettings.LongRunning.verify(message.longRunning);
                        if (error)
                            return "longRunning." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodSettings message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.MethodSettings} MethodSettings
                 */
                MethodSettings.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.MethodSettings)
                        return object;
                    var message = new $root.google.api.MethodSettings();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.longRunning != null) {
                        if (typeof object.longRunning !== "object")
                            throw TypeError(".google.api.MethodSettings.longRunning: object expected");
                        message.longRunning = $root.google.api.MethodSettings.LongRunning.fromObject(object.longRunning);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodSettings message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {google.api.MethodSettings} message MethodSettings
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodSettings.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.selector = "";
                        object.longRunning = null;
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.longRunning != null && message.hasOwnProperty("longRunning"))
                        object.longRunning = $root.google.api.MethodSettings.LongRunning.toObject(message.longRunning, options);
                    return object;
                };
    
                /**
                 * Converts this MethodSettings to JSON.
                 * @function toJSON
                 * @memberof google.api.MethodSettings
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodSettings.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodSettings
                 * @function getTypeUrl
                 * @memberof google.api.MethodSettings
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.MethodSettings";
                };
    
                MethodSettings.LongRunning = (function() {
    
                    /**
                     * Properties of a LongRunning.
                     * @memberof google.api.MethodSettings
                     * @interface ILongRunning
                     * @property {google.protobuf.IDuration|null} [initialPollDelay] LongRunning initialPollDelay
                     * @property {number|null} [pollDelayMultiplier] LongRunning pollDelayMultiplier
                     * @property {google.protobuf.IDuration|null} [maxPollDelay] LongRunning maxPollDelay
                     * @property {google.protobuf.IDuration|null} [totalPollTimeout] LongRunning totalPollTimeout
                     */
    
                    /**
                     * Constructs a new LongRunning.
                     * @memberof google.api.MethodSettings
                     * @classdesc Represents a LongRunning.
                     * @implements ILongRunning
                     * @constructor
                     * @param {google.api.MethodSettings.ILongRunning=} [properties] Properties to set
                     */
                    function LongRunning(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LongRunning initialPollDelay.
                     * @member {google.protobuf.IDuration|null|undefined} initialPollDelay
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.initialPollDelay = null;
    
                    /**
                     * LongRunning pollDelayMultiplier.
                     * @member {number} pollDelayMultiplier
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.pollDelayMultiplier = 0;
    
                    /**
                     * LongRunning maxPollDelay.
                     * @member {google.protobuf.IDuration|null|undefined} maxPollDelay
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.maxPollDelay = null;
    
                    /**
                     * LongRunning totalPollTimeout.
                     * @member {google.protobuf.IDuration|null|undefined} totalPollTimeout
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     */
                    LongRunning.prototype.totalPollTimeout = null;
    
                    /**
                     * Creates a new LongRunning instance using the specified properties.
                     * @function create
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning=} [properties] Properties to set
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning instance
                     */
                    LongRunning.create = function create(properties) {
                        return new LongRunning(properties);
                    };
    
                    /**
                     * Encodes the specified LongRunning message. Does not implicitly {@link google.api.MethodSettings.LongRunning.verify|verify} messages.
                     * @function encode
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning} message LongRunning message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LongRunning.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.initialPollDelay != null && Object.hasOwnProperty.call(message, "initialPollDelay"))
                            $root.google.protobuf.Duration.encode(message.initialPollDelay, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pollDelayMultiplier != null && Object.hasOwnProperty.call(message, "pollDelayMultiplier"))
                            writer.uint32(/* id 2, wireType 5 =*/21).float(message.pollDelayMultiplier);
                        if (message.maxPollDelay != null && Object.hasOwnProperty.call(message, "maxPollDelay"))
                            $root.google.protobuf.Duration.encode(message.maxPollDelay, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.totalPollTimeout != null && Object.hasOwnProperty.call(message, "totalPollTimeout"))
                            $root.google.protobuf.Duration.encode(message.totalPollTimeout, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LongRunning message, length delimited. Does not implicitly {@link google.api.MethodSettings.LongRunning.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.ILongRunning} message LongRunning message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LongRunning.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LongRunning message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LongRunning.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings.LongRunning();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.initialPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.pollDelayMultiplier = reader.float();
                                    break;
                                }
                            case 3: {
                                    message.maxPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.totalPollTimeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LongRunning message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LongRunning.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LongRunning message.
                     * @function verify
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LongRunning.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.initialPollDelay);
                            if (error)
                                return "initialPollDelay." + error;
                        }
                        if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                            if (typeof message.pollDelayMultiplier !== "number")
                                return "pollDelayMultiplier: number expected";
                        if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay")) {
                            var error = $root.google.protobuf.Duration.verify(message.maxPollDelay);
                            if (error)
                                return "maxPollDelay." + error;
                        }
                        if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout")) {
                            var error = $root.google.protobuf.Duration.verify(message.totalPollTimeout);
                            if (error)
                                return "totalPollTimeout." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a LongRunning message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.api.MethodSettings.LongRunning} LongRunning
                     */
                    LongRunning.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.api.MethodSettings.LongRunning)
                            return object;
                        var message = new $root.google.api.MethodSettings.LongRunning();
                        if (object.initialPollDelay != null) {
                            if (typeof object.initialPollDelay !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.initialPollDelay: object expected");
                            message.initialPollDelay = $root.google.protobuf.Duration.fromObject(object.initialPollDelay);
                        }
                        if (object.pollDelayMultiplier != null)
                            message.pollDelayMultiplier = Number(object.pollDelayMultiplier);
                        if (object.maxPollDelay != null) {
                            if (typeof object.maxPollDelay !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.maxPollDelay: object expected");
                            message.maxPollDelay = $root.google.protobuf.Duration.fromObject(object.maxPollDelay);
                        }
                        if (object.totalPollTimeout != null) {
                            if (typeof object.totalPollTimeout !== "object")
                                throw TypeError(".google.api.MethodSettings.LongRunning.totalPollTimeout: object expected");
                            message.totalPollTimeout = $root.google.protobuf.Duration.fromObject(object.totalPollTimeout);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LongRunning message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {google.api.MethodSettings.LongRunning} message LongRunning
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LongRunning.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.initialPollDelay = null;
                            object.pollDelayMultiplier = 0;
                            object.maxPollDelay = null;
                            object.totalPollTimeout = null;
                        }
                        if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay"))
                            object.initialPollDelay = $root.google.protobuf.Duration.toObject(message.initialPollDelay, options);
                        if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                            object.pollDelayMultiplier = options.json && !isFinite(message.pollDelayMultiplier) ? String(message.pollDelayMultiplier) : message.pollDelayMultiplier;
                        if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay"))
                            object.maxPollDelay = $root.google.protobuf.Duration.toObject(message.maxPollDelay, options);
                        if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout"))
                            object.totalPollTimeout = $root.google.protobuf.Duration.toObject(message.totalPollTimeout, options);
                        return object;
                    };
    
                    /**
                     * Converts this LongRunning to JSON.
                     * @function toJSON
                     * @memberof google.api.MethodSettings.LongRunning
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LongRunning.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for LongRunning
                     * @function getTypeUrl
                     * @memberof google.api.MethodSettings.LongRunning
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    LongRunning.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.api.MethodSettings.LongRunning";
                    };
    
                    return LongRunning;
                })();
    
                return MethodSettings;
            })();
    
            /**
             * ClientLibraryOrganization enum.
             * @name google.api.ClientLibraryOrganization
             * @enum {number}
             * @property {number} CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED=0 CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED value
             * @property {number} CLOUD=1 CLOUD value
             * @property {number} ADS=2 ADS value
             * @property {number} PHOTOS=3 PHOTOS value
             * @property {number} STREET_VIEW=4 STREET_VIEW value
             */
            api.ClientLibraryOrganization = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED"] = 0;
                values[valuesById[1] = "CLOUD"] = 1;
                values[valuesById[2] = "ADS"] = 2;
                values[valuesById[3] = "PHOTOS"] = 3;
                values[valuesById[4] = "STREET_VIEW"] = 4;
                return values;
            })();
    
            /**
             * ClientLibraryDestination enum.
             * @name google.api.ClientLibraryDestination
             * @enum {number}
             * @property {number} CLIENT_LIBRARY_DESTINATION_UNSPECIFIED=0 CLIENT_LIBRARY_DESTINATION_UNSPECIFIED value
             * @property {number} GITHUB=10 GITHUB value
             * @property {number} PACKAGE_MANAGER=20 PACKAGE_MANAGER value
             */
            api.ClientLibraryDestination = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED"] = 0;
                values[valuesById[10] = "GITHUB"] = 10;
                values[valuesById[20] = "PACKAGE_MANAGER"] = 20;
                return values;
            })();
    
            /**
             * LaunchStage enum.
             * @name google.api.LaunchStage
             * @enum {number}
             * @property {number} LAUNCH_STAGE_UNSPECIFIED=0 LAUNCH_STAGE_UNSPECIFIED value
             * @property {number} UNIMPLEMENTED=6 UNIMPLEMENTED value
             * @property {number} PRELAUNCH=7 PRELAUNCH value
             * @property {number} EARLY_ACCESS=1 EARLY_ACCESS value
             * @property {number} ALPHA=2 ALPHA value
             * @property {number} BETA=3 BETA value
             * @property {number} GA=4 GA value
             * @property {number} DEPRECATED=5 DEPRECATED value
             */
            api.LaunchStage = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "LAUNCH_STAGE_UNSPECIFIED"] = 0;
                values[valuesById[6] = "UNIMPLEMENTED"] = 6;
                values[valuesById[7] = "PRELAUNCH"] = 7;
                values[valuesById[1] = "EARLY_ACCESS"] = 1;
                values[valuesById[2] = "ALPHA"] = 2;
                values[valuesById[3] = "BETA"] = 3;
                values[valuesById[4] = "GA"] = 4;
                values[valuesById[5] = "DEPRECATED"] = 5;
                return values;
            })();
    
            /**
             * FieldBehavior enum.
             * @name google.api.FieldBehavior
             * @enum {number}
             * @property {number} FIELD_BEHAVIOR_UNSPECIFIED=0 FIELD_BEHAVIOR_UNSPECIFIED value
             * @property {number} OPTIONAL=1 OPTIONAL value
             * @property {number} REQUIRED=2 REQUIRED value
             * @property {number} OUTPUT_ONLY=3 OUTPUT_ONLY value
             * @property {number} INPUT_ONLY=4 INPUT_ONLY value
             * @property {number} IMMUTABLE=5 IMMUTABLE value
             * @property {number} UNORDERED_LIST=6 UNORDERED_LIST value
             * @property {number} NON_EMPTY_DEFAULT=7 NON_EMPTY_DEFAULT value
             */
            api.FieldBehavior = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
                values[valuesById[1] = "OPTIONAL"] = 1;
                values[valuesById[2] = "REQUIRED"] = 2;
                values[valuesById[3] = "OUTPUT_ONLY"] = 3;
                values[valuesById[4] = "INPUT_ONLY"] = 4;
                values[valuesById[5] = "IMMUTABLE"] = 5;
                values[valuesById[6] = "UNORDERED_LIST"] = 6;
                values[valuesById[7] = "NON_EMPTY_DEFAULT"] = 7;
                return values;
            })();
    
            api.ResourceDescriptor = (function() {
    
                /**
                 * Properties of a ResourceDescriptor.
                 * @memberof google.api
                 * @interface IResourceDescriptor
                 * @property {string|null} [type] ResourceDescriptor type
                 * @property {Array.<string>|null} [pattern] ResourceDescriptor pattern
                 * @property {string|null} [nameField] ResourceDescriptor nameField
                 * @property {google.api.ResourceDescriptor.History|null} [history] ResourceDescriptor history
                 * @property {string|null} [plural] ResourceDescriptor plural
                 * @property {string|null} [singular] ResourceDescriptor singular
                 * @property {Array.<google.api.ResourceDescriptor.Style>|null} [style] ResourceDescriptor style
                 */
    
                /**
                 * Constructs a new ResourceDescriptor.
                 * @memberof google.api
                 * @classdesc Represents a ResourceDescriptor.
                 * @implements IResourceDescriptor
                 * @constructor
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 */
                function ResourceDescriptor(properties) {
                    this.pattern = [];
                    this.style = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceDescriptor type.
                 * @member {string} type
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.type = "";
    
                /**
                 * ResourceDescriptor pattern.
                 * @member {Array.<string>} pattern
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.pattern = $util.emptyArray;
    
                /**
                 * ResourceDescriptor nameField.
                 * @member {string} nameField
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.nameField = "";
    
                /**
                 * ResourceDescriptor history.
                 * @member {google.api.ResourceDescriptor.History} history
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.history = 0;
    
                /**
                 * ResourceDescriptor plural.
                 * @member {string} plural
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.plural = "";
    
                /**
                 * ResourceDescriptor singular.
                 * @member {string} singular
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.singular = "";
    
                /**
                 * ResourceDescriptor style.
                 * @member {Array.<google.api.ResourceDescriptor.Style>} style
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 */
                ResourceDescriptor.prototype.style = $util.emptyArray;
    
                /**
                 * Creates a new ResourceDescriptor instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor=} [properties] Properties to set
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor instance
                 */
                ResourceDescriptor.create = function create(properties) {
                    return new ResourceDescriptor(properties);
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.pattern != null && message.pattern.length)
                        for (var i = 0; i < message.pattern.length; ++i)
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.pattern[i]);
                    if (message.nameField != null && Object.hasOwnProperty.call(message, "nameField"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.nameField);
                    if (message.history != null && Object.hasOwnProperty.call(message, "history"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.history);
                    if (message.plural != null && Object.hasOwnProperty.call(message, "plural"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.plural);
                    if (message.singular != null && Object.hasOwnProperty.call(message, "singular"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.singular);
                    if (message.style != null && message.style.length) {
                        writer.uint32(/* id 10, wireType 2 =*/82).fork();
                        for (var i = 0; i < message.style.length; ++i)
                            writer.int32(message.style[i]);
                        writer.ldelim();
                    }
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceDescriptor message, length delimited. Does not implicitly {@link google.api.ResourceDescriptor.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.IResourceDescriptor} message ResourceDescriptor message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.pattern && message.pattern.length))
                                    message.pattern = [];
                                message.pattern.push(reader.string());
                                break;
                            }
                        case 3: {
                                message.nameField = reader.string();
                                break;
                            }
                        case 4: {
                                message.history = reader.int32();
                                break;
                            }
                        case 5: {
                                message.plural = reader.string();
                                break;
                            }
                        case 6: {
                                message.singular = reader.string();
                                break;
                            }
                        case 10: {
                                if (!(message.style && message.style.length))
                                    message.style = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.style.push(reader.int32());
                                } else
                                    message.style.push(reader.int32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceDescriptor message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceDescriptor message.
                 * @function verify
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceDescriptor.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.pattern != null && message.hasOwnProperty("pattern")) {
                        if (!Array.isArray(message.pattern))
                            return "pattern: array expected";
                        for (var i = 0; i < message.pattern.length; ++i)
                            if (!$util.isString(message.pattern[i]))
                                return "pattern: string[] expected";
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        if (!$util.isString(message.nameField))
                            return "nameField: string expected";
                    if (message.history != null && message.hasOwnProperty("history"))
                        switch (message.history) {
                        default:
                            return "history: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        if (!$util.isString(message.plural))
                            return "plural: string expected";
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        if (!$util.isString(message.singular))
                            return "singular: string expected";
                    if (message.style != null && message.hasOwnProperty("style")) {
                        if (!Array.isArray(message.style))
                            return "style: array expected";
                        for (var i = 0; i < message.style.length; ++i)
                            switch (message.style[i]) {
                            default:
                                return "style: enum value[] expected";
                            case 0:
                            case 1:
                                break;
                            }
                    }
                    return null;
                };
    
                /**
                 * Creates a ResourceDescriptor message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceDescriptor} ResourceDescriptor
                 */
                ResourceDescriptor.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceDescriptor)
                        return object;
                    var message = new $root.google.api.ResourceDescriptor();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.pattern) {
                        if (!Array.isArray(object.pattern))
                            throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                        message.pattern = [];
                        for (var i = 0; i < object.pattern.length; ++i)
                            message.pattern[i] = String(object.pattern[i]);
                    }
                    if (object.nameField != null)
                        message.nameField = String(object.nameField);
                    switch (object.history) {
                    default:
                        if (typeof object.history === "number") {
                            message.history = object.history;
                            break;
                        }
                        break;
                    case "HISTORY_UNSPECIFIED":
                    case 0:
                        message.history = 0;
                        break;
                    case "ORIGINALLY_SINGLE_PATTERN":
                    case 1:
                        message.history = 1;
                        break;
                    case "FUTURE_MULTI_PATTERN":
                    case 2:
                        message.history = 2;
                        break;
                    }
                    if (object.plural != null)
                        message.plural = String(object.plural);
                    if (object.singular != null)
                        message.singular = String(object.singular);
                    if (object.style) {
                        if (!Array.isArray(object.style))
                            throw TypeError(".google.api.ResourceDescriptor.style: array expected");
                        message.style = [];
                        for (var i = 0; i < object.style.length; ++i)
                            switch (object.style[i]) {
                            default:
                                if (typeof object.style[i] === "number") {
                                    message.style[i] = object.style[i];
                                    break;
                                }
                            case "STYLE_UNSPECIFIED":
                            case 0:
                                message.style[i] = 0;
                                break;
                            case "DECLARATIVE_FRIENDLY":
                            case 1:
                                message.style[i] = 1;
                                break;
                            }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceDescriptor message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {google.api.ResourceDescriptor} message ResourceDescriptor
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceDescriptor.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.pattern = [];
                        object.style = [];
                    }
                    if (options.defaults) {
                        object.type = "";
                        object.nameField = "";
                        object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                        object.plural = "";
                        object.singular = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.pattern && message.pattern.length) {
                        object.pattern = [];
                        for (var j = 0; j < message.pattern.length; ++j)
                            object.pattern[j] = message.pattern[j];
                    }
                    if (message.nameField != null && message.hasOwnProperty("nameField"))
                        object.nameField = message.nameField;
                    if (message.history != null && message.hasOwnProperty("history"))
                        object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] === undefined ? message.history : $root.google.api.ResourceDescriptor.History[message.history] : message.history;
                    if (message.plural != null && message.hasOwnProperty("plural"))
                        object.plural = message.plural;
                    if (message.singular != null && message.hasOwnProperty("singular"))
                        object.singular = message.singular;
                    if (message.style && message.style.length) {
                        object.style = [];
                        for (var j = 0; j < message.style.length; ++j)
                            object.style[j] = options.enums === String ? $root.google.api.ResourceDescriptor.Style[message.style[j]] === undefined ? message.style[j] : $root.google.api.ResourceDescriptor.Style[message.style[j]] : message.style[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this ResourceDescriptor to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceDescriptor
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceDescriptor.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ResourceDescriptor
                 * @function getTypeUrl
                 * @memberof google.api.ResourceDescriptor
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ResourceDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ResourceDescriptor";
                };
    
                /**
                 * History enum.
                 * @name google.api.ResourceDescriptor.History
                 * @enum {number}
                 * @property {number} HISTORY_UNSPECIFIED=0 HISTORY_UNSPECIFIED value
                 * @property {number} ORIGINALLY_SINGLE_PATTERN=1 ORIGINALLY_SINGLE_PATTERN value
                 * @property {number} FUTURE_MULTI_PATTERN=2 FUTURE_MULTI_PATTERN value
                 */
                ResourceDescriptor.History = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
                    values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
                    return values;
                })();
    
                /**
                 * Style enum.
                 * @name google.api.ResourceDescriptor.Style
                 * @enum {number}
                 * @property {number} STYLE_UNSPECIFIED=0 STYLE_UNSPECIFIED value
                 * @property {number} DECLARATIVE_FRIENDLY=1 DECLARATIVE_FRIENDLY value
                 */
                ResourceDescriptor.Style = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STYLE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DECLARATIVE_FRIENDLY"] = 1;
                    return values;
                })();
    
                return ResourceDescriptor;
            })();
    
            api.ResourceReference = (function() {
    
                /**
                 * Properties of a ResourceReference.
                 * @memberof google.api
                 * @interface IResourceReference
                 * @property {string|null} [type] ResourceReference type
                 * @property {string|null} [childType] ResourceReference childType
                 */
    
                /**
                 * Constructs a new ResourceReference.
                 * @memberof google.api
                 * @classdesc Represents a ResourceReference.
                 * @implements IResourceReference
                 * @constructor
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 */
                function ResourceReference(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResourceReference type.
                 * @member {string} type
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.type = "";
    
                /**
                 * ResourceReference childType.
                 * @member {string} childType
                 * @memberof google.api.ResourceReference
                 * @instance
                 */
                ResourceReference.prototype.childType = "";
    
                /**
                 * Creates a new ResourceReference instance using the specified properties.
                 * @function create
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference=} [properties] Properties to set
                 * @returns {google.api.ResourceReference} ResourceReference instance
                 */
                ResourceReference.create = function create(properties) {
                    return new ResourceReference(properties);
                };
    
                /**
                 * Encodes the specified ResourceReference message. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.childType != null && Object.hasOwnProperty.call(message, "childType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.childType);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResourceReference message, length delimited. Does not implicitly {@link google.api.ResourceReference.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.IResourceReference} message ResourceReference message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type = reader.string();
                                break;
                            }
                        case 2: {
                                message.childType = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResourceReference message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.ResourceReference} ResourceReference
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResourceReference.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResourceReference message.
                 * @function verify
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResourceReference.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        if (!$util.isString(message.childType))
                            return "childType: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResourceReference message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.ResourceReference} ResourceReference
                 */
                ResourceReference.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.ResourceReference)
                        return object;
                    var message = new $root.google.api.ResourceReference();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.childType != null)
                        message.childType = String(object.childType);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResourceReference message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {google.api.ResourceReference} message ResourceReference
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResourceReference.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        object.childType = "";
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.childType != null && message.hasOwnProperty("childType"))
                        object.childType = message.childType;
                    return object;
                };
    
                /**
                 * Converts this ResourceReference to JSON.
                 * @function toJSON
                 * @memberof google.api.ResourceReference
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResourceReference.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ResourceReference
                 * @function getTypeUrl
                 * @memberof google.api.ResourceReference
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ResourceReference.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.api.ResourceReference";
                };
    
                return ResourceReference;
            })();
    
            return api;
        })();
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.file && message.file.length))
                                    message.file = [];
                                message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorSet
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 * @property {string|null} [edition] FileDescriptorProto edition
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * FileDescriptorProto edition.
                 * @member {string} edition
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.edition = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.edition);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message["package"] = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.dependency && message.dependency.length))
                                    message.dependency = [];
                                message.dependency.push(reader.string());
                                break;
                            }
                        case 10: {
                                if (!(message.publicDependency && message.publicDependency.length))
                                    message.publicDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.publicDependency.push(reader.int32());
                                } else
                                    message.publicDependency.push(reader.int32());
                                break;
                            }
                        case 11: {
                                if (!(message.weakDependency && message.weakDependency.length))
                                    message.weakDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.weakDependency.push(reader.int32());
                                } else
                                    message.weakDependency.push(reader.int32());
                                break;
                            }
                        case 4: {
                                if (!(message.messageType && message.messageType.length))
                                    message.messageType = [];
                                message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.service && message.service.length))
                                    message.service = [];
                                message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.syntax = reader.string();
                                break;
                            }
                        case 13: {
                                message.edition = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        if (!$util.isString(message.edition))
                            return "edition: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    if (object.edition != null)
                        message.edition = String(object.edition);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                        object.edition = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        object.edition = message.edition;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.field && message.field.length))
                                    message.field = [];
                                message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                if (!(message.nestedType && message.nestedType.length))
                                    message.nestedType = [];
                                message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.extensionRange && message.extensionRange.length))
                                    message.extensionRange = [];
                                message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                if (!(message.oneofDecl && message.oneofDecl.length))
                                    message.oneofDecl = [];
                                message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 10: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto";
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ExtensionRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ExtensionRangeOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 3: {
                                message.number = reader.int32();
                                break;
                            }
                        case 4: {
                                message.label = reader.int32();
                                break;
                            }
                        case 5: {
                                message.type = reader.int32();
                                break;
                            }
                        case 6: {
                                message.typeName = reader.string();
                                break;
                            }
                        case 2: {
                                message.extendee = reader.string();
                                break;
                            }
                        case 7: {
                                message.defaultValue = reader.string();
                                break;
                            }
                        case 9: {
                                message.oneofIndex = reader.int32();
                                break;
                            }
                        case 10: {
                                message.jsonName = reader.string();
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 17: {
                                message.proto3Optional = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    default:
                        if (typeof object.label === "number") {
                            message.label = object.label;
                            break;
                        }
                        break;
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === undefined ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === undefined ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.value && message.value.length))
                                    message.value = [];
                                message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EnumReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.number = reader.int32();
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.method && message.method.length))
                                    message.method = [];
                                message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.inputType = reader.string();
                                break;
                            }
                        case 3: {
                                message.outputType = reader.string();
                                break;
                            }
                        case 4: {
                                message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.clientStreaming = reader.bool();
                                break;
                            }
                        case 6: {
                                message.serverStreaming = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 * @property {Array.<google.api.IResourceDescriptor>|null} [".google.api.resourceDefinition"] FileOptions .google.api.resourceDefinition
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.resourceDefinition"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FileOptions .google.api.resourceDefinition.
                 * @member {Array.<google.api.IResourceDescriptor>} .google.api.resourceDefinition
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                            $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.javaPackage = reader.string();
                                break;
                            }
                        case 8: {
                                message.javaOuterClassname = reader.string();
                                break;
                            }
                        case 10: {
                                message.javaMultipleFiles = reader.bool();
                                break;
                            }
                        case 20: {
                                message.javaGenerateEqualsAndHash = reader.bool();
                                break;
                            }
                        case 27: {
                                message.javaStringCheckUtf8 = reader.bool();
                                break;
                            }
                        case 9: {
                                message.optimizeFor = reader.int32();
                                break;
                            }
                        case 11: {
                                message.goPackage = reader.string();
                                break;
                            }
                        case 16: {
                                message.ccGenericServices = reader.bool();
                                break;
                            }
                        case 17: {
                                message.javaGenericServices = reader.bool();
                                break;
                            }
                        case 18: {
                                message.pyGenericServices = reader.bool();
                                break;
                            }
                        case 42: {
                                message.phpGenericServices = reader.bool();
                                break;
                            }
                        case 23: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 31: {
                                message.ccEnableArenas = reader.bool();
                                break;
                            }
                        case 36: {
                                message.objcClassPrefix = reader.string();
                                break;
                            }
                        case 37: {
                                message.csharpNamespace = reader.string();
                                break;
                            }
                        case 39: {
                                message.swiftPrefix = reader.string();
                                break;
                            }
                        case 40: {
                                message.phpClassPrefix = reader.string();
                                break;
                            }
                        case 41: {
                                message.phpNamespace = reader.string();
                                break;
                            }
                        case 44: {
                                message.phpMetadataNamespace = reader.string();
                                break;
                            }
                        case 45: {
                                message.rubyPackage = reader.string();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1053: {
                                if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                                    message[".google.api.resourceDefinition"] = [];
                                message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                        if (!Array.isArray(message[".google.api.resourceDefinition"]))
                            return ".google.api.resourceDefinition: array expected";
                        for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                            var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                            if (error)
                                return ".google.api.resourceDefinition." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    default:
                        if (typeof object.optimizeFor === "number") {
                            message.optimizeFor = object.optimizeFor;
                            break;
                        }
                        break;
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resourceDefinition"]) {
                        if (!Array.isArray(object[".google.api.resourceDefinition"]))
                            throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                        message[".google.api.resourceDefinition"] = [];
                        for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                            if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                            message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.resourceDefinition"] = [];
                    }
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === undefined ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                        object[".google.api.resourceDefinition"] = [];
                        for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                            object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileOptions";
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {boolean|null} [deprecatedLegacyJsonFieldConflicts] MessageOptions deprecatedLegacyJsonFieldConflicts
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 * @property {google.api.IResourceDescriptor|null} [".google.api.resource"] MessageOptions .google.api.resource
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions deprecatedLegacyJsonFieldConflicts.
                 * @member {boolean} deprecatedLegacyJsonFieldConflicts
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MessageOptions .google.api.resource.
                 * @member {google.api.IResourceDescriptor|null|undefined} .google.api.resource
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".google.api.resource"] = null;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                        writer.uint32(/* id 11, wireType 0 =*/88).bool(message.deprecatedLegacyJsonFieldConflicts);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.resource"] != null && Object.hasOwnProperty.call(message, ".google.api.resource"))
                        $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(/* id 1053, wireType 2 =*/8426).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.messageSetWireFormat = reader.bool();
                                break;
                            }
                        case 2: {
                                message.noStandardDescriptorAccessor = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 7: {
                                message.mapEntry = reader.bool();
                                break;
                            }
                        case 11: {
                                message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1053: {
                                message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                            return "deprecatedLegacyJsonFieldConflicts: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                        var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                        if (error)
                            return ".google.api.resource." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.deprecatedLegacyJsonFieldConflicts != null)
                        message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.resource"] != null) {
                        if (typeof object[".google.api.resource"] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                        message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object.deprecatedLegacyJsonFieldConflicts = false;
                        object[".google.api.resource"] = null;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                        object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MessageOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MessageOptions";
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [unverifiedLazy] FieldOptions unverifiedLazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {boolean|null} [debugRedact] FieldOptions debugRedact
                 * @property {google.protobuf.FieldOptions.OptionRetention|null} [retention] FieldOptions retention
                 * @property {google.protobuf.FieldOptions.OptionTargetType|null} [target] FieldOptions target
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {Array.<google.api.FieldBehavior>|null} [".google.api.fieldBehavior"] FieldOptions .google.api.fieldBehavior
                 * @property {google.api.IResourceReference|null} [".google.api.resourceReference"] FieldOptions .google.api.resourceReference
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.fieldBehavior"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions unverifiedLazy.
                 * @member {boolean} unverifiedLazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.unverifiedLazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions debugRedact.
                 * @member {boolean} debugRedact
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.debugRedact = false;
    
                /**
                 * FieldOptions retention.
                 * @member {google.protobuf.FieldOptions.OptionRetention} retention
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.retention = 0;
    
                /**
                 * FieldOptions target.
                 * @member {google.protobuf.FieldOptions.OptionTargetType} target
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.target = 0;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.fieldBehavior.
                 * @member {Array.<google.api.FieldBehavior>} .google.api.fieldBehavior
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
    
                /**
                 * FieldOptions .google.api.resourceReference.
                 * @member {google.api.IResourceReference|null|undefined} .google.api.resourceReference
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".google.api.resourceReference"] = null;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                        writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverifiedLazy);
                    if (message.debugRedact != null && Object.hasOwnProperty.call(message, "debugRedact"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.debugRedact);
                    if (message.retention != null && Object.hasOwnProperty.call(message, "retention"))
                        writer.uint32(/* id 17, wireType 0 =*/136).int32(message.retention);
                    if (message.target != null && Object.hasOwnProperty.call(message, "target"))
                        writer.uint32(/* id 18, wireType 0 =*/144).int32(message.target);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                        writer.uint32(/* id 1052, wireType 2 =*/8418).fork();
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            writer.int32(message[".google.api.fieldBehavior"][i]);
                        writer.ldelim();
                    }
                    if (message[".google.api.resourceReference"] != null && Object.hasOwnProperty.call(message, ".google.api.resourceReference"))
                        $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(/* id 1055, wireType 2 =*/8442).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.ctype = reader.int32();
                                break;
                            }
                        case 2: {
                                message.packed = reader.bool();
                                break;
                            }
                        case 6: {
                                message.jstype = reader.int32();
                                break;
                            }
                        case 5: {
                                message.lazy = reader.bool();
                                break;
                            }
                        case 15: {
                                message.unverifiedLazy = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 10: {
                                message.weak = reader.bool();
                                break;
                            }
                        case 16: {
                                message.debugRedact = reader.bool();
                                break;
                            }
                        case 17: {
                                message.retention = reader.int32();
                                break;
                            }
                        case 18: {
                                message.target = reader.int32();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1052: {
                                if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                                    message[".google.api.fieldBehavior"] = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message[".google.api.fieldBehavior"].push(reader.int32());
                                } else
                                    message[".google.api.fieldBehavior"].push(reader.int32());
                                break;
                            }
                        case 1055: {
                                message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        if (typeof message.unverifiedLazy !== "boolean")
                            return "unverifiedLazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        if (typeof message.debugRedact !== "boolean")
                            return "debugRedact: boolean expected";
                    if (message.retention != null && message.hasOwnProperty("retention"))
                        switch (message.retention) {
                        default:
                            return "retention: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.target != null && message.hasOwnProperty("target"))
                        switch (message.target) {
                        default:
                            return "target: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                        if (!Array.isArray(message[".google.api.fieldBehavior"]))
                            return ".google.api.fieldBehavior: array expected";
                        for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                            switch (message[".google.api.fieldBehavior"][i]) {
                            default:
                                return ".google.api.fieldBehavior: enum value[] expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                break;
                            }
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                        var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                        if (error)
                            return ".google.api.resourceReference." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    default:
                        if (typeof object.ctype === "number") {
                            message.ctype = object.ctype;
                            break;
                        }
                        break;
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    default:
                        if (typeof object.jstype === "number") {
                            message.jstype = object.jstype;
                            break;
                        }
                        break;
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.unverifiedLazy != null)
                        message.unverifiedLazy = Boolean(object.unverifiedLazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.debugRedact != null)
                        message.debugRedact = Boolean(object.debugRedact);
                    switch (object.retention) {
                    default:
                        if (typeof object.retention === "number") {
                            message.retention = object.retention;
                            break;
                        }
                        break;
                    case "RETENTION_UNKNOWN":
                    case 0:
                        message.retention = 0;
                        break;
                    case "RETENTION_RUNTIME":
                    case 1:
                        message.retention = 1;
                        break;
                    case "RETENTION_SOURCE":
                    case 2:
                        message.retention = 2;
                        break;
                    }
                    switch (object.target) {
                    default:
                        if (typeof object.target === "number") {
                            message.target = object.target;
                            break;
                        }
                        break;
                    case "TARGET_TYPE_UNKNOWN":
                    case 0:
                        message.target = 0;
                        break;
                    case "TARGET_TYPE_FILE":
                    case 1:
                        message.target = 1;
                        break;
                    case "TARGET_TYPE_EXTENSION_RANGE":
                    case 2:
                        message.target = 2;
                        break;
                    case "TARGET_TYPE_MESSAGE":
                    case 3:
                        message.target = 3;
                        break;
                    case "TARGET_TYPE_FIELD":
                    case 4:
                        message.target = 4;
                        break;
                    case "TARGET_TYPE_ONEOF":
                    case 5:
                        message.target = 5;
                        break;
                    case "TARGET_TYPE_ENUM":
                    case 6:
                        message.target = 6;
                        break;
                    case "TARGET_TYPE_ENUM_ENTRY":
                    case 7:
                        message.target = 7;
                        break;
                    case "TARGET_TYPE_SERVICE":
                    case 8:
                        message.target = 8;
                        break;
                    case "TARGET_TYPE_METHOD":
                    case 9:
                        message.target = 9;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.fieldBehavior"]) {
                        if (!Array.isArray(object[".google.api.fieldBehavior"]))
                            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                        message[".google.api.fieldBehavior"] = [];
                        for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                            switch (object[".google.api.fieldBehavior"][i]) {
                            default:
                                if (typeof object[".google.api.fieldBehavior"][i] === "number") {
                                    message[".google.api.fieldBehavior"][i] = object[".google.api.fieldBehavior"][i];
                                    break;
                                }
                            case "FIELD_BEHAVIOR_UNSPECIFIED":
                            case 0:
                                message[".google.api.fieldBehavior"][i] = 0;
                                break;
                            case "OPTIONAL":
                            case 1:
                                message[".google.api.fieldBehavior"][i] = 1;
                                break;
                            case "REQUIRED":
                            case 2:
                                message[".google.api.fieldBehavior"][i] = 2;
                                break;
                            case "OUTPUT_ONLY":
                            case 3:
                                message[".google.api.fieldBehavior"][i] = 3;
                                break;
                            case "INPUT_ONLY":
                            case 4:
                                message[".google.api.fieldBehavior"][i] = 4;
                                break;
                            case "IMMUTABLE":
                            case 5:
                                message[".google.api.fieldBehavior"][i] = 5;
                                break;
                            case "UNORDERED_LIST":
                            case 6:
                                message[".google.api.fieldBehavior"][i] = 6;
                                break;
                            case "NON_EMPTY_DEFAULT":
                            case 7:
                                message[".google.api.fieldBehavior"][i] = 7;
                                break;
                            }
                    }
                    if (object[".google.api.resourceReference"] != null) {
                        if (typeof object[".google.api.resourceReference"] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                        message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.fieldBehavior"] = [];
                    }
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object.unverifiedLazy = false;
                        object.debugRedact = false;
                        object.retention = options.enums === String ? "RETENTION_UNKNOWN" : 0;
                        object.target = options.enums === String ? "TARGET_TYPE_UNKNOWN" : 0;
                        object[".google.api.resourceReference"] = null;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === undefined ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === undefined ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        object.unverifiedLazy = message.unverifiedLazy;
                    if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                        object.debugRedact = message.debugRedact;
                    if (message.retention != null && message.hasOwnProperty("retention"))
                        object.retention = options.enums === String ? $root.google.protobuf.FieldOptions.OptionRetention[message.retention] === undefined ? message.retention : $root.google.protobuf.FieldOptions.OptionRetention[message.retention] : message.retention;
                    if (message.target != null && message.hasOwnProperty("target"))
                        object.target = options.enums === String ? $root.google.protobuf.FieldOptions.OptionTargetType[message.target] === undefined ? message.target : $root.google.protobuf.FieldOptions.OptionTargetType[message.target] : message.target;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                        object[".google.api.fieldBehavior"] = [];
                        for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                            object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] === undefined ? message[".google.api.fieldBehavior"][j] : $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
                    }
                    if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                        object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldOptions";
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                /**
                 * OptionRetention enum.
                 * @name google.protobuf.FieldOptions.OptionRetention
                 * @enum {number}
                 * @property {number} RETENTION_UNKNOWN=0 RETENTION_UNKNOWN value
                 * @property {number} RETENTION_RUNTIME=1 RETENTION_RUNTIME value
                 * @property {number} RETENTION_SOURCE=2 RETENTION_SOURCE value
                 */
                FieldOptions.OptionRetention = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "RETENTION_UNKNOWN"] = 0;
                    values[valuesById[1] = "RETENTION_RUNTIME"] = 1;
                    values[valuesById[2] = "RETENTION_SOURCE"] = 2;
                    return values;
                })();
    
                /**
                 * OptionTargetType enum.
                 * @name google.protobuf.FieldOptions.OptionTargetType
                 * @enum {number}
                 * @property {number} TARGET_TYPE_UNKNOWN=0 TARGET_TYPE_UNKNOWN value
                 * @property {number} TARGET_TYPE_FILE=1 TARGET_TYPE_FILE value
                 * @property {number} TARGET_TYPE_EXTENSION_RANGE=2 TARGET_TYPE_EXTENSION_RANGE value
                 * @property {number} TARGET_TYPE_MESSAGE=3 TARGET_TYPE_MESSAGE value
                 * @property {number} TARGET_TYPE_FIELD=4 TARGET_TYPE_FIELD value
                 * @property {number} TARGET_TYPE_ONEOF=5 TARGET_TYPE_ONEOF value
                 * @property {number} TARGET_TYPE_ENUM=6 TARGET_TYPE_ENUM value
                 * @property {number} TARGET_TYPE_ENUM_ENTRY=7 TARGET_TYPE_ENUM_ENTRY value
                 * @property {number} TARGET_TYPE_SERVICE=8 TARGET_TYPE_SERVICE value
                 * @property {number} TARGET_TYPE_METHOD=9 TARGET_TYPE_METHOD value
                 */
                FieldOptions.OptionTargetType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "TARGET_TYPE_UNKNOWN"] = 0;
                    values[valuesById[1] = "TARGET_TYPE_FILE"] = 1;
                    values[valuesById[2] = "TARGET_TYPE_EXTENSION_RANGE"] = 2;
                    values[valuesById[3] = "TARGET_TYPE_MESSAGE"] = 3;
                    values[valuesById[4] = "TARGET_TYPE_FIELD"] = 4;
                    values[valuesById[5] = "TARGET_TYPE_ONEOF"] = 5;
                    values[valuesById[6] = "TARGET_TYPE_ENUM"] = 6;
                    values[valuesById[7] = "TARGET_TYPE_ENUM_ENTRY"] = 7;
                    values[valuesById[8] = "TARGET_TYPE_SERVICE"] = 8;
                    values[valuesById[9] = "TARGET_TYPE_METHOD"] = 9;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofOptions";
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {boolean|null} [deprecatedLegacyJsonFieldConflicts] EnumOptions deprecatedLegacyJsonFieldConflicts
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions deprecatedLegacyJsonFieldConflicts.
                 * @member {boolean} deprecatedLegacyJsonFieldConflicts
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.deprecatedLegacyJsonFieldConflicts);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                message.allowAlias = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 6: {
                                message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                            return "deprecatedLegacyJsonFieldConflicts: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.deprecatedLegacyJsonFieldConflicts != null)
                        message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                        object.deprecatedLegacyJsonFieldConflicts = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                        object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumOptions";
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 * @property {string|null} [".google.api.defaultHost"] ServiceOptions .google.api.defaultHost
                 * @property {string|null} [".google.api.oauthScopes"] ServiceOptions .google.api.oauthScopes
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * ServiceOptions .google.api.defaultHost.
                 * @member {string} .google.api.defaultHost
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.defaultHost"] = "";
    
                /**
                 * ServiceOptions .google.api.oauthScopes.
                 * @member {string} .google.api.oauthScopes
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype[".google.api.oauthScopes"] = "";
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                        writer.uint32(/* id 1049, wireType 2 =*/8394).string(message[".google.api.defaultHost"]);
                    if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                        writer.uint32(/* id 1050, wireType 2 =*/8402).string(message[".google.api.oauthScopes"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 1049: {
                                message[".google.api.defaultHost"] = reader.string();
                                break;
                            }
                        case 1050: {
                                message[".google.api.oauthScopes"] = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        if (!$util.isString(message[".google.api.defaultHost"]))
                            return ".google.api.defaultHost: string expected";
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        if (!$util.isString(message[".google.api.oauthScopes"]))
                            return ".google.api.oauthScopes: string expected";
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.defaultHost"] != null)
                        message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
                    if (object[".google.api.oauthScopes"] != null)
                        message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.defaultHost"] = "";
                        object[".google.api.oauthScopes"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                        object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
                    if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                        object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceOptions";
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 * @property {Array.<string>|null} [".google.api.methodSignature"] MethodOptions .google.api.methodSignature
                 * @property {google.longrunning.IOperationInfo|null} [".google.longrunning.operationInfo"] MethodOptions .google.longrunning.operationInfo
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    this[".google.api.methodSignature"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * MethodOptions .google.api.methodSignature.
                 * @member {Array.<string>} .google.api.methodSignature
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
    
                /**
                 * MethodOptions .google.longrunning.operationInfo.
                 * @member {google.longrunning.IOperationInfo|null|undefined} .google.longrunning.operationInfo
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.longrunning.operationInfo"] = null;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.longrunning.operationInfo"] != null && Object.hasOwnProperty.call(message, ".google.longrunning.operationInfo"))
                        $root.google.longrunning.OperationInfo.encode(message[".google.longrunning.operationInfo"], writer.uint32(/* id 1049, wireType 2 =*/8394).fork()).ldelim();
                    if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            writer.uint32(/* id 1051, wireType 2 =*/8410).string(message[".google.api.methodSignature"][i]);
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 34: {
                                message.idempotencyLevel = reader.int32();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 72295728: {
                                message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                                break;
                            }
                        case 1051: {
                                if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                                    message[".google.api.methodSignature"] = [];
                                message[".google.api.methodSignature"].push(reader.string());
                                break;
                            }
                        case 1049: {
                                message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                        if (!Array.isArray(message[".google.api.methodSignature"]))
                            return ".google.api.methodSignature: array expected";
                        for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                            if (!$util.isString(message[".google.api.methodSignature"][i]))
                                return ".google.api.methodSignature: string[] expected";
                    }
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo")) {
                        var error = $root.google.longrunning.OperationInfo.verify(message[".google.longrunning.operationInfo"]);
                        if (error)
                            return ".google.longrunning.operationInfo." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    default:
                        if (typeof object.idempotencyLevel === "number") {
                            message.idempotencyLevel = object.idempotencyLevel;
                            break;
                        }
                        break;
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    if (object[".google.api.methodSignature"]) {
                        if (!Array.isArray(object[".google.api.methodSignature"]))
                            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                        message[".google.api.methodSignature"] = [];
                        for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                            message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
                    }
                    if (object[".google.longrunning.operationInfo"] != null) {
                        if (typeof object[".google.longrunning.operationInfo"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected");
                        message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.fromObject(object[".google.longrunning.operationInfo"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpretedOption = [];
                        object[".google.api.methodSignature"] = [];
                    }
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                        object[".google.longrunning.operationInfo"] = null;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === undefined ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo"))
                        object[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.toObject(message[".google.longrunning.operationInfo"], options);
                    if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                        object[".google.api.methodSignature"] = [];
                        for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                            object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodOptions";
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.name && message.name.length))
                                    message.name = [];
                                message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.identifierValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.positiveIntValue = reader.uint64();
                                break;
                            }
                        case 5: {
                                message.negativeIntValue = reader.int64();
                                break;
                            }
                        case 6: {
                                message.doubleValue = reader.double();
                                break;
                            }
                        case 7: {
                                message.stringValue = reader.bytes();
                                break;
                            }
                        case 8: {
                                message.aggregateValue = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length >= 0)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UninterpretedOption
                 * @function getTypeUrl
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.namePart = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.isExtension = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NamePart
                     * @function getTypeUrl
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.location && message.location.length))
                                    message.location = [];
                                message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SourceCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    if (!(message.span && message.span.length))
                                        message.span = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.span.push(reader.int32());
                                    } else
                                        message.span.push(reader.int32());
                                    break;
                                }
                            case 3: {
                                    message.leadingComments = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.trailingComments = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                        message.leadingDetachedComments = [];
                                    message.leadingDetachedComments.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Location
                     * @function getTypeUrl
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.annotation && message.annotation.length))
                                    message.annotation = [];
                                message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GeneratedCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     * @property {google.protobuf.GeneratedCodeInfo.Annotation.Semantic|null} [semantic] Annotation semantic
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Annotation semantic.
                     * @member {google.protobuf.GeneratedCodeInfo.Annotation.Semantic} semantic
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.semantic = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.semantic);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    message.sourceFile = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.begin = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 5: {
                                    message.semantic = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            switch (message.semantic) {
                            default:
                                return "semantic: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        switch (object.semantic) {
                        default:
                            if (typeof object.semantic === "number") {
                                message.semantic = object.semantic;
                                break;
                            }
                            break;
                        case "NONE":
                        case 0:
                            message.semantic = 0;
                            break;
                        case "SET":
                        case 1:
                            message.semantic = 1;
                            break;
                        case "ALIAS":
                        case 2:
                            message.semantic = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                            object.semantic = options.enums === String ? "NONE" : 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === undefined ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Annotation
                     * @function getTypeUrl
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
                    };
    
                    /**
                     * Semantic enum.
                     * @name google.protobuf.GeneratedCodeInfo.Annotation.Semantic
                     * @enum {number}
                     * @property {number} NONE=0 NONE value
                     * @property {number} SET=1 SET value
                     * @property {number} ALIAS=2 ALIAS value
                     */
                    Annotation.Semantic = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NONE"] = 0;
                        values[valuesById[1] = "SET"] = 1;
                        values[valuesById[2] = "ALIAS"] = 2;
                        return values;
                    })();
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {number|Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Creates a new Duration instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 * @returns {google.protobuf.Duration} Duration instance
                 */
                Duration.create = function create(properties) {
                    return new Duration(properties);
                };
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Duration
                 * @function getTypeUrl
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Duration";
                };
    
                return Duration;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {number|Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {number|Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Creates a new Timestamp instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 * @returns {google.protobuf.Timestamp} Timestamp instance
                 */
                Timestamp.create = function create(properties) {
                    return new Timestamp(properties);
                };
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.seconds = reader.int64();
                                break;
                            }
                        case 2: {
                                message.nanos = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Timestamp
                 * @function getTypeUrl
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Timestamp";
                };
    
                return Timestamp;
            })();
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Creates a new Any instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 * @returns {google.protobuf.Any} Any instance
                 */
                Any.create = function create(properties) {
                    return new Any(properties);
                };
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.type_url = reader.string();
                                break;
                            }
                        case 2: {
                                message.value = reader.bytes();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length >= 0)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Any
                 * @function getTypeUrl
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Any.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Any";
                };
    
                return Any;
            })();
    
            protobuf.Empty = (function() {
    
                /**
                 * Properties of an Empty.
                 * @memberof google.protobuf
                 * @interface IEmpty
                 */
    
                /**
                 * Constructs a new Empty.
                 * @memberof google.protobuf
                 * @classdesc Represents an Empty.
                 * @implements IEmpty
                 * @constructor
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 */
                function Empty(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Creates a new Empty instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty=} [properties] Properties to set
                 * @returns {google.protobuf.Empty} Empty instance
                 */
                Empty.create = function create(properties) {
                    return new Empty(properties);
                };
    
                /**
                 * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Empty.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Empty message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Empty} Empty
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Empty.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Empty message.
                 * @function verify
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Empty.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates an Empty message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Empty} Empty
                 */
                Empty.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Empty)
                        return object;
                    return new $root.google.protobuf.Empty();
                };
    
                /**
                 * Creates a plain object from an Empty message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {google.protobuf.Empty} message Empty
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Empty.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Empty to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Empty
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Empty.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Empty
                 * @function getTypeUrl
                 * @memberof google.protobuf.Empty
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Empty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.Empty";
                };
    
                return Empty;
            })();
    
            return protobuf;
        })();
    
        google.longrunning = (function() {
    
            /**
             * Namespace longrunning.
             * @memberof google
             * @namespace
             */
            var longrunning = {};
    
            longrunning.Operations = (function() {
    
                /**
                 * Constructs a new Operations service.
                 * @memberof google.longrunning
                 * @classdesc Represents an Operations
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Operations(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Operations.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Operations;
    
                /**
                 * Creates new Operations service using the specified rpc implementation.
                 * @function create
                 * @memberof google.longrunning.Operations
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Operations} RPC service. Useful where requests and/or responses are streamed.
                 */
                Operations.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|listOperations}.
                 * @memberof google.longrunning.Operations
                 * @typedef ListOperationsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.ListOperationsResponse} [response] ListOperationsResponse
                 */
    
                /**
                 * Calls ListOperations.
                 * @function listOperations
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IListOperationsRequest} request ListOperationsRequest message or plain object
                 * @param {google.longrunning.Operations.ListOperationsCallback} callback Node-style callback called with the error, if any, and ListOperationsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.listOperations = function listOperations(request, callback) {
                    return this.rpcCall(listOperations, $root.google.longrunning.ListOperationsRequest, $root.google.longrunning.ListOperationsResponse, request, callback);
                }, "name", { value: "ListOperations" });
    
                /**
                 * Calls ListOperations.
                 * @function listOperations
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IListOperationsRequest} request ListOperationsRequest message or plain object
                 * @returns {Promise<google.longrunning.ListOperationsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|getOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef GetOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.Operation} [response] Operation
                 */
    
                /**
                 * Calls GetOperation.
                 * @function getOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IGetOperationRequest} request GetOperationRequest message or plain object
                 * @param {google.longrunning.Operations.GetOperationCallback} callback Node-style callback called with the error, if any, and Operation
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.getOperation = function getOperation(request, callback) {
                    return this.rpcCall(getOperation, $root.google.longrunning.GetOperationRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "GetOperation" });
    
                /**
                 * Calls GetOperation.
                 * @function getOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IGetOperationRequest} request GetOperationRequest message or plain object
                 * @returns {Promise<google.longrunning.Operation>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|deleteOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef DeleteOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls DeleteOperation.
                 * @function deleteOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IDeleteOperationRequest} request DeleteOperationRequest message or plain object
                 * @param {google.longrunning.Operations.DeleteOperationCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.deleteOperation = function deleteOperation(request, callback) {
                    return this.rpcCall(deleteOperation, $root.google.longrunning.DeleteOperationRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "DeleteOperation" });
    
                /**
                 * Calls DeleteOperation.
                 * @function deleteOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IDeleteOperationRequest} request DeleteOperationRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|cancelOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef CancelOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.protobuf.Empty} [response] Empty
                 */
    
                /**
                 * Calls CancelOperation.
                 * @function cancelOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.ICancelOperationRequest} request CancelOperationRequest message or plain object
                 * @param {google.longrunning.Operations.CancelOperationCallback} callback Node-style callback called with the error, if any, and Empty
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.cancelOperation = function cancelOperation(request, callback) {
                    return this.rpcCall(cancelOperation, $root.google.longrunning.CancelOperationRequest, $root.google.protobuf.Empty, request, callback);
                }, "name", { value: "CancelOperation" });
    
                /**
                 * Calls CancelOperation.
                 * @function cancelOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.ICancelOperationRequest} request CancelOperationRequest message or plain object
                 * @returns {Promise<google.protobuf.Empty>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link google.longrunning.Operations|waitOperation}.
                 * @memberof google.longrunning.Operations
                 * @typedef WaitOperationCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {google.longrunning.Operation} [response] Operation
                 */
    
                /**
                 * Calls WaitOperation.
                 * @function waitOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IWaitOperationRequest} request WaitOperationRequest message or plain object
                 * @param {google.longrunning.Operations.WaitOperationCallback} callback Node-style callback called with the error, if any, and Operation
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Operations.prototype.waitOperation = function waitOperation(request, callback) {
                    return this.rpcCall(waitOperation, $root.google.longrunning.WaitOperationRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "WaitOperation" });
    
                /**
                 * Calls WaitOperation.
                 * @function waitOperation
                 * @memberof google.longrunning.Operations
                 * @instance
                 * @param {google.longrunning.IWaitOperationRequest} request WaitOperationRequest message or plain object
                 * @returns {Promise<google.longrunning.Operation>} Promise
                 * @variation 2
                 */
    
                return Operations;
            })();
    
            longrunning.Operation = (function() {
    
                /**
                 * Properties of an Operation.
                 * @memberof google.longrunning
                 * @interface IOperation
                 * @property {string|null} [name] Operation name
                 * @property {google.protobuf.IAny|null} [metadata] Operation metadata
                 * @property {boolean|null} [done] Operation done
                 * @property {google.rpc.IStatus|null} [error] Operation error
                 * @property {google.protobuf.IAny|null} [response] Operation response
                 */
    
                /**
                 * Constructs a new Operation.
                 * @memberof google.longrunning
                 * @classdesc Represents an Operation.
                 * @implements IOperation
                 * @constructor
                 * @param {google.longrunning.IOperation=} [properties] Properties to set
                 */
                function Operation(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Operation name.
                 * @member {string} name
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.name = "";
    
                /**
                 * Operation metadata.
                 * @member {google.protobuf.IAny|null|undefined} metadata
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.metadata = null;
    
                /**
                 * Operation done.
                 * @member {boolean} done
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.done = false;
    
                /**
                 * Operation error.
                 * @member {google.rpc.IStatus|null|undefined} error
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.error = null;
    
                /**
                 * Operation response.
                 * @member {google.protobuf.IAny|null|undefined} response
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Operation.prototype.response = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Operation result.
                 * @member {"error"|"response"|undefined} result
                 * @memberof google.longrunning.Operation
                 * @instance
                 */
                Object.defineProperty(Operation.prototype, "result", {
                    get: $util.oneOfGetter($oneOfFields = ["error", "response"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Creates a new Operation instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation=} [properties] Properties to set
                 * @returns {google.longrunning.Operation} Operation instance
                 */
                Operation.create = function create(properties) {
                    return new Operation(properties);
                };
    
                /**
                 * Encodes the specified Operation message. Does not implicitly {@link google.longrunning.Operation.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        $root.google.protobuf.Any.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.done != null && Object.hasOwnProperty.call(message, "done"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.done);
                    if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                        $root.google.rpc.Status.encode(message.error, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.response != null && Object.hasOwnProperty.call(message, "response"))
                        $root.google.protobuf.Any.encode(message.response, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Operation message, length delimited. Does not implicitly {@link google.longrunning.Operation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.IOperation} message Operation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Operation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.Operation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.metadata = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            }
                        case 3: {
                                message.done = reader.bool();
                                break;
                            }
                        case 4: {
                                message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.response = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Operation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.Operation} Operation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Operation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Operation message.
                 * @function verify
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Operation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata")) {
                        var error = $root.google.protobuf.Any.verify(message.metadata);
                        if (error)
                            return "metadata." + error;
                    }
                    if (message.done != null && message.hasOwnProperty("done"))
                        if (typeof message.done !== "boolean")
                            return "done: boolean expected";
                    if (message.error != null && message.hasOwnProperty("error")) {
                        properties.result = 1;
                        {
                            var error = $root.google.rpc.Status.verify(message.error);
                            if (error)
                                return "error." + error;
                        }
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        if (properties.result === 1)
                            return "result: multiple values";
                        properties.result = 1;
                        {
                            var error = $root.google.protobuf.Any.verify(message.response);
                            if (error)
                                return "response." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an Operation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.Operation} Operation
                 */
                Operation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.Operation)
                        return object;
                    var message = new $root.google.longrunning.Operation();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.metadata != null) {
                        if (typeof object.metadata !== "object")
                            throw TypeError(".google.longrunning.Operation.metadata: object expected");
                        message.metadata = $root.google.protobuf.Any.fromObject(object.metadata);
                    }
                    if (object.done != null)
                        message.done = Boolean(object.done);
                    if (object.error != null) {
                        if (typeof object.error !== "object")
                            throw TypeError(".google.longrunning.Operation.error: object expected");
                        message.error = $root.google.rpc.Status.fromObject(object.error);
                    }
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".google.longrunning.Operation.response: object expected");
                        message.response = $root.google.protobuf.Any.fromObject(object.response);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Operation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {google.longrunning.Operation} message Operation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Operation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.metadata = null;
                        object.done = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = $root.google.protobuf.Any.toObject(message.metadata, options);
                    if (message.done != null && message.hasOwnProperty("done"))
                        object.done = message.done;
                    if (message.error != null && message.hasOwnProperty("error")) {
                        object.error = $root.google.rpc.Status.toObject(message.error, options);
                        if (options.oneofs)
                            object.result = "error";
                    }
                    if (message.response != null && message.hasOwnProperty("response")) {
                        object.response = $root.google.protobuf.Any.toObject(message.response, options);
                        if (options.oneofs)
                            object.result = "response";
                    }
                    return object;
                };
    
                /**
                 * Converts this Operation to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.Operation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Operation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Operation
                 * @function getTypeUrl
                 * @memberof google.longrunning.Operation
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Operation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.Operation";
                };
    
                return Operation;
            })();
    
            longrunning.GetOperationRequest = (function() {
    
                /**
                 * Properties of a GetOperationRequest.
                 * @memberof google.longrunning
                 * @interface IGetOperationRequest
                 * @property {string|null} [name] GetOperationRequest name
                 */
    
                /**
                 * Constructs a new GetOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a GetOperationRequest.
                 * @implements IGetOperationRequest
                 * @constructor
                 * @param {google.longrunning.IGetOperationRequest=} [properties] Properties to set
                 */
                function GetOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GetOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.GetOperationRequest
                 * @instance
                 */
                GetOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new GetOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest instance
                 */
                GetOperationRequest.create = function create(properties) {
                    return new GetOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified GetOperationRequest message. Does not implicitly {@link google.longrunning.GetOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest} message GetOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified GetOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.GetOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.IGetOperationRequest} message GetOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GetOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GetOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.GetOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GetOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GetOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GetOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GetOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a GetOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.GetOperationRequest} GetOperationRequest
                 */
                GetOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.GetOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.GetOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a GetOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {google.longrunning.GetOperationRequest} message GetOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GetOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this GetOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.GetOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GetOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GetOperationRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.GetOperationRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GetOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.GetOperationRequest";
                };
    
                return GetOperationRequest;
            })();
    
            longrunning.ListOperationsRequest = (function() {
    
                /**
                 * Properties of a ListOperationsRequest.
                 * @memberof google.longrunning
                 * @interface IListOperationsRequest
                 * @property {string|null} [name] ListOperationsRequest name
                 * @property {string|null} [filter] ListOperationsRequest filter
                 * @property {number|null} [pageSize] ListOperationsRequest pageSize
                 * @property {string|null} [pageToken] ListOperationsRequest pageToken
                 */
    
                /**
                 * Constructs a new ListOperationsRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a ListOperationsRequest.
                 * @implements IListOperationsRequest
                 * @constructor
                 * @param {google.longrunning.IListOperationsRequest=} [properties] Properties to set
                 */
                function ListOperationsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOperationsRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.name = "";
    
                /**
                 * ListOperationsRequest filter.
                 * @member {string} filter
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.filter = "";
    
                /**
                 * ListOperationsRequest pageSize.
                 * @member {number} pageSize
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.pageSize = 0;
    
                /**
                 * ListOperationsRequest pageToken.
                 * @member {string} pageToken
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 */
                ListOperationsRequest.prototype.pageToken = "";
    
                /**
                 * Creates a new ListOperationsRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest=} [properties] Properties to set
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest instance
                 */
                ListOperationsRequest.create = function create(properties) {
                    return new ListOperationsRequest(properties);
                };
    
                /**
                 * Encodes the specified ListOperationsRequest message. Does not implicitly {@link google.longrunning.ListOperationsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest} message ListOperationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.filter);
                    if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.pageSize);
                    if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.pageToken);
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOperationsRequest message, length delimited. Does not implicitly {@link google.longrunning.ListOperationsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.IListOperationsRequest} message ListOperationsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOperationsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 4: {
                                message.name = reader.string();
                                break;
                            }
                        case 1: {
                                message.filter = reader.string();
                                break;
                            }
                        case 2: {
                                message.pageSize = reader.int32();
                                break;
                            }
                        case 3: {
                                message.pageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOperationsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOperationsRequest message.
                 * @function verify
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOperationsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        if (!$util.isString(message.filter))
                            return "filter: string expected";
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        if (!$util.isInteger(message.pageSize))
                            return "pageSize: integer expected";
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        if (!$util.isString(message.pageToken))
                            return "pageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOperationsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.ListOperationsRequest} ListOperationsRequest
                 */
                ListOperationsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.ListOperationsRequest)
                        return object;
                    var message = new $root.google.longrunning.ListOperationsRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.filter != null)
                        message.filter = String(object.filter);
                    if (object.pageSize != null)
                        message.pageSize = object.pageSize | 0;
                    if (object.pageToken != null)
                        message.pageToken = String(object.pageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOperationsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {google.longrunning.ListOperationsRequest} message ListOperationsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOperationsRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.filter = "";
                        object.pageSize = 0;
                        object.pageToken = "";
                        object.name = "";
                    }
                    if (message.filter != null && message.hasOwnProperty("filter"))
                        object.filter = message.filter;
                    if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                        object.pageSize = message.pageSize;
                    if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                        object.pageToken = message.pageToken;
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this ListOperationsRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.ListOperationsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOperationsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListOperationsRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.ListOperationsRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListOperationsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.ListOperationsRequest";
                };
    
                return ListOperationsRequest;
            })();
    
            longrunning.ListOperationsResponse = (function() {
    
                /**
                 * Properties of a ListOperationsResponse.
                 * @memberof google.longrunning
                 * @interface IListOperationsResponse
                 * @property {Array.<google.longrunning.IOperation>|null} [operations] ListOperationsResponse operations
                 * @property {string|null} [nextPageToken] ListOperationsResponse nextPageToken
                 */
    
                /**
                 * Constructs a new ListOperationsResponse.
                 * @memberof google.longrunning
                 * @classdesc Represents a ListOperationsResponse.
                 * @implements IListOperationsResponse
                 * @constructor
                 * @param {google.longrunning.IListOperationsResponse=} [properties] Properties to set
                 */
                function ListOperationsResponse(properties) {
                    this.operations = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ListOperationsResponse operations.
                 * @member {Array.<google.longrunning.IOperation>} operations
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 */
                ListOperationsResponse.prototype.operations = $util.emptyArray;
    
                /**
                 * ListOperationsResponse nextPageToken.
                 * @member {string} nextPageToken
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 */
                ListOperationsResponse.prototype.nextPageToken = "";
    
                /**
                 * Creates a new ListOperationsResponse instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse=} [properties] Properties to set
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse instance
                 */
                ListOperationsResponse.create = function create(properties) {
                    return new ListOperationsResponse(properties);
                };
    
                /**
                 * Encodes the specified ListOperationsResponse message. Does not implicitly {@link google.longrunning.ListOperationsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse} message ListOperationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.operations != null && message.operations.length)
                        for (var i = 0; i < message.operations.length; ++i)
                            $root.google.longrunning.Operation.encode(message.operations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.nextPageToken);
                    return writer;
                };
    
                /**
                 * Encodes the specified ListOperationsResponse message, length delimited. Does not implicitly {@link google.longrunning.ListOperationsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.IListOperationsResponse} message ListOperationsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ListOperationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ListOperationsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.operations && message.operations.length))
                                    message.operations = [];
                                message.operations.push($root.google.longrunning.Operation.decode(reader, reader.uint32()));
                                break;
                            }
                        case 2: {
                                message.nextPageToken = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ListOperationsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ListOperationsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ListOperationsResponse message.
                 * @function verify
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ListOperationsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.operations != null && message.hasOwnProperty("operations")) {
                        if (!Array.isArray(message.operations))
                            return "operations: array expected";
                        for (var i = 0; i < message.operations.length; ++i) {
                            var error = $root.google.longrunning.Operation.verify(message.operations[i]);
                            if (error)
                                return "operations." + error;
                        }
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        if (!$util.isString(message.nextPageToken))
                            return "nextPageToken: string expected";
                    return null;
                };
    
                /**
                 * Creates a ListOperationsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.ListOperationsResponse} ListOperationsResponse
                 */
                ListOperationsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.ListOperationsResponse)
                        return object;
                    var message = new $root.google.longrunning.ListOperationsResponse();
                    if (object.operations) {
                        if (!Array.isArray(object.operations))
                            throw TypeError(".google.longrunning.ListOperationsResponse.operations: array expected");
                        message.operations = [];
                        for (var i = 0; i < object.operations.length; ++i) {
                            if (typeof object.operations[i] !== "object")
                                throw TypeError(".google.longrunning.ListOperationsResponse.operations: object expected");
                            message.operations[i] = $root.google.longrunning.Operation.fromObject(object.operations[i]);
                        }
                    }
                    if (object.nextPageToken != null)
                        message.nextPageToken = String(object.nextPageToken);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ListOperationsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {google.longrunning.ListOperationsResponse} message ListOperationsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ListOperationsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.operations = [];
                    if (options.defaults)
                        object.nextPageToken = "";
                    if (message.operations && message.operations.length) {
                        object.operations = [];
                        for (var j = 0; j < message.operations.length; ++j)
                            object.operations[j] = $root.google.longrunning.Operation.toObject(message.operations[j], options);
                    }
                    if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                        object.nextPageToken = message.nextPageToken;
                    return object;
                };
    
                /**
                 * Converts this ListOperationsResponse to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.ListOperationsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ListOperationsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ListOperationsResponse
                 * @function getTypeUrl
                 * @memberof google.longrunning.ListOperationsResponse
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ListOperationsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.ListOperationsResponse";
                };
    
                return ListOperationsResponse;
            })();
    
            longrunning.CancelOperationRequest = (function() {
    
                /**
                 * Properties of a CancelOperationRequest.
                 * @memberof google.longrunning
                 * @interface ICancelOperationRequest
                 * @property {string|null} [name] CancelOperationRequest name
                 */
    
                /**
                 * Constructs a new CancelOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a CancelOperationRequest.
                 * @implements ICancelOperationRequest
                 * @constructor
                 * @param {google.longrunning.ICancelOperationRequest=} [properties] Properties to set
                 */
                function CancelOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CancelOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.CancelOperationRequest
                 * @instance
                 */
                CancelOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new CancelOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest instance
                 */
                CancelOperationRequest.create = function create(properties) {
                    return new CancelOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified CancelOperationRequest message. Does not implicitly {@link google.longrunning.CancelOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest} message CancelOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified CancelOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.CancelOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.ICancelOperationRequest} message CancelOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CancelOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.CancelOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CancelOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CancelOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CancelOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a CancelOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.CancelOperationRequest} CancelOperationRequest
                 */
                CancelOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.CancelOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.CancelOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CancelOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {google.longrunning.CancelOperationRequest} message CancelOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CancelOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this CancelOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.CancelOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CancelOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for CancelOperationRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.CancelOperationRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                CancelOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.CancelOperationRequest";
                };
    
                return CancelOperationRequest;
            })();
    
            longrunning.DeleteOperationRequest = (function() {
    
                /**
                 * Properties of a DeleteOperationRequest.
                 * @memberof google.longrunning
                 * @interface IDeleteOperationRequest
                 * @property {string|null} [name] DeleteOperationRequest name
                 */
    
                /**
                 * Constructs a new DeleteOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a DeleteOperationRequest.
                 * @implements IDeleteOperationRequest
                 * @constructor
                 * @param {google.longrunning.IDeleteOperationRequest=} [properties] Properties to set
                 */
                function DeleteOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DeleteOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @instance
                 */
                DeleteOperationRequest.prototype.name = "";
    
                /**
                 * Creates a new DeleteOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest instance
                 */
                DeleteOperationRequest.create = function create(properties) {
                    return new DeleteOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified DeleteOperationRequest message. Does not implicitly {@link google.longrunning.DeleteOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest} message DeleteOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified DeleteOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.DeleteOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.IDeleteOperationRequest} message DeleteOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DeleteOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DeleteOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.DeleteOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DeleteOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DeleteOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DeleteOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DeleteOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a DeleteOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.DeleteOperationRequest} DeleteOperationRequest
                 */
                DeleteOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.DeleteOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.DeleteOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DeleteOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {google.longrunning.DeleteOperationRequest} message DeleteOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DeleteOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this DeleteOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DeleteOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DeleteOperationRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.DeleteOperationRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DeleteOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.DeleteOperationRequest";
                };
    
                return DeleteOperationRequest;
            })();
    
            longrunning.WaitOperationRequest = (function() {
    
                /**
                 * Properties of a WaitOperationRequest.
                 * @memberof google.longrunning
                 * @interface IWaitOperationRequest
                 * @property {string|null} [name] WaitOperationRequest name
                 * @property {google.protobuf.IDuration|null} [timeout] WaitOperationRequest timeout
                 */
    
                /**
                 * Constructs a new WaitOperationRequest.
                 * @memberof google.longrunning
                 * @classdesc Represents a WaitOperationRequest.
                 * @implements IWaitOperationRequest
                 * @constructor
                 * @param {google.longrunning.IWaitOperationRequest=} [properties] Properties to set
                 */
                function WaitOperationRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * WaitOperationRequest name.
                 * @member {string} name
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 */
                WaitOperationRequest.prototype.name = "";
    
                /**
                 * WaitOperationRequest timeout.
                 * @member {google.protobuf.IDuration|null|undefined} timeout
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 */
                WaitOperationRequest.prototype.timeout = null;
    
                /**
                 * Creates a new WaitOperationRequest instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest=} [properties] Properties to set
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest instance
                 */
                WaitOperationRequest.create = function create(properties) {
                    return new WaitOperationRequest(properties);
                };
    
                /**
                 * Encodes the specified WaitOperationRequest message. Does not implicitly {@link google.longrunning.WaitOperationRequest.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest} message WaitOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WaitOperationRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                        $root.google.protobuf.Duration.encode(message.timeout, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified WaitOperationRequest message, length delimited. Does not implicitly {@link google.longrunning.WaitOperationRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.IWaitOperationRequest} message WaitOperationRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                WaitOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a WaitOperationRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WaitOperationRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.WaitOperationRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.timeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a WaitOperationRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                WaitOperationRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a WaitOperationRequest message.
                 * @function verify
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                WaitOperationRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.timeout != null && message.hasOwnProperty("timeout")) {
                        var error = $root.google.protobuf.Duration.verify(message.timeout);
                        if (error)
                            return "timeout." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a WaitOperationRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.WaitOperationRequest} WaitOperationRequest
                 */
                WaitOperationRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.WaitOperationRequest)
                        return object;
                    var message = new $root.google.longrunning.WaitOperationRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.timeout != null) {
                        if (typeof object.timeout !== "object")
                            throw TypeError(".google.longrunning.WaitOperationRequest.timeout: object expected");
                        message.timeout = $root.google.protobuf.Duration.fromObject(object.timeout);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a WaitOperationRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {google.longrunning.WaitOperationRequest} message WaitOperationRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                WaitOperationRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.timeout = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.timeout != null && message.hasOwnProperty("timeout"))
                        object.timeout = $root.google.protobuf.Duration.toObject(message.timeout, options);
                    return object;
                };
    
                /**
                 * Converts this WaitOperationRequest to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.WaitOperationRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                WaitOperationRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for WaitOperationRequest
                 * @function getTypeUrl
                 * @memberof google.longrunning.WaitOperationRequest
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                WaitOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.WaitOperationRequest";
                };
    
                return WaitOperationRequest;
            })();
    
            longrunning.OperationInfo = (function() {
    
                /**
                 * Properties of an OperationInfo.
                 * @memberof google.longrunning
                 * @interface IOperationInfo
                 * @property {string|null} [responseType] OperationInfo responseType
                 * @property {string|null} [metadataType] OperationInfo metadataType
                 */
    
                /**
                 * Constructs a new OperationInfo.
                 * @memberof google.longrunning
                 * @classdesc Represents an OperationInfo.
                 * @implements IOperationInfo
                 * @constructor
                 * @param {google.longrunning.IOperationInfo=} [properties] Properties to set
                 */
                function OperationInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OperationInfo responseType.
                 * @member {string} responseType
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 */
                OperationInfo.prototype.responseType = "";
    
                /**
                 * OperationInfo metadataType.
                 * @member {string} metadataType
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 */
                OperationInfo.prototype.metadataType = "";
    
                /**
                 * Creates a new OperationInfo instance using the specified properties.
                 * @function create
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo=} [properties] Properties to set
                 * @returns {google.longrunning.OperationInfo} OperationInfo instance
                 */
                OperationInfo.create = function create(properties) {
                    return new OperationInfo(properties);
                };
    
                /**
                 * Encodes the specified OperationInfo message. Does not implicitly {@link google.longrunning.OperationInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo} message OperationInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OperationInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.responseType != null && Object.hasOwnProperty.call(message, "responseType"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseType);
                    if (message.metadataType != null && Object.hasOwnProperty.call(message, "metadataType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.metadataType);
                    return writer;
                };
    
                /**
                 * Encodes the specified OperationInfo message, length delimited. Does not implicitly {@link google.longrunning.OperationInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.IOperationInfo} message OperationInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OperationInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OperationInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OperationInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.longrunning.OperationInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.responseType = reader.string();
                                break;
                            }
                        case 2: {
                                message.metadataType = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OperationInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OperationInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OperationInfo message.
                 * @function verify
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OperationInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        if (!$util.isString(message.responseType))
                            return "responseType: string expected";
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        if (!$util.isString(message.metadataType))
                            return "metadataType: string expected";
                    return null;
                };
    
                /**
                 * Creates an OperationInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.longrunning.OperationInfo} OperationInfo
                 */
                OperationInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.longrunning.OperationInfo)
                        return object;
                    var message = new $root.google.longrunning.OperationInfo();
                    if (object.responseType != null)
                        message.responseType = String(object.responseType);
                    if (object.metadataType != null)
                        message.metadataType = String(object.metadataType);
                    return message;
                };
    
                /**
                 * Creates a plain object from an OperationInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {google.longrunning.OperationInfo} message OperationInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OperationInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.responseType = "";
                        object.metadataType = "";
                    }
                    if (message.responseType != null && message.hasOwnProperty("responseType"))
                        object.responseType = message.responseType;
                    if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                        object.metadataType = message.metadataType;
                    return object;
                };
    
                /**
                 * Converts this OperationInfo to JSON.
                 * @function toJSON
                 * @memberof google.longrunning.OperationInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OperationInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OperationInfo
                 * @function getTypeUrl
                 * @memberof google.longrunning.OperationInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OperationInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.longrunning.OperationInfo";
                };
    
                return OperationInfo;
            })();
    
            return longrunning;
        })();
    
        google.rpc = (function() {
    
            /**
             * Namespace rpc.
             * @memberof google
             * @namespace
             */
            var rpc = {};
    
            rpc.Status = (function() {
    
                /**
                 * Properties of a Status.
                 * @memberof google.rpc
                 * @interface IStatus
                 * @property {number|null} [code] Status code
                 * @property {string|null} [message] Status message
                 * @property {Array.<google.protobuf.IAny>|null} [details] Status details
                 */
    
                /**
                 * Constructs a new Status.
                 * @memberof google.rpc
                 * @classdesc Represents a Status.
                 * @implements IStatus
                 * @constructor
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 */
                function Status(properties) {
                    this.details = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Status code.
                 * @member {number} code
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.code = 0;
    
                /**
                 * Status message.
                 * @member {string} message
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.message = "";
    
                /**
                 * Status details.
                 * @member {Array.<google.protobuf.IAny>} details
                 * @memberof google.rpc.Status
                 * @instance
                 */
                Status.prototype.details = $util.emptyArray;
    
                /**
                 * Creates a new Status instance using the specified properties.
                 * @function create
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus=} [properties] Properties to set
                 * @returns {google.rpc.Status} Status instance
                 */
                Status.create = function create(properties) {
                    return new Status(properties);
                };
    
                /**
                 * Encodes the specified Status message. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.details != null && message.details.length)
                        for (var i = 0; i < message.details.length; ++i)
                            $root.google.protobuf.Any.encode(message.details[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Status message, length delimited. Does not implicitly {@link google.rpc.Status.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.IStatus} message Status message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Status.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.code = reader.int32();
                                break;
                            }
                        case 2: {
                                message.message = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.details && message.details.length))
                                    message.details = [];
                                message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Status message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.rpc.Status
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.rpc.Status} Status
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Status.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Status message.
                 * @function verify
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Status.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.details != null && message.hasOwnProperty("details")) {
                        if (!Array.isArray(message.details))
                            return "details: array expected";
                        for (var i = 0; i < message.details.length; ++i) {
                            var error = $root.google.protobuf.Any.verify(message.details[i]);
                            if (error)
                                return "details." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Status message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.rpc.Status} Status
                 */
                Status.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.rpc.Status)
                        return object;
                    var message = new $root.google.rpc.Status();
                    if (object.code != null)
                        message.code = object.code | 0;
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.details) {
                        if (!Array.isArray(object.details))
                            throw TypeError(".google.rpc.Status.details: array expected");
                        message.details = [];
                        for (var i = 0; i < object.details.length; ++i) {
                            if (typeof object.details[i] !== "object")
                                throw TypeError(".google.rpc.Status.details: object expected");
                            message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Status message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.rpc.Status
                 * @static
                 * @param {google.rpc.Status} message Status
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Status.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.details = [];
                    if (options.defaults) {
                        object.code = 0;
                        object.message = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.details && message.details.length) {
                        object.details = [];
                        for (var j = 0; j < message.details.length; ++j)
                            object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Status to JSON.
                 * @function toJSON
                 * @memberof google.rpc.Status
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Status.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for Status
                 * @function getTypeUrl
                 * @memberof google.rpc.Status
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.rpc.Status";
                };
    
                return Status;
            })();
    
            return rpc;
        })();
    
        return google;
    })();

    return $root;
});
