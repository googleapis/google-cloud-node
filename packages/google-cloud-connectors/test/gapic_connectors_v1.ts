// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as connectorsModule from '../src';

import {PassThrough} from 'stream';

import {
  protobuf,
  LROperation,
  operationsProtos,
  IamProtos,
  LocationProtos,
} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(
  require('../protos/protos.json')
).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
  let type = root.lookupType(typeName) as protobuf.Type;
  for (const field of fields.slice(0, -1)) {
    type = type.fields[field]?.resolvedType as protobuf.Type;
  }
  return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (
    instance.constructor as typeof protobuf.Message
  ).toObject(instance as protobuf.Message<T>, {defaults: true});
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubLongRunningCall<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().rejects(callError)
    : sinon.stub().resolves([mockOperation]);
}

function stubLongRunningCallWithCallback<ResponseType>(
  response?: ResponseType,
  callError?: Error,
  lroError?: Error
) {
  const innerStub = lroError
    ? sinon.stub().rejects(lroError)
    : sinon.stub().resolves([response]);
  const mockOperation = {
    promise: innerStub,
  };
  return callError
    ? sinon.stub().callsArgWith(2, callError)
    : sinon.stub().callsArgWith(2, null, mockOperation);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1.ConnectorsClient', () => {
  describe('Common methods', () => {
    it('has apiEndpoint', () => {
      const client = new connectorsModule.v1.ConnectorsClient();
      const apiEndpoint = client.apiEndpoint;
      assert.strictEqual(apiEndpoint, 'connectors.googleapis.com');
    });

    it('has universeDomain', () => {
      const client = new connectorsModule.v1.ConnectorsClient();
      const universeDomain = client.universeDomain;
      assert.strictEqual(universeDomain, 'googleapis.com');
    });

    if (
      typeof process === 'object' &&
      typeof process.emitWarning === 'function'
    ) {
      it('throws DeprecationWarning if static servicePath is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const servicePath = connectorsModule.v1.ConnectorsClient.servicePath;
        assert.strictEqual(servicePath, 'connectors.googleapis.com');
        assert(stub.called);
        stub.restore();
      });

      it('throws DeprecationWarning if static apiEndpoint is used', () => {
        const stub = sinon.stub(process, 'emitWarning');
        const apiEndpoint = connectorsModule.v1.ConnectorsClient.apiEndpoint;
        assert.strictEqual(apiEndpoint, 'connectors.googleapis.com');
        assert(stub.called);
        stub.restore();
      });
    }
    it('sets apiEndpoint according to universe domain camelCase', () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        universeDomain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'connectors.example.com');
    });

    it('sets apiEndpoint according to universe domain snakeCase', () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        universe_domain: 'example.com',
      });
      const servicePath = client.apiEndpoint;
      assert.strictEqual(servicePath, 'connectors.example.com');
    });

    if (typeof process === 'object' && 'env' in process) {
      describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
        it('sets apiEndpoint from environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client = new connectorsModule.v1.ConnectorsClient();
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'connectors.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });

        it('value configured in code has priority over environment variable', () => {
          const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
          const client = new connectorsModule.v1.ConnectorsClient({
            universeDomain: 'configured.example.com',
          });
          const servicePath = client.apiEndpoint;
          assert.strictEqual(servicePath, 'connectors.configured.example.com');
          if (saved) {
            process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
          } else {
            delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
          }
        });
      });
    }
    it('does not allow setting both universeDomain and universe_domain', () => {
      assert.throws(() => {
        new connectorsModule.v1.ConnectorsClient({
          universe_domain: 'example.com',
          universeDomain: 'example.net',
        });
      });
    });

    it('has port', () => {
      const port = connectorsModule.v1.ConnectorsClient.port;
      assert(port);
      assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
      const client = new connectorsModule.v1.ConnectorsClient();
      assert(client);
    });

    it('should create a client with gRPC fallback', () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        fallback: true,
      });
      assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.connectorsStub, undefined);
      await client.initialize();
      assert(client.connectorsStub);
    });

    it('has close method for the initialized client', done => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      assert(client.connectorsStub);
      client.close().then(() => {
        done();
      });
    });

    it('has close method for the non-initialized client', done => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert.strictEqual(client.connectorsStub, undefined);
      client.close().then(() => {
        done();
      });
    });

    it('has getProjectId method', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
      const result = await client.getProjectId();
      assert.strictEqual(result, fakeProjectId);
      assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
      const fakeProjectId = 'fake-project-id';
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.auth.getProjectId = sinon
        .stub()
        .callsArgWith(0, null, fakeProjectId);
      const promise = new Promise((resolve, reject) => {
        client.getProjectId((err?: Error | null, projectId?: string | null) => {
          if (err) {
            reject(err);
          } else {
            resolve(projectId);
          }
        });
      });
      const result = await promise;
      assert.strictEqual(result, fakeProjectId);
    });
  });

  describe('getConnection', () => {
    it('invokes getConnection without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.Connection()
      );
      client.innerApiCalls.getConnection = stubSimpleCall(expectedResponse);
      const [response] = await client.getConnection(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnection without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.Connection()
      );
      client.innerApiCalls.getConnection =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getConnection(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.connectors.v1.IConnection | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnection with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getConnection = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getConnection(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnection with closed client', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getConnection(request), expectedError);
    });
  });

  describe('getProvider', () => {
    it('invokes getProvider without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetProviderRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetProviderRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.Provider()
      );
      client.innerApiCalls.getProvider = stubSimpleCall(expectedResponse);
      const [response] = await client.getProvider(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getProvider as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProvider as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProvider without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetProviderRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetProviderRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.Provider()
      );
      client.innerApiCalls.getProvider =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getProvider(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.connectors.v1.IProvider | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getProvider as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProvider as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProvider with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetProviderRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetProviderRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getProvider = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getProvider(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getProvider as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getProvider as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getProvider with closed client', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetProviderRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetProviderRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getProvider(request), expectedError);
    });
  });

  describe('getConnector', () => {
    it('invokes getConnector without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.Connector()
      );
      client.innerApiCalls.getConnector = stubSimpleCall(expectedResponse);
      const [response] = await client.getConnector(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnector without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.Connector()
      );
      client.innerApiCalls.getConnector =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getConnector(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.connectors.v1.IConnector | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnector with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getConnector = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getConnector(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getConnector as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnector as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnector with closed client', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectorRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectorRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getConnector(request), expectedError);
    });
  });

  describe('getConnectorVersion', () => {
    it('invokes getConnectorVersion without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectorVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectorVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ConnectorVersion()
      );
      client.innerApiCalls.getConnectorVersion =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getConnectorVersion(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnectorVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectorVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectorVersion without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectorVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectorVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ConnectorVersion()
      );
      client.innerApiCalls.getConnectorVersion =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getConnectorVersion(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.connectors.v1.IConnectorVersion | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnectorVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectorVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectorVersion with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectorVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectorVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getConnectorVersion = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getConnectorVersion(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getConnectorVersion as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectorVersion as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectorVersion with closed client', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectorVersionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectorVersionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getConnectorVersion(request), expectedError);
    });
  });

  describe('getConnectionSchemaMetadata', () => {
    it('invokes getConnectionSchemaMetadata without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectionSchemaMetadataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectionSchemaMetadataRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ConnectionSchemaMetadata()
      );
      client.innerApiCalls.getConnectionSchemaMetadata =
        stubSimpleCall(expectedResponse);
      const [response] = await client.getConnectionSchemaMetadata(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectionSchemaMetadata without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectionSchemaMetadataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectionSchemaMetadataRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ConnectionSchemaMetadata()
      );
      client.innerApiCalls.getConnectionSchemaMetadata =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getConnectionSchemaMetadata(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.connectors.v1.IConnectionSchemaMetadata | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectionSchemaMetadata with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectionSchemaMetadataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectionSchemaMetadataRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getConnectionSchemaMetadata = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getConnectionSchemaMetadata(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.getConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getConnectionSchemaMetadata with closed client', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetConnectionSchemaMetadataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetConnectionSchemaMetadataRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(
        client.getConnectionSchemaMetadata(request),
        expectedError
      );
    });
  });

  describe('getRuntimeConfig', () => {
    it('invokes getRuntimeConfig without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetRuntimeConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetRuntimeConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.RuntimeConfig()
      );
      client.innerApiCalls.getRuntimeConfig = stubSimpleCall(expectedResponse);
      const [response] = await client.getRuntimeConfig(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getRuntimeConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRuntimeConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRuntimeConfig without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetRuntimeConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetRuntimeConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.RuntimeConfig()
      );
      client.innerApiCalls.getRuntimeConfig =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getRuntimeConfig(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.connectors.v1.IRuntimeConfig | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getRuntimeConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRuntimeConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRuntimeConfig with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetRuntimeConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetRuntimeConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getRuntimeConfig = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getRuntimeConfig(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getRuntimeConfig as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getRuntimeConfig as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getRuntimeConfig with closed client', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetRuntimeConfigRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetRuntimeConfigRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getRuntimeConfig(request), expectedError);
    });
  });

  describe('getGlobalSettings', () => {
    it('invokes getGlobalSettings without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetGlobalSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetGlobalSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.Settings()
      );
      client.innerApiCalls.getGlobalSettings = stubSimpleCall(expectedResponse);
      const [response] = await client.getGlobalSettings(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGlobalSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlobalSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlobalSettings without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetGlobalSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetGlobalSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.connectors.v1.Settings()
      );
      client.innerApiCalls.getGlobalSettings =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getGlobalSettings(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.connectors.v1.ISettings | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.getGlobalSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlobalSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlobalSettings with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetGlobalSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetGlobalSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.getGlobalSettings = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.getGlobalSettings(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.getGlobalSettings as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.getGlobalSettings as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes getGlobalSettings with closed client', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.GetGlobalSettingsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.GetGlobalSettingsRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedError = new Error('The client has already been closed.');
      client.close();
      await assert.rejects(client.getGlobalSettings(request), expectedError);
    });
  });

  describe('createConnection', () => {
    it('invokes createConnection without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.CreateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.CreateConnectionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createConnection =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.createConnection(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnection without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.CreateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.CreateConnectionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.createConnection =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.createConnection(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.connectors.v1.IConnection,
              protos.google.cloud.connectors.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.connectors.v1.IConnection,
        protos.google.cloud.connectors.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.createConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnection with call error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.CreateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.CreateConnectionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createConnection = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.createConnection(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.createConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes createConnection with LRO error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.CreateConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.CreateConnectionRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.createConnection = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.createConnection(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.createConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.createConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkCreateConnectionProgress without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkCreateConnectionProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkCreateConnectionProgress with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkCreateConnectionProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('updateConnection', () => {
    it('invokes updateConnection without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.UpdateConnectionRequest()
      );
      request.connection ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.UpdateConnectionRequest',
        ['connection', 'name']
      );
      request.connection.name = defaultValue1;
      const expectedHeaderRequestParams = `connection.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateConnection =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.updateConnection(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnection without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.UpdateConnectionRequest()
      );
      request.connection ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.UpdateConnectionRequest',
        ['connection', 'name']
      );
      request.connection.name = defaultValue1;
      const expectedHeaderRequestParams = `connection.name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.updateConnection =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.updateConnection(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.connectors.v1.IConnection,
              protos.google.cloud.connectors.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.connectors.v1.IConnection,
        protos.google.cloud.connectors.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.updateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnection with call error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.UpdateConnectionRequest()
      );
      request.connection ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.UpdateConnectionRequest',
        ['connection', 'name']
      );
      request.connection.name = defaultValue1;
      const expectedHeaderRequestParams = `connection.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateConnection = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.updateConnection(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes updateConnection with LRO error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.UpdateConnectionRequest()
      );
      request.connection ??= {};
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.UpdateConnectionRequest',
        ['connection', 'name']
      );
      request.connection.name = defaultValue1;
      const expectedHeaderRequestParams = `connection.name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.updateConnection = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.updateConnection(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.updateConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.updateConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkUpdateConnectionProgress without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkUpdateConnectionProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkUpdateConnectionProgress with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkUpdateConnectionProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('deleteConnection', () => {
    it('invokes deleteConnection without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.DeleteConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.DeleteConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteConnection =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.deleteConnection(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnection without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.DeleteConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.DeleteConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.deleteConnection =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.deleteConnection(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.protobuf.IEmpty,
              protos.google.cloud.connectors.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.connectors.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.deleteConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnection with call error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.DeleteConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.DeleteConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteConnection = stubLongRunningCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.deleteConnection(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes deleteConnection with LRO error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.DeleteConnectionRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.DeleteConnectionRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteConnection = stubLongRunningCall(
        undefined,
        undefined,
        expectedError
      );
      const [operation] = await client.deleteConnection(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.deleteConnection as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.deleteConnection as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkDeleteConnectionProgress without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation = await client.checkDeleteConnectionProgress(
        expectedResponse.name
      );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkDeleteConnectionProgress with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkDeleteConnectionProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('refreshConnectionSchemaMetadata', () => {
    it('invokes refreshConnectionSchemaMetadata without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.RefreshConnectionSchemaMetadataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.RefreshConnectionSchemaMetadataRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.refreshConnectionSchemaMetadata =
        stubLongRunningCall(expectedResponse);
      const [operation] = await client.refreshConnectionSchemaMetadata(request);
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.refreshConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.refreshConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes refreshConnectionSchemaMetadata without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.RefreshConnectionSchemaMetadataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.RefreshConnectionSchemaMetadataRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedResponse = generateSampleMessage(
        new protos.google.longrunning.Operation()
      );
      client.innerApiCalls.refreshConnectionSchemaMetadata =
        stubLongRunningCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.refreshConnectionSchemaMetadata(
          request,
          (
            err?: Error | null,
            result?: LROperation<
              protos.google.cloud.connectors.v1.IConnectionSchemaMetadata,
              protos.google.cloud.connectors.v1.IOperationMetadata
            > | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const operation = (await promise) as LROperation<
        protos.google.cloud.connectors.v1.IConnectionSchemaMetadata,
        protos.google.cloud.connectors.v1.IOperationMetadata
      >;
      const [response] = await operation.promise();
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.refreshConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.refreshConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes refreshConnectionSchemaMetadata with call error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.RefreshConnectionSchemaMetadataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.RefreshConnectionSchemaMetadataRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.refreshConnectionSchemaMetadata =
        stubLongRunningCall(undefined, expectedError);
      await assert.rejects(
        client.refreshConnectionSchemaMetadata(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.refreshConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.refreshConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes refreshConnectionSchemaMetadata with LRO error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.RefreshConnectionSchemaMetadataRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.RefreshConnectionSchemaMetadataRequest',
        ['name']
      );
      request.name = defaultValue1;
      const expectedHeaderRequestParams = `name=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.refreshConnectionSchemaMetadata =
        stubLongRunningCall(undefined, undefined, expectedError);
      const [operation] = await client.refreshConnectionSchemaMetadata(request);
      await assert.rejects(operation.promise(), expectedError);
      const actualRequest = (
        client.innerApiCalls.refreshConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.refreshConnectionSchemaMetadata as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes checkRefreshConnectionSchemaMetadataProgress without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      expectedResponse.name = 'test';
      expectedResponse.response = {type_url: 'url', value: Buffer.from('')};
      expectedResponse.metadata = {type_url: 'url', value: Buffer.from('')};

      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const decodedOperation =
        await client.checkRefreshConnectionSchemaMetadataProgress(
          expectedResponse.name
        );
      assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
      assert(decodedOperation.metadata);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });

    it('invokes checkRefreshConnectionSchemaMetadataProgress with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const expectedError = new Error('expected');

      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.checkRefreshConnectionSchemaMetadataProgress(''),
        expectedError
      );
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
  });

  describe('listConnections', () => {
    it('invokes listConnections without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connection()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connection()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connection()
        ),
      ];
      client.innerApiCalls.listConnections = stubSimpleCall(expectedResponse);
      const [response] = await client.listConnections(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnections as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnections as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnections without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connection()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connection()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connection()
        ),
      ];
      client.innerApiCalls.listConnections =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listConnections(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.connectors.v1.IConnection[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnections as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnections as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnections with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listConnections = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listConnections(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listConnections as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnections as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectionsStream without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connection()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connection()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connection()
        ),
      ];
      client.descriptors.page.listConnections.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listConnectionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.connectors.v1.Connection[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.connectors.v1.Connection) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listConnections.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnections, request)
      );
      assert(
        (client.descriptors.page.listConnections.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listConnectionsStream with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnections.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listConnectionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.connectors.v1.Connection[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.connectors.v1.Connection) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listConnections.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnections, request)
      );
      assert(
        (client.descriptors.page.listConnections.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listConnections without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connection()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connection()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connection()
        ),
      ];
      client.descriptors.page.listConnections.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.connectors.v1.IConnection[] = [];
      const iterable = client.listConnectionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnections.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConnections.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listConnections with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnections.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listConnectionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.connectors.v1.IConnection[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnections.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConnections.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listProviders', () => {
    it('invokes listProviders without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.connectors.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.connectors.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.connectors.v1.Provider()),
      ];
      client.innerApiCalls.listProviders = stubSimpleCall(expectedResponse);
      const [response] = await client.listProviders(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listProviders as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listProviders as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listProviders without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.connectors.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.connectors.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.connectors.v1.Provider()),
      ];
      client.innerApiCalls.listProviders =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listProviders(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.connectors.v1.IProvider[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listProviders as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listProviders as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listProviders with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listProviders = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listProviders(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listProviders as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listProviders as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listProvidersStream without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.connectors.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.connectors.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.connectors.v1.Provider()),
      ];
      client.descriptors.page.listProviders.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listProvidersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.connectors.v1.Provider[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.connectors.v1.Provider) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listProviders.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listProviders, request)
      );
      assert(
        (client.descriptors.page.listProviders.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listProvidersStream with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listProviders.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listProvidersStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.connectors.v1.Provider[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.connectors.v1.Provider) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listProviders.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listProviders, request)
      );
      assert(
        (client.descriptors.page.listProviders.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listProviders without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.connectors.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.connectors.v1.Provider()),
        generateSampleMessage(new protos.google.cloud.connectors.v1.Provider()),
      ];
      client.descriptors.page.listProviders.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.connectors.v1.IProvider[] = [];
      const iterable = client.listProvidersAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listProviders.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listProviders.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listProviders with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListProvidersRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListProvidersRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listProviders.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listProvidersAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.connectors.v1.IProvider[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listProviders.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listProviders.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listConnectors', () => {
    it('invokes listConnectors without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connector()
        ),
      ];
      client.innerApiCalls.listConnectors = stubSimpleCall(expectedResponse);
      const [response] = await client.listConnectors(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnectors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectors without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connector()
        ),
      ];
      client.innerApiCalls.listConnectors =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listConnectors(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.connectors.v1.IConnector[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnectors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectors with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listConnectors = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(client.listConnectors(request), expectedError);
      const actualRequest = (
        client.innerApiCalls.listConnectors as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectors as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectorsStream without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connector()
        ),
      ];
      client.descriptors.page.listConnectors.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listConnectorsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.connectors.v1.Connector[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.connectors.v1.Connector) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listConnectors.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnectors, request)
      );
      assert(
        (client.descriptors.page.listConnectors.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('invokes listConnectorsStream with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnectors.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listConnectorsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.connectors.v1.Connector[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.connectors.v1.Connector) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (client.descriptors.page.listConnectors.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnectors, request)
      );
      assert(
        (client.descriptors.page.listConnectors.createStream as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listConnectors without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connector()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.Connector()
        ),
      ];
      client.descriptors.page.listConnectors.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.connectors.v1.IConnector[] = [];
      const iterable = client.listConnectorsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnectors.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConnectors.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });

    it('uses async iteration with listConnectors with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnectors.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listConnectorsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.connectors.v1.IConnector[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnectors.asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (client.descriptors.page.listConnectors.asyncIterate as SinonStub)
          .getCall(0)
          .args[2].otherArgs.headers[
            'x-goog-request-params'
          ].includes(expectedHeaderRequestParams)
      );
    });
  });

  describe('listConnectorVersions', () => {
    it('invokes listConnectorVersions without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.ConnectorVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.ConnectorVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.ConnectorVersion()
        ),
      ];
      client.innerApiCalls.listConnectorVersions =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listConnectorVersions(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnectorVersions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectorVersions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectorVersions without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.ConnectorVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.ConnectorVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.ConnectorVersion()
        ),
      ];
      client.innerApiCalls.listConnectorVersions =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listConnectorVersions(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.connectors.v1.IConnectorVersion[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listConnectorVersions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectorVersions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectorVersions with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listConnectorVersions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listConnectorVersions(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listConnectorVersions as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listConnectorVersions as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listConnectorVersionsStream without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.ConnectorVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.ConnectorVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.ConnectorVersion()
        ),
      ];
      client.descriptors.page.listConnectorVersions.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listConnectorVersionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.connectors.v1.ConnectorVersion[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.connectors.v1.ConnectorVersion) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listConnectorVersions
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnectorVersions, request)
      );
      assert(
        (
          client.descriptors.page.listConnectorVersions
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listConnectorVersionsStream with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnectorVersions.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listConnectorVersionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.connectors.v1.ConnectorVersion[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.connectors.v1.ConnectorVersion) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listConnectorVersions
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listConnectorVersions, request)
      );
      assert(
        (
          client.descriptors.page.listConnectorVersions
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listConnectorVersions without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.ConnectorVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.ConnectorVersion()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.ConnectorVersion()
        ),
      ];
      client.descriptors.page.listConnectorVersions.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.connectors.v1.IConnectorVersion[] =
        [];
      const iterable = client.listConnectorVersionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnectorVersions
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listConnectorVersions
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listConnectorVersions with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListConnectorVersionsRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListConnectorVersionsRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listConnectorVersions.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listConnectorVersionsAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.connectors.v1.IConnectorVersion[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listConnectorVersions
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listConnectorVersions
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listRuntimeEntitySchemas', () => {
    it('invokes listRuntimeEntitySchemas without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeEntitySchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeEntitySchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeEntitySchema()
        ),
      ];
      client.innerApiCalls.listRuntimeEntitySchemas =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listRuntimeEntitySchemas(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRuntimeEntitySchemas as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRuntimeEntitySchemas as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRuntimeEntitySchemas without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeEntitySchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeEntitySchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeEntitySchema()
        ),
      ];
      client.innerApiCalls.listRuntimeEntitySchemas =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listRuntimeEntitySchemas(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.connectors.v1.IRuntimeEntitySchema[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRuntimeEntitySchemas as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRuntimeEntitySchemas as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRuntimeEntitySchemas with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listRuntimeEntitySchemas = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listRuntimeEntitySchemas(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listRuntimeEntitySchemas as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRuntimeEntitySchemas as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRuntimeEntitySchemasStream without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeEntitySchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeEntitySchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeEntitySchema()
        ),
      ];
      client.descriptors.page.listRuntimeEntitySchemas.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listRuntimeEntitySchemasStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.connectors.v1.RuntimeEntitySchema[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.connectors.v1.RuntimeEntitySchema) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listRuntimeEntitySchemas
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listRuntimeEntitySchemas, request)
      );
      assert(
        (
          client.descriptors.page.listRuntimeEntitySchemas
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listRuntimeEntitySchemasStream with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRuntimeEntitySchemas.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listRuntimeEntitySchemasStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.connectors.v1.RuntimeEntitySchema[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.connectors.v1.RuntimeEntitySchema) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listRuntimeEntitySchemas
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listRuntimeEntitySchemas, request)
      );
      assert(
        (
          client.descriptors.page.listRuntimeEntitySchemas
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRuntimeEntitySchemas without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeEntitySchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeEntitySchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeEntitySchema()
        ),
      ];
      client.descriptors.page.listRuntimeEntitySchemas.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.connectors.v1.IRuntimeEntitySchema[] =
        [];
      const iterable = client.listRuntimeEntitySchemasAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRuntimeEntitySchemas
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listRuntimeEntitySchemas
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRuntimeEntitySchemas with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeEntitySchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRuntimeEntitySchemas.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listRuntimeEntitySchemasAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.connectors.v1.IRuntimeEntitySchema[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRuntimeEntitySchemas
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listRuntimeEntitySchemas
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });

  describe('listRuntimeActionSchemas', () => {
    it('invokes listRuntimeActionSchemas without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeActionSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeActionSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeActionSchema()
        ),
      ];
      client.innerApiCalls.listRuntimeActionSchemas =
        stubSimpleCall(expectedResponse);
      const [response] = await client.listRuntimeActionSchemas(request);
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRuntimeActionSchemas as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRuntimeActionSchemas as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRuntimeActionSchemas without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeActionSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeActionSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeActionSchema()
        ),
      ];
      client.innerApiCalls.listRuntimeActionSchemas =
        stubSimpleCallWithCallback(expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.listRuntimeActionSchemas(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.connectors.v1.IRuntimeActionSchema[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      const actualRequest = (
        client.innerApiCalls.listRuntimeActionSchemas as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRuntimeActionSchemas as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRuntimeActionSchemas with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.innerApiCalls.listRuntimeActionSchemas = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.listRuntimeActionSchemas(request),
        expectedError
      );
      const actualRequest = (
        client.innerApiCalls.listRuntimeActionSchemas as SinonStub
      ).getCall(0).args[0];
      assert.deepStrictEqual(actualRequest, request);
      const actualHeaderRequestParams = (
        client.innerApiCalls.listRuntimeActionSchemas as SinonStub
      ).getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
      assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
    });

    it('invokes listRuntimeActionSchemasStream without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeActionSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeActionSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeActionSchema()
        ),
      ];
      client.descriptors.page.listRuntimeActionSchemas.createStream =
        stubPageStreamingCall(expectedResponse);
      const stream = client.listRuntimeActionSchemasStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.connectors.v1.RuntimeActionSchema[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.connectors.v1.RuntimeActionSchema) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (
          client.descriptors.page.listRuntimeActionSchemas
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listRuntimeActionSchemas, request)
      );
      assert(
        (
          client.descriptors.page.listRuntimeActionSchemas
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('invokes listRuntimeActionSchemasStream with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRuntimeActionSchemas.createStream =
        stubPageStreamingCall(undefined, expectedError);
      const stream = client.listRuntimeActionSchemasStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.connectors.v1.RuntimeActionSchema[] =
          [];
        stream.on(
          'data',
          (response: protos.google.cloud.connectors.v1.RuntimeActionSchema) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      await assert.rejects(promise, expectedError);
      assert(
        (
          client.descriptors.page.listRuntimeActionSchemas
            .createStream as SinonStub
        )
          .getCall(0)
          .calledWith(client.innerApiCalls.listRuntimeActionSchemas, request)
      );
      assert(
        (
          client.descriptors.page.listRuntimeActionSchemas
            .createStream as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRuntimeActionSchemas without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeActionSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeActionSchema()
        ),
        generateSampleMessage(
          new protos.google.cloud.connectors.v1.RuntimeActionSchema()
        ),
      ];
      client.descriptors.page.listRuntimeActionSchemas.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: protos.google.cloud.connectors.v1.IRuntimeActionSchema[] =
        [];
      const iterable = client.listRuntimeActionSchemasAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRuntimeActionSchemas
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listRuntimeActionSchemas
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });

    it('uses async iteration with listRuntimeActionSchemas with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest()
      );
      const defaultValue1 = getTypeDefaultValue(
        '.google.cloud.connectors.v1.ListRuntimeActionSchemasRequest',
        ['parent']
      );
      request.parent = defaultValue1;
      const expectedHeaderRequestParams = `parent=${defaultValue1}`;
      const expectedError = new Error('expected');
      client.descriptors.page.listRuntimeActionSchemas.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listRuntimeActionSchemasAsync(request);
      await assert.rejects(async () => {
        const responses: protos.google.cloud.connectors.v1.IRuntimeActionSchema[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.descriptors.page.listRuntimeActionSchemas
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.descriptors.page.listRuntimeActionSchemas
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getIamPolicy', () => {
    it('invokes getIamPolicy without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.getIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getIamPolicy without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.getIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.getIamPolicy as SinonStub).getCall(0));
    });
    it('invokes getIamPolicy with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.GetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.getIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.getIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.getIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('setIamPolicy', () => {
    it('invokes setIamPolicy without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = stubSimpleCall(expectedResponse);
      const response = await client.setIamPolicy(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes setIamPolicy without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.Policy()
      );
      client.iamClient.setIamPolicy = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.setIamPolicy(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.Policy | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.setIamPolicy as SinonStub).getCall(0));
    });
    it('invokes setIamPolicy with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.SetIamPolicyRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.setIamPolicy = stubSimpleCall(undefined, expectedError);
      await assert.rejects(
        client.setIamPolicy(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.setIamPolicy as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('testIamPermissions', () => {
    it('invokes testIamPermissions without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = stubSimpleCall(expectedResponse);
      const response = await client.testIamPermissions(
        request,
        expectedOptions
      );
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes testIamPermissions without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsResponse()
      );
      client.iamClient.testIamPermissions = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.testIamPermissions(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: IamProtos.google.iam.v1.TestIamPermissionsResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.iamClient.testIamPermissions as SinonStub).getCall(0));
    });
    it('invokes testIamPermissions with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new IamProtos.google.iam.v1.TestIamPermissionsRequest()
      );
      request.resource = '';
      const expectedHeaderRequestParams = 'resource=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.iamClient.testIamPermissions = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.testIamPermissions(request, expectedOptions),
        expectedError
      );
      assert(
        (client.iamClient.testIamPermissions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('getLocation', () => {
    it('invokes getLocation without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = stubSimpleCall(expectedResponse);
      const response = await client.getLocation(request, expectedOptions);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
    it('invokes getLocation without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new LocationProtos.google.cloud.location.Location()
      );
      client.locationsClient.getLocation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.getLocation(
          request,
          expectedOptions,
          (
            err?: Error | null,
            result?: LocationProtos.google.cloud.location.ILocation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.locationsClient.getLocation as SinonStub).getCall(0));
    });
    it('invokes getLocation with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.GetLocationRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.locationsClient.getLocation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(
        client.getLocation(request, expectedOptions),
        expectedError
      );
      assert(
        (client.locationsClient.getLocation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });
  describe('listLocationsAsync', () => {
    it('uses async iteration with listLocations without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
        generateSampleMessage(
          new LocationProtos.google.cloud.location.Location()
        ),
      ];
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: LocationProtos.google.cloud.location.ILocation[] = [];
      const iterable = client.listLocationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
    it('uses async iteration with listLocations with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new LocationProtos.google.cloud.location.ListLocationsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.locationsClient.descriptors.page.listLocations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.listLocationsAsync(request);
      await assert.rejects(async () => {
        const responses: LocationProtos.google.cloud.location.ILocation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
      assert(
        (
          client.locationsClient.descriptors.page.listLocations
            .asyncIterate as SinonStub
        )
          .getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'].includes(
            expectedHeaderRequestParams
          )
      );
    });
  });
  describe('getOperation', () => {
    it('invokes getOperation without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
      const response = await client.getOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes getOperation without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new operationsProtos.google.longrunning.Operation()
      );
      client.operationsClient.getOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.getOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: operationsProtos.google.longrunning.Operation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.getOperation as SinonStub).getCall(0));
    });
    it('invokes getOperation with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.GetOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.getOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.getOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.getOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('cancelOperation', () => {
    it('invokes cancelOperation without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.cancelOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes cancelOperation without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.cancelOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.cancelOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.cancelOperation as SinonStub).getCall(0));
    });
    it('invokes cancelOperation with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.CancelOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.cancelOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.cancelOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.cancelOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('deleteOperation', () => {
    it('invokes deleteOperation without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation =
        stubSimpleCall(expectedResponse);
      const response = await client.deleteOperation(request);
      assert.deepStrictEqual(response, [expectedResponse]);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
    it('invokes deleteOperation without error using callback', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.operationsClient.deleteOperation = sinon
        .stub()
        .callsArgWith(2, null, expectedResponse);
      const promise = new Promise((resolve, reject) => {
        client.operationsClient.deleteOperation(
          request,
          undefined,
          (
            err?: Error | null,
            result?: protos.google.protobuf.Empty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert((client.operationsClient.deleteOperation as SinonStub).getCall(0));
    });
    it('invokes deleteOperation with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.DeleteOperationRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.deleteOperation = stubSimpleCall(
        undefined,
        expectedError
      );
      await assert.rejects(async () => {
        await client.deleteOperation(request);
      }, expectedError);
      assert(
        (client.operationsClient.deleteOperation as SinonStub)
          .getCall(0)
          .calledWith(request)
      );
    });
  });
  describe('listOperationsAsync', () => {
    it('uses async iteration with listOperations without error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedResponse = [
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
        generateSampleMessage(
          new operationsProtos.google.longrunning.ListOperationsResponse()
        ),
      ];
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(expectedResponse);
      const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
        [];
      const iterable = client.operationsClient.listOperationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
    it('uses async iteration with listOperations with error', async () => {
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new operationsProtos.google.longrunning.ListOperationsRequest()
      );
      const expectedError = new Error('expected');
      client.operationsClient.descriptor.listOperations.asyncIterate =
        stubAsyncIterationCall(undefined, expectedError);
      const iterable = client.operationsClient.listOperationsAsync(request);
      await assert.rejects(async () => {
        const responses: operationsProtos.google.longrunning.ListOperationsResponse[] =
          [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (
          client.operationsClient.descriptor.listOperations
            .asyncIterate as SinonStub
        ).getCall(0).args[1],
        request
      );
    });
  });

  describe('Path templates', () => {
    describe('connection', () => {
      const fakePath = '/rendered/path/connection';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        connection: 'connectionValue',
      };
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.connectionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.connectionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('connectionPath', () => {
        const result = client.connectionPath(
          'projectValue',
          'locationValue',
          'connectionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.connectionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromConnectionName', () => {
        const result = client.matchProjectFromConnectionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.connectionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromConnectionName', () => {
        const result = client.matchLocationFromConnectionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.connectionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConnectionFromConnectionName', () => {
        const result = client.matchConnectionFromConnectionName(fakePath);
        assert.strictEqual(result, 'connectionValue');
        assert(
          (client.pathTemplates.connectionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('connectionSchemaMetadata', () => {
      const fakePath = '/rendered/path/connectionSchemaMetadata';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        connection: 'connectionValue',
      };
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.connectionSchemaMetadataPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.connectionSchemaMetadataPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('connectionSchemaMetadataPath', () => {
        const result = client.connectionSchemaMetadataPath(
          'projectValue',
          'locationValue',
          'connectionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.connectionSchemaMetadataPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromConnectionSchemaMetadataName', () => {
        const result =
          client.matchProjectFromConnectionSchemaMetadataName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (
            client.pathTemplates.connectionSchemaMetadataPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromConnectionSchemaMetadataName', () => {
        const result =
          client.matchLocationFromConnectionSchemaMetadataName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (
            client.pathTemplates.connectionSchemaMetadataPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConnectionFromConnectionSchemaMetadataName', () => {
        const result =
          client.matchConnectionFromConnectionSchemaMetadataName(fakePath);
        assert.strictEqual(result, 'connectionValue');
        assert(
          (
            client.pathTemplates.connectionSchemaMetadataPathTemplate
              .match as SinonStub
          )
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('connector', () => {
      const fakePath = '/rendered/path/connector';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        provider: 'providerValue',
        connector: 'connectorValue',
      };
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.connectorPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.connectorPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('connectorPath', () => {
        const result = client.connectorPath(
          'projectValue',
          'locationValue',
          'providerValue',
          'connectorValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.connectorPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromConnectorName', () => {
        const result = client.matchProjectFromConnectorName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.connectorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromConnectorName', () => {
        const result = client.matchLocationFromConnectorName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.connectorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProviderFromConnectorName', () => {
        const result = client.matchProviderFromConnectorName(fakePath);
        assert.strictEqual(result, 'providerValue');
        assert(
          (client.pathTemplates.connectorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConnectorFromConnectorName', () => {
        const result = client.matchConnectorFromConnectorName(fakePath);
        assert.strictEqual(result, 'connectorValue');
        assert(
          (client.pathTemplates.connectorPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('connectorVersion', () => {
      const fakePath = '/rendered/path/connectorVersion';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        provider: 'providerValue',
        connector: 'connectorValue',
        version: 'versionValue',
      };
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.connectorVersionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.connectorVersionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('connectorVersionPath', () => {
        const result = client.connectorVersionPath(
          'projectValue',
          'locationValue',
          'providerValue',
          'connectorValue',
          'versionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (
            client.pathTemplates.connectorVersionPathTemplate
              .render as SinonStub
          )
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromConnectorVersionName', () => {
        const result = client.matchProjectFromConnectorVersionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.connectorVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromConnectorVersionName', () => {
        const result = client.matchLocationFromConnectorVersionName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.connectorVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProviderFromConnectorVersionName', () => {
        const result = client.matchProviderFromConnectorVersionName(fakePath);
        assert.strictEqual(result, 'providerValue');
        assert(
          (client.pathTemplates.connectorVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchConnectorFromConnectorVersionName', () => {
        const result = client.matchConnectorFromConnectorVersionName(fakePath);
        assert.strictEqual(result, 'connectorValue');
        assert(
          (client.pathTemplates.connectorVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchVersionFromConnectorVersionName', () => {
        const result = client.matchVersionFromConnectorVersionName(fakePath);
        assert.strictEqual(result, 'versionValue');
        assert(
          (client.pathTemplates.connectorVersionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('provider', () => {
      const fakePath = '/rendered/path/provider';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
        provider: 'providerValue',
      };
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.providerPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.providerPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('providerPath', () => {
        const result = client.providerPath(
          'projectValue',
          'locationValue',
          'providerValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.providerPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProviderName', () => {
        const result = client.matchProjectFromProviderName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.providerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromProviderName', () => {
        const result = client.matchLocationFromProviderName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.providerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchProviderFromProviderName', () => {
        const result = client.matchProviderFromProviderName(fakePath);
        assert.strictEqual(result, 'providerValue');
        assert(
          (client.pathTemplates.providerPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('runtimeConfig', () => {
      const fakePath = '/rendered/path/runtimeConfig';
      const expectedParameters = {
        project: 'projectValue',
        location: 'locationValue',
      };
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.runtimeConfigPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.runtimeConfigPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('runtimeConfigPath', () => {
        const result = client.runtimeConfigPath(
          'projectValue',
          'locationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.runtimeConfigPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromRuntimeConfigName', () => {
        const result = client.matchProjectFromRuntimeConfigName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.runtimeConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchLocationFromRuntimeConfigName', () => {
        const result = client.matchLocationFromRuntimeConfigName(fakePath);
        assert.strictEqual(result, 'locationValue');
        assert(
          (client.pathTemplates.runtimeConfigPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('settings', () => {
      const fakePath = '/rendered/path/settings';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new connectorsModule.v1.ConnectorsClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.settingsPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.settingsPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('settingsPath', () => {
        const result = client.settingsPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.settingsPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSettingsName', () => {
        const result = client.matchProjectFromSettingsName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.settingsPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
