// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **



'use strict';

function main(conclusion, responseId) {
  // [START addressvalidation_v1_generated_AddressValidation_ProvideValidationFeedback_async]
  /**
   * This snippet has been automatically generated and should be regarded as a code template only.
   * It will require modifications to work.
   * It may require correct/in-range values for request initialization.
   * TODO(developer): Uncomment these variables before running the sample.
   */
  /**
   *  Required. The outcome of the sequence of validation attempts.
   *  If this field is set to `VALIDATION_CONCLUSION_UNSPECIFIED`, an
   *  `INVALID_ARGUMENT` error will be returned.
   */
  // const conclusion = {}
  /**
   *  Required. The ID of the response that this feedback is for. This should be
   *  the
   *  response_id google.maps.addressvalidation.v1.ValidateAddressRequest.response_id 
   *  from the first response in a series of address validation attempts.
   */
  // const responseId = 'abc123'

  // Imports the Addressvalidation library
  const {AddressValidationClient} = require('@googlemaps/addressvalidation').v1;

  // Instantiates a client
  const addressvalidationClient = new AddressValidationClient();

  async function callProvideValidationFeedback() {
    // Construct request
    const request = {
      conclusion,
      responseId,
    };

    // Run request
    const response = await addressvalidationClient.provideValidationFeedback(request);
    console.log(response);
  }

  callProvideValidationFeedback();
  // [END addressvalidation_v1_generated_AddressValidation_ProvideValidationFeedback_async]
}

process.on('unhandledRejection', err => {
  console.error(err.message);
  process.exitCode = 1;
});
main(...process.argv.slice(2));
